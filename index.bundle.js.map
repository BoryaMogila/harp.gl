{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"THREE\"","webpack:///../@here/harp-utils/index.web.ts","webpack:///../@here/harp-datasource-protocol/index.ts","webpack:///../@here/harp-geoutils/index.ts","webpack:///../@here/harp-datasource-protocol/lib/Expr.ts","webpack:///../@here/harp-materials/index.ts","webpack:///../@here/harp-text-canvas/index.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinates.ts","webpack:///../@here/harp-geoutils/lib/math/MathUtils.ts","webpack:///../@here/harp-mapview/lib/Utils.ts","webpack:///../@here/harp-geoutils/lib/projection/EarthConstants.ts","webpack:///../@here/harp-geoutils/lib/math/Box3Like.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3Like.ts","webpack:///../@here/harp-geoutils/lib/projection/Projection.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedProperty.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextStyle.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoBox.ts","webpack:///../@here/harp-geoutils/lib/tiling/TilingScheme.ts","webpack:///../@here/harp-mapview/index.ts","webpack:///../@here/harp-materials/lib/Utils.ts","webpack:///../@here/harp-datasource-protocol/lib/ColorUtils.ts","webpack:///../@here/harp-text-canvas/lib/utils/UnicodeUtils.ts","webpack:///../@here/harp-mapview/lib/DecodedTileHelpers.ts","webpack:///../@here/harp-mapview/lib/text/TextElement.ts","webpack:///../@here/harp-mapview/lib/text/TextElementType.ts","webpack:///../@here/harp-mapview/lib/Statistics.ts","webpack:///../@here/harp-mapview/lib/composing/Pass.ts","webpack:///../@here/harp-geoutils/lib/projection/MercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKey.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterialsDefs.ts","webpack:///../@here/harp-mapview/lib/MapView.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.ts","webpack:///../@here/harp-datasource-protocol/lib/Theme.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryCreator.ts","webpack:///../@here/harp-mapview/lib/ColorCache.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRenderer.ts","webpack:///../@here/harp-mapview/lib/PickHandler.ts","webpack:///../@here/harp-mapview/lib/Tile.ts","webpack:///../@here/harp-mapview/lib/AnimatedExtrusionHandler.ts","webpack:///../@here/harp-utils/lib/Logger/ILogger.ts","webpack:///../@here/harp-utils/lib/UrlUtils.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterials.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/LinesChunks.ts","webpack:///../@here/harp-datasource-protocol/lib/StringEncodedNumeral.ts","webpack:///../@here/harp-datasource-protocol/lib/Techniques.ts","webpack:///../@here/harp-mapview/lib/DataSource.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphData.ts","webpack:///../@here/harp-lrucache/index.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextGeometry.ts","webpack:///../@here/harp-text-canvas/lib/utils/TypesettingUtils.ts","webpack:///../@here/harp-mapview/lib/MapViewPoints.ts","webpack:///../@here/harp-mapview/lib/DebugContext.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryLoader.ts","webpack:///../@here/harp-mapview/lib/ConcurrentDecoderFacade.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightInfo.ts","webpack:///../@here/harp-lines/lib/HighPrecisionUtils.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDecoderDefs.ts","webpack:///../@here/harp-omv-datasource/lib/OmvTile.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoPointLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/LatLngLike.ts","webpack:///../@here/harp-geoutils/lib/projection/EquirectangularProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/TransverseMercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.ts","webpack:///../@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/SubTiles.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKeyUtils.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileTreeTraverse.ts","webpack:///../@here/harp-utils/lib/Logger/ConsoleChannel.ts","webpack:///../@here/harp-utils/lib/Logger/Logger.ts","webpack:///../@here/harp-utils/lib/Logger/WorkerChannel.ts","webpack:///../@here/harp-materials/lib/CopyMaterial.ts","webpack:///../@here/harp-datasource-protocol/lib/Env.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueParams.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueDescriptor.ts","webpack:///../@here/harp-datasource-protocol/lib/DecodedTile.ts","webpack:///../@here/harp-datasource-protocol/lib/StyleSetEvaluator.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextMaterials.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextBufferObject.ts","webpack:///../@here/harp-text-canvas/lib/utils/MaterialUtils.ts","webpack:///../@here/harp-mapview/lib/ThemeHelpers.ts","webpack:///../@here/harp-mapview/lib/DepthPrePass.ts","webpack:///../@here/harp-mapview/lib/RoadPicker.ts","webpack:///../@here/harp-mapview/lib/text/Placement.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRenderer.ts","webpack:///../@here/harp-mapview/lib/poi/Poi.ts","webpack:///../@here/harp-mapview/lib/ScreenCollisions.ts","webpack:///../node_modules/rbush/rbush.min.js","webpack:///../@here/harp-mapview/lib/text/TextStyleCache.ts","webpack:///../@here/harp-mapview/lib/CameraMovementDetector.ts","webpack:///../@here/harp-mapview/lib/ClipPlanesEvaluator.ts","webpack:///../@here/harp-mapview/lib/composing/index.ts","webpack:///../@here/harp-mapview/lib/composing/MSAARenderPass.ts","webpack:///../@here/harp-mapview/lib/ConcurrentWorkerSet.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerLoader.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedDecoder.ts","webpack:///../@here/harp-mapview/lib/ElevationRangeSource.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryManager.ts","webpack:///../@here/harp-mapview/lib/image/MapViewImageCache.ts","webpack:///../@here/harp-mapview/lib/image/ImageCache.ts","webpack:///../@here/harp-mapview/lib/MapViewFog.ts","webpack:///../@here/harp-mapview/lib/poi/PoiManager.ts","webpack:///../@here/harp-mapview/lib/poi/PoiTableManager.ts","webpack:///../@here/harp-mapview/lib/PolarTileDataSource.ts","webpack:///../@here/harp-mapview/lib/SkyCubemapTexture.ts","webpack:///../@here/harp-mapview/lib/ThemeLoader.ts","webpack:///../@here/harp-mapview/lib/VisibleTileSet.ts","webpack:///../@here/harp-mapview/lib/ConcurrentTilerFacade.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedTiler.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightCoverageProvider.ts","webpack:///../@here/harp-transfer-manager/index.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometry.ts","webpack:///../@here/harp-lines/lib/TriangulateLines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionLines.ts","webpack:///../@here/harp-mapview-decoder/lib/TileLoader.ts","webpack:///../@here/harp-omv-datasource/lib/OmvRestClient.ts","webpack:///./src/index.ts","webpack:///../@here/harp-geoutils/lib/projection/IdentityProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/SphereProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTree.ts","webpack:///../@here/harp-geoutils/lib/tiling/HereTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/MercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/PolarTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/math/Vector3Like.ts","webpack:///../@here/harp-geoutils/lib/math/TransformLike.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3.ts","webpack:///../@here/harp-materials/lib/CirclePointsMaterial.ts","webpack:///../@here/harp-utils/index-common.ts","webpack:///../@here/harp-utils/lib/GroupedPriorityList.ts","webpack:///../@here/harp-utils/lib/Logger/index.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManager.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManagerImpl.ts","webpack:///../@here/harp-utils/lib/Logger/MultiChannel.ts","webpack:///../@here/harp-utils/lib/Math2D.ts","webpack:///../@here/harp-utils/lib/MathUtils.ts","webpack:///../@here/harp-utils/lib/Mixins.ts","webpack:///../@here/harp-utils/lib/assert.ts","webpack:///../@here/harp-utils/lib/ContextLogger.ts","webpack:///../@here/harp-utils/lib/PerformanceTimer.ts","webpack:///../@here/harp-utils/lib/ObjectUtils.ts","webpack:///../@here/harp-utils/lib/OptionsUtils.ts","webpack:///../@here/harp-utils/lib/UriResolver.ts","webpack:///../@here/harp-utils/lib/Functions.ts","webpack:///../@here/harp-utils/lib/UrlPlatformUtils.web.ts","webpack:///../@here/harp-materials/lib/EdgeMaterial.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/ExtrusionChunks.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/FadingChunks.ts","webpack:///../@here/harp-materials/lib/HighPrecisionLineMaterial.ts","webpack:///../@here/harp-materials/lib/HighPrecisionPointMaterial.ts","webpack:///../@here/harp-materials/lib/IconMaterial.ts","webpack:///../@here/harp-materials/lib/LuminosityHighPassShader.ts","webpack:///../@here/harp-materials/lib/MSAAMaterial.ts","webpack:///../@here/harp-materials/lib/SepiaShader.ts","webpack:///../@here/harp-materials/lib/SolidLineMaterial.ts","webpack:///../@here/harp-materials/lib/VignetteShader.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprEvaluator.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ArrayOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/CastOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ColorOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ComparisonOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FeatureOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FlowOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/InterpolationOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExponentialInterpolant.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MapOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MathOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MiscOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ObjectOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/StringOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/TypeOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprInstantiator.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprParser.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerServiceProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerTilerProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/TileInfo.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprPool.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueAttr.ts","webpack:///../@here/harp-datasource-protocol/lib/ThemeVisitor.ts","webpack:///../@here/harp-mapview/lib/BackgroundDataSource.ts","webpack:///../@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.ts","webpack:///../@here/harp-geometry/lib/SubdivisionModifier.ts","webpack:///../@here/harp-text-canvas/lib/rendering/FontCatalog.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphTextureCache.ts","webpack:///../@here/harp-lrucache/lib/LRUCache.ts","webpack:///../@here/harp-text-canvas/lib/TextCanvas.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/LineTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/PathTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/utils/ContextualArabicConverter.ts","webpack:///../@here/harp-mapview/lib/PathBlockingElement.ts","webpack:///../@here/harp-mapview/lib/poi/BoxBuffer.ts","webpack:///../@here/harp-mapview/lib/poi/PixelPicker.ts","webpack:///../@here/harp-mapview/lib/text/PlacementStats.ts","webpack:///../@here/harp-mapview/lib/text/SimplePath.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRendererOptions.ts","webpack:///../@here/harp-mapview/lib/text/TextElementStateCache.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupState.ts","webpack:///../@here/harp-mapview/lib/text/TextElementState.ts","webpack:///../@here/harp-mapview/lib/text/RenderState.ts","webpack:///../@here/harp-mapview/lib/text/UpdateStats.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroup.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupPriorityList.ts","webpack:///../@here/harp-mapview/lib/composing/MapRenderingManager.ts","webpack:///../@here/harp-mapview/lib/composing/LowResRenderPass.ts","webpack:///../@here/harp-mapview/lib/composing/Outline.ts","webpack:///../@here/harp-mapview/lib/composing/UnrealBloomPass.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerBootstrapDefs.ts","webpack:///../@here/harp-mapview/lib/FrustumIntersection.ts","webpack:///../@here/harp-mapview/lib/MapTileCuller.ts","webpack:///../@here/harp-mapview/lib/geometry/overlayOnElevation.ts","webpack:///../@here/harp-mapview/lib/geometry/PhasedTileGeometryManager.ts","webpack:///../@here/harp-mapview/lib/geometry/PhasedTileGeometryLoader.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRendererFactory.ts","webpack:///../@here/harp-datasource-protocol/index-decoder.ts","webpack:///../@here/harp-datasource-protocol/lib/Extruder.ts","webpack:///../@here/harp-datasource-protocol/lib/Outliner.ts","webpack:///../@here/harp-datasource-protocol/lib/ThreeBufferUtils.ts","webpack:///../@here/harp-mapview/lib/ScreenProjector.ts","webpack:///../@here/harp-mapview/lib/SkyBackground.ts","webpack:///../@here/harp-mapview/lib/SkyGradientTexture.ts","webpack:///../@here/harp-mapview/lib/text/FontCatalogLoader.ts","webpack:///../@here/harp-mapview/lib/text/MapViewState.ts","webpack:///../@here/harp-mapview/lib/text/TextCanvasFactory.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightElementHandler.ts","webpack:///../@here/harp-mapview/lib/copyrights/UrlCopyrightProvider.ts","webpack:///../@here/harp-transfer-manager/src/TransferManager.ts","webpack:///../@here/harp-mapview/lib/image/Image.ts","webpack:///../@here/harp-mapview/lib/geometry/TileDataAccessor.ts","webpack:///../@here/harp-lines/index.ts","webpack:///../@here/harp-lines/lib/Lines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionPoints.ts","webpack:///../@here/harp-omv-datasource/index.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataFilter.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataSource.ts","webpack:///../@here/harp-mapview-decoder/index.ts","webpack:///../@here/harp-mapview-decoder/lib/TileDataSource.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDebugLabelsTile.ts","webpack:///../@here/harp-examples/config.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","exprEvaluator","ExprEvaluator","exprInstantiator","ExprInstantiator","ExprDependencies","properties","Set","ComputeExprDependencies","expr","dependencies","accept","this","instance","context","add","op","args","length","zoom","forEach","childExpr","branches","_","branch","fallback","condition","isJsonExpr","v","Array","isArray","ExprScope","Expr","code","ExprParser","parse","node","definitions","definitionExprCache","parseNode","undefined","lockedNames","cache","Map","env","scope","Value","ExprEvaluatorContext","of","pool","ExprSerializer","serialize","m_isDynamic","exprIsDynamic","VarExpr","super","visitor","visitVarExpr","LiteralExpr","BooleanLiteralExpr","NumberLiteralExpr","StringLiteralExpr","NullLiteralExpr","ObjectLiteralExpr","Error","visitNullLiteralExpr","visitBooleanLiteralExpr","visitNumberLiteralExpr","visitStringLiteralExpr","visitObjectLiteralExpr","HasAttributeExpr","visitHasAttributeExpr","ContainsExpr","elements","elementTy","every","element","visitContainsExpr","isDynamic","CallExpr","visitCallExpr","descriptor","getOperator","isDynamicOperator","some","e","MatchExpr","visitMatchExpr","CaseExpr","visitCaseExpr","cond","map","label","body","push","referenceResolverState","parseCall","slice","has","cachedEntry","result","definitionEntry","isLiteralDefinition","fromJSON","isBoxedDefinition","isInterpolatedPropertyDefinition","interpolatedPropertyDefinitionToJsonExpr","delete","set","resolveReference","makeCallExpr","parseGetExpr","parseHasExpr","isValidElementsArray","parseInExpr","obj","parseLiteralExpr","conditions","isValidMatchLabel","JSON","stringify","parseMatchExpr","caseFallback","parseCaseExpr","GeoCoordinates","latitude","longitude","altitude","Math","radToDeg","latLng","lat","lng","geoPoint","isGeoPointLike","fromGeoPoint","isGeoCoordinatesLike","fromDegrees","isLatLngLike","degToRad","isNaN","wrapped","sign","other","MathUtils","normalizeAngleDeg","a","angleDistanceDeg","b","newEmptyBox3","min","x","Infinity","y","z","max","newVector3","clamp","interpolateAnglesDeg","p0","p1","logger","LoggerManager","MINIMUM_OBJECT3D_SIZE_ESTIMATION","MINIMUM_ATTRIBUTE_SIZE_ESTIMATION","groundNormalPlanarProj","Vector3","groundPlane","Plane","clone","groundSphere","Sphere","EarthConstants","EQUATORIAL_RADIUS","rayCaster","Raycaster","space","tangentSpace","quaternions","Quaternion","vector3","matrix4","Matrix4","transforms","xAxis","yAxis","zAxis","position","MapViewUtils","orbitFocusPoint","mapView","deltaAzimuthDeg","deltaTiltDeg","maxTiltAngleRad","PI","target","rayCastWorldCoordinates","targetCoordinates","projection","unprojectPoint","sphericalCoordinates","extractSphericalCoordinatesFromLocation","camera","tiltDeg","tilt","lookAt","distanceTo","azimuth","getCameraPositionFromTargetCoordinates","distance","yawDeg","pitchDeg","pitchRad","cos","yawRad","projectPoint","groundDistance","sin","type","ProjectionType","Planar","Spherical","copy","normalize","projectOnPlane","setFromAxisAngle","applyQuaternion","setLength","height","cameraHeight","sqrt","pointOnScreenXinNDC","pointOnScreenYinNDC","elevation","pointInNDCPosition","extractRotation","matrixWorld","multiplyMatrices","getInverse","projectionMatrix","pointInCameraSpace","applyMatrix4","constant","worldPosition","ray","intersectPlane","intersectSphere","panCameraAboveFlatMap","offsetX","offsetY","panCameraAroundGlobe","fromWorld","toWorld","setFromUnitVectors","inverse","makeRotationFromQuaternion","applyMatrix","updateMatrixWorld","getCameraRotationAtTarget","transform","localTangentSpace","makeBasis","setFromRotationMatrix","multiply","extractAttitude","options","setFromMatrixPosition","setFromMatrixColumn","yaw","pitch","roll","dot","atan2","acos","location","sub","angleTo","cross","calculateDistanceToGroundFromZoomLevel","zoomLevel","cameraPitch","tileSize","EQUATORIAL_CIRCUMFERENCE","pow","focalLength","estimateTextureSize","texture","objectSize","visitedObjects","image","uuid","imageBytes","width","heapSize","gpuSize","estimateMaterialSize","material","RawShaderMaterial","ShaderMaterial","rawMaterial","uniforms","uniform","Texture","MeshBasicMaterial","MapMeshBasicMaterial","meshMaterial","aoMap","specularMap","alphaMap","envMap","MapMeshStandardMaterial","standardMaterial","lightMap","emissiveMap","bumpMap","normalMap","displacementMap","roughnessMap","metalnessMap","LineBasicMaterial","LineDashedMaterial","warn","estimateAttributeSize","attribute","attrName","generateUUID","attrBytes","bytesPerElement","array","BYTES_PER_ELEMENT","InterleavedBufferAttribute","BufferAttribute","count","itemSize","getIsoLanguageCode","language","substring","MAX_TILT_DEG","zoomOnTargetPosition","targetPositionOnScreenXinNDC","targetPositionOnScreenYinNDC","maxTiltAngle","targetPosition","setZ","centerScreenTarget","deltaTilt","newTargetPosition","getCameraCoordinatesFromTargetCoordinates","rotate","deltaYawDeg","deltaPitchDeg","rotateOnWorldAxis","newPitch","maxPitch","asin","rotateX","setRotation","geoCenter","quaternion","getCameraFrustumPlanes","near","far","top","tan","fov","aspect","left","view","enabled","fullWidth","fullHeight","filmOffset","getFilmWidth","right","bottom","rayCastGeoCoordinates","worldCoordinates","calculateDistanceFromZoomLevel","calculateZoomLevelFromDistance","log2","minZoomLevel","maxZoomLevel","round","calculateDepthFromClipDistance","clipDistance","perspCam","cameraRange","viewSpaceDistance","cameraToWorldDistance","calculateVerticalFovByHorizontalFov","hFov","atan","calculateHorizontalFovByVerticalFov","vFov","calculateFocalLengthByVerticalFov","calculateFovByFocalLength","calculateScreenSizeByFocalLength","worldSize","calculateWorldSizeByFocalLength","screenSize","estimateObject3dSize","parentSize","size","isObject3D","Scene","isMesh","isLine","isPoints","mesh","materials","geometry","bufferGeometry","Geometry","vertices","faces","_bufferGeometry","BufferGeometry","attributes","index","estimateGeometrySize","featureData","userData","feature","getFeatureDataSize","estimateMeshSize","children","child","mapViewIsLoading","numTilesLoading","tileList","visibleTileSet","dataSourceTileList","tile","visibleTiles","tileLoader","isFinished","tileGeometryLoader","isLoading","textElementsRenderer","loading","poiTableManager","finishedLoading","allVisibleTilesLoaded","getBrowserLanguages","navigator","languages","languageList","lang","powerOfTwo","TileOffsetUtils","getKeyForTileKeyAndOffset","tileKey","offset","bitshift","shiftedOffset","offsetBits","totalOffsetsToStore","assert","getShiftedOffset","mortonCode","extractOffsetAndMortonKeyFromKey","num","getParentKeyFromKey","calculatedKey","TileKey","fromMortonCode","parentMortonCode","MIN_ELEVATION","MAX_ELEVATION","MAX_BUILDING_HEIGHT","box3","obb","extents","unitScale","sourceProjection","worldPos","interpolants","DiscreteInterpolant","LinearInterpolant","CubicInterpolant","ExponentialInterpolant","tmpBuffer","StringEncodedNumeralFormatMaxSize","isInterpolatedProperty","interpolationMode","zoomLevels","Float32Array","values","dynamicPropertiesTempEnv","MapEnv","$zoom","$pixelToMeters","getInterpolatedMetric","level","pixelToMeters","nChannels","interpolant","InterpolationMode","Exponential","exponent","evaluate","_stringEncodedNumeralDynamicMask","resultBuffer","maskInterpolant","envOrLevel","isExpr","entries","Dynamic","lookup","parseStringEncodedNumeral","_stringEncodedNumeralType","StringEncodedNumeralType","Meters","Pixels","Hex","RGB","RGBA","HSL","ColorUtils","getHexFromRgba","getHexFromRgb","getInterpolatedColor","prop","isCubic","interpolation","findIndex","abs","splice","removeDuplicatePropertyValues","Discrete","firstValue","matchedFormat","StringEncodedNumeralFormats","find","format","regExp","test","error","needsMask","propValues","maskValues","baseFormat","allowedValueFormats","StringEncodedMetricFormats","StringEncodedColorFormats","valueIdx","matched","valueFormat","decoder","mask","procesStringEnocodedNumeralInterpolatedProperty","FontUnit","FontStyle","FontVariant","VerticalAlignment","HorizontalAlignment","WrappingMode","DefaultTextStyle","DEFAULT_FONT_NAME","DEFAULT_FONT_SIZE","unit","freeze","Pixel","backgroundSize","DEFAULT_FONT_STYLE","Regular","DEFAULT_FONT_VARIANT","DEFAULT_ROTATION","DEFAULT_COLOR","Color","DEFAULT_OPACITY","DEFAULT_BACKGROUND_COLOR","DEFAULT_BACKGROUND_OPACITY","DEFAULT_TRACKING","DEFAULT_LEADING","DEFAULT_MAX_LINES","DEFAULT_LINE_WIDTH","DEFAULT_CANVAS_ROTATION","DEFAULT_LINE_ROTATION","DEFAULT_WRAPPING_MODE","Word","DEFAULT_VERTICAL_ALIGNMENT","Above","DEFAULT_HORIZONTAL_ALIGNMENT","Left","TextRenderStyle","params","m_params","fontName","fontSize","fontStyle","fontVariant","rotation","color","opacity","backgroundColor","backgroundOpacity","TextLayoutStyle","tracking","leading","maxLines","lineWidth","canvasRotation","lineRotation","wrappingMode","verticalAlignment","horizontalAlignment","GeoBox","southWest","northEast","south","north","west","east","minAltitude","altitudeSpan","latitudeSpan","longitudeSpan","maxAltitude","point","containsHelper","isFlat","isSameAltitude","isWithinAltitudeRange","subdivisionScheme","boundingBoxGenerator","FlatTileBoundingBoxGenerator","tileTreeTraverse","TileTreeTraverse","subTiles","TileKeyUtils","geoCoordinatesToTileKey","geoBox","geoRectangleToTileKeys","getGeoBox","getWorldBox","enableBlending","transparent","forcedBlending","blending","CustomBlending","premultipliedAlpha","blendSrc","OneFactor","blendDst","OneMinusSrcAlphaFactor","blendSrcAlpha","blendDstAlpha","SrcAlphaFactor","getShaderMaterialDefine","fallbackValue","defines","getShaderDefine","setShaderDefine","DEFINE_BOOL_TRUE","currentValue","DEFINE_BOOL_FALSE","shaderContent","shaderName","insertedShaderName","addTab","tabChar","replace","NormalBlending","needsUpdate","SHIFT_TRANSPARENCY","SHIFT_RED","SHIFT_GREEN","SHIFT_BLUE","HEX_FULL_CHANNEL","HEX_RGB_MASK","HEX_TRGB_MASK","tmpColor","g","floor","getHexFromHsl","h","setHSL","getHex","getRgbaFromHex","hex","toString","hasAlphaInHex","getAlphaFromHex","removeAlphaFromHex","UnicodeUtils","Direction","whiteSpaceRanges","isWhiteSpace","codePoint","range","newLineRanges","isNewLine","nonPrintableRanges","isPrintable","rtlBlocks","neutralBidirectionalRanges","weakBidirectionalRanges","getDirection","block","weakRange","Weak","neutralRange","Neutral","RTL","LTR","rtlMirroredCodePoints","isRtlMirrored","DEFAULT_SKIP_PROPERTIES","TEXTURE_PROPERTY_KEYS","getMaterialConstructor","technique","isExtrudedLineTechnique","shading","SolidLineMaterial","PointsMaterial","CirclePointsMaterial","applyTechniquePropertyToMaterial","propertyName","techniqueAttrValue","applySecondaryColorToMaterial","evaluateProperty","materialColor","techniqueColor","evaluateColorProperty","setHex","applyBaseColorToMaterial","colorValue","tech","setRGB","disableBlending","getPropertyValue","parsed","parseStringEncodedColor","getBaseColorPropName","techDescriptor","techniqueDescriptors","attrTransparencyColor","textureReadyCallback","Constructor","settings","HighPrecisionLineMaterial","fog","id","isExtrudedPolygonTechnique","flatShading","vertexColors","depthTest","isStandardTechnique","isTerrainTechnique","texturePropertyName","textureProperty","onLoad","wrapS","toWrappingMode","wrapT","magFilter","toTextureFilter","minFilter","flipY","repeatU","repeat","repeatV","onError","textureUrl","isTextureBuffer","dataTextureProperties","textureDataType","toTextureDataType","textureBuffer","buffer","Uint8Array","UnsignedByteType","ByteType","Int8Array","ShortType","Int16Array","UnsignedShortType","Uint16Array","IntType","Int32Array","UnsignedIntType","Uint32Array","FloatType","HalfFloatType","getTextureBuffer","DataTexture","toPixelFormat","textureBlob","Blob","URL","createObjectURL","TextureLoader","load","isShaderTechnique","baseColorPropName","hasBaseColor","getOwnPropertyNames","filter","TRANSPARENCY_PROPERTY_KEYS","indexOf","propColor","applyShaderTechniqueToMaterial","skipExtraProps","startsWith","BASE_TECHNIQUE_NON_MATERIAL_PROPS","applyTechniqueToMaterial","itemCount","normalized","Mesh","Circles","Squares","LineSegments","primitive","Line","Points","baseColorProp","getBaseColorProp","poiInfo","poiRenderBatch","LoadingState","text","points","renderParams","layoutParams","priority","xOffset","yOffset","featureId","style","fadeNear","fadeFar","tileOffset","visible","distanceScale","renderOrder","renderStyle","layoutStyle","TextElementType","PoiLabel","PathLabel","mayOverlap","reserveSpace","m_poiInfo","path","LineMarker","poiRenderOrder","m_renderStyle","m_layoutStyle","min2","iconMinZoomLevel","textMinZoomLevel","max2","iconMaxZoomLevel","textMaxZoomLevel","RingBuffer","capacity","head","tail","data","next","enqOne","previous","Iterator","m_buffer","m_index","SimpleTimer","statistics","running","m_currentValue","val","PerformanceTimer","now","setValue","SampledTimer","numResets","maxNumSamples","samples","reset","getStats","clear","computeArrayStats","asArray","sort","median","median75","median90","median95","median97","median99","median999","mid","sum","avg","numSamples","stages","stage","hasTimer","getTimer","currentStage","stop","start","timers","nullTimer","keepSamples","timer","addTimer","header","footer","log","maxNameLength","print","toFixed","simpleStats","FrameStats","messages","oldValue","message","FrameStatsArray","frameEntries","frameStats","currentSize","enq","PerformanceStatistics","maxNumFrames","currentFrame","appResults","configs","m_instance","m_frameEvents","clearFrames","webGlInfo","render","calls","lines","triangles","memory","geometries","textures","programs","window","performance","totalJSHeapSize","usedJSHeapSize","jsHeapSizeLimit","addFrame","onlyLastFrame","frames","plainObject","getAsPlainObject","simpleStatistics","Pass","renderToScreen","renderer","scene","writeBuffer","readBuffer","delta","setRenderTarget","shader","textureID","UniformsUtils","vertexShader","fragmentShader","fsQuad","FullScreenQuad","m_camera","OrthographicCamera","PlaneBufferGeometry","m_mesh","MercatorProjection","Projection","MercatorConstants","MAXIMUM_LATITUDE","latitudeProject","latitudeClamp","exp","worldPoint","cosh","geoPointLike","latitudeClampProject","latitudeInRadians","fromRadians","unprojectLatitude","worldCenter","center","worldNorth","worldSouth","worldYCenter","isBox3Like","isOrientedBox3Like","Number","EPSILON","worldBox","minGeo","maxGeo","fromCoordinates","_worldPoint","normal","webMercatorProjection","mercatorProjection","reprojectPoint","sy","projectBox","maxY","quadTreeSubdivisionScheme","row","column","quadkey","parseInt","charAt","fromRowColumnLevel","quadKey64","quadKey","m_mortonCode","quadkey64","m_hereTile","coordX","coordY","totalWidth","totalHeight","rowsAtLevel","columnsAtLevel","changedLevelBy","col","qnr","subQuad","fromQuadKey","fromHereTile","msb","ExtrusionFeatureDefs","DEFAULT_RATIO_MIN","DEFAULT_RATIO_MAX","MIN_BUILDING_HEIGHT","isProduction","MapViewEventNames","setLogLevelForAll","LogLevel","Log","DEFAULT_CLEAR_COLOR","DEFAULT_FOV_CALCULATION","DEFAULT_CAM_NEAR_PLANE","DEFAULT_CAM_FAR_PLANE","MAX_FIELD_OF_VIEW","MIN_FIELD_OF_VIEW","FALLBACK_RENDER_ORDER_OFFSET","DEFAULT_MIN_ZOOM_LEVEL","DEFAULT_MAX_ZOOM_LEVEL","DEFAULT_MIN_CAMERA_HEIGHT","FRAME_RATE_RING_SIZE","FALLBACK_FRAME_RATE","TERRAIN_ZOOM_LEVEL","DEFAULT_POLAR_STYLE_SET_NAME","UPDATE","Update","RENDER_EVENT","Render","DID_RENDER_EVENT","AfterRender","FIRST_FRAME_EVENT","FirstFrame","FRAME_COMPLETE_EVENT","FrameComplete","THEME_LOADED_EVENT","ThemeLoaded","ANIMATION_STARTED_EVENT","AnimationStarted","ANIMATION_FINISHED_EVENT","AnimationFinished","MOVEMENT_STARTED_EVENT","MovementStarted","MOVEMENT_FINISHED_EVENT","MovementFinished","CONTEXT_LOST_EVENT","ContextLost","CONTEXT_RESTORED_EVENT","ContextRestored","COPYRIGHT_CHANGED_EVENT","CopyrightChanged","vector2","Vector2","MapViewPowerPreference","MapViewDefaults","maxVisibleDataSourceTiles","extendedFrustumCulling","tileCacheSize","resourceComputationType","ResourceComputationType","EstimationInMb","quadTreeSearchDistanceUp","quadTreeSearchDistanceDown","pixelRatio","devicePixelRatio","heading","theme","MapView","EventDispatcher","dumpNext","m_renderLabels","m_screenCollisions","ScreenCollisions","m_visibleTileSetLock","m_tileWrappingEnabled","m_zoomLevel","m_minZoomLevel","m_maxZoomLevel","m_minCameraHeight","m_screenCamera","m_rteCamera","PerspectiveCamera","m_viewRanges","minimum","maximum","m_scene","m_fog","MapViewFog","m_mapTilesRoot","Object3D","m_mapAnchors","m_animationCount","m_drawing","m_updatePending","m_frameNumber","m_maxFps","m_detectedFps","m_forceCameraAspect","m_tileDataSources","m_connectedDataSources","m_failedDataSources","m_enablePolarDataSource","m_raycaster","m_plane","m_sphere","m_theme","m_themeIsLoading","m_firstFrameRendered","m_firstFrameComplete","m_initialTextPlacementDone","m_frameTimeIndex","m_frameTimeRing","m_imageCache","MapViewImageCache","m_poiManager","PoiManager","m_poiTableManager","PoiTableManager","m_lastTileIds","m_copyrightInfo","onWebGLContextLost","event","dispatchEvent","onWebGLContextRestored","m_renderer","clearColor","setClearColor","update","m_options","m_uriResolver","uriResolver","minCameraHeight","decoderUrl","ConcurrentDecoderFacade","defaultScriptUrl","resolveUri","decoderCount","defaultWorkerCount","m_visibleTileSetOptions","clipPlanesEvaluator","createDefaultClipPlanesEvaluator","enablePolarDataSource","m_pixelRatio","maxFps","enableStatistics","m_languages","collisionDebugCanvas","m_collisionDebugCanvas","ScreenCollisionsDebug","handleRequestAnimationFrame","renderFunc","handlePostponedAnimationFrame","postponedAnimationFrame","m_pickHandler","PickHandler","enableRoadPicking","tileWrappingEnabled","setupStats","canvas","addEventListener","WebGLRenderer","antialias","nativeWebglAntialiasEnabled","alpha","preserveDrawingBuffer","powerPreference","Default","autoClear","info","autoReset","setupRenderer","fovCalculation","getCanvasClientSize","up","m_lookAtDistance","m_focalLength","m_screenProjector","ScreenProjector","setupCamera","m_movementDetector","CameraMovementDetector","movementThrottleTimeout","movementStarted","movementFinished","mapPassAntialiasSettings","customAntialiasSettings","mapRenderingManager","MapRenderingManager","dynamicPixelRatio","m_tileGeometryManager","enablePhasedLoading","PhasedTileGeometryManager","SimpleTileGeometryManager","enableMixedLod","m_enableMixedLod","m_visibleTiles","createVisibleTileSet","m_animatedExtrusionHandler","AnimatedExtrusionHandler","m_backgroundDataSource","BackgroundDataSource","addDataSource","styleSetName","polarStyleSetName","m_polarDataSource","PolarTileDataSource","geometryLevelOffset","polarGeometryLevelOffset","updatePolarDataSource","backgroundTilingScheme","setTilingScheme","initTheme","m_textElementsRenderer","createTextRenderer","drawFrame","resetTextRenderer","m_movementFinishedUpdateTimerId","clearTimeout","m_animationFrameHandle","cancelAnimationFrame","removeEventListener","dataSource","dispose","clearTileCache","clearRenderStates","getDataSourceCacheSize","numVisibleTiles","setDataSourceCacheSize","setNumberOfVisibleTiles","updateImages","updateLighting","invalidateCache","updateSkyBackground","m_pointOfView","pointOfView","postEffectsFile","fetch","then","response","json","postEffects","m_postEffects","setPostEffects","ThemeLoader","isThemeLoaded","loadedTheme","catch","sky","lights","images","imageTextures","poiTables","loadPoiTables","textStyles","defaultTextStyle","fontCatalogs","styles","setTheme","time","Date","fps","setLanguages","disable","disableFading","m_previousFrameTimeStamp","listener","rendererClearColor","getClearColor","targetDistance","attitude","headingDeg","enableNativeWebglAntialias","calculateFocalLength","getSize","updateCameras","dataSourceName","ds","ready","getDataSourceByName","attach","setEnableElevationOverlay","m_elevationProvider","updateStorageLevelOffset","connect","Promise","resolve","resolveOnce","DataSourceConnect","dsIndex","detach","removeDataSource","textElements","addOverlayText","clearOverlayText","limitedTilt","geoPos","limitedPitch","maxPitchRadWithCurvature","maxPitchDegWithCurvature","cameraIsMoving","animating","isAnimating","m_pixelToWorld","lookAtDistance","pixelToWorld","getPixelRatio","setPixelRatio","ratio","lowResPixelRatio","project","setFromCamera","getNormalizedScreenCoordinates","getWorldPositionAt","intersectMapObjects","setSize","Resize","clearCache","fun","forEachVisibleTile","forEachCachedTile","markTilesDirty","elevationSource","elevationRangeSource","elevationProvider","m_elevationRangeSource","dataSources","setTileUpdateCallback","overlayOnElevation","bloom","outline","vignette","sepia","updateOutline","twinDataSource","viewRanges","setFovOnCamera","maxGeometryHeightScaled","getScaleFactor","reduce","maxGeometryHeight","assign","updateClipPlanes","updateProjectionMatrix","setScalar","cameraPosZ","getCameraHeightAboveTerrain","zoomLevelDistance","heightAboveTerrain","getHeight","unprojectAltitude","m_previousRequestAnimationTime","currentFps","capturedFrames","synchronousRendering","requestAnimationFrame","vSyncFrameTime","frameInterval","previousFrameTime","targetTime","m_targetRequestAnimationTime","detectCurrentFps","enabledDataSources","isDataSourceEnabled","stats","gatherStatistics","frameStartTime","currentFrameEvent","setupTime","cullTime","textPlacementTime","drawTime","textDrawTime","endTime","timeSincePreviousFrame","m_thisFrameTilesChanged","remove","lockVisibleTileSet","viewRangesStatus","updateRenderList","storageLevel","getEnabledTileDataSources","viewRangesChanged","renderList","renderedTiles","renderTileObjects","frameNumLastVisible","isDynamicFrame","initializing","childObject","geoPosition","addValue","checkCameraMoved","CameraPositionChanged","renderLabels","prepareRenderTextElements","m_skyBackground","updateCamera","finishRenderTextElements","disposePendingTiles","checkCopyrightUpdates","storeFrameInfo","worldOffsetX","computeWorldOffsetX","willRender","objects","displacement","setRotationFromMatrix","boundingBox","getRotationMatrix","frustumCulled","_backupRenderOrder","isBuilding","kind","includes","GeometryKind","Building","levelOffset","didRender","placeText","renderText","getOptionValue","themeName","defaultGeoCenter","setInitialCameraPosition","resize","fromObject","VisibleTileSet","FrustumIntersection","SkyBackground","updateSkyBackgroundColors","addNewSkyBackground","removeSkyBackGround","groundColor","background","updateTexture","m_createdLights","light","lightDescription","createLight","setTimeout","tileIdList","newTileIds","join","checkIfTilesChanged","newCopyrightInfo","getRenderedTilesCopyrightInfo","allEqual","tileCopyrightInfo","copyrightInfo","CopyrightInfo","mergeArrays","poiManager","keys","addImage","url","preload","atlas","addTextureAtlas","imageTexture","addImageTexture","enable","TextElementsRenderer","MapViewState","TextCanvasFactory","PoiRendererFactory","FontCatalogLoader","overlayText","limitFov","clientWidth","clientHeight","step","def","bdef","styleDef","tmpVector3","tmpVector2","TileGeometryCreator","decodedTile","enabledKinds","disabledKinds","techniques","GeometryKindSet","hasOrIntersects","srcGeometry","group","groups","createdOffsets","createObjects","preparePois","createTextElements","isPoiTechnique","isLineMarkerTechnique","isTextTechnique","createLabelRejectionElements","addGroundPlane","pathGeometries","addBlockingElement","PathBlockingElement","TileGeometryLoader","setDefaultGeometryKind","initDecodedTile","geometryKind","from","resetVisibilityCounter","textPathGeometries","textFilter","processedPaths","newPaths","textPath","pop","displayZoomLevel","prepareTextPaths","objInfos","getFeatureId","textElement","TextElement","ContextualArabicConverter","convert","styleCache","getRenderStyle","getLayoutStyle","pathLengthSqr","DEFAULT_TEXT_DISTANCE_SCALE","addTextElement","textGeometries","stringCatalog","positions","numPositions","getX","getY","getZ","texts","techniqueFilter","groupCount","groupIndex","techniqueIndex","ObjectCtor","getObjectConstructor","onMaterialUpdated","requestUpdate","addOwnedTexture","createMaterial","setupTerrainMaterial","vertexAttributes","vertexAttribute","getBufferAttribute","setAttribute","interleavedVertexAttributes","attr","ArrayCtor","getArrayConstructor","InterleavedBuffer","stride","interleavedAttr","setIndex","getAttribute","needsVertexNormals","computeVertexNormals","addGroup","isSolidLineTechnique","isHighPrecisionLineMaterial","lineMaterial","clipping","clipTileSize","setShaderMaterialDefine","hasSolidLinesOutlines","secondaryWidth","renderOrderOffset","geometryId","isCirclesTechnique","isSquaresTechnique","enablePicking","enableRayTesting","isLineTechnique","isSegmentsTechnique","hasDynamicColor","fadingParams","getFadingParams","FadingFeature","addRenderHelper","mat","unitFactor","metricUnit","outlineWidth","dashSize","gapSize","extrudedMaterial","addFeatureData","addGeometryObjInfos","isFillTechnique","hasDynamicPrimaryColor","hasDynamicSecondaryColor","emissive","polygonMaterial","standardMat","extrudedObjects","animatedExtrusionHandler","extrusionAnimationEnabled","animateExtrusionValue","animateExtrusion","forceEnabled","isRenderDepthPrePassEnabled","depthPassMesh","createDepthPrePassMesh","registerTileObject","materialFeature","setDepthPrePassStencil","edgeIndex","edgeGeometry","colorAttribute","extrusionAttribute","normalAttribute","uvAttribute","extrudedPolygonTechnique","getPolygonFadingParams","materialParams","colorMix","lineFadeNear","lineFadeFar","edgeMaterial","EdgeMaterial","edgeObj","lineColor","extrusionAnimationDuration","animateExtrusionDuration","duration","animatedExtrusionTileHandler","AnimatedExtrusionTileHandler","outlineGeometry","fillTechnique","outlineMaterial","outlineObj","outlineTechnique","outlineColor","ColorCache","getColor","secondaryColor","diffuse","secondaryCaps","caps","secondaryRenderOrder","techniqueLineWidth","techniqueSecondaryWidth","techniqueOpacity","poiGeometries","addPois","tmpV","getTilingScheme","posAttr","toArray","SphericalGeometrySubdivisionModifier","modify","depthWrite","Background","createPlane","terrainColor","onBeforeCompile","planeCenter","colorHex","isVisible","PlaneGeometry","plane","geometryType","starts","featureStarts","tileDisplacementMap","xCountVertices","yCountVertices","LuminanceFormat","DEFAULT_FADE_NEAR","DEFAULT_FADE_FAR","DEFAULT_COLOR_MIX","lineColorMix","m_map","colorCode","padStart","OVERLOAD_LABEL_LIMIT","OVERLOAD_UPDATED_LABEL_LIMIT","OVERLOAD_UPDATE_TIME_LIMIT","OVERLOAD_PLACE_TIME_LIMIT","PRINT_LABEL_DEBUG_INFO","updateStats","UpdateStats","placementStats","PlacementStats","tempPosition","tempScreenPosition","tempScreenPoints","tempPoiScreenPosition","tmpTextBufferCreationParams","tmpAdditionParams","tmpBufferAdditionParams","TileTextElements","TextElementLists","lists","list","addTextToCanvas","screenPosition","pathOverflow","layer","letterCaseArray","glyphCaseArray","pickingData","addText","glyphs","isPlacementTimeExceeded","startTime","debug","m_viewState","m_viewCamera","m_viewUpdateCallback","m_textCanvasFactory","m_poiRendererFactory","m_fontCatalogLoader","m_initialized","m_glyphLoadingCount","m_textRenderers","m_tmpVector","m_overloaded","m_cacheInvalidated","m_forceNewLabelsPass","m_textElementStateCache","TextElementStateCache","m_textStyleCache","TextStyleCache","initializeDefaultOptions","setGlyphCountLimits","minNumGlyphs","maxNumGlyphs","initialized","updateGlyphDebugMesh","textRenderer","textCanvas","tileTextElementsChanged","textElementsChanged","checkIfTextElementsChanged","textElementsAvailable","hasOverlayText","initialize","updateTextElements","renderedTilesChanged","frameNumber","clearVisited","findReplacements","anyTextGroupEvicted","prepopulateScreenWithBlockingElements","placeNewTextElements","placeTextElements","placeOverlayTextElements","updateTextRenderers","m_overlayTextElements","concat","pickResults","pickHandler","pickData","pickObjectType","isDuplicate","pickResult","pickText","PickObjectType","Text","poiRenderer","pickTextElements","Icon","waitInitialized","m_loadPromise","memoryUsage","getMemoryUsage","m_initPromise","initializeDefaultAssets","initializeTextCanvases","boxes","renderListEntry","startLinePointProj","endLinePointProj","pathBlockingElement","blockingElements","project3","line","screenSpaceLines","end","lineWithBound","minX","maxX","minY","allocateIBoxes","groupState","maxNumPlacedLabels","pass","visited","shieldGroups","hiddenKinds","hiddenGeometryKinds","textElementState","textElementStates","PersistentLabels","total","numRenderedTextElements","uninitialized","viewDistance","tooFar","elementVisible","NewLabels","textElementStyle","getTextElementStyle","elementType","isPathLabelTooSmall","numNotVisible","dbgPathTooSmall","numPathTooSmall","textRenderState","forceNewPassOnLoaded","initializeGlyphs","getLayer","DEFAULT_TEXT_CANVAS_LAYER","storage","drawCount","numCannotAdd","textRenderStyle","textLayoutStyle","addPoiLabel","addLineMarkerLabel","addPathLabel","loadingState","Initialized","Requested","Loaded","newLoadPromise","fontCatalog","loadCharset","all","bounds","getGlyphs","defaultFontCatalogName","initializeDefaultTextElementStyle","loadCatalogs","catalog","loadedTextCanvas","createTextCanvas","createPoiRenderer","defaultTextCanvas","defaultPoiRenderer","initializeTextElementStyles","debugGlyphs","debugContext","getValue","m_debugGlyphTextureCacheMesh","initializeGlyphDebugMesh","m_debugGlyphTextureCacheWireMesh","defaultFontCatalog","planeGeometry","textureSize","maxWidth","maxHeight","wireframe","WireframeGeometry","wireframeMaterial","clearTextCache","checkIfOverloaded","updateStartTime","overloaded","updateTextElementsFromSource","tileDataSource","tiles","sortedTiles","prepareTextElementGroup","userTextElements","sortedGroups","createSortedGroupsForSorting","numTextElementsUpdated","textElementLists","selectTextElementsToUpdateByDistance","textElementGroup","maxViewDistance","found","getOrSet","checkReadyForPlacement","PrePlacementResult","Ok","deduplicateElement","Duplicate","totalLabels","results","totalGroups","newGroups","tilesToRender","shouldRenderText","groupedPriorityLists","textElementGroups","foundGroup","farDistanceLimitRatio","maxDistanceRatioForTextLabels","maxDistanceRatioForPoiLabels","getMaxViewDistance","tileTextElements","fadeAnimationRunning","placeStartTime","placeNew","maxNumPlacedTextElements","maxNumVisibleLabels","groupStates","sortedGroupStates","currentPriority","currentPriorityBegin","textElementGroupState","newPriority","placeTextElementGroup","beginGroupIndex","endGroupIndex","screenXOrigin","screenYOrigin","screenPoints","pt","pX","pY","SimplePath","LineCurve","factor","labelDistanceScaleMin","labelDistanceScaleMax","state","maxVisibilityDist","distanceFadeValue","textDistance","labelState","iconIndex","pointLabel","iconRenderStates","iconRenderState","setViewDistance","iconRejected","renderIcon","isClamped","isValid","distanceScaleFactor","getDistanceScalingFactor","iconReady","prepareRender","placeIcon","PlacementResult","Invisible","Rejected","distanceFadeFactor","getDistanceFadingFactor","viewState","poiTextMaxDistance","ignoreDistance","iconIsOptional","shouldRenderPointText","placeResult","placePointLabel","numPoiTextsInvisible","textRejected","textIsOptional","startFadeOut","renderTextDuringMovements","shouldRenderPoiText","isFading","startFadeIn","fadeFactor","scaleFactor","textBufferObject","createTextBufferObject","backgroundIsVisible","scale","addTextBufferObject","addTextBufferToCanvas","numRenderedPoiTexts","allocateSpace","renderPoi","renderDistance","numRenderedPoiIcons","addPointLabel","lineMarkerLabel","shieldGroup","shieldGroupIndex","lineTechnique","minDistanceSqr","minDistance","pointIndex","tooClose","j","Math2D","distSquared","textMaxDistance","pathLabel","Path","SimpleLineCurve","getPoint","computeViewDistance","textRenderDistance","prevSize","placePathLabel","prevOpacity","prevBgOpacity","numTextElementsInScene","newOverloaded","m_roadPicker","RoadPicker","registerTile","raycasterFromScreenPoint","screenX","screenY","scenePosition","intersects","intersectObjects","worldRootObject","intersect","Unspecified","intersection","addObjInfo","GeometryType","Point","ExtrudedLine","SolidLine","TextPath","Polygon","ExtrudedPolygon","Area","planeIntersectPosition","cameraPos","intersectRoads","MapViewPoints","faceIndex","objInfosIndex","polygonStartFace","MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION","MINIMUM_OBJECT_SIZE_ESTIMATION","TileLoaderState","numBytes","OrientedBox3","frameNumLastRequested","frameNumVisible","numFramesVisible","visibilityCounter","m_disposed","m_localTangentSpace","m_forceHasGeometry","m_userTextElements","TextElementGroup","MAX_SAFE_INTEGER","m_textElementGroups","TextElementGroupPriorityList","m_pathBlockingElements","m_textElementsChanged","m_visibleArea","m_minElevation","m_maxElevation","m_ownedTextures","WeakSet","m_nextTextElementToOverlay","elementIndex","m_resourceInfo","computeResourceInfo","foundIndex","blockingElement","changed","m_decodedTile","tileInfo","roadIntersectionData","_zoomLevel","area","updatePriority","invalidateResourceInfo","forceHasGeometry","decodeTime","copyrightHolderIds","m_tileGeometryLoader","hasGeometry","basicGeometryLoaded","allGeometryLoaded","m_tileLoader","loadAndDecode","tileLoaderState","Ready","Canceled","Failed","m_animatedExtrusionTileHandler","handler","nextTextElementToOverlay","disposeMaterial","materialProperty","shouldDisposeTexture","disposeObject","shouldDisposeObjectGeometry","shouldDisposeObjectMaterial","rootObject","traverse","preparedTextPaths","clearTextElements","hasTextElements","cancel","worldExtent","num3dObjects","numTextElements","numUserTextElements","aggregatedObjSize","intersectionData","bytesPerEntry","numEntries","ids","getRoadIntersectionDataSize","AnimatedExtrusionState","m_mapView","m_tileHandlerMap","m_zoomDirection","m_zoomLevelPrevious","tileHandler","zoomLevelChanged","m_forceAnimatedExtrusion","animatedExtrusion","m_forceAnimatedExtrusionDuration","extrusionDuration","tileKeys","m_tile","m_animatedExtrusionDuration","m_extrudedObjects","m_animatedExtrusionRatio","m_animatedExtrusionState","None","m_animatedExtrusionStartTime","Playing","Started","currentTime","timeProgress","extrusionRatio","easeInOutCubic","Finished","stopExtrusionAnimation","extrudedObject","ExtrusionFeature","startExtrusionAnimationIfNeeded","zoomDirection","removeTile","childTileKeys","getSubTileKeys","childTileKey","extrusionStartTime","nextLevelDiff","getChildTiles","parentTileKey","parent","startExtrusionAnimation","parentUri","childUri","absoluteUrlWithOriginRe","getUrlOrigin","substr","baseUrl","RegExp","idx","lastIndexOf","getUrlHostAndProtocol","protocol","host","urlOriginRe","match","visibilityRange","DisplacementFeature","updateDisplacementFeature","displacementMaterial","USE_DISPLACEMENTMAP","displacementScale","displacementBias","insertShaderInclude","DisplacementFeatureMixin","m_displacementMap","getDisplacementMap","setDisplacementMap","source","patchGlobalShaderChunks","ShaderChunk","fading_pars_vertex","updateDistanceFadeFeature","fadingMaterial","FADING_MATERIAL","updateUniforms","additionalCallback","onBeforeRender","chainCallbacks","uniformsNeedUpdate","FadingFeatureMixin","m_fadeNear","m_fadeFar","getFadeNear","setFadeNear","getFadeFar","setFadeFar","extrusion_pars_vertex","updateExtrusionFeature","extrusionMaterial","EXTRUSION_MATERIAL","ExtrusionFeatureMixin","m_extrusion","getExtrusionRatio","setExtrusionRatio","addFadingProperties","applyFadingParameters","addExtrusionProperties","applyExtrusionParameters","addDisplacementProperties","applyDisplacementParameters","copyFadingParameters","copyExtrusionParameters","copyDisplacementParameters","MeshStandardMaterial","applyMixinsWithoutProperties","LineCapsModes","extrude_line_vert_func","round_edges_and_add_caps","CAPS_NONE","CAPS_SQUARE","CAPS_ROUND","CAPS_TRIANGLE_IN","CAPS_TRIANGLE_OUT","tile_clip_func","high_precision_vert_func","StringEncodedMeters","encodedValue","exec","StringEncodedPixels","StringEncodedHex","StringEncodedRGB","channels","StringEncodedRGBA","parseFloat","StringEncodedHSL","StringEncodedMetricFormatMaxSize","StringEncodedColorFormatMaxSize","numeral","formats","baseTechniqueParamsDescriptor","attrScopes","AttrScope","TechniqueGeometry","transient","TechniqueRendering","pointTechniquePropTypes","mergeTechniqueDescriptor","squaresTechniquePropTypes","squares","circlesTechniquePropTypes","circles","lineMarkerTechniquePropTypes","FeatureGeometry","useAbbreviation","useIsoCode","textMayOverlap","iconMayOverlap","textReserveSpace","iconReserveSpace","alwaysOnTop","showOnMap","stackMode","iconFadeTime","textFadeTime","iconXOffset","iconYOffset","iconScale","screenHeight","screenWidth","poiTable","poiName","poiNameField","imageTextureField","imageTexturePrefix","imageTexturePostfix","hAlignment","vAlignment","polygonalTechniqueDescriptor","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","solidLineTechniqueDescriptor","lineTechniqueDescriptor","fillTechniqueDescriptor","fill","standardTechniqueDescriptor","roughness","metalness","alphaTest","emissiveIntensity","refractionRatio","mapProperties","normalMapProperties","displacementMapProperties","roughnessMapProperties","emissiveMapProperties","bumpMapProperties","metalnessMapProperties","alphaMapProperties","standard","extrudedPolygonTechniqueDescriptor","floorHeight","defaultColor","defaultHeight","constantHeight","boundaryWalls","footprint","maxSlope","enableDepthPrePass","textTechniqueDescriptor","shaderTechniqueDescriptor","isStandardExtrudedLineTechnique","textureCoordinateType","transferList","texturePropertyKey","ArrayBuffer","imageName","textureName","UPDATE_EVENT","DataSource","uniqueName","storageLevelOffset","cacheable","useGeometryLoader","m_maxGeometryHeight","m_storageLevelOffset","uniqueNameCounter","m_styleSetName","styleSet","GlyphData","advanceX","u0","v0","u1","v1","font","sourceTextureCoordinates","dynamicTextureCoordinates","copyIndex","isInCache","character","String","fromCodePoint","direction","metrics","lineHeight","MAX_CAPACITY","VERTEX_BUFFER_STRIDE","INDEX_BUFFER_STRIDE","VERTICES_PER_QUAD","INDICES_PER_QUAD","QUAD_VERTEX_MEMORY_FOOTPRINT","QUAD_INDEX_MEMORY_FOOTPRINT","NUM_BYTES_PER_FLOAT","NUM_BYTES_PER_INT32","backgroundMaterial","initialSize","m_currentCapacity","m_drawCount","m_updateOffset","m_pickingCount","m_vertexBuffer","setUsage","DynamicDrawUsage","m_positionAttribute","m_uvAttribute","m_colorAttribute","m_bgColorAttribute","m_indexBuffer","m_geometry","m_pickingDataArray","m_bgMesh","updateRange","setDrawRange","glyphData","corners","weight","bgWeight","mirrored","newSize","resizeBuffers","baseVertex","baseIndex","setXYZW","mirroredUVIdx","setX","vertexOffset","bgColor","bgOpacity","cosR","sinR","offsetZ","rotSign","red","green","blue","bgRed","bgGreen","bgBlue","bgAlpha","targetOffset","srcOffset","glyph","w","bw","startIdx","endIdx","pickCallback","positionIndex","newVertexBuffer","newIndexBuffer","TypesettingUtils","EM_TO_PX","PT_TO_PX","OBLIQUE_ANGLE","OBLIQUE_OFFSET","getPixelSize","originalSize","Em","Percent","getSmallCapsScale","smallCapsTransformations","SmallCaps","xHeight","capHeight","computeGlyphTransform","localRotation","cosAngle","sinAngle","localCosAngle","localSinAngle","updateBounds","globalBounds","individualBounds","Box2","raycaster","screenCoords","origin","mouseCoords","ceil","indices","il","fromArray","pointInfo","getPointInfo","pointIsOnScreen","testPoint","absoluteScreenPosition","relativeScreenPosition","pickCoordinates","dx","dy","halfSize","isNode","DebugOption","SET_EVENT_TYPE","DebugContext","m_optionsMap","__debugContext","opt","hasEventListener","option","Label","All","prepareDecodedTile","foundSet","m_isFinished","m_availableGeometryKinds","processTechniques","setDecodedTile","prepareForRender","m_timeout","loadingFinished","removeDecodedTile","disposed","disposeTile","addMessage","finish","geometryCreator","createAllGeometries","geometryCreationTime","decoderServiceType","scriptUrl","workerCount","workerSet","getWorkerSet","WorkerBasedDecoder","workerSets","ConcurrentWorkerSet","destroy","sourceInfo","existingInfo","findItem","year","link","formatAsHtml","filtered","entry","HighPrecisionUtils","doubleToFloatVec","fround","createHighPrecisionCameraPos","objectInverseWorldMatrix","mvp","matrixWorldInverse","eyePos","eyePosFloat","viewProjection","eyePosHi","eyePosLo","createAttributes","positionVec","positionVecLow","addHPValue","major","addHPVector","vec","positionHigh","Float32BufferAttribute","positionLow","addInterleavedAttributes3","positionOffset","newPositions","majorX","minorX","majorY","minorY","majorZ","minorZ","setPositions","makeFloatVec","minorVec","updateHpUniforms","shaderMaterial","highPrecisionCameraInfo","isMaterial","u_mvp","u_eyepos","u_eyepos_lowpart","convertPositions","vAny","returnPositions","createLine","linePositions","addCircles","wireFrame","triangulateLine","hpLineGeometry","hpPositions","positionAttribute","positionLowAttribute","hpSolidMaterial","lineObject","HPL","HighPrecisionWireFrameLine","HighPrecisionLine","setupForRendering","createPoints","pointPositions","materialParameters","hpPointsGeometry","hpPointsMaterial","isHighPrecisionPointMaterial","HighPrecisionPointMaterial","pointsObject","HPP","HighPrecisionPoints","FeatureModifierId","OmvFilterString","StringMatch","matchString","str","filterString","Any","Match","StartsWith","EndsWith","endsWith","OmvGeometryType","OMV_TILE_DECODER_SERVICE_TYPE","OMV_TILER_SERVICE_TYPE","OmvTile","Tile","EquirectangularProjection","geoToWorldScale","worldToGeoScale","latitudeSpanInRadians","longitudeSpanInRadians","sizeX","sizeY","normalizedEquirectangularProjection","equirectangularProjection","TransverseMercatorProjection","m_phi0","m_lambda0","lon","TransverseMercatorUtils","POLE_RADIUS","rsq","POLE_RADIUS_SQ","nearestQuarter","deltaLon","deltaLat","distanceToPoleSq","distanceToPole","dir","offsetLon","clamped","clampGeoPoint","normalLon","phi","lambda","B","atanh","outScale","tau","nx","ny","D","sinh","pointsToCheck","E","POLE_EDGE_DEG","containsEastCut","containsCenterX","containsCenterY","alignLatitude","projected","vx","vy","vz","minZ","maxZ","lowerQ","upperQ","containsLowerQY","containsUpperQY","geoPoints","alignLongitude","latitudes","longitudes","altitudes","referencePoint","bad","good","POLE_EDGE","transverseMercatorProjection","tilingScheme","minElevation","maxElevation","m_tilingScheme","m_worldBox","m_worldDimensions","levelDimensionX","getLevelDimensionX","levelDimensionY","getLevelDimensionY","originX","originY","unprojectBox","halfQuadTreeSubdivisionScheme","SubTiles","iterator","ZCurveIterator","RowColumnIterator","parentKey","worldCoordinatesToTileKey","cx","cy","worldSizeX","worldSizeY","wrap","lower","upper","minVal","maxVal","southWestLongitude","longitudeInRadians","southWestLatitude","northEastLongitude","northEastLatitude","minTileKey","maxTileKey","columnCount","minColumn","maxColumn","minRow","maxRow","m_subdivisionScheme","divX","getSubdivisionX","divY","getSubdivisionY","optionalParams","console","trace","m_channel","Trace","prefix","Debug","Info","Warn","WORKERCHANNEL_MSG_TYPE","workerMessage","self","postMessage","CopyShader","tDiffuse","CopyMaterial","NoBlending","Env","_name","unmap","subset","elem","hasIntersection","TextureCoordinateType","PoiStackMode","descriptors","projectionName","sphereProjection","attributeMap","$id","emptyTechniqueDescriptor","StyleConditionClassifier","_whenExpr","savedStyle","switchStyle","_style","enclosingExpr","matchVarStringComparison","_geometryType","saved","OptimizedSubSetKey","keyUpdateNeeded","envLayer","envGeometryType","updateKey","cachedStyleSet","makeDecodedTechnique","attrValue","toJSON","m_techniques","m_exprPool","ExprPool","m_cachedResults","m_styleConditionClassifier","m_subStyleSetCache","m_definitionExprCache","m_tmpOptimizedSubSetKey","m_emptyEnv","m_definitions","resolveStyleReferences","isJsonExprReference","definitionName","isActualSelectorDefinition","resolveReferences","techniqueRenderOrder","styleSetIndex","_styleSetIndex","computeDefaultRenderOrder","compileStyleSet","optimizedSubSetKey","m_layer","m_geometryType","searchedStyleSet","getOptimizedStyleSet","currStyle","processStyle","techinque","_index","subSetKey","optimizedStyleSet","createPreFilteredStyleSet","compileStyle","when","classify","intern","_minZoomLevelExpr","_maxZoomLevelExpr","err","checkZoomLevel","Condition","getTechniqueForStyleMatch","final","checkStyleDynamicAttributes","_dynamicTechniques","dynamicAttributes","evaluateTechniqueProperties","getDynamicTechniqueKey","createTechnique","_staticTechnique","dynamicAttrKey","_attrName","_dynamicTechniqueAttributes","_dynamicFeatureAttributes","_dynamicForwardedAttributes","_staticAttributes","dynamicFeatureAttributes","dynamicTechniqueAttributes","dynamicForwardedAttributes","targetStaticAttributes","techniqueDescriptor","processAttribute","deps","attrScope","labelProperty","instantiationContext","attrExpr","instantiate","dynamicAttrs","_key","SdfShaderChunks","sdf_attributes","sdf_varying","sdf_varying_computation","sdf_frag_uniforms","sdf_sampling_functions","clearVertexSource","clearFragmentSource","copyVertexSource","copyFragmentSource","sdfTextVertexSource","sdfTextFragmentSource","GlyphClearMaterial","GlyphCopyMaterial","pageOffset","Uniform","page0","DEFAULT_IMAGE","page1","page2","page3","page4","page5","page6","page7","SdfTextMaterial","vertexSource","fragmentSource","sdfTexture","sdfParams","Vector4","distanceRange","MSDF","isMsdf","BG_TEXT","isBackground","side","DoubleSide","extensions","derivatives","characterBounds","AlphaFormat","RGBFormat","RGBAFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","dataType","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","AmbientLight","intensity","DirectionalLight","castShadow","DEPTH_PRE_PASS_STENCIL_MASK","DEPTH_PRE_PASS_RENDER_ORDER_OFFSET","createDepthPrePassMaterial","baseMaterial","depthFunc","EqualDepth","colorWrite","enforceBlending","depthPassMaterial","LessDepth","evaluateBaseColorProperty","originalGeometry","depthPassGeometry","extrusionAxisAttribute","materialIndex","depthMesh","colorMesh","depthMaterial","stencilWrite","stencilFail","KeepStencilOp","stencilZFail","stencilZPass","ReplaceStencilOp","stencilFunc","AlwaysStencilFunc","stencilRef","stencilFuncMask","colorMaterial","ZeroStencilOp","EqualStencilFunc","MAX_DISTANCE_ERROR","extendedTileInfo","lineFeatures","lineGroup","numFeatures","widths","techniqueCatalog","featureIds","pickPos","distanceToPoint","techniqueIndices","px","py","pickDistance","featureStart","featureEnd","startX","startY","widthEntry","actualWidth","lineWidthSqr","closestDistSqr","MAX_VALUE","endX","endY","distSqr","distToSegmentSquared","roadPickResult","distFromCenter","addUserData","MIN_AVERAGE_CHAR_WIDTH","tmpPosition","tmpCameraDir","COS_TEXT_ELEMENT_FALLOFF_ANGLE","refPosition","viewDistance0","viewDistance1","viewCamera","projectionType","updatePoiFromPoiTable","getWorldPosition","checkViewDistance","TooFar","NotReady","tmpBox","tmpBoxes","tmpMeasurementParams","tmpCollisionBoxes","tmpCollisionBox","CollisionBox","tmpScreenPosition","tmpTextOffset","tmp2DBox","Box","pointLabelMargin","screenCollisions","PoiRenderer","computeIconScreenBox","isAllocated","isRejected","outScreenPosition","outputCharacterBounds","measureText","hAlign","vAlign","Right","Below","poiIsRenderable","computedWidth","computedHeight","computePointTextOffset","expandByVector","multiplyScalar","translate","textReservesSpace","allocate","candidateBoxes","checkGlyphCollision","search","checkGlyphVisible","isFullyVisible","glyphBox","collisionBox","intersectsDetails","DetailedCollisionBox","screenProjector","outScreenPoints","anyPointVisible","projectOnScreen","minScreenSpace","setFromPoints","lengthSq","INVALID_RENDER_BATCH","tempPos","PoiRenderBufferBatch","imageItem","boxBuffer","setup","init","updateBufferGeometry","updateMemoryUsage","iconTexture","IconTexture","imageData","UVMapping","premultiplyAlpha","generateMipmaps","m_material","IconMaterial","BoxBuffer","PoiRenderBuffer","batches","m_batchMap","imageTextureName","batchKey","mappedIndex","bufferBatch","batchSet","screenBox","batchIndex","registerPoi","uvBox","addBox","batch","pickBoxes","m_tempScreenBox","m_renderBuffer","centerX","centerY","preparePoi","allocateScreenSpace","addPoi","poiTableName","getImageTexture","m_missingTextureName","imageDefinition","imageCache","findImageByName","loaded","loadingPromise","imageUrl","loadImage","loadedImageItem","setupPoiInfo","imageWidth","imageHeight","iconWidth","iconHeight","minS","maxS","minT","maxT","iconScaleH","iconScaleV","s0","t0","s1","t1","ImageOrigin","RBush","box","detailBoxes","isLineWithBound","screenBounds","rtree","bbox","insert","containsBox","testBox","detailBox","boundedLine","intersectsLine","lineXDiffTransformed","signBL","signBR","signTL","signTR","lineYDiffTransformed","normalX","normalY","debugCanvas","m_renderContext","m_renderingEnabled","m_numAllocations","m_numSuccessfulTests","m_numFailedTests","m_numSuccessfulVisibilityTests","m_numFailedVisibilityTests","getContext","strokeStyle","strokeRect","boundsArray","collisionFound","f","u","_maxEntries","_minEntries","leaf","_all","toBBox","collides","_build","_splitRoot","_insert","_condense","compareMinX","compareMinY","apply","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","M","_allDistMargin","computeStyleCacheId","datasourceName","DEFAULT_TEXT_STYLE_CACHE_ID","TextRenderStyleCache","TextLayoutStyleCache","Center","DEFAULT_STYLE_NAME","m_textRenderStyleCache","m_textLayoutStyleCache","m_colorMap","m_textStyles","m_defaultStyle","themedDefaultStyle","createTextElementStyle","textRenderers","styledTextRenderer","styleId","zoomLevelInt","cacheId","defaultRenderParams","defaultOpacity","hexColor","defaultBackgroundSize","hasBackgroundDefined","defaultBackgroundOpacity","hexBgColor","themeRenderParams","floorZoomLevel","defaultLayoutParams","wrapping","themeLayoutParams","styleName","fontCatalogName","DEFAULT_THROTTLING_TIMEOUT","m_throttlingTimeout","m_movementStartedFunc","m_movementFinishedFunc","m_lastCameraPos","m_newCameraPos","m_throttlingTimerId","m_movementDetectorDeadline","onDeadlineTimer","startMovementFinishedTimer","newAttitude","newCameraPos","m_lastAttitude","cameraMoved","equals","m_cameraMovedLastFrame","NaN","removeMovementFinishedTimer","remainingTime","epsilon","nearMin","nearMultiplier","nearFarMultiplier","farOffset","m_tmpVectors","m_tmpQuaternion","farMin","nearPlane","farPlane","extractBasis","fwd","negate","fwdRot","addScaledVector","ElevationBasedClipPlanesEvaluator","TopViewClipPlanesEvaluator","nearFarMarginRatio","farMaxRatio","nearFarMargin","m_minimumViewRange","evaluateDistanceSphericalProj","evaluateDistancePlanarProj","minimumViewRange","getCameraAltitude","farMax","cameraAltitude","cam","halfFovAngle","farTangent","getTangentBasedFarPlane","getFovBasedFarPlane","getOrthoBasedFarPlane","getTangentDistance","te","fovAngle","dVec","cameraFwdVec","tVec","cta","a2","r2","TiltViewClipPlanesEvaluator","getWorldDirection","surfaceNormal","cosTiltAngle","halfPiLimit","cameraTilt","topAngleRad","bottomAngleRad","z1","z2","sinBeta","topDist","bottomDist","planesDist","getFrustumGroundIntersectionDist","cosHalfFov","getCameraLookAtDistance","cameraToOrigin","getCameraPitch","modifiedAlpha","getTiltedFovBasedFarPlane","cosAlpha","dSqr","cosAlpha1","minNear","minFarOffset","minFar","m_nearPlane","m_farPlane","fixedNear","invalidatePlanes","fixedFar","nearDist","farDist","MSAARenderPass","MSAASampling","samplingLevel","Level_1","m_renderTarget","m_localCamera","m_quadScene","m_quadUniforms","m_quadMaterial","MSAAMaterial","m_quad","WebGLRenderTarget","offsets","OffsetVectors","oldClearColor","oldView","oldRenderTarget","getRenderTarget","setViewOffset","uniformCenteredDistribution","sampleWeight","isLoggingMessage","DEFAULT_WORKER_COUNT","DEFAULT_WORKER_INITIALIZATION_TIMEOUT","m_workerChannelLogger","m_eventListeners","m_workers","m_availableWorkers","m_workerPromises","m_readyPromises","m_requests","m_workerRequestQueue","m_nextMessageId","m_stopped","m_referenceCount","onWorkerMessage","workerId","WorkerServiceProtocol","isResponseMessage","messageId","worker","checkWorkerRequestQueue","errorMessage","errorStack","stack","resolver","isInitializedMessage","readyPromise","getReadyPromise","service","eventHandler","m_workerCount","hardwareConcurrency","timeout","workerConnectionTimeout","workerPromise","WorkerLoader","startWorker","evt","waitForAllResponses","terminateWorkers","serviceId","ensureStarted","promise","callback","request","requestController","reject","ServiceMessageName","Request","postRequestMessage","promises","buffers","signal","aborted","RequestController","unshift","workerEntry","terminate","newPromise","that","startWorkerImmediately","directlyFallbackToBlobBasedLoading","startWorkerBlob","pageUrl","href","fullScriptUrl","Worker","waitWorkerInitialized","fetchScriptSourceToBlobUrl","blobUrl","sourceLoaderCache","scriptSource","blob","firstMessageCallback","isWorkerBootstrapRequest","resolvedDependencies","dependency","resolved","dependencyUrlMapping","cleanup","errorCallback","filename","lineno","timerId","nextUniqueServiceId","m_serviceCreated","addReference","broadcastRequest","WORKER_SERVICE_MANAGER_SERVICE_ID","Requests","DestroyService","targetServiceId","removeReference","CreateService","targetServiceType","tileKeyCode","WorkerDecoderProtocol","DecodeTileRequest","getProjectionName","invokeRequest","TileInfoRequest","DecoderMessageName","Configuration","broadcastMessage","CalculationStatus","TileGeometryManagerBase","enableFilterByKind","m_visibilityCounter","kinds","incrementVisibilityCounter","addOrRemoveToEnabledSet","enableDisableKinds","addOrRemoveToDisabledSet","addOrRemoveToHiddenSet","visibilityHasChanged","oneKind","addRemove","kindSet","visibleKinds","geometryLoader","tileKinds","availableGeometryKinds","needUpdate","nowVisible","m_tileUpdateCallback","addToSet","kindsSet","SimpleTileGeometryLoader","enabledGeometryKinds","disabledGeometryKinds","updateTileObjectVisibility","m_name2Url","m_url2Name","hasName","oldNames","ImageCache","findImage","registerImage","startLoading","m_images","imageCacheItem","findImageCacheItem","mapViews","itemsToRemove","mapViewIndex","keyToDelete","imageLoader","ImageLoader","renderImage","ex","errorEvent","createImageBitmap","imageOrientation","imageBitmap","document","createElement","drawImage","getImageData","m_enabled","Fog","m_fogIsDefined","m_cachedTheme","enableFog","startRatio","viewRange","horizontalDensity","verticalDensity","endRatio","density","smoothStep","lerp","setFogInRawShaderMaterials","Material","m_imageTextures","m_poiShieldGroups","m_missingPoiTableName","loadedOk","m_missingPoiName","assertExists","poiGeometry","addLineMarker","ok","statusText","jsonAtlas","imageTextureDef","reason","getPoiTable","notifyMissingPoiTable","poiTableEntry","getEntry","notifyMissingPoi","iconName","composeTechniqueTextureName","iconMinLevel","iconMaxLevel","textMinLevel","textMaxLevel","updateMinMaxZoomLevelsFromPoiInfo","groupKey","positionArray","checkCreateTextElement","techniqueTextureName","poiTechnique","PoiTableEntry","jsonEntry","isOK","altNames","Show","Hide","ShowParent","PoiTable","useAltNamesForKey","poiList","poiDict","m_isLoading","m_loadedOk","entryIdx","poiTableUrl","jsonPoiTable","tableEntry","verifyJSON","newPoiEntry","altName","m_poiTables","loadPromises","poiTableRef","addTable","finally","finishLoading","debugTiles","polarTilingScheme","m_maxLatitude","m_geometryLevelOffset","m_debugTiles","m_northPoleMaterial","m_southPoleMaterial","m_styleSetEvaluator","styleSetEvaluator","$geometryType","$layer","getMatchingTechniques","StyleSetEvaluator","setStyleSet","createTileGeometry","latA","latB","lonA","lonB","isNorthPole","srcProjection","dstProjection","maxLat","poleLat","pBL","pBR","pTR","pTL","needsGeometryCut","isLeftHalf","poleX","poleY","pPole","pXX","lats","lmax","lmin","nearest","shift","inPointB","inPointD","cutStart","intersectEdge","cutEnd","cutIndexStart","cutIndexEnd","Face3","fromGeometry","SkyCubemapFaceId","SKY_CUBEMAP_FACE_COUNT","createCubemapFaceArray","m_skybox","CubeTextureLoader","CubeTexture","face","DEFAULT_MAX_THEME_INTHERITANCE_DEPTH","themeUrl","resolveReferenceUri","getAppBaseUrl","resolveUrls","checkTechniqueSupport","resolveDefinitions","resolveBaseThemes","contextLoader","ContextLogger","resolveThemeReferences","extends","childUrlResolver","composeUriResolvers","RelativeUriResolver","baseTheme","faceUrl","contextLogger","pushAttr","resolvedDef","resolveStyle","resolveStyleSet","currentStyle","pushIndex","resolvedStyle","cloneDeep","resolvedWhen","resolveExpressionReferences","resolvedValue","failed","resolveInternal","defName","maxInheritanceDepth","baseThemes","baseThemesMerged","actualBaseTheme","mergeThemes","MB_FACTOR","DataSourceCache","cacheSize","rct","m_disposedTiles","m_resourceComputationType","m_tileCache","LRUCache","evictionCallback","canEvict","getKey","setCapacityAndMeasure","getKeyForTile","deleteByKey","shrinkToCapacity","evictAll","selector","evictSelected","inDataSource","m_frustumIntersection","m_projectionMatrixOverride","m_viewRange","m_dataSourceCache","computationType","setCapacity","evaluateClipPlanes","visibleTileKeysResult","getVisibleTileKeysForDataSources","visibleTileKeys","distanceDiff","minDiff","actuallyVisibleTiles","allDataSourceTilesLoaded","getDisplayZoomLevel","tileEntry","getTile","prepareTileInfo","visibleArea","updateTiles","allVisibleTileLoaded","allBoundingBoxesFinal","fillMissingTilesFromCache","oldViewRanges","newViewRanges","getTileImpl","dataSourceVisibleTileList","visibleLevel","visibleTileKey","getTileKey","searchLevelsUp","searchLevelsDown","getCacheSearchLevels","childLevel","markDataSourceTilesDirty","disposeTiles","listEntry","SearchDirection","defaultSearchDirection","NONE","BOTH","DOWN","UP","incompleteTiles","tileCode","checkedTiles","searchDirection","findUp","findDown","childTileCode","childTile","parentCode","exists","parentTile","foundUp","cacheOnly","updateTile","tileToUpdate","resultTile","tileCache","initTile","dataSourceCache","retainedTiles","markTileDirty","tileGeometryManager","dataSourceBuckets","bucket","fp","makePerspective","updateFrustum","compute","calculationFinal","tileKeyEntry","tileKeyEntries","canGetTile","ConcurrentTilerFacade","tilerServiceType","WorkerBasedTiler","indexId","input","WorkerTilerProtocol","RegisterIndex","UpdateIndex","TileRequest","m_cachedTreePromise","getCopyrightCoverageData","coverageInfo","initRBush","matchingEntries","getTree","minLevel","maxLevel","item","tree","alt","arg","isLineAccessor","isObject3dAccessor","BufferedGeometryAccessorBase","startCapSize","endCapSize","constructor","rawShaderMaterial","BufferedGeometryAccessor","checkSetUp","positionsArray","subarray","getVertices","IndexedBufferedGeometryAccessor","reconstructLineWidth","k","UNIT_Z","POINTS","BEVEL_POINTS","SECTORS_IN_CIRCLE","STEP","addCircle","lineAngle","radius","angle","startWithCircle","endWithCircle","angleVec","prevBt","bt","averageBt","p2","p3","N","useBevel","inclineWidth","inBuffer","startOffset","outBuffer","i2","startIndex","xd","yd","zd","_renderer","_scene","_geometry","_material","_group","force","doUpdateMatrixWorldInverse","matrixWorldNeedsUpdate","TileLoader","dataProvider","tileDecoder","loadAbortController","AbortController","countRequests","Loading","Decoding","donePromise","abort","onDone","myLoadCancellationToken","payload","onLoaded","resolveDonePromise","rejectedDonePromise","byteLength","startDecodeTile","decodeTile","onDecoded","doneState","getTileInfo","APIFormat","AuthenticationMethod","AuthenticationTypeBearer","method","AuthorizationHeader","AuthenticationTypeTomTomV1","QueryString","AuthenticationTypeAccessToken","downloadManager","TransferManager","urlParams","abortSignal","tileUrl","dataUrl","authenticationCode","getActualAuthenticationCode","applyAuthCode","addQueryParams","apiFormat","XYZJson","downloadJson","downloadArrayBuffer","getBearerToken","HereV1","MapboxV4","XYZOMV","XYZMVT","XYZSpace","TomtomV1","authMethod","authenticationMethod","getDefaultAuthMethod","headers","Headers","authType","append","authParams","queryParams","queryString","concatinator","s3Base","querySelector","getElementById","innerText","getFullYear","releases","date","hash","version","dropdown","res","release","appendChild","onchange","selected","omvDataSource","OmvDataSource","accessToken","innerWidth","Boston","beginAnimation","main","IdentityProjection","identityProjection","getLongitudeQuadrant","oneOverPI","quadrantIndex","lengthOfVector3","makeBox3","halfEquatorialRadius","minLongitude","maxLongitude","minLongitudeQuadrant","maxLongitudeQuadrant","xMin","xMax","yMin","yMax","cosMaxLongitude","sinMaxLongitude","xCenter","xExtent","yCenter","yExtent","minLatitude","maxLatutide","zMax","zMin","zCenter","zExtent","SphereProjection","_minElevation","worldpoint","cosLatitude","parallelRadiusSq","parallelRadius","midX","midY","cosSouth","sinSouth","cosWest","sinWest","cosNorth","sinNorth","cosEast","sinEast","cosMidX","sinMidX","cosMidY","sinMidY","rMax","rMin","_worldBox","mx","my","gx","gy","cosLongitude","sinLongitude","sinLatitude","visitTileKey","subTileKey","hereTilingScheme","TilingScheme","webMercatorTilingScheme","mercatorTilingScheme","rotationMatrix","newBox","matrix","frustumOrPlanes","planes","dz","distanceToPointSquared","subVectors","lengths","extent","getComponent","dd","DEFAULT_CIRCLE_SIZE","parameters","isCirclePointsMaterial","m_size","m_color","getHexString","PriorityListGroup","getGroup","normalizedPriority","m_sortedGroups","otherGroup","findGroup","priorityList","LoggerManagerImpl","m_loggers","channel","ConsoleChannel","WorkerChannel","loggerName","m_levelSetForAll","Logger","config","ax","ay","bx","by","xmax","ymax","contains","computeSquaredLineLength","squaredLineLength","xDiff","yDiff","l0x","l0y","l1x","l1y","lineLengthSuared","edge0","edge1","smootherStep","inMin","inMax","outMin","outMax","lowerBound","upperBound","startValue","endValue","derivedCtor","baseCtors","baseCtor","getOwnPropertyDescriptor","m_logger","headerMessage","m_headerLogged","createLogMethod","severity","rest","nowFunc","getTime","getNowFunc","cloneInternal","src","cached","flags","candidate","optionValue","uri","resolvers","originalUrl","f1","f2","hasDisplacementMap","hasExtrusion","edgeColor","edgeColorMix","useExtrusion","useDisplacementMap","MIN_BUILDING_HEIGHT_SQUARED","extrusion_vertex","extrusion_normal_fragment_begin","extrusion_pars_fragment","extrusion_fragment","fading_vertex","fading_pars_fragment","fading_fragment","shaderParams","updateTransparencyFeature","points_frag","DEFAULT_SIZE","DEFAULT_SCALE","uvTransform","Matrix3","VertexColors","LuminosityHighPassShader","luminosityThreshold","smoothWidth","AdditiveBlending","SepiaShader","amount","LineCapsDefinesMapping","Square","Round","TriangleIn","TriangleOut","DefinesLineCapsMapping","lineCapsName","defineKey","CAPS_MODE","fogParam","opacityParam","merge","dashColor","DEFAULT_WIDTH","DEFAULT_OUTLINE_WIDTH","drawRange","DEFAULT_DRAW_RANGE_START","DEFAULT_DRAW_RANGE_END","DEFAULT_DASH_SIZE","DEFAULT_GAP_SIZE","UniformsLib","m_opacity","drawRangeStart","drawRangeEnd","invalidateFog","invalidateOpacity","capsMode","useTileClip","VignetteShader","darkness","operatorDescriptors","evaluator","m_partialEvaluation","previousEvaluationMode","fromValue","builtin","builtins","defineOperator","defineOperators","CastOperators","ComparisonOperators","MathOperators","StringOperators","ColorOperators","TypeOperators","MiscOperators","FlowOperators","ArrayOperators","InterpolationOperators","ObjectOperators","FeatureOperators","MapOperators","operators","at","Boolean","rgba","rgbaToHex","rgb","rgbToHex","hsl","euclideanModulo","hslToHex","compare","strict","conditionalCast","any","none","boolean","number","string","interpolate","_interpolatedProperty","_mode","interpolatorType","base","stops","isConstantInterpolation","createInterpolatedProperty","_exponent","_stops","prepareInterpolateCallExpr","interpolatedProperty","_inputIsZoom","classifyStepCallExpr","first","last","MIN_SAFE_INTEGER","hasConstantValues","literal","prepareStepCallExpr","Interpolant","i1","sampleValues","valueSize","offset1","offset0","weight1","weight0","pixels","ppi","ln","ln2","log10","pi","coalesce","LookupMode","lookupMember","lookupMode","memberName","downcase","toLocaleLowerCase","upcase","toLocaleUpperCase","typeof","_context","preserve","newBranch","newCondition","instantiatedBranch","Character","Token","isSpace","codepoint","Tab","Lf","Cr","Space","isNumber","_0","_9","isLetter","A","Z","isIdentChar","isLetterOrNumber","Dollar","Dot","LBracket","RBracket","tokenSpell","token","Eof","Identifier","Comma","LParen","RParen","Exclaim","TildeEqual","CaretEqual","DollarEqual","EqualEqual","ExclaimEqual","Less","Greater","LessEqual","GreaterEqual","BarBar","AmpAmp","Lexer","m_token","m_char","m_text","yylex","codePointAt","yyinp","ch","SingleQuote","DoubleQuote","Equal","Caret","Tilde","Bar","Amp","getEqualityOp","getRelationalOp","lex","parseLogicalOr","yyexpect","hasAttribute","parseLiteral","parseUnary","parsePrimary","parseRelational","parseEquality","expressions","parseLogicalAnd","isUnknownServiceError","isRequestMessage","Response","isRegisterIndexRequest","isUpdateIndexRequest","isTileRequest","abortController","isConfigurationMessage","isDecodeTileRequest","isTileInfoRequest","FeatureGroupType","FeatureGroup","storeExtendedTags","startSize","textIndex","layerIndex","classIndex","typeIndex","LineFeatureGroup","getNumBytes","segmentIds","segmentStartOffsets","segmentEndOffsets","PolygonFeatureGroup","groupNumRings","outerRingStartIndex","innerRingIsOuterContour","innerRingStartIndex","ExtendedTileInfo","textCatalog","pointGroup","polygonGroup","layerCatalog","classCatalog","typeCatalog","finishFeatureGroup","featureGroup","featureGroupFinished","getFeatureName","abbreviation","isoCode","featureGroupSize","tileInfoFinished","getFeatureText","evaluateTechniqueAttr","techniqueIndexMap","stringMap","layerMap","classMap","typeMap","infoTileTechniqueIndex","decodedTechnique","featureText","featureGroupType","stringIndex","addLayer","addClass","addType","segmentId","endOffset","contour","isOuterRing","addStringValue","ExtendedTileInfoVisitor","visitAllPointFeatures","visitAllLineFeatures","visitAllPolygonFeatures","numFeaturesFound","numPointFeatures","pointFeatures","visitPointFeature","numLineFeatures","visitLineFeature","numPolygonFeatures","polygonsFeatures","visitPolygonFeature","featureIndex","acceptPoint","getTag","positionsStart","numPointValues","acceptLine","acceptPolygon","polygons","ringStart","numRings","polygonAccessor","ringIndex","pointsStart","m_booleanLiterals","m_numberLiterals","m_stringLiterals","m_objectLiterals","m_varExprs","m_hasAttributeExprs","m_inExprs","m_callExprs","inExprs","inExpr","defaultValue","evaluated","cachedExprResults","visitFunc","visit","DEFAULT_TILING_SCHEME","newScheme","VERTEX_POSITION_CACHE","SubdivisionModifier","aa","bb","cc","beta","gamma","tmpVectorA","tmpVectorB","tmpVectorC","positionAttr","uvAttr","uv","edgeAttr","edge","wallAttr","wall","indexAttr","getIndex","middleVertex","lerpVectors","newIndices","v2","shouldSplitTriangle","v3","ASSETS_PATH","BOLD_ASSETS_PATH","ITALIC_ASSETS_PATH","BOLD_ITALIC_ASSETS_PATH","REPLACEMENT_PATH","FontCatalog","fonts","unicodeBlocks","maxCodePointCount","m_replacementGlyph","m_glyphTextureCache","GlyphTextureCache","m_loadingJson","m_loadingPages","m_loadingGlyphs","m_loadedJson","m_loadedPages","m_loadedGlyphs","loadJSON","replacementDirUrl","replacementJson","replacementTexture","loadTexture","replacementFont","replacementGlyph","chars","xadvance","xoffset","yoffset","supportedBlocks","rawJSON","loadPages","assetsPath","getAssetsPath","jsonPath","jsonPromise","pagePromises","page","pages","loadPage","pagePath","charset","AllCaps","toUpperCase","glyphPromises","char","getFont","fontHash","glyphHash","fontGlyphMap","glyphPromise","createReplacementGlyph","charUnicodeBlock","loadAssets","loadedGlyph","shouldTransform","transformedCharacter","getGlyph","selectedFontName","textureBytes","loadedPage","loadBlock","sourceGlyphData","texturePath","pagePromise","fontStylePath","Bold","bold","Italic","italic","BoldItalic","boldItalic","MAX_NUM_COPY_PAGES","MAX_TEXTURE_SIZE","entryWidth","entryHeight","nRows","m_cacheHeight","m_cacheWidth","m_textureSize","m_entryCache","initCacheEntries","m_rt","depthBuffer","stencilBuffer","m_copyTextureSet","m_copyTransform","m_copyPositions","m_copyMaterial","m_copyVertexBuffer","m_copyPositionAttribute","m_copyUVAttribute","m_copyGeometry","copyIndexBuffer","m_copyMesh","m_copyGeometryDrawCount","m_clearMaterial","m_clearPositionAttribute","m_clearGeometry","clearIndexBuffer","m_clearMesh","m_clearGeometryDrawCount","oldestEntry","oldest","clearCacheEntry","copyGlyphToCache","willClearGeometry","willCopyGeometry","srcPages","nCopies","pageIndex","dummyFont","lineGap","dummyGlyphData","dummyEntry","cacheLocation","copyTextureIndex","applyMatrix3","setXYZ","setXY","Entry","newer","older","cacheCapacity","sizeFunction","m_newest","m_oldest","m_capacity","m_sizeFunction","callbackfn","thisArg","newCapacity","evict","sizeMeasure","entrySize","promoteEntry","newest","cb","entryOlder","deleteEntry","evictOldest","itemToRemove","isOk","tempTextPosition","tempTextBounds","tempVertexBuffer","m_fontCatalog","minGlyphCount","maxGlyphCount","m_ownsMaterial","createSdfTextMaterial","m_ownsBgMaterial","m_bgMaterial","m_defaultLayer","TextGeometry","m_layers","m_defaultTextRenderStyle","m_currentTextRenderStyle","m_defaultTextLayoutStyle","m_currentTextLayoutStyle","m_lineTypesetter","LineTypesetter","m_pathTypesetter","PathTypesetter","bgMaterial","backgroundMesh","oldTarget","layerId","outputBounds","upperCaseArray","pathOrigin","textPathOverflow","targetLayer","tempLayer","prevDrawCount","updatePosition","addPickingData","glyphArray","smallCapsEnabled","textBounds","storeStyles","computeTextBuffer","TextBufferObject","pick","glyphBounds","isPath","typesettingParams","smallCapsArray","vertexBuffer","arrangeGlyphs","m_tempTransform","m_tempCorners","m_tempLineDirection","m_tempRunDirection","m_tempPixelSize","m_tempPixelBgSize","m_tempScale","m_tempSmallCaps","m_currentParams","isOnlyMeasured","lineStartIdx","glyphWrapIdx","wordWrapIdx","lineStartX","lineCurrX","glyphWrapX","wordWrapX","lineCount","isBidirectionalLine","wrapPointIdx","wrapPointX","lineAlignment","placeLine","isBidirectional","placeRun","glyphDataArray","isRTL","runStart","neutralIdx","weakRunStart","weakGlyph","glyphFont","glyphFontMetrics","isBoldEmulated","isItalicEmulated","isSmallCaps","smallCapsScale","glyphScale","emulationWeight","isMirrored","verticalOffset","glyphVertexPosition","horizontalOffset","addToBuffer","m_tempPathPosition","m_tempPathLength","m_tempPathOffset","getLength","pathWidth","defaultGlyphRotation","normalDisplacement","textPoint","tangent","getTangent","ContextualForm","CombinedForm","m_singleCharactersMap","m_combinedCharactersMap","m_neutralCharacters","output","currentCodePoint","charCodeAt","isArabicCharacter","prevIndex","isNeutral","prevCodePoint","prevMap","getCharacterMap","Initial","Medial","nextIndex","nextCodePoint","nextMap","Final","combinedMap","getCombinedCharacterMap","fromCharCode","Connected","Isolated","Line3","START_BOX_BUFFER_SIZE","MAX_BOX_BUFFER_SIZE","NUM_VERTICES_PER_ELEMENT","NUM_INDICES_PER_ELEMENT","NUM_POSITION_VALUES_PER_VERTEX","NUM_COLOR_VALUES_PER_VERTEX","NUM_UV_VALUES_PER_VERTEX","NUM_INDEX_VALUES_PER_VERTEX","BoxBufferMesh","startElementCount","maxElementCount","resizeBuffer","pickInfos","internalMesh","indexAttribute","glyphCount","positionAttributeCount","colorAttributeCount","uvAttributeCount","indexAttributeCount","pickInfoCount","pickInfo","canAddElements","clearGroups","clearAttributes","isEmpty","pickInfoIndex","isPixelTransparent","forceResize","xScreenPos","yScreenPos","pixelIsTransparent","screenToUvCoordinates","pixel","getPixelFromImage","newPositionArray","newColorArray","newUvArray","numIndexValues","newIndexArray","getPixelFromImageBitmap","xPos","yPos","pixelData","getPixelFromImageData","imgData","strd","Uint8ClampedArray","getPixel","pickedColor","close","isImageBitmap","pixelsData","resortedGroups","numNotRendered","m_lengths","PathParam","curves","m_point","curve","m_cache","lineCurve","curveLengths","getCurveLengths","diff","segmentLength","DEFAULT_FONT_CATALOG","DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS","DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS","DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS","DEFAULT_LABEL_DISTANCE_SCALE_MIN","DEFAULT_LABEL_DISTANCE_SCALE_MAX","MIN_GLYPH_COUNT","MAX_GLYPH_COUNT","numSecondChanceLabels","tmpCachedDuplicate","getCacheKey","hasFeatureId","isBetterPathDuplicate","newCandidate","_newDistance","oldCandidate","_oldDistance","isBetterPointDuplicate","_newCandidate","newDistance","_oldCandidate","oldDistance","findDuplicateByText","elementState","candidates","maxSqDistError","getDedupSqDistTolerance","entryCount","elementPosition","duplicate","dupIndex","dupDistSquared","isBetterDuplicate","candidateEntry","cachedElement","areDiffType","areBothVisible","distanceToSquared","m_referenceMap","m_textMap","textElementFilter","updateElements","TextElementGroupState","m_sortedGroupStates","replaceCallback","replaceElement","anyEviction","updateFading","traverseVisibleElements","cacheResult","findDuplicate","cachedDuplicate","replacement","cachedEntries","duplicateIndex","findDuplicateById","m_visited","m_textElementStates","TextElementState","visibleElementsCallback","m_textRenderState","m_iconRenderStates","renderState","m_viewDistance","predecessor","RenderState","_point","FadingState","DEFAULT_FADE_TIME","m_state","Undefined","FadingIn","FadingOut","FadedIn","FadedOut","fadingTime","Count","GroupedPriorityList","DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL","DEFAULT_STATIC_MSAA_SAMPLING_LEVEL","Level_4","antialiasSettings","msaaEnabled","strength","threshold","thickness","ghostExtrudedPolygons","m_width","m_height","m_renderPass","RenderPass","m_target1","m_target2","m_sepiaPass","ShaderPass","m_vignettePass","m_readBuffer","m_msaaPass","m_dynamicMsaaSamplingLevel","dynamicMsaaSamplingLevel","m_staticMsaaSamplingLevel","staticMsaaSamplingLevel","m_lowResPass","LowResRenderPass","isStaticFrame","usePostEffects","activeTarget","clearDepth","m_outlineEffect","OutlineEffect","nextEffectEnabled","m_bloomPass","BloomPass","m_savedWidth","m_savedHeight","vertexShaderChunk","vertexShaderChunk2","m_defaultThickness","m_defaultColor","m_defaultAlpha","m_defaultKeepAlive","m_ghostExtrudedPolygons","m_removeThresholdCount","m_originalMaterials","m_originalOnBeforeRenders","m_shaderIDs","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","m_uniformsChunk","outlineThickness","outlineAlpha","domElement","shadowMap","ghost","depth","stencil","updateStyle","setViewport","setScissor","setScissorTest","renderTarget","currentAutoClear","renderOutline","currentSceneAutoUpdate","autoUpdate","currentSceneBackground","currentShadowMapEnabled","setOutlineMaterial","restoreOriginalMaterial","cleanupCache","originalMaterial","shaderID","originalUniforms","originalVertexShader","ShaderLib","isRawShaderMaterial","createInvisibleMaterial","isShaderMaterial","DECLARE_TRANSFORMED","BackSide","skinning","morphTargets","morphNormals","used","keepAlive","getOutlineMaterialFromCache","updateOutlineMaterial","getOutlineMaterial","outlineParameters","BlurDirectionX","BlurDirectionY","resolution","m_renderTargetsHorizontal","m_renderTargetsVertical","m_nMips","m_separableBlurMaterials","m_basic","m_bloomTintColors","pars","resx","resy","m_renderTargetBright","renderTargetHorizonal","renderTargetVertical","m_highPassUniforms","m_materialHighPassFilter","kernelSizeArray","getSeperableBlurMaterial","m_compositeMaterial","getCompositeMaterial","m_copyUniforms","m_materialCopy","rt","inputRenderTarget","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","nMips","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomTintColors","bloomRadius","tmpVectors3","tmpVector4","TileKeyEntry","longitudeOffset","m_extendedFrustumCulling","m_frustum","Frustum","m_viewProjectionMatrix","m_rootTileKeys","m_tileKeyEntries","m_mapTileCuller","MapTileCuller","projectionMatrixOverride","setFromMatrix","computeRequiredInitialRootTileKeys","viewportHeight","targetTileArea","tileBounds","Box3","uniqueZoomLevels","useElevationRangeSource","workList","shouldSubdivide","tileKeyAndOffset","getElevationRange","calculationStatus","FinalPrecise","computeTileAreaAndDistance","subTileEntry","frustumIntersectsTileBox","intersectsBox","getCenter","projectedPoint","rootTileKey","worldGeoPoint","totalAngleRad","worldLengthHorizontal","worldLeftPoint","worldLeftGeoPoint","offsetRange","SQRT2","m_globalFrustumMin","m_globalFrustumMax","m_frustumCorners","frustumCorners","getFrustumCorners","frustumCorner","globalFrustumMin","globalFrustumMax","invProjMatrix","projectionMatrixInverse","cornerIndex","addPoint","overlayObject","overlayPosition","worldCoords","geoCoords","overlayTextElement","TEXT_OVERLAY_SPREAD_FRAME_COUNT","firstObject","Terrain","allTextElementsOverlaid","textElementsPerFrame","textElementsCount","DefaultPhases","Border","DefaultBasicGeometryKinds","m_maxUpdatedTilePerFrame","m_loadPhaseDefinitions","m_basicGeometryKinds","PhasedTileGeometryLoader","updateSomeTiles","updateAllTilesTogether","checkTilesFinished","phasedGeometryLoader","numTilesUpdated","lowestPhase","currentPhase","nextPhase","updateTilesIfNeeded","toPhase","updateToPhase","m_geometryKindsLoaded","m_currentPhaseIndex","didUpdate","numberOfPhases","doFullUpdate","loadPhaseDefinitions","currentPhaseDefinition","createKind","kindToCreate","techniqueKind","indexBuffer","vertexStride","contourEdges","nSegments","vFootprint0","vRoof0","vFootprint1","vRoof1","currEdgeStart","currEdgeGoal","prevEdgeStart","prevEdgeGoal","polygonContour","polygonContourEdges","isExtruded","addFootprintEdges","wallEdgeSlope","prevEdgeIdx","v0x","v0y","v1x","v1y","vFoot0","ThreeBufferUtils","getBufferElementType","fromThreeBufferAttribute","bufferAttribute","fromThreeInterleavedBufferAttribute","fromThreeBufferGeometry","attributeNames","isOnScreen","ndc","projectVector","tempV3","ndcToScreen","tempV2","m_sky","m_projectionType","m_skyTexture","SkyGradientTexture","SkyCubemapTexture","isSameSkyType","DEFAULT_TEXTURE_SIZE","DEFAULT_MONOMIAL_POWER","cameraDir","cameraRight","cameraUp","topColor","bottomColor","m_faceCount","m_faces","fillTextureData","monomialPower","unpackAlignment","m_farClipPlaneDividedVertically","m_groundPlane","m_bottomMidFarPoint","m_topMidFarPoint","m_horizonPosition","m_farClipPlaneCorners","setHorizonPosition","updateTexturePosition","faceIdx","upDir","unproject","intersectLine","skyRatio","DEFAULT_FONT_CATALOG_NAME","m_catalogsLoading","defaultFontCatalogUrl","catalogCallback","fontCatalogConfig","fontCatalogPromise","m_renderedTilesChangeCheck","m_minGlyphCount","m_maxGlyphCount","TextCanvas","CopyrightElementHandler","m_defaults","m_mapViews","mergedCopyrightInfo","staticInfo","m_element","display","defaults","deduped","innerHTML","htmlElement","UrlCopyrightProvider","CopyrightCoverageProvider","m_fetchURL","m_baseScheme","m_cachedCopyrightResponse","DeferredPromise","executor","doExec","resolveFunc","rejectFunc","execInnerPromise","fetchFunction","maxRetries","activeDownloadCount","downloadQueue","activeDownloads","defaultInstance","retryCount","status","waitFor","retryTimeout","fetchRepeatedly","milliseconds","downloadAs","download","arrayBuffer","maxParallelDownloads","deferred","doDownload","onDownloadDone","execDeferredDownload","future","converter","cacheKey","pendingFetch","newFetch","ImageItem","m_wantsPoints","m_wantsLines","m_wantsAreas","m_wantsObject3D","wantsAll","wantsPoints","wantsLines","wantsAreas","wantsObject3D","visitObject","wantsFeature","visitMesh","BufferedGeometryLineAccessor","BufferedGeometryObject3dAccessor","IndexedBufferedGeometryLineAccessor","meshObject","geometryAccessor","getBufferGeometry","getIndexedGeometryAccessor","getGeometryAccessor","getCount","setRange","visitPoint","visitLine","visitArea","visitObject3D","tmpNormal","tmpTangent0","tmpTangent1","tmpBitangent","SEGMENT_OFFSET","LINE_VERTEX_ATTRIBUTES","NORMAL_UV_VERTEX_ATTRIBUTES","LINE_VERTEX_ATTRIBUTES_NUV","HP_LINE_VERTEX_ATTRIBUTES","HP_LINE_VERTEX_ATTRIBUTES_NUV","LineGeometry","getVertexDescriptor","hasNormalsAndUvs","highPrecision","createLineGeometry","polyline","uvs","colors","pointCount","segments","tangents","hasSegmentOffsets","hasTexCoords","sqrLength","lineCoverage","lineLength","isClosed","tmpVertices","addVertexPair","T1","T2","segment","extrusionCoord","highComp","lowComp","setComponent","computeBitangent","createSimpleLineGeometry","LineGroup","isSimple","vertexDescriptor","descr","createGeometry","isHighPrecisionPointsMaterial","dimensionality","setDimensionality","m_processLayersDefault","m_processPointsDefault","m_processLinesDefault","m_processPolygonsDefault","m_layersToProcess","m_layersToIgnore","m_pointsToProcess","m_ignoredPoints","m_linesToProcess","m_linesToIgnore","m_polygonsToProcess","m_polygonsToIgnore","m_kindsToProcess","m_kindsToIgnore","processLayersDefault","processPointsDefault","processLinesDefault","processPolygonsDefault","addItem","addItems","layersToProcess","layersToIgnore","pointsToProcess","pointsToIgnore","linesToProcess","linesToIgnore","polygonsToProcess","polygonsToIgnore","kindsToProcess","kindsToIgnore","items","layerName","matchLayer","geometryTypes","geomType","classes","featureClass","matchClass","featureAttribute","geomTypes","featureClasses","OmvGenericFeatureFilter","description","layerItems","layerItem","itemsToProcess","itemsToIgnore","defaultResult","filters","hasKindFilter","wantsLayer","wantsPointFeature","wantsLineFeature","wantsPolygonFeature","wantsKind","OmvGenericFeatureModifier","doProcessFeature","featureClassThing","matchItems","matchAttribute","getDataProvider","OmvRestClient","missingOmvDecoderServiceInfoEmitted","TileDataSource","tileFactory","TileFactory","concurrentDecoderServiceName","concurrentDecoderScriptUrl","copyrightProvider","m_decoderOptions","showMissingTechniques","filterDescription","filterDescr","gatherFeatureAttributes","createTileInfo","gatherRoadSegments","featureModifierId","skipShortLabels","enableElevationOverlay","configureDecoder","configure","m_modelConstructor","maxLevelTileLoaderCache","m_tileFactory","m_isReady","m_decoder","getTileDecoder","concurrentDecoderWorkerCount","m_tileLoaderCache","getCacheCount","newTileLoader","getCopyrights","TileInfoLoader","loaderState","debugMaterial","linewidth","NeverDepth","debugCircleMaterial","debugBlackCircleMaterial","OmvDebugLabelsTile","addLabelDebugInfo","debugTextPaths","debugTextPathsFull","tileGeometryCreator","colorMap","indexFilter","lineGeometry","lineIndices","redPointGeometry","redPointIndices","redPointPositions","blackPointGeometry","blackPointIndices","blackPointPositions","pointScale","pathIndex","isRedPoint","pointSize","labelElement","addUserTextElement","lineMesh","redPointMesh","blackPointMesh","appId","appCode"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 118);\n","module.exports = THREE;","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./index-common\";\nexport * from \"./lib/UrlPlatformUtils.web\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/ColorUtils\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/Techniques\";\nexport * from \"./lib/TechniqueParams\";\nexport * from \"./lib/Theme\";\nexport * from \"./lib/PostEffects\";\nexport * from \"./lib/InterpolatedProperty\";\nexport * from \"./lib/InterpolatedPropertyDefs\";\nexport * from \"./lib/WorkerServiceProtocol\";\nexport * from \"./lib/WorkerTilerProtocol\";\nexport * from \"./lib/WorkerDecoderProtocol\";\nexport * from \"./lib/ITileDecoder\";\nexport * from \"./lib/ITiler\";\nexport * from \"./lib/DecodedTile\";\nexport * from \"./lib/TileInfo\";\nexport * from \"./lib/GeoJsonDataType\";\nexport * from \"./lib/ThemeVisitor\";\nexport * from \"./lib/StringEncodedNumeral\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/coordinates/GeoBox\";\nexport * from \"./lib/coordinates/GeoCoordinatesLike\";\nexport * from \"./lib/coordinates/GeoCoordinates\";\nexport * from \"./lib/coordinates/GeoPointLike\";\nexport * from \"./lib/coordinates/LatLngLike\";\nexport * from \"./lib/projection/EarthConstants\";\nexport * from \"./lib/projection/EquirectangularProjection\";\nexport * from \"./lib/projection/IdentityProjection\";\nexport * from \"./lib/projection/Projection\";\nexport * from \"./lib/projection/MercatorProjection\";\nexport * from \"./lib/projection/TransverseMercatorProjection\";\nexport * from \"./lib/projection/SphereProjection\";\nexport * from \"./lib/tiling/FlatTileBoundingBoxGenerator\";\nexport * from \"./lib/tiling/HalfQuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTree\";\nexport * from \"./lib/tiling/SubTiles\";\nexport * from \"./lib/tiling/SubdivisionScheme\";\nexport * from \"./lib/tiling/TileKey\";\nexport * from \"./lib/tiling/TileKeyUtils\";\nexport * from \"./lib/tiling/TileTreeTraverse\";\nexport * from \"./lib/tiling/TilingScheme\";\nexport * from \"./lib/tiling/HereTilingScheme\";\nexport * from \"./lib/tiling/WebMercatorTilingScheme\";\nexport * from \"./lib/tiling/MercatorTilingScheme\";\nexport * from \"./lib/tiling/PolarTilingScheme\";\nexport * from \"./lib/math/Vector3Like\";\nexport * from \"./lib/math/Box3Like\";\nexport * from \"./lib/math/OrientedBox3Like\";\nexport * from \"./lib/math/MathUtils\";\nexport * from \"./lib/math/TransformLike\";\nexport * from \"./lib/math/OrientedBox3\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, Value } from \"./Env\";\nimport { ExprEvaluator, ExprEvaluatorContext, OperatorDescriptor } from \"./ExprEvaluator\";\nimport { ExprInstantiator, InstantiationContext } from \"./ExprInstantiator\";\nimport { ExprParser } from \"./ExprParser\";\nimport { ExprPool } from \"./ExprPool\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedProperty\";\nimport { interpolatedPropertyDefinitionToJsonExpr } from \"./InterpolatedPropertyDefs\";\nimport { Definitions, isBoxedDefinition, isLiteralDefinition } from \"./Theme\";\n\nexport * from \"./Env\";\n\nconst exprEvaluator = new ExprEvaluator();\n\nconst exprInstantiator = new ExprInstantiator();\n\nexport interface ExprVisitor<Result, Context> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: Context): Result;\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: Context): Result;\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: Context): Result;\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: Context): Result;\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: Context): Result;\n    visitVarExpr(expr: VarExpr, context: Context): Result;\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: Context): Result;\n    visitContainsExpr(expr: ContainsExpr, context: Context): Result;\n    visitCallExpr(expr: CallExpr, context: Context): Result;\n    visitMatchExpr(expr: MatchExpr, context: Context): Result;\n    visitCaseExpr(expr: CaseExpr, context: Context): Result;\n}\n\n/**\n * The dependencies of an [[Expr]].\n */\nexport class ExprDependencies {\n    /**\n     * The properties needed to evaluate the [[Expr]].\n     */\n    readonly properties = new Set<string>();\n\n    /**\n     * `true` if the [[Expr]] depends on zoom level. Default is `false`.\n     */\n    zoom?: boolean;\n}\n\nclass ComputeExprDependencies implements ExprVisitor<void, ExprDependencies> {\n    static instance = new ComputeExprDependencies();\n\n    /**\n     * Gets the dependencies of an [[Expr]].\n     *\n     * @param expr The [[Expr]] to process.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param dependencies The output [[Set]] of dependency names.\n     */\n    static of(expr: Expr) {\n        const dependencies = new ExprDependencies();\n        expr.accept(this.instance, dependencies);\n        return dependencies;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: ExprDependencies): void {\n        expr.value.accept(this, context);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprDependencies): void {\n        if (expr.op === \"zoom\" && expr.args.length === 0) {\n            context.zoom = true;\n        } else {\n            expr.args.forEach(childExpr => childExpr.accept(this, context));\n        }\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: ExprDependencies): void {\n        expr.value.accept(this, context);\n        expr.branches.forEach(([_, branch]) => branch.accept(this, context));\n        expr.fallback.accept(this, context);\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: ExprDependencies): void {\n        expr.branches.forEach(([condition, branch]) => {\n            condition.accept(this, context);\n            branch.accept(this, context);\n        });\n        expr.fallback.accept(this, context);\n    }\n}\n\n/**\n * A type represeting JSON values.\n */\nexport type JsonValue = null | boolean | number | string | JsonObject | JsonArray;\n\n/**\n * A type representing JSON arrays.\n */\nexport interface JsonArray extends Array<JsonValue> {}\n\n/**\n * A type representing JSON objects.\n */\nexport interface JsonObject {\n    [name: string]: JsonValue;\n}\n\n/**\n * The JSON representation of an [[Expr]] object.\n */\nexport type JsonExpr = JsonArray;\n\nexport function isJsonExpr(v: any): v is JsonExpr {\n    return Array.isArray(v) && v.length > 0 && typeof v[0] === \"string\";\n}\n\n/**\n * Internal state needed by [[Expr.fromJSON]] to resolve `\"ref\"` expressions.\n * @hidden\n */\ninterface ReferenceResolverState {\n    definitions: Definitions;\n    lockedNames: Set<string>;\n    cache: Map<string, Expr>;\n}\n\n/**\n * The evaluation scope of an [[Expr]].\n */\nexport enum ExprScope {\n    /**\n     * The scope of an [[Expr]] used as value of an attribute.\n     */\n    Value,\n\n    /**\n     * The scope of an [[Expr]] used in a [[Technique]] `when` condition.\n     */\n    Condition,\n\n    /**\n     * The scope of an [[Expr]] used as dynamic property attribute value.\n     */\n    Dynamic\n}\n\n/**\n * Abstract class defining a shape of a [[Theme]]'s expression\n */\nexport abstract class Expr {\n    /**\n     * Tests of given value is an [[Expr]].\n     *\n     * @param value The object to test.\n     */\n    static isExpr(value: any): value is Expr {\n        return value instanceof Expr;\n    }\n\n    /**\n     * Creates an expression from the given `code`.\n     *\n     * @param code The code to parse.\n     * @returns The parsed [[Expr]].\n     * @deprecated\n     */\n    static parse(code: string): Expr | never {\n        const parser = new ExprParser(code);\n        const expr = parser.parse();\n        return expr;\n    }\n\n    /**\n     * Parse expression in JSON form.\n     *\n     * If `definitions` are defined, then references (`['ref', name]`) are resolved.\n     *\n     * Pass `definitionExprCache` to reuse `Expr` instances created from definitions across\n     * many `fromJSON` calls.\n     *\n     * @param node expression in JSON format to parse\n     * @param definitions optional set of definitions needed definition resolved by `ref` operator\n     * @param definitionExprCache optional cache of `Expr` instances derived from `definitions`\n     */\n    static fromJSON(\n        node: JsonValue,\n        definitions?: Definitions,\n        definitionExprCache?: Map<string, Expr>\n    ) {\n        const referenceResolverState: ReferenceResolverState | undefined =\n            definitions !== undefined\n                ? {\n                      definitions,\n                      lockedNames: new Set(),\n                      cache: definitionExprCache || new Map<string, Expr>()\n                  }\n                : undefined;\n\n        return parseNode(node, referenceResolverState);\n    }\n\n    private m_isDynamic?: boolean;\n\n    /**\n     * Evaluate an expression returning a [[Value]] object.\n     *\n     * @param env The [[Env]] used to lookup symbols.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param cache A cache of previously computed results.\n     */\n    evaluate(\n        env: Env,\n        scope: ExprScope = ExprScope.Value,\n        cache?: Map<Expr, Value>\n    ): Value | never {\n        return this.accept(\n            exprEvaluator,\n            new ExprEvaluatorContext(exprEvaluator, env, scope, cache)\n        );\n    }\n\n    /**\n     * Instantiates this [[Expr]] by resolving references to the `get` and\n     * `has` operator using the given instantiation context.\n     *\n     * @param context The [[InstantationContext]] used to resolve names.\n     */\n    instantiate(context: InstantiationContext): Expr {\n        return this.accept(exprInstantiator, context);\n    }\n\n    /**\n     * Gets the dependencies of this [[Expr]].\n     */\n    dependencies(): ExprDependencies {\n        return ComputeExprDependencies.of(this);\n    }\n\n    /**\n     * Create a unique object that is structurally equivalent to this [[Expr]].\n     *\n     * @param pool The [[ExprPool]] used to create a unique\n     * equivalent object of this [[Expr]].\n     */\n    intern(pool: ExprPool): Expr {\n        return pool.add(this);\n    }\n\n    toJSON(): JsonValue {\n        return new ExprSerializer().serialize(this);\n    }\n\n    /**\n     * Returns `true` if a dynamic execution context is required to evaluate this [[Expr]].\n     */\n    isDynamic(): boolean {\n        if (this.m_isDynamic === undefined) {\n            this.m_isDynamic = this.exprIsDynamic();\n        }\n        return this.m_isDynamic;\n    }\n\n    abstract accept<Result, Context>(\n        visitor: ExprVisitor<Result, Context>,\n        context: Context\n    ): Result;\n\n    /**\n     * Update the dynamic state of this [[Expr]].\n     *\n     * [[exprIsDynamic]] must never be called directly.\n     *\n     * @hidden\n     */\n    protected abstract exprIsDynamic(): boolean;\n}\n\n/**\n * @hidden\n */\nexport type RelationalOp = \"<\" | \">\" | \"<=\" | \">=\";\n\n/**\n * @hidden\n */\nexport type EqualityOp = \"~=\" | \"^=\" | \"$=\" | \"==\" | \"!=\";\n\n/**\n * @hidden\n */\nexport type BinaryOp = RelationalOp | EqualityOp;\n\n/**\n * Var expression.\n * @hidden\n */\nexport class VarExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitVarExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\nexport abstract class LiteralExpr extends Expr {\n    /**\n     * Create a [[LiteralExpr]] from the given value.\n     *\n     * @param value A constant value.\n     */\n    static fromValue(value: Value): Expr {\n        switch (typeof value) {\n            case \"boolean\":\n                return new BooleanLiteralExpr(value);\n            case \"number\":\n                return new NumberLiteralExpr(value);\n            case \"string\":\n                return new StringLiteralExpr(value);\n            case \"object\":\n                return value === null ? NullLiteralExpr.instance : new ObjectLiteralExpr(value);\n            default:\n                throw new Error(`failed to create a literal from '${value}'`);\n        } // switch\n    }\n\n    abstract get value(): Value;\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Null literal expression.\n * @hidden\n */\nexport class NullLiteralExpr extends LiteralExpr {\n    static instance = new NullLiteralExpr();\n    /** @override */\n    readonly value = null;\n\n    protected constructor() {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNullLiteralExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Boolean literal expression.\n * @hidden\n */\nexport class BooleanLiteralExpr extends LiteralExpr {\n    constructor(readonly value: boolean) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitBooleanLiteralExpr(this, context);\n    }\n}\n\n/**\n * Number literal expression.\n * @hidden\n */\nexport class NumberLiteralExpr extends LiteralExpr {\n    constructor(readonly value: number) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNumberLiteralExpr(this, context);\n    }\n}\n\n/**\n * String literal expression.\n * @hidden\n */\nexport class StringLiteralExpr extends LiteralExpr {\n    constructor(readonly value: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitStringLiteralExpr(this, context);\n    }\n}\n\n/**\n * Object literal expression.\n * @hidden\n */\nexport class ObjectLiteralExpr extends LiteralExpr {\n    constructor(readonly value: object) {\n        super();\n    }\n\n    get isArrayLiteral() {\n        return Array.isArray(this.value);\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitObjectLiteralExpr(this, context);\n    }\n}\n\n/**\n * A has expression with an attribute, for example `has(ref)`.\n * @hidden\n */\nexport class HasAttributeExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitHasAttributeExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * A contains expression.\n * @hidden\n */\nexport class ContainsExpr extends Expr {\n    static isValidElementsArray(elements: JsonValue): elements is Array<number | string> {\n        if (!Array.isArray(elements) || elements.length === 0) {\n            return false;\n        }\n\n        const elementTy = typeof elements[0];\n\n        if (elementTy === \"number\" || elementTy === \"string\") {\n            return elements.every(element => typeof element === elementTy);\n        }\n\n        return false;\n    }\n\n    constructor(readonly value: Expr, readonly elements: Array<number | string>) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitContainsExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return this.value.isDynamic();\n    }\n}\n\n/**\n * @hidden\n */\nexport class CallExpr extends Expr {\n    descriptor?: OperatorDescriptor;\n\n    constructor(readonly op: string, readonly args: Expr[]) {\n        super();\n    }\n\n    /**\n     * Returns the child nodes of this [[Expr]].\n     * @deprecated\n     */\n    get children() {\n        return this.args;\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCallExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        const descriptor = this.descriptor || ExprEvaluator.getOperator(this.op);\n\n        if (descriptor && descriptor.isDynamicOperator && descriptor.isDynamicOperator(this)) {\n            return true;\n        }\n\n        return this.args.some(e => e.isDynamic());\n    }\n}\n\n/**\n * @hidden\n */\nexport type MatchLabel = number | string | number[] | string[];\n\n/**\n * @hidden\n */\nexport class MatchExpr extends Expr {\n    /**\n     * Tests if the given JSON node is a valid label for the `\"match\"` operator.\n     *\n     * @param node A JSON value.\n     */\n    static isValidMatchLabel(node: JsonValue): node is MatchLabel {\n        switch (typeof node) {\n            case \"number\":\n            case \"string\":\n                return true;\n            case \"object\":\n                if (!Array.isArray(node) || node.length === 0) {\n                    return false;\n                }\n                const elementTy = typeof node[0];\n                if (elementTy === \"number\" || elementTy === \"string\") {\n                    return node.every(t => typeof t === elementTy);\n                }\n                return false;\n            default:\n                return false;\n        } // switch\n    }\n\n    constructor(\n        readonly value: Expr,\n        readonly branches: Array<[MatchLabel, Expr]>,\n        readonly fallback: Expr\n    ) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitMatchExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.value.isDynamic() ||\n            this.branches.some(([_, branch]) => branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nexport class CaseExpr extends Expr {\n    constructor(readonly branches: Array<[Expr, Expr]>, readonly fallback: Expr) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCaseExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.branches.some(([cond, branch]) => cond.isDynamic() || branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nclass ExprSerializer implements ExprVisitor<JsonValue, void> {\n    serialize(expr: Expr): JsonValue {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): JsonValue {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): JsonValue {\n        return [\"literal\", expr.value as JsonObject];\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): JsonValue {\n        return [\"get\", expr.name];\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): JsonValue {\n        return [\"has\", expr.name];\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: void): JsonValue {\n        return [\"in\", this.serialize(expr.value), expr.elements];\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): JsonValue {\n        return [expr.op, ...expr.args.map(childExpr => this.serialize(childExpr))];\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [label, body] of expr.branches) {\n            branches.push(label, this.serialize(body));\n        }\n        return [\"match\", this.serialize(expr.value), ...branches, this.serialize(expr.fallback)];\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [condition, body] of expr.branches) {\n            branches.push(this.serialize(condition), this.serialize(body));\n        }\n        return [\"case\", ...branches, this.serialize(expr.fallback)];\n    }\n}\n\nfunction parseNode(\n    node: JsonValue,\n    referenceResolverState: ReferenceResolverState | undefined\n): Expr {\n    if (Array.isArray(node)) {\n        return parseCall(node, referenceResolverState);\n    } else if (node === null) {\n        return NullLiteralExpr.instance;\n    } else if (typeof node === \"boolean\") {\n        return new BooleanLiteralExpr(node);\n    } else if (typeof node === \"number\") {\n        return new NumberLiteralExpr(node);\n    } else if (typeof node === \"string\") {\n        return new StringLiteralExpr(node);\n    }\n    throw new Error(`failed to create expression from: ${JSON.stringify(node)}`);\n}\n\nfunction parseCall(node: JsonArray, referenceResolverState?: ReferenceResolverState): Expr {\n    const op = node[0];\n\n    if (typeof op !== \"string\") {\n        throw new Error(\"expected a builtin function name\");\n    }\n\n    switch (op) {\n        case \"!has\":\n        case \"!in\":\n            return new CallExpr(\"!\", [parseCall([op.slice(1), ...node.slice(1)])]);\n\n        case \"ref\":\n            return resolveReference(node, referenceResolverState);\n\n        case \"get\":\n            return parseGetExpr(node, referenceResolverState);\n\n        case \"has\":\n            return parseHasExpr(node, referenceResolverState);\n\n        case \"in\":\n            return parseInExpr(node, referenceResolverState);\n\n        case \"literal\":\n            return parseLiteralExpr(node);\n\n        case \"match\":\n            return parseMatchExpr(node, referenceResolverState);\n\n        case \"case\":\n            return parseCaseExpr(node, referenceResolverState);\n\n        default:\n            return makeCallExpr(op, node, referenceResolverState);\n    } // switch\n}\n\nfunction parseGetExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"get\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new VarExpr(name);\n}\n\nfunction parseHasExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"has\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new HasAttributeExpr(name);\n}\n\nfunction parseInExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    const elements = node[2];\n    if (!ContainsExpr.isValidElementsArray(elements)) {\n        // tslint:disable-next-line: max-line-length\n        throw new Error(`'in' expects an array of number or string literals`);\n    }\n    return new ContainsExpr(parseNode(node[1], referenceResolverState), elements);\n}\n\nfunction parseLiteralExpr(node: JsonArray) {\n    const obj = node[1];\n    if (obj === null || typeof obj !== \"object\") {\n        throw new Error(\"expected an object or array literal\");\n    }\n    return new ObjectLiteralExpr(obj);\n}\n\nfunction parseMatchExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 4) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (!(node.length % 2)) {\n        throw new Error(\"fallback is missing in 'match' expression\");\n    }\n    const value = parseNode(node[1], referenceResolverState);\n    const conditions: Array<[MatchLabel, Expr]> = [];\n    for (let i = 2; i < node.length - 1; i += 2) {\n        const label = node[i];\n        if (!MatchExpr.isValidMatchLabel(label)) {\n            throw new Error(`'${JSON.stringify(label)}' is not a valid label for 'match'`);\n        }\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        conditions.push([label, expr]);\n    }\n    const fallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new MatchExpr(value, conditions, fallback);\n}\n\nfunction parseCaseExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 3) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (node.length % 2) {\n        throw new Error(\"fallback is missing in 'case' expression\");\n    }\n    const branches: Array<[Expr, Expr]> = [];\n    for (let i = 1; i < node.length - 1; i += 2) {\n        const condition = parseNode(node[i], referenceResolverState);\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        branches.push([condition, expr]);\n    }\n    const caseFallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new CaseExpr(branches, caseFallback);\n}\n\nfunction makeCallExpr(\n    op: string,\n    node: any[],\n    referenceResolverState?: ReferenceResolverState\n): Expr {\n    return new CallExpr(\n        op,\n        node.slice(1).map(childExpr => parseNode(childExpr, referenceResolverState))\n    );\n}\n\nfunction resolveReference(node: JsonArray, referenceResolverState?: ReferenceResolverState) {\n    if (typeof node[1] !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    if (referenceResolverState === undefined) {\n        throw new Error(`ref used with no definitions`);\n    }\n    const name = node[1] as string;\n\n    if (referenceResolverState.lockedNames.has(name)) {\n        throw new Error(`circular referene to '${name}'`);\n    }\n\n    if (!(name in referenceResolverState.definitions)) {\n        throw new Error(`definition '${name}' not found`);\n    }\n\n    const cachedEntry = referenceResolverState.cache.get(name);\n    if (cachedEntry !== undefined) {\n        return cachedEntry;\n    }\n    let definitionEntry = referenceResolverState.definitions[name] as any;\n    let result: Expr;\n    if (isLiteralDefinition(definitionEntry)) {\n        return Expr.fromJSON(definitionEntry);\n    } else if (isBoxedDefinition(definitionEntry)) {\n        if (isInterpolatedPropertyDefinition(definitionEntry.value)) {\n            // found a reference to an interpolation using\n            // the deprecated object-like syntax.\n            return Expr.fromJSON(interpolatedPropertyDefinitionToJsonExpr(definitionEntry.value));\n        } else if (isJsonExpr(definitionEntry.value)) {\n            definitionEntry = definitionEntry.value;\n        } else {\n            return Expr.fromJSON(definitionEntry.value);\n        }\n    }\n\n    if (isJsonExpr(definitionEntry)) {\n        referenceResolverState.lockedNames.add(name);\n        try {\n            result = parseNode(definitionEntry, referenceResolverState);\n        } finally {\n            referenceResolverState.lockedNames.delete(name);\n        }\n    } else {\n        throw new Error(`unsupported definition ${name}`);\n    }\n    referenceResolverState.cache.set(name, result);\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/CirclePointsMaterial\";\nexport * from \"./lib/CopyMaterial\";\nexport * from \"./lib/EdgeMaterial\";\nexport * from \"./lib/HighPrecisionLineMaterial\";\nexport * from \"./lib/HighPrecisionPointMaterial\";\nexport * from \"./lib/IconMaterial\";\nexport * from \"./lib/LuminosityHighPassShader\";\nexport * from \"./lib/MapMeshMaterialsDefs\";\nexport * from \"./lib/MapMeshMaterials\";\nexport * from \"./lib/MSAAMaterial\";\nexport * from \"./lib/SepiaShader\";\nexport * from \"./lib/SolidLineMaterial\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VignetteShader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/rendering/FontCatalog\";\nexport * from \"./lib/rendering/GlyphData\";\nexport * from \"./lib/rendering/TextStyle\";\nexport * from \"./lib/rendering/TextBufferObject\";\nexport * from \"./lib/TextCanvas\";\n\nexport * from \"./lib/utils/ContextualArabicConverter\";\nexport * from \"./lib/utils/MaterialUtils\";\nexport * from \"./lib/utils/TypesettingUtils\";\nexport * from \"./lib/utils/UnicodeUtils\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoCoordinatesLike, isGeoCoordinatesLike } from \"./GeoCoordinatesLike\";\nimport { GeoPointLike, isGeoPointLike } from \"./GeoPointLike\";\nimport { isLatLngLike, LatLngLike } from \"./LatLngLike\";\n\nimport * as THREE from \"three\";\n\n/**\n * Represents an object in different geo coordinate formats\n */\nexport type GeoCoordLike = GeoPointLike | GeoCoordinatesLike | LatLngLike;\n\n/**\n * `GeoCoordinates` is used to represent geo positions.\n */\nexport class GeoCoordinates implements GeoCoordinatesLike {\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    static fromDegrees(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in radians.\n     * @param longitude Longitude in radians.\n     * @param altitude Altitude in meters.\n     */\n    static fromRadians(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(\n            THREE.Math.radToDeg(latitude),\n            THREE.Math.radToDeg(longitude),\n            altitude\n        );\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[LatLngLike]] literal.\n     * ```typescript\n     * const center = { lat: 53.3, lng: 13.4 };\n     * mapView.geoCenter = GeoCoordinates.fromLatLng(center);\n     * ```\n     * @param latLng A [[LatLngLike]] object literal.\n     */\n    static fromLatLng(latLng: LatLngLike) {\n        return new GeoCoordinates(latLng.lat, latLng.lng);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[GeoPointLike]] tuple.\n     *\n     * Example:\n     * ```typescript\n     * mapView.geoCenter = GeoCoordinates.fromGeoPoint([longitude, latitude]);\n     *\n     * let geoCoords: number[] = ...;\n     *\n     * if (isGeoPointLike(geoCoords)) {\n     *     const p = GeoCoordinates.fromGeoPoint(geoCoords);\n     * }\n     * ```\n     * @param geoPoint An [[Array]] of at least two elements following the order\n     * longitude, latitude, altitude.\n     */\n    static fromGeoPoint(geoPoint: GeoPointLike): GeoCoordinates {\n        return new GeoCoordinates(geoPoint[1], geoPoint[0], geoPoint[2]);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from different types of geo coordinate objects.\n     *\n     * Example:\n     * ```typescript\n     * const fromGeoPointLike = GeoCoordinates.fromObject([longitude, latitude]);\n     * const fromGeoCoordinateLike = GeoCoordinates.fromObject({ longitude, latitude });\n     * const fromGeoCoordinate = GeoCoordinates.fromObject(new GeoCoordinates(latitude, longitude));\n     * const fromLatLngLike = GeoCoordinates.fromObject({ lat: latitude , lng: longitude });\n     * ```\n     *\n     * @param geoPoint Either [[GeoPointLike]], [[GeoCoordinatesLike]]\n     * or [[LatLngLike]] object literal.\n     */\n    static fromObject(geoPoint: GeoCoordLike): GeoCoordinates {\n        if (isGeoPointLike(geoPoint)) {\n            return GeoCoordinates.fromGeoPoint(geoPoint);\n        } else if (isGeoCoordinatesLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(\n                geoPoint.latitude,\n                geoPoint.longitude,\n                geoPoint.altitude\n            );\n        } else if (isLatLngLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(geoPoint.lat, geoPoint.lng);\n        }\n\n        throw new Error(\"Invalid input coordinate format.\");\n    }\n\n    /**\n     * Creates a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    constructor(public latitude: number, public longitude: number, public altitude?: number) {}\n\n    /**\n     * Returns the latitude in radians.\n     */\n    get latitudeInRadians(): number {\n        return THREE.Math.degToRad(this.latitude);\n    }\n\n    /**\n     * Returns the longitude in radians.\n     */\n    get longitudeInRadians(): number {\n        return THREE.Math.degToRad(this.longitude);\n    }\n\n    /**\n     * Returns the latitude in degrees.\n     * @deprecated Use the [[latitude]] property instead.\n     */\n    get latitudeInDegrees(): number {\n        return this.latitude;\n    } // compat api\n\n    /**\n     * Returns the longitude in degrees.\n     * @deprecated Use the [[longitude]] property instead.\n     */\n    get longitudeInDegrees(): number {\n        return this.longitude;\n    } // compat api\n\n    /**\n     * The latitude in the degrees.\n     */\n    get lat() {\n        return this.latitude;\n    }\n\n    /**\n     * The longitude in the degrees.\n     */\n    get lng() {\n        return this.longitude;\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is valid; returns `false` otherwise.\n     */\n    isValid(): boolean {\n        return !isNaN(this.latitude) && !isNaN(this.longitude);\n    }\n\n    /**\n     * Returns the normalized `GeoCoordinates`.\n     */\n    normalized(): GeoCoordinates {\n        let { latitude, longitude } = this;\n\n        if (isNaN(latitude) || isNaN(longitude)) {\n            return this;\n        }\n\n        if (latitude > 90) {\n            let wrapped = (latitude + 90) % 360;\n            if (wrapped >= 180) {\n                longitude += 180;\n                wrapped = 360 - wrapped;\n            }\n\n            latitude = wrapped - 90;\n        }\n\n        if (latitude < -90) {\n            let wrapped = (latitude - 90) % 360;\n            if (wrapped <= -180) {\n                longitude += 180;\n                wrapped = -360 - wrapped;\n            }\n\n            latitude = wrapped + 90;\n        }\n\n        if (longitude < -180 || longitude > 180) {\n            const sign = Math.sign(longitude);\n            longitude = (((longitude % 360) + 180 * sign) % 360) - 180 * sign;\n        }\n\n        if (latitude === this.latitude && longitude === this.longitude) {\n            return this;\n        }\n\n        return new GeoCoordinates(latitude, longitude, this.altitude);\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is equal to the other.\n     *\n     * @param other GeoCoordinatesLike to compare to.\n     */\n    equals(other: GeoCoordinatesLike): boolean {\n        return (\n            this.latitude === other.latitude &&\n            this.longitude === other.longitude &&\n            this.altitude === other.altitude\n        );\n    }\n\n    /**\n     * Copy values from the other.\n     *\n     * @param other GeoCoordinatesLike to copy all values from.\n     */\n    copy(other: GeoCoordinatesLike): GeoCoordinates {\n        this.latitude = other.latitude;\n        this.longitude = other.longitude;\n        this.altitude = other.altitude;\n        return this;\n    }\n\n    /**\n     * Clones this `GeoCoordinates`.\n     * @deprecated\n     */\n    clone(): GeoCoordinates {\n        return new GeoCoordinates(this.latitude, this.longitude, this.altitude);\n    }\n\n    /**\n     * Returns this [[GeoCoordinates]] as [[LatLngLike]] literal.\n     */\n    toLatLng(): LatLngLike {\n        return { lat: this.latitude, lng: this.longitude };\n    }\n\n    /**\n     * Converts this [[GeoCoordinates]] to a [[GeoPointLike]].\n     */\n    toGeoPoint(): GeoPointLike {\n        return this.altitude !== undefined\n            ? [this.longitude, this.latitude, this.altitude]\n            : [this.longitude, this.latitude];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Box3Like } from \"./Box3Like\";\nimport { Vector3Like } from \"./Vector3Like\";\n\nimport * as THREE from \"three\";\n\nexport namespace MathUtils {\n    /**\n     * Creates a new empty bounding box.\n     * @deprecated\n     */\n    export function newEmptyBox3(): Box3Like {\n        return {\n            min: { x: Infinity, y: Infinity, z: Infinity },\n            max: { x: -Infinity, y: -Infinity, z: -Infinity }\n        };\n    }\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     */\n    export function newVector3(x: number, y: number, z: number): Vector3Like;\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The resulting [Vector3Like] instance.\n     */\n    export function newVector3<Vector extends Vector3Like>(\n        x: number,\n        y: number,\n        z: number,\n        v: Vector\n    ): Vector;\n\n    /**\n     * Set the components of the given [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The [Vector3Like]\n     */\n    export function newVector3(x: number, y: number, z: number, v?: Vector3Like): Vector3Like {\n        if (v === undefined) {\n            return { x, y, z };\n        }\n        v.x = x;\n        v.y = y;\n        v.z = z;\n        return v;\n    }\n\n    /**\n     * Converts an angle measured in degrees to an equivalent value in radians.\n     *\n     * @param degrees Value in degrees.\n     * @returns Value in radians.\n     * @deprecated\n     */\n    export const degToRad = THREE.Math.degToRad;\n\n    /**\n     * Converts an angle measured in radians to an equivalent value in degrees.\n     *\n     * @param degrees Value in radians.\n     * @returns Value in degrees.\n     * @deprecated\n     */\n    export const radToDeg = THREE.Math.radToDeg;\n\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     * @returns Clamped value.\n     * @deprecated\n     */\n    export const clamp = THREE.Math.clamp;\n\n    /**\n     * Normalize angle in degrees to range `[0, 360)`.\n     *\n     * @param a Angle in degrees.\n     * @returns Angle in degrees in range `[0, 360)`.\n     */\n    export function normalizeAngleDeg(a: number): number {\n        a = a % 360;\n        if (a < 0) {\n            a = a + 360;\n        }\n        return a;\n    }\n\n    /**\n     * Return the minimal delta between angles `a` and `b` given in degrees.\n     *\n     * Equivalent to `a - b` in coordinate space with exception vector direction can be reversed\n     * that if `abs(a-b) > 180` because trip is shorter in 'other' direction.\n     *\n     * Useful when interpolating between `b` and `a` in angle space.\n     *\n     * @param a Start angle in degrees.\n     * @param b End angle in degrees.\n     * @returns Angle that that satisfies condition `a - b - d = 0` in angle space.\n     */\n    export function angleDistanceDeg(a: number, b: number): number {\n        a = normalizeAngleDeg(a);\n        b = normalizeAngleDeg(b);\n\n        const d = a - b;\n        if (d > 180) {\n            return d - 360;\n        } else if (d <= -180) {\n            return d + 360;\n        } else {\n            return d;\n        }\n    }\n\n    /**\n     * Interpolate linearly between two angles given in degrees.\n     *\n     * @param p0 Angle from in degrees\n     * @param p1 Angle to in degrees\n     * @param t Interpolation factor (alpha), in range `0-1`.\n     */\n    export function interpolateAnglesDeg(p0: number, p1: number, t: number): number {\n        // hand crafted version,\n        // see stack for maybe better versions:\n        //    https://stackoverflow.com/questions/2708476/rotation-interpolation\n\n        const d = angleDistanceDeg(p1, p0);\n        const r = (p0 + d * t) % 360;\n        return r;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    GeoCoordinates,\n    MathUtils,\n    Projection,\n    ProjectionType,\n    TileKey\n} from \"@here/harp-geoutils\";\nimport { EarthConstants } from \"@here/harp-geoutils/lib/projection/EarthConstants\";\nimport { MapMeshBasicMaterial, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { MapView } from \"./MapView\";\nimport { getFeatureDataSize, TileFeatureData } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"MapViewUtils\");\n\n// Estimation of the size of an Object3D with all the simple properties, like matrices and flags.\n// There may be cases where it is possible to construct Object3Ds with considerable less memory\n// consumption, but this value is used to simplify the estimation.\nconst MINIMUM_OBJECT3D_SIZE_ESTIMATION = 1000;\n\nconst MINIMUM_ATTRIBUTE_SIZE_ESTIMATION = 56;\n\n// Caching those for performance reasons.\nconst groundNormalPlanarProj = new THREE.Vector3(0, 0, 1);\nconst groundPlane = new THREE.Plane(groundNormalPlanarProj.clone());\nconst groundSphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\nconst rayCaster = new THREE.Raycaster();\n\n/**\n * Cached ThreeJS instances for realtime maths.\n */\nconst space = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst tangentSpace = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst cache = {\n    quaternions: [new THREE.Quaternion(), new THREE.Quaternion()],\n    vector3: [new THREE.Vector3(), new THREE.Vector3()],\n    matrix4: [new THREE.Matrix4(), new THREE.Matrix4()],\n    transforms: [\n        {\n            xAxis: new THREE.Vector3(),\n            yAxis: new THREE.Vector3(),\n            zAxis: new THREE.Vector3(),\n            position: new THREE.Vector3()\n        }\n    ]\n};\n\nexport namespace MapViewUtils {\n    export const MAX_TILT_DEG = 89;\n    /**\n     * The anti clockwise rotation of an object along the axes of its tangent space, with itself\n     * as origin.\n     */\n    export interface Attitude {\n        /**\n         * Rotation of the object along its vertical axis.\n         */\n        yaw: number;\n\n        /**\n         * Rotation of the object along its horizontal axis.\n         */\n        pitch: number;\n\n        /**\n         * Rotation of the object along its forward axis.\n         */\n        roll: number;\n    }\n\n    /**\n     * Describes estimated usage of memory on heap and GPU.\n     */\n    export interface MemoryUsage {\n        heapSize: number;\n        gpuSize: number;\n    }\n\n    /**\n     * Zooms and moves the map in such a way that the given target position remains at the same\n     * position after the zoom.\n     *\n     * @param mapView Instance of MapView.\n     * @param targetPositionOnScreenXinNDC Target x position in NDC space.\n     * @param targetPositionOnScreenYinNDC Target y position in NDC space.\n     * @param zoomLevel The desired zoom level.\n     * @param maxTiltAngle The maximum tilt angle to comply by, in globe projection, in radian.\n     */\n    export function zoomOnTargetPosition(\n        mapView: MapView,\n        targetPositionOnScreenXinNDC: number,\n        targetPositionOnScreenYinNDC: number,\n        zoomLevel: number,\n        maxTiltAngle: number = Math.PI / 2\n    ): void {\n        // Get current target position in world space before we zoom.\n        const targetPosition = rayCastWorldCoordinates(\n            mapView,\n            targetPositionOnScreenXinNDC,\n            targetPositionOnScreenYinNDC\n        );\n        const groundDistance = calculateDistanceToGroundFromZoomLevel(mapView, zoomLevel);\n\n        // Set the cameras height according to the given zoom level.\n        if (mapView.projection.type === ProjectionType.Planar) {\n            mapView.camera.position.setZ(groundDistance);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            mapView.camera.position.setLength(EarthConstants.EQUATORIAL_RADIUS + groundDistance);\n        }\n\n        // In sphere, we may have to also orbit the camera around the position located at the\n        // center of the screen, in order to limit the tilt to `maxTiltAngle`, as we change\n        // this tilt by changing the camera's height above.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            const centerScreenTarget = rayCastWorldCoordinates(mapView, 0, 0);\n            if (centerScreenTarget !== null) {\n                const tilt = extractSphericalCoordinatesFromLocation(\n                    mapView,\n                    mapView.camera,\n                    mapView.projection.unprojectPoint(centerScreenTarget)\n                ).tilt;\n                const deltaTilt = tilt - maxTiltAngle;\n                if (deltaTilt > 0) {\n                    orbitFocusPoint(mapView, 0, deltaTilt, maxTiltAngle);\n                }\n            }\n        }\n\n        // Get new target position after the zoom\n        const newTargetPosition = rayCastWorldCoordinates(\n            mapView,\n            targetPositionOnScreenXinNDC,\n            targetPositionOnScreenYinNDC\n        );\n\n        if (!targetPosition || !newTargetPosition) {\n            return;\n        }\n\n        if (mapView.projection.type === ProjectionType.Planar) {\n            // Calculate the difference and pan the map to maintain the map relative to the target\n            // position.\n            targetPosition.sub(newTargetPosition);\n            panCameraAboveFlatMap(mapView, targetPosition.x, targetPosition.y);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            panCameraAroundGlobe(mapView, targetPosition, newTargetPosition);\n        }\n    }\n\n    /**\n     * Orbits the camera around the focus point of the camera.\n     *\n     * @param mapView The [[MapView]] instance to manipulate.\n     * @param deltaAzimuthDeg Delta azimuth in degrees.\n     * @param deltaTiltDeg Delta tilt in degrees.\n     * @param maxTiltAngleRad The maximum tilt between the camera and its target in radian.\n     */\n    export function orbitFocusPoint(\n        mapView: MapView,\n        deltaAzimuthDeg: number,\n        deltaTiltDeg: number,\n        maxTiltAngleRad = Math.PI / 2\n    ) {\n        const target = rayCastWorldCoordinates(mapView, 0, 0);\n        if (target === null) {\n            throw new Error(\"MapView does not support a view pointing in the void\");\n        }\n        const targetCoordinates = mapView.projection.unprojectPoint(target);\n        const sphericalCoordinates = extractSphericalCoordinatesFromLocation(\n            mapView,\n            mapView.camera,\n            targetCoordinates\n        );\n        const tiltDeg = Math.max(\n            Math.min(\n                THREE.Math.radToDeg(maxTiltAngleRad),\n                deltaTiltDeg + THREE.Math.radToDeg(sphericalCoordinates.tilt)\n            ),\n            0\n        );\n        mapView.lookAt(\n            targetCoordinates,\n            target.distanceTo(mapView.camera.position),\n            tiltDeg,\n            THREE.Math.radToDeg(sphericalCoordinates.azimuth + Math.PI) + deltaAzimuthDeg\n        );\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] of the camera, given its target coordinates on the map and its\n     * zoom, yaw and pitch.\n     *\n     * @param targetCoordinates Coordinates of the center of the view.\n     * @param distance Distance to the target in meters.\n     * @param yawDeg Camera yaw in degrees.\n     * @param pitchDeg Camera pitch in degrees.\n     * @param projection Active MapView, needed to get the camera fov and map projection.\n     * @param result Optional output vector.\n     * @returns Camera position in world space.\n     */\n    export function getCameraPositionFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        projection: Projection,\n        result: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 {\n        const pitchRad = THREE.Math.degToRad(pitchDeg);\n        const altitude = Math.cos(pitchRad) * distance;\n        const yawRad = THREE.Math.degToRad(yawDeg);\n        projection.projectPoint(targetCoordinates, result);\n        const groundDistance = distance * Math.sin(pitchRad);\n        if (projection.type === ProjectionType.Planar) {\n            result.x = result.x + Math.sin(yawRad) * groundDistance;\n            result.y = result.y - Math.cos(yawRad) * groundDistance;\n            result.z = result.z + altitude;\n        } else if (projection.type === ProjectionType.Spherical) {\n            // In globe yaw and pitch are understood to be in tangent space. The approach below is\n            // to find the Z and Y tangent space axes, then rotate Y around Z by the given yaw, and\n            // set its new length (groundDistance). Finally the up vector's length is set to the\n            // camera height and added to the transformed Y above.\n\n            // Get the Z axis in tangent space: it is the normalized position vector of the target.\n            tangentSpace.z.copy(result).normalize();\n\n            // Get the Y axis (north axis in tangent space):\n            tangentSpace.y\n                .set(0, 0, 1)\n                .projectOnPlane(tangentSpace.z)\n                .normalize();\n\n            // Rotate this north axis by the given yaw, giving the camera direction relative to\n            // the target.\n            cache.quaternions[0].setFromAxisAngle(tangentSpace.z, yawRad - Math.PI);\n            tangentSpace.y.applyQuaternion(cache.quaternions[0]);\n\n            // Push the camera to the specified distance.\n            tangentSpace.y.setLength(groundDistance);\n\n            // Now get the actual camera position vector: from the target position, add the\n            // previous computation to get the projection of the camera on the ground, then add\n            // the height of the camera in the tangent space.\n            const height = distance * Math.cos(pitchRad);\n            result.add(tangentSpace.y).add(tangentSpace.z.setLength(height));\n\n            const a = EarthConstants.EQUATORIAL_RADIUS + altitude;\n            const b = Math.sin(pitchRad) * distance;\n            const cameraHeight = Math.sqrt(a * a + b * b);\n            result.setLength(cameraHeight);\n        }\n\n        return result;\n    }\n\n    /**\n     * @deprecated use getCameraPositionFromTargetCoordinates instead\n     */\n    export function getCameraCoordinatesFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        mapView: MapView\n    ): GeoCoordinates {\n        return mapView.projection.unprojectPoint(\n            getCameraPositionFromTargetCoordinates(\n                targetCoordinates,\n                distance,\n                yawDeg,\n                pitchDeg,\n                mapView.projection,\n                cache.vector3[1]\n            )\n        );\n    }\n\n    /**\n     * Casts a ray in NDC space from the current map view and returns the intersection point of that\n     * ray wih the map in world space.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXinNDC X coordinate in NDC space.\n     * @param pointOnScreenYinNDC Y coordinate in NDC space.\n     * @param elevation Optional param used to offset the ground plane. Used when wanting to pan\n     * based on a plane at some altitude. Necessary for example when panning with terrain.\n     *\n     * @returns Intersection coordinates, or `null` if raycast failed.\n     */\n    export function rayCastWorldCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const pointInNDCPosition = new THREE.Vector3(pointOnScreenXinNDC, pointOnScreenYinNDC, 0);\n\n        cache.vector3[1].copy(mapView.camera.position);\n\n        cache.matrix4[0].extractRotation(mapView.camera.matrixWorld);\n\n        // Prepare the unprojection matrix which projects from NDC space to camera space\n        // and takes the current rotation of the camera into account.\n        cache.matrix4[1].multiplyMatrices(\n            cache.matrix4[0],\n            cache.matrix4[1].getInverse(mapView.camera.projectionMatrix)\n        );\n        // Unproject the point via the unprojection matrix.\n        const pointInCameraSpace = pointInNDCPosition.applyMatrix4(cache.matrix4[1]);\n        // Use the point in camera space as the vector towards this point.\n        rayCaster.set(cache.vector3[1], pointInCameraSpace.normalize());\n        if (elevation !== undefined) {\n            groundPlane.constant = -elevation;\n        }\n\n        const worldPosition = new THREE.Vector3();\n        const result =\n            mapView.projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, worldPosition)\n                : rayCaster.ray.intersectSphere(groundSphere, worldPosition);\n        groundPlane.constant = 0;\n        return result;\n    }\n\n    /**\n     * Pans the camera according to the projection.\n     *\n     * @param mapView Instance of MapView.\n     * @param xOffset In world space. Value > 0 will pan the map to the right, value < 0 will pan\n     * the map to the left in default camera orientation.\n     * @param yOffset In world space. Value > 0 will pan the map upwards, value < 0 will pan the map\n     * downwards in default camera orientation.\n     */\n    export function panCameraAboveFlatMap(\n        mapView: MapView,\n        offsetX: number,\n        offsetY: number\n    ): void {\n        mapView.camera.position.x += offsetX;\n        mapView.camera.position.y += offsetY;\n    }\n\n    /**\n     * The function doing a pan in the spherical space when [[MapView]]'s active [[ProjectionType]]\n     * is spherical. In other words, the function that rotates the camera around the globe.\n     *\n     * @param mapView MapView instance.\n     * @param fromWorld Start vector representing the scene position of a geolocation.\n     * @param toWorld End vector representing the scene position of a geolocation.\n     */\n    export function panCameraAroundGlobe(\n        mapView: MapView,\n        fromWorld: THREE.Vector3,\n        toWorld: THREE.Vector3\n    ) {\n        cache.quaternions[0]\n            .setFromUnitVectors(fromWorld.normalize(), toWorld.normalize())\n            .inverse();\n        cache.matrix4[0].makeRotationFromQuaternion(cache.quaternions[0]);\n        mapView.camera.applyMatrix(cache.matrix4[0]);\n        mapView.camera.updateMatrixWorld();\n    }\n\n    /**\n     * Rotates the camera by the given delta yaw and delta pitch. The pitch will be clamped to the\n     * maximum possible tilt to the new target, and under the horizon in sphere projection.\n     *\n     * @param mapView The [[MapView]] instance in use.\n     * @param deltaYawDeg Delta yaw in degrees.\n     * @param deltaPitchDeg Delta pitch in degrees.\n     * @param maxTiltAngleRad Max tilt angle in radians.\n     */\n    export function rotate(\n        mapView: MapView,\n        deltaYawDeg: number,\n        deltaPitchDeg: number = 0,\n        maxTiltAngleRad = Math.PI / 4\n    ) {\n        // 1. Apply yaw: rotate around the vertical axis.\n        mapView.camera.rotateOnWorldAxis(\n            mapView.projection.type === ProjectionType.Spherical\n                ? cache.vector3[0].copy(mapView.camera.position).normalize()\n                : cache.vector3[0].set(0, 0, 1),\n            MathUtils.degToRad(-deltaYawDeg)\n        );\n        mapView.camera.updateMatrixWorld();\n\n        // 2. Apply pitch: rotate around the camera's local X axis.\n        if (deltaPitchDeg === 0) {\n            return;\n        }\n        const pitch = MapViewUtils.extractAttitude(mapView, mapView.camera).pitch;\n        // `maxTiltAngle` is equivalent to a `maxPitchAngle` in flat projections.\n        let newPitch = THREE.Math.clamp(\n            pitch + THREE.Math.degToRad(deltaPitchDeg),\n            0,\n            maxTiltAngleRad\n        );\n        // In sphere projection, the value of a maximum pitch is smaller than the value of the\n        // maximum tilt, as the curvature of the surface adds up to it.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            // Deduce max pitch from max tilt. To this end the sine law of triangles is used below.\n            const maxPitch = Math.asin(\n                (EarthConstants.EQUATORIAL_RADIUS * Math.sin(Math.PI - maxTiltAngleRad)) /\n                    mapView.camera.position.length()\n            );\n            newPitch = Math.min(newPitch, maxPitch);\n        }\n        mapView.camera.rotateX(newPitch - pitch);\n    }\n\n    /**\n     * Computes the rotation of the camera according to yaw and pitch in degrees. The computations\n     * hinge on the current `projection` and `target`, because yaw and pitch are defined in\n     * tangent space of the target point.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param projection Current projection.\n     * @param target The camera target.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function getCameraRotationAtTarget(\n        projection: Projection,\n        target: GeoCoordinates,\n        yawDeg: number,\n        pitchDeg: number,\n        result: THREE.Quaternion = new THREE.Quaternion()\n    ): THREE.Quaternion {\n        const transform = cache.transforms[0];\n        projection.localTangentSpace(target, transform);\n\n        cache.matrix4[0].makeBasis(transform.xAxis, transform.yAxis, transform.zAxis);\n        result.setFromRotationMatrix(cache.matrix4[0]);\n\n        cache.quaternions[0].setFromAxisAngle(\n            cache.vector3[1].set(0, 0, 1),\n            THREE.Math.degToRad(yawDeg)\n        );\n        cache.quaternions[1].setFromAxisAngle(\n            cache.vector3[1].set(1, 0, 0),\n            THREE.Math.degToRad(pitchDeg)\n        );\n\n        result.multiply(cache.quaternions[0]);\n        result.multiply(cache.quaternions[1]);\n        return result;\n    }\n\n    /**\n     * Sets the rotation of the camera according to yaw and pitch in degrees. The computations hinge\n     * on the current projection and `geoCenter`, because yaw and pitch are defined in tangent\n     * space. In particular, `MapView#geoCenter` needs to be set before calling `setRotation`.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param mapView Instance of MapView.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function setRotation(mapView: MapView, yawDeg: number, pitchDeg: number) {\n        getCameraRotationAtTarget(\n            mapView.projection,\n            mapView.geoCenter,\n            yawDeg,\n            pitchDeg,\n            mapView.camera.quaternion\n        );\n    }\n\n    /**\n     * Extracts yaw, pitch, and roll rotation in radians.\n     * - Yaw : Rotation around the vertical axis, counter-clockwise (as opposed to azimuth),\n     * starting north.\n     * - Pitch :Rotation around the horizontal axis.\n     * - Roll : Rotation around the view axis.\n     *\n     * @see https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param object The [[THREE.Object3D]] instance to extract the rotations from.\n     */\n    export function extractAttitude(\n        options: { projection: Projection },\n        object: THREE.Object3D\n    ): Attitude {\n        // 1. Build the matrix of the tangent space of the object.\n        cache.vector3[1].setFromMatrixPosition(object.matrixWorld); // Ensure using world position.\n        options.projection.localTangentSpace(options.projection.unprojectPoint(cache.vector3[1]), {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n        cache.matrix4[1].makeBasis(tangentSpace.x, tangentSpace.y, tangentSpace.z);\n\n        // 2. Change the basis of matrixWorld to the tangent space to get the new base axes.\n        cache.matrix4[0].getInverse(cache.matrix4[1]).multiply(object.matrixWorld);\n        space.x.setFromMatrixColumn(cache.matrix4[0], 0);\n        space.y.setFromMatrixColumn(cache.matrix4[0], 1);\n        space.z.setFromMatrixColumn(cache.matrix4[0], 2);\n\n        // 3. Deduce orientation from the base axes.\n        let yaw = 0;\n        let pitch = 0;\n        let roll = 0;\n\n        const EPS = 1e-5;\n\n        // Decompose rotation matrix into Z0 X Z1 Euler angles.\n        const d = space.z.dot(cache.vector3[1].set(0, 0, 1));\n        if (d < 1.0 - EPS) {\n            if (d > -1.0 + EPS) {\n                yaw = Math.atan2(space.z.x, -space.z.y);\n                pitch = Math.acos(space.z.z);\n                roll = Math.atan2(space.x.z, space.y.z);\n            } else {\n                // Looking bottom-up with space.z.z == -1.0\n                yaw = -Math.atan2(-space.y.x, space.x.x);\n                pitch = 180;\n                roll = 0;\n            }\n        } else {\n            // Looking top-down with space.z.z == 1.0\n            yaw = Math.atan2(-space.y.x, space.x.x);\n            pitch = 0.0;\n            roll = 0.0;\n        }\n\n        return {\n            yaw,\n            pitch,\n            roll\n        };\n    }\n\n    /**\n     * Gets the spherical coordinates in radian of the object to the coordinates of `point`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the spherical\n     * coordinates of `object` in the tangent space of `location`.\n     *\n     * @param mapView The [[MapView]] instance to consider.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractSphericalCoordinatesFromLocation(\n        mapView: MapView,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): { azimuth: number; tilt: number } {\n        mapView.projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        let tilt = 0;\n        let azimuth = 0;\n\n        // Get point to object vector in `cache.vector3[1]` and deduce `tilt` from the angle with\n        // tangent Z.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .normalize();\n        if (cache.vector3[1].dot(tangentSpace.z) > 1 - 1e-5) {\n            // Top down view: the azimuth of the object would be opposite the yaw, and clockwise.\n            azimuth = Math.PI - extractAttitude(mapView, object).yaw;\n            // Wrap between -PI and PI.\n            azimuth = Math.atan2(Math.sin(azimuth), Math.cos(azimuth));\n            tilt = 0;\n            return { tilt, azimuth };\n        }\n        tilt = cache.vector3[1].angleTo(tangentSpace.z);\n        // Tilted view: the azimuth is the direction of the object from the origin.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .projectOnPlane(tangentSpace.z)\n            .normalize();\n        azimuth = cache.vector3[1].angleTo(tangentSpace.y);\n        if (cache.vector3[1].cross(tangentSpace.y).dot(tangentSpace.z) < 0) {\n            azimuth = -azimuth;\n        }\n        return { tilt, azimuth };\n    }\n\n    /**\n     * Get perspective camera frustum planes distances.\n     * @return all plane distances in helper object.\n     */\n    export function getCameraFrustumPlanes(\n        camera: THREE.PerspectiveCamera\n    ): { left: number; right: number; top: number; bottom: number; near: number; far: number } {\n        const near = camera.near;\n        const far = camera.far;\n        let top = (near * Math.tan(THREE.Math.degToRad(0.5 * camera.fov))) / camera.zoom;\n        let height = 2 * top;\n        let width = camera.aspect * height;\n        let left = -0.5 * width;\n\n        const view = camera.view;\n        if (view !== null && view.enabled) {\n            const fullWidth = view.fullWidth;\n            const fullHeight = view.fullHeight;\n\n            left += (view.offsetX * width) / fullWidth;\n            top -= (view.offsetY * height) / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n\n        // Correct by skew factor\n        left += camera.filmOffset !== 0 ? (near * camera.filmOffset) / camera.getFilmWidth() : 0;\n\n        return {\n            left,\n            right: left + width,\n            top,\n            bottom: top - height,\n            near,\n            far\n        };\n    }\n\n    /**\n     * Casts a ray in NDC space from the current view of the camera and returns the intersection\n     * point of that ray against the map in geo coordinates. The return value can be `null` when\n     * the raycast is above the horizon.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXNDC  Abscissa in NDC space.\n     * @param pointOnScreenYNDC  Ordinate in NDC space.\n     * @returns Intersection geo coordinates, or `null` if raycast is above the horizon.\n     */\n    export function rayCastGeoCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number\n    ): GeoCoordinates | null {\n        const worldCoordinates = rayCastWorldCoordinates(\n            mapView,\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC\n        );\n\n        if (!worldCoordinates) {\n            return null;\n        }\n\n        return mapView.projection.unprojectPoint(worldCoordinates);\n    }\n\n    /**\n     * Calculates and returns the distance from the ground, which is needed to put the camera to\n     * this height, to see the size of the area that would be covered by one tile for the given zoom\n     * level.\n     *\n     * @param mapView Instance of MapView.\n     * @param options Subset of necessary [[MapView]] properties.\n     */\n    export function calculateDistanceToGroundFromZoomLevel(\n        options: { projection: Projection; focalLength: number; camera: THREE.Object3D },\n        zoomLevel: number\n    ): number {\n        const cameraPitch = extractAttitude(options, options.camera).pitch;\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return ((options.focalLength * tileSize) / 256) * Math.cos(cameraPitch);\n    }\n\n    /**\n     * Calculates and returns the distance to the target point.\n     *\n     * @param options Necessary subset of MapView properties to compute the distance.\n     * @param zoomLevel The zoom level to get the equivalent height to.\n     */\n    export function calculateDistanceFromZoomLevel(\n        options: { focalLength: number },\n        zoomLevel: number\n    ): number {\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return (options.focalLength * tileSize) / 256;\n    }\n\n    /**\n     * Calculates the zoom level, which corresponds to the current distance from\n     * camera to lookAt point.\n     * Therefore the zoom level is a `float` and not an `int`. The height of the camera can be in\n     * between zoom levels. By setting the zoom level, you change the height position of the camera\n     * in away that the field of view of the camera should be able to cover one tile for the given\n     * zoom level.\n     *\n     * As an example for this, when you have a tile of zoom level 14 in front of the camera and you\n     * set the zoom level of the camera to 14, then you are able to see the whole tile in front of\n     * you.\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param distance The distance in meters, which are scene units in [[MapView]].\n     */\n    export function calculateZoomLevelFromDistance(\n        options: { focalLength: number; minZoomLevel: number; maxZoomLevel: number },\n        distance: number\n    ): number {\n        const tileSize = (256 * distance) / options.focalLength;\n        const zoomLevel = THREE.Math.clamp(\n            Math.log2(EarthConstants.EQUATORIAL_CIRCUMFERENCE / tileSize),\n            options.minZoomLevel,\n            options.maxZoomLevel\n        );\n        // Round to avoid modify the zoom level without distance change, with the imprecision\n        // introduced by raycasting.\n        return Math.round(zoomLevel * 10e15) / 10e15;\n    }\n\n    /**\n     * Translates a linear clip-space distance value to the actual value stored in the depth buffer.\n     * This is useful as the depth values are not stored in the depth buffer linearly, and this can\n     * lead into confusing behavior when not taken into account.\n     *\n     * @param clipDistance Distance from the camera in clip space (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function calculateDepthFromClipDistance(\n        clipDistance: number,\n        camera: THREE.Camera\n    ): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        const cameraRange = perspCam.far - perspCam.near;\n        const viewSpaceDistance = clipDistance * perspCam.far;\n\n        return (1.0 - perspCam.near / viewSpaceDistance) * (perspCam.far / cameraRange);\n    }\n\n    /**\n     * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n     * [0..cameraFar].\n     *\n     * @param distance Distance from the camera (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function cameraToWorldDistance(distance: number, camera: THREE.Camera): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        return distance * perspCam.far;\n    }\n\n    /**\n     * Calculates vertical field of view for given horizontal field of vision and aspect ratio.\n     *\n     * @param hFov Horizontal field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateVerticalFovByHorizontalFov(hFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(hFov / 2) / aspect);\n    }\n\n    /**\n     * Calculates horizontal field of view for given vertical field of vision and aspect ratio.\n     *\n     * @param hFov Vertical field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateHorizontalFovByVerticalFov(vFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(vFov / 2) * aspect);\n    }\n\n    /**\n     * Calculates the focal length based on the vertical FOV and height.\n     *\n     * @param vFov Vertical field of view in rad.\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFocalLengthByVerticalFov(vFov: number, height: number): number {\n        return height / 2 / Math.tan(vFov / 2);\n    }\n\n    /**\n     * Calculates the vertical field of view based on the focal length and the height.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFovByFocalLength(focalLength: number, height: number): number {\n        return THREE.Math.radToDeg(2 * Math.atan(height / 2 / focalLength));\n    }\n\n    /**\n     * Calculates object's screen size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param worldSize Object size in world space.\n     * @return object size in screen space.\n     */\n    export function calculateScreenSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        worldSize: number\n    ): number {\n        return (focalLength * worldSize) / distance;\n    }\n\n    /**\n     * Calculates object's world size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param screenSize Object size in screen space.\n     * @return object size in world space.\n     */\n    export function calculateWorldSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        screenSize: number\n    ): number {\n        return (distance * screenSize) / focalLength;\n    }\n\n    /**\n     * Computes estimate for size of a THREE.Object3D object and its children. Shared materials\n     * and/or attributes will be counted multiple times.\n     *\n     * @param object The mesh object to evaluate\n     * @param size The [[MemoryUsage]] to update.\n     * @param visitedObjects Optional map to store large objects that could be shared.\n     *\n     * @returns Estimate of object size in bytes for heap and GPU.\n     */\n    export function estimateObject3dSize(\n        object: THREE.Object3D,\n        parentSize?: MemoryUsage,\n        visitedObjects?: Map<string, boolean>\n    ): MemoryUsage {\n        const size =\n            parentSize !== undefined\n                ? parentSize\n                : {\n                      heapSize: 0,\n                      gpuSize: 0\n                  };\n\n        if (visitedObjects === undefined) {\n            visitedObjects = new Map();\n        }\n\n        estimateMeshSize(object, size, visitedObjects);\n\n        if (object.children.length > 0) {\n            for (const child of object.children) {\n                estimateObject3dSize(child, size, visitedObjects);\n            }\n        }\n        return size;\n    }\n\n    /**\n     * Check if tiles or other content is currently being loaded.\n     *\n     * This method can be removed once HARP-7932 is implemented.\n     *\n     * @returns `true` if MapView has visible tiles or other content that is being loaded.\n     */\n    export function mapViewIsLoading(mapView: MapView) {\n        let numTilesLoading = 0;\n\n        for (const tileList of mapView.visibleTileSet.dataSourceTileList) {\n            numTilesLoading += tileList.numTilesLoading;\n\n            for (const tile of tileList.visibleTiles) {\n                if (tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                    numTilesLoading++;\n                }\n                if (tile.tileGeometryLoader !== undefined && !tile.tileGeometryLoader.isFinished) {\n                    numTilesLoading++;\n                }\n            }\n        }\n        let isLoading = numTilesLoading > 0;\n\n        if (mapView.textElementsRenderer !== undefined) {\n            isLoading = isLoading || mapView.textElementsRenderer.loading;\n        }\n\n        isLoading =\n            isLoading ||\n            !mapView.poiTableManager.finishedLoading ||\n            !mapView.visibleTileSet.allVisibleTilesLoaded;\n\n        return isLoading;\n    }\n\n    function estimateTextureSize(\n        texture: THREE.Texture | null,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (texture === null || texture === undefined || texture.image === undefined) {\n            return;\n        }\n\n        if (texture.uuid !== undefined && visitedObjects.get(texture.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(texture.uuid, true);\n\n        // May be HTMLImage or ImageData\n        const image = texture.image;\n        // Assuming RGBA\n        const imageBytes = 4 * image.width * image.height;\n        objectSize.heapSize += imageBytes;\n        objectSize.gpuSize += imageBytes;\n    }\n\n    function estimateMaterialSize(\n        material: THREE.Material,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (material.uuid !== undefined && visitedObjects.get(material.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(material.uuid, true);\n\n        if (\n            material instanceof THREE.RawShaderMaterial ||\n            material instanceof THREE.ShaderMaterial\n        ) {\n            const rawMaterial = material;\n            for (const name in rawMaterial.uniforms) {\n                if (rawMaterial.uniforms[name] !== undefined) {\n                    const uniform = rawMaterial.uniforms[name];\n                    if (uniform instanceof THREE.Texture) {\n                        estimateTextureSize(uniform, objectSize, visitedObjects);\n                    }\n                }\n            }\n        } else if (\n            material instanceof THREE.MeshBasicMaterial ||\n            material instanceof MapMeshBasicMaterial\n        ) {\n            const meshMaterial = material;\n            estimateTextureSize(meshMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.specularMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.envMap, objectSize, visitedObjects);\n        } else if (material instanceof MapMeshStandardMaterial) {\n            const standardMaterial = material;\n\n            estimateTextureSize(standardMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.lightMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.emissiveMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.bumpMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.normalMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.displacementMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.roughnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.metalnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.envMap, objectSize, visitedObjects);\n        } else if (\n            material instanceof THREE.LineBasicMaterial ||\n            material instanceof THREE.LineDashedMaterial\n        ) {\n            // Nothing to be done here\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified material: \", material);\n        }\n    }\n\n    function estimateAttributeSize(\n        attribute: any,\n        attrName: string,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        // Attributes (apparently) do not have their uuid set up.\n        if (attribute.uuid === undefined) {\n            attribute.uuid = THREE.Math.generateUUID();\n        }\n\n        if (visitedObjects.get(attribute.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(attribute.uuid, true);\n\n        let attrBytes = 0;\n        let bytesPerElement = 4;\n        if (attribute.array.BYTES_PER_ELEMENT !== undefined) {\n            bytesPerElement = attribute.array.BYTES_PER_ELEMENT;\n        }\n        if (\n            attribute instanceof THREE.InterleavedBufferAttribute ||\n            attribute instanceof THREE.BufferAttribute\n        ) {\n            attrBytes = bytesPerElement * attribute.count * attribute.itemSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified attribute: \", attrName);\n        }\n\n        objectSize.heapSize += attrBytes + MINIMUM_ATTRIBUTE_SIZE_ESTIMATION;\n        objectSize.gpuSize += attrBytes;\n    }\n\n    function estimateGeometrySize(\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        const isNewObject =\n            geometry.uuid === undefined || visitedObjects.get(geometry.uuid) !== true;\n\n        if (!isNewObject) {\n            return;\n        }\n        visitedObjects.set(geometry.uuid, true);\n\n        let bufferGeometry: THREE.BufferGeometry | undefined;\n\n        if (geometry instanceof THREE.Geometry) {\n            // Each vertex is represented as 3 floats vector (24 bytes).\n            objectSize.heapSize += geometry.vertices.length * 24;\n            // Face: 3 indices (24 byte), 1 normal (3 floats = 24). Vertex normals and\n            // colors are not counted here.\n            objectSize.heapSize += geometry.faces.length * (24 + 24);\n            // Additionally, the internal _bufferGeometry is also counted:\n            bufferGeometry = (geometry as any)._bufferGeometry;\n        } else if (geometry instanceof THREE.BufferGeometry) {\n            bufferGeometry = geometry;\n        }\n\n        if (bufferGeometry === undefined) {\n            // Nothing more to calculate.\n            return;\n        }\n\n        const attributes = bufferGeometry.attributes;\n        if (attributes === undefined) {\n            logger.warn(\"estimateGeometrySize: unidentified geometry: \", geometry);\n            return;\n        }\n\n        for (const property in attributes) {\n            if (attributes[property] !== undefined) {\n                estimateAttributeSize(attributes[property], property, objectSize, visitedObjects);\n            }\n        }\n        if (bufferGeometry.index !== null) {\n            estimateAttributeSize(bufferGeometry.index, \"index\", objectSize, visitedObjects);\n        }\n    }\n\n    function estimateMeshSize(\n        object: THREE.Object3D,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (!object.isObject3D || object instanceof THREE.Scene) {\n            return;\n        }\n\n        if (object.uuid !== undefined && visitedObjects.get(object.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(object.uuid, true);\n\n        if ((object as any).isMesh || (object as any).isLine || (object as any).isPoints) {\n            // Estimated minimum impact on heap.\n            let heapSize = MINIMUM_OBJECT3D_SIZE_ESTIMATION;\n            const gpuSize = 0;\n\n            // Cast to Points class which contains the minimal required properties sub-set.\n            const mesh = object as THREE.Points;\n\n            // Calculate material(s) impact.\n            if (mesh.material !== undefined) {\n                if (Array.isArray(mesh.material)) {\n                    const materials = mesh.material as THREE.Material[];\n                    for (const material of materials) {\n                        estimateMaterialSize(material, objectSize, visitedObjects);\n                    }\n                } else {\n                    const material = mesh.material as THREE.Material;\n                    estimateMaterialSize(material, objectSize, visitedObjects);\n                }\n            }\n\n            // Calculate cost of geometry.\n            if (mesh.geometry !== undefined) {\n                estimateGeometrySize(mesh.geometry, objectSize, visitedObjects);\n            }\n\n            // Add info that is required for picking (parts of) objects and match them to\n            // the featureID in the map data.\n            const featureData: TileFeatureData | undefined =\n                object.userData !== undefined\n                    ? (object.userData.feature as TileFeatureData)\n                    : undefined;\n\n            if (featureData !== undefined) {\n                heapSize += getFeatureDataSize(featureData);\n            }\n\n            objectSize.heapSize += heapSize;\n            objectSize.gpuSize += gpuSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified object\", object);\n        }\n    }\n\n    /**\n     * Gets language list used by the browser\n     *\n     * @returns Array of iso language codes\n     */\n    export function getBrowserLanguages(): string[] | undefined {\n        if (navigator.languages !== undefined && navigator.languages.length > 0) {\n            const languageList = [];\n            for (const lang of navigator.languages) {\n                languageList.push(getIsoLanguageCode(lang));\n            }\n            return languageList;\n        }\n        if (navigator.language !== undefined) {\n            return [getIsoLanguageCode(navigator.language)];\n        }\n        return undefined;\n    }\n\n    /**\n     * Gets ISO-639-1 language code from browser's code (ex. en for en-US)\n     */\n    function getIsoLanguageCode(language: string) {\n        return language.substring(0, 2);\n    }\n}\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000\n];\n\nexport namespace TileOffsetUtils {\n    /**\n     * Creates a unique key based on the supplied parameters. Note, the uniqueness is bounded by the\n     * bitshift. The [[TileKey.mortonCode()]] supports currently up to 26 levels (this is because\n     * 26*2 equals 52, and 2^52 is the highest bit that can be set in an integer in Javascript), the\n     * bitshift reduces this accordingly, so given the default bitshift of four, we support up to 24\n     * levels. Given the current support up to level 19 this should be fine.\n     *\n     * @param tileKey The unique [[TileKey]] from which to compute the unique key.\n     * @param offset How much the given [[TileKey]] is offset\n     * @param bitshift How much space we have to store the offset. The default of 4 means we have\n     *      enough space to store 16 unique tiles in a single view.\n     */\n    export function getKeyForTileKeyAndOffset(\n        tileKey: TileKey,\n        offset: number,\n        bitshift: number = 4\n    ) {\n        const shiftedOffset = getShiftedOffset(offset, bitshift);\n        return tileKey.mortonCode() + shiftedOffset;\n    }\n\n    /**\n     * Extracts the offset and morton key from the given key (must be created by:\n     * [[getKeyForTileKeyAndOffset]])\n     *\n     * Note, we can't use bitshift operators in Javascript because they work on 32-bit integers, and\n     * would truncate the numbers, hence using powers of two.\n     *\n     * @param key Key to extract offset and morton key.\n     * @param bitshift How many bits to shift by, must be the same as was used when creating the\n     * key.\n     */\n    export function extractOffsetAndMortonKeyFromKey(key: number, bitshift: number = 4) {\n        let offset = 0;\n        let mortonCode = key;\n        let i = 0;\n        // Compute the offset\n        for (; i < bitshift; i++) {\n            // Note, we use 52, because 2^53-1 is the biggest value, the highest value\n            // that can be set is the bit in the 52th position.\n            const num = powerOfTwo[52 - i];\n            if (mortonCode >= num) {\n                mortonCode -= num;\n                offset += powerOfTwo[bitshift - 1 - i];\n            }\n        }\n        // We subtract half of the total amount, this undoes what is computed in getShiftedOffset\n        offset -= powerOfTwo[bitshift - 1];\n        return { offset, mortonCode };\n    }\n\n    /**\n     * Returns the key of the parent. Key must have been computed using the function\n     * [[getKeyForTileKeyAndOffset]].\n     *\n     * @param calculatedKey Key to decompose\n     * @param bitshift Bit shift used to create the key\n     */\n    export function getParentKeyFromKey(calculatedKey: number, bitshift: number = 4) {\n        const { offset, mortonCode } = extractOffsetAndMortonKeyFromKey(calculatedKey, bitshift);\n        const parentTileKey = TileKey.fromMortonCode(TileKey.parentMortonCode(mortonCode));\n        return getKeyForTileKeyAndOffset(parentTileKey, offset, bitshift);\n    }\n\n    /**\n     * Packs the supplied offset into the high bits, where the highbits are between 2^52 and\n     * 2^(52-bitshift).\n     *\n     * Offsets are wrapped around, to fit in the offsetBits. In practice, this doesn't really\n     * matter, this is primarily used to find a unique id, if there is an offset 10, which is\n     * wrapped to 2, it doesn't matter, because the offset of 10 is still stored in the tile.\n     * What can be a problem though is that the cache gets filled up and isn't emptied.\n     *\n     * Note, because bit shifting in JavaScript works on 32 bit integers, we use powers of 2 to set\n     * the high bits instead.\n     *\n     * @param offset Offset to pack into the high bits.\n     * @param offsetBits How many bits to use to pack the offset.\n     */\n    function getShiftedOffset(offset: number, offsetBits: number = 4) {\n        let result = 0;\n        const totalOffsetsToStore = powerOfTwo[offsetBits];\n        //Offsets are stored by adding half 2 ^ (bitshift - 1), i.e.half of the max amount stored,\n        //and then wrapped based on this value.For example, given a bitshift of 3, and an offset -\n        //3, it would have 4 added(half of 2 ^ 3), and be stored as 1, 3 would have 4 added and be\n        //stored as 7, 4 would be added with 4 and be stored as 0 (it wraps around).\n        offset += totalOffsetsToStore / 2;\n        while (offset < 0) {\n            offset += totalOffsetsToStore;\n        }\n        while (offset >= totalOffsetsToStore) {\n            offset -= totalOffsetsToStore;\n        }\n        // Offset is now a number between >= 0 and < totalOffsetsToStore\n        for (let i = 0; i < offsetBits && offset > 0; i++) {\n            // tslint:disable: no-bitwise\n            // 53 is used because 2^53-1 is the biggest number that Javascript can represent as an\n            // integer safely.\n            if (offset & 0x1) {\n                result += powerOfTwo[53 - offsetBits + i];\n            }\n            offset >>>= 1;\n            // tslint:enable: no-bitwise\n        }\n        assert(offset === 0);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport class EarthConstants {\n    /** The equatorial circumference in meters. */\n    static EQUATORIAL_CIRCUMFERENCE: number = 40075016.6855784861531768177614;\n\n    /** The equatorial radius in meters. */\n    static EQUATORIAL_RADIUS: number = 6378137.0;\n\n    /** The lowest point on earth (Dead Sea) in meters. */\n    static MIN_ELEVATION: number = -433.0;\n\n    /** The highest point on earth (Mt. Everest) in meters. */\n    static MAX_ELEVATION: number = 8848.0;\n\n    /** The highest artificial structure (building) on earth, Burj Khalifa tower in Dubai */\n    static MAX_BUILDING_HEIGHT: number = 828;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * An interface representing bounding box in world coordinates.\n */\nexport interface Box3Like {\n    /**\n     * The minimum position in world coordinates of this bounding box.\n     */\n    readonly min: Vector3Like;\n\n    /**\n     * The maximum position in world coordinates of this bounding box.\n     */\n    readonly max: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the [[Box3Like]] interface.\n *\n * @param object A valid object.\n */\nexport function isBox3Like(object: {}): object is Box3Like {\n    const box3 = object as Partial<Box3Like>;\n    return box3.min !== undefined && box3.max !== undefined;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransformLike } from \"./TransformLike\";\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[OrientedBox3Like]] is used to represent oriented bounding box.\n */\nexport interface OrientedBox3Like extends TransformLike {\n    /**\n     * The extents of this bounding box.\n     */\n    readonly extents: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[OrientedBox3Like]].\n *\n * @param object The object.\n */\nexport function isOrientedBox3Like(object: {}): object is OrientedBox3Like {\n    const obb = object as Partial<OrientedBox3Like>;\n    return (\n        obb.position !== undefined &&\n        obb.xAxis !== undefined &&\n        obb.yAxis !== undefined &&\n        obb.zAxis !== undefined &&\n        obb.extents !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\n\n/**\n * The type of projection.\n */\nexport enum ProjectionType {\n    /**\n     * A type of [Projection] with zero curvature.\n     */\n    Planar,\n\n    /**\n     * A spherical [Projection].\n     */\n    Spherical\n}\n\n/**\n * `Projection` is used to convert positions from geo coordinates to world coordinates and vice\n * versa.\n */\nexport abstract class Projection {\n    /**\n     * The type of this [Projection].\n     */\n    abstract get type(): ProjectionType;\n\n    /**\n     * Constructs the Projection\n     *\n     * @param unitScale How to transform the projected coordinates to world units.\n     */\n    constructor(readonly unitScale: number) {\n        //Prevent empty constructor error.\n    }\n\n    /**\n     * Returns the world extents in world coordinates.\n     *\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     * @param result The optional object that will be used to create the resulting bounding box.\n     */\n    abstract worldExtent<Bounds extends Box3Like>(\n        minElevation: number,\n        maxElevation: number,\n        result?: Bounds\n    ): Bounds;\n\n    /**\n     * Projects a point from geo coordinates (latitude, longitude, altitude) to world coordinates\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const worldPos = new THREE.Vector3();\n     * projection.projectPoint(geoPos, worldPos);\n     * ```\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param result The optional object used to store the resulting world position, result must\n     * implement [[Vector3Like]].\n     */\n    abstract projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates;\n\n    /**\n     * Gets the [[TransformLike]] of the local tangent space at the given geo coordinates.\n     *\n     * @param geoPoint The geo coordinates.\n     * @param result The [[TransformLike]].\n     */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, 1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, 1, result.zAxis);\n        return result;\n    }\n\n    /**\n     * Returns the geo coordinates (latitude, longitude, altitude) from the given world position\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectPoint(worldPoint: Vector3Like): GeoCoordinates;\n\n    /**\n     * Returns the altitude at the given world position (x,y,z) in meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectAltitude(worldPoint: Vector3Like): number;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox);\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     */\n    abstract projectBox(geoBox: GeoBox): Box3Like;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox, new THREE.Box3());\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param result The resulting [[OrientedBox3Like]].\n     */\n    abstract projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: WorldBoundingBox\n    ): WorldBoundingBox;\n\n    /**\n     * Converts a bounding box in world coordinates to a bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldBox The bounding box in world coordinates.\n     */\n    abstract unprojectBox(worldBox: Box3Like): GeoBox;\n\n    /**\n     * Returns the scaling factor that must be used to convert the units used by `worldPoint` to\n     * meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract getScaleFactor(worldPoint: Vector3Like): number;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract surfaceNormal(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     * @returns The resulting normal vector.\n     */\n    abstract surfaceNormal<Normal extends Vector3Like>(\n        worldPoint: Vector3Like,\n        result: Normal\n    ): Normal;\n\n    /**\n     * Returns the signed distance between the given coordinates and\n     * the closest point on the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract groundDistance(worldPoint: Vector3Like): number;\n\n    /**\n     * Scales the given world coordinates to the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract scalePointToSurface(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid world position for the given source projection.\n     * @returns The world position reprojected using this [[Projection]].\n     */\n    reprojectPoint(sourceProjection: Projection, worldPos: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     */\n    reprojectPoint<WorldCoordinates extends Vector3Like>(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result: WorldCoordinates\n    ): typeof result;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     * Implementations should be aware of worldPos and result may be one object\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     * @hidden\n     */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === this) {\n            if (result === undefined) {\n                return { x: worldPos.x, y: worldPos.y, z: worldPos.z };\n            }\n            result.x = worldPos.x;\n            result.y = worldPos.y;\n            result.z = worldPos.z;\n            return result;\n        }\n        return this.projectPoint(sourceProjection.unprojectPoint(worldPos), result);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { ColorUtils } from \"./ColorUtils\";\nimport { Env, MapEnv } from \"./Env\";\nimport { ExponentialInterpolant } from \"./ExponentialInterpolant\";\nimport { Expr, ExprScope, Value } from \"./Expr\";\nimport {\n    InterpolatedProperty,\n    InterpolatedPropertyDefinition,\n    InterpolationMode\n} from \"./InterpolatedPropertyDefs\";\nimport {\n    parseStringEncodedNumeral,\n    StringEncodedColorFormats,\n    StringEncodedMetricFormats,\n    StringEncodedNumeralFormat,\n    StringEncodedNumeralFormatMaxSize,\n    StringEncodedNumeralFormats,\n    StringEncodedNumeralType\n} from \"./StringEncodedNumeral\";\n\nconst logger = LoggerManager.instance.create(\"InterpolatedProperty\");\n\nconst interpolants = [\n    THREE.DiscreteInterpolant,\n    THREE.LinearInterpolant,\n    THREE.CubicInterpolant,\n    ExponentialInterpolant\n];\n\nconst tmpBuffer = new Array<number>(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Checks if a property is interpolated.\n * @param p property to be checked\n */\nexport function isInterpolatedPropertyDefinition<T>(\n    p: any\n): p is InterpolatedPropertyDefinition<T> {\n    if (\n        p &&\n        p.interpolationMode === undefined &&\n        Array.isArray(p.values) &&\n        p.values.length > 0 &&\n        p.values[0] !== undefined &&\n        Array.isArray(p.zoomLevels) &&\n        p.zoomLevels.length > 0 &&\n        p.zoomLevels[0] !== undefined &&\n        p.values.length === p.zoomLevels.length\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Type guard to check if an object is an instance of `InterpolatedProperty`.\n */\nexport function isInterpolatedProperty(p: any): p is InterpolatedProperty {\n    if (\n        p &&\n        p.interpolationMode !== undefined &&\n        p.zoomLevels instanceof Float32Array &&\n        p.values !== undefined &&\n        p.values.length > 0 &&\n        (p.zoomLevels.length === p.values.length / 4 ||\n            p.zoomLevels.length === p.values.length / 3 ||\n            p.zoomLevels.length === p.values.length)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * A temp [[Env]] containing the arguments passed to `getPropertyValue`.\n *\n * [[dynamicPropertiesTempEnv]] is used when `getPropertyValue` is\n * invoked with explicit values for `zoom` and `pixelToMeters` instead\n * of with an [[Env]].\n *\n * @hidden\n */\nconst dynamicPropertiesTempEnv = new MapEnv({\n    $zoom: 0,\n    $pixelToMeters: 1\n});\n\n/**\n * Get the value of the specified property at the given zoom level.\n *\n * @param property Property of a technique.\n * @param env The [[Env]] used to evaluate the property.\n */\nexport function getPropertyValue(\n    property: Value | Expr | InterpolatedProperty | undefined,\n    env: Env\n): any;\n\n/**\n * Get the value of the specified property at the given zoom level.\n *\n * @param property Property of a technique.\n * @param level Display level the property should be rendered at.\n * @param pixelToMeters Optional pixels to meters conversion factor (needed for proper\n * interpolation of `length` values).\n *\n */\nexport function getPropertyValue(\n    property: Value | Expr | InterpolatedProperty | undefined,\n    level: number,\n    pixelToMeters?: number\n): any;\n\nexport function getPropertyValue(\n    property: Value | Expr | InterpolatedProperty | undefined,\n    envOrLevel: number | Env,\n    pixelToMeters: number = 1.0\n): any {\n    if (Expr.isExpr(property)) {\n        let env: Env;\n\n        if (typeof envOrLevel === \"number\") {\n            dynamicPropertiesTempEnv.entries.$zoom = envOrLevel;\n            dynamicPropertiesTempEnv.entries.$pixelToMeters = pixelToMeters;\n            env = dynamicPropertiesTempEnv;\n        } else {\n            env = envOrLevel;\n        }\n\n        return property.evaluate(env, ExprScope.Dynamic);\n    }\n\n    let level: number;\n\n    if (typeof envOrLevel === \"number\") {\n        level = envOrLevel;\n    } else {\n        level = envOrLevel.lookup(\"$zoom\") as number;\n        pixelToMeters = envOrLevel.lookup(\"$pixelToMeters\") as number;\n    }\n\n    // Non-interpolated property parsing\n    if (!isInterpolatedProperty(property)) {\n        if (typeof property !== \"string\") {\n            // Property in numeric or array, etc. format\n            return property;\n        } else {\n            const value = parseStringEncodedNumeral(property, pixelToMeters);\n            return value !== undefined ? value : property;\n        }\n        // Interpolated property\n    } else if (property._stringEncodedNumeralType !== undefined) {\n        switch (property._stringEncodedNumeralType) {\n            case StringEncodedNumeralType.Meters:\n            case StringEncodedNumeralType.Pixels:\n                return getInterpolatedMetric(property, level, pixelToMeters);\n            case StringEncodedNumeralType.Hex:\n            case StringEncodedNumeralType.RGB:\n            case StringEncodedNumeralType.RGBA:\n            case StringEncodedNumeralType.HSL:\n                return getInterpolatedColor(property, level);\n        }\n    }\n    return getInterpolatedMetric(property, level, pixelToMeters);\n}\n\nfunction getInterpolatedMetric(\n    property: InterpolatedProperty,\n    level: number,\n    pixelToMeters: number\n): number {\n    const nChannels = property.values.length / property.zoomLevels.length;\n    const interpolant = new interpolants[property.interpolationMode](\n        property.zoomLevels,\n        property.values,\n        nChannels\n    );\n    if (\n        property.interpolationMode === InterpolationMode.Exponential &&\n        property.exponent !== undefined\n    ) {\n        (interpolant as ExponentialInterpolant).exponent = property.exponent;\n    }\n    interpolant.evaluate(level);\n\n    if (property._stringEncodedNumeralDynamicMask === undefined) {\n        return interpolant.resultBuffer[0];\n    } else {\n        const maskInterpolant = new interpolants[property.interpolationMode](\n            property.zoomLevels,\n            property._stringEncodedNumeralDynamicMask,\n            1\n        );\n        if (\n            property.interpolationMode === InterpolationMode.Exponential &&\n            property.exponent !== undefined\n        ) {\n            (maskInterpolant as ExponentialInterpolant).exponent = property.exponent;\n        }\n        maskInterpolant.evaluate(level);\n\n        return (\n            interpolant.resultBuffer[0] *\n            (1 + maskInterpolant.resultBuffer[0] * (pixelToMeters - 1))\n        );\n    }\n}\n\nfunction getInterpolatedColor(property: InterpolatedProperty, level: number): number {\n    const nChannels = property.values.length / property.zoomLevels.length;\n    const interpolant = new interpolants[property.interpolationMode](\n        property.zoomLevels,\n        property.values,\n        nChannels\n    );\n    if (\n        property.interpolationMode === InterpolationMode.Exponential &&\n        property.exponent !== undefined\n    ) {\n        (interpolant as ExponentialInterpolant).exponent = property.exponent;\n    }\n    interpolant.evaluate(level);\n\n    assert(nChannels === 3 || nChannels === 4);\n    // ColorUtils.getHexFromRgba() does not clamp the values which may be out of\n    // color channels range (0 <= c <= 1) after interpolation.\n    if (nChannels === 4) {\n        return ColorUtils.getHexFromRgba(\n            THREE.Math.clamp(interpolant.resultBuffer[0], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[1], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[2], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[3], 0, 1)\n        );\n    } else {\n        return ColorUtils.getHexFromRgb(\n            THREE.Math.clamp(interpolant.resultBuffer[0], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[1], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[2], 0, 1)\n        );\n    }\n}\n\n/**\n * Convert JSON representation of interpolated property to internal, normalized version that\n * can be evaluated by [[getPropertyValue]].\n */\nexport function createInterpolatedProperty(\n    prop: InterpolatedPropertyDefinition<unknown>\n): InterpolatedProperty | undefined {\n    removeDuplicatePropertyValues(prop);\n\n    const interpolationMode =\n        prop.interpolation !== undefined\n            ? InterpolationMode[prop.interpolation]\n            : InterpolationMode.Discrete;\n\n    const zoomLevels = new Float32Array(prop.zoomLevels);\n\n    const firstValue = prop.values[0];\n    switch (typeof firstValue) {\n        default:\n        case \"number\":\n        case \"boolean\":\n            return {\n                interpolationMode,\n                zoomLevels,\n                values: new Float32Array(prop.values as any),\n                exponent: prop.exponent\n            };\n        case \"string\":\n            // TODO: Minimize effort for pre-matching the numeral format.\n            const matchedFormat = StringEncodedNumeralFormats.find(format =>\n                format.regExp.test(firstValue)\n            );\n\n            if (matchedFormat === undefined) {\n                if (interpolationMode === InterpolationMode.Discrete) {\n                    return {\n                        interpolationMode,\n                        zoomLevels,\n                        values: prop.values\n                    };\n                }\n\n                logger.error(`No StringEncodedNumeralFormat matched ${firstValue}.`);\n                return undefined;\n            }\n\n            let needsMask = false;\n\n            const propValues = new Float32Array(prop.values.length * matchedFormat.size);\n            const maskValues = new Float32Array(prop.values.length);\n            needsMask = procesStringEnocodedNumeralInterpolatedProperty(\n                matchedFormat,\n                prop as InterpolatedPropertyDefinition<string>,\n                propValues,\n                maskValues\n            );\n\n            return {\n                interpolationMode,\n                zoomLevels,\n                values: propValues,\n                exponent: prop.exponent,\n                _stringEncodedNumeralType: matchedFormat.type,\n                _stringEncodedNumeralDynamicMask: needsMask ? maskValues : undefined\n            };\n    }\n}\n\nfunction removeDuplicatePropertyValues<T>(p: InterpolatedPropertyDefinition<T>) {\n    const eps = 0.001;\n\n    // detect cubic interpolations and remove stops\n    // closer than `eps`, this is needed to avoid\n    // possible NaN generated by the cubic interpolator.\n    const isCubic = p.interpolation === \"Cubic\";\n\n    for (let i = 0; i < p.values.length; ++i) {\n        const firstIdx = p.zoomLevels.findIndex(a => {\n            return isCubic ? Math.abs(a - p.zoomLevels[i]) < eps : a === p.zoomLevels[i];\n        });\n        if (firstIdx !== i) {\n            p.zoomLevels.splice(--i, 1);\n            p.values.splice(--i, 1);\n        }\n    }\n}\n\nfunction procesStringEnocodedNumeralInterpolatedProperty(\n    baseFormat: StringEncodedNumeralFormat,\n    prop: InterpolatedPropertyDefinition<string>,\n    propValues: Float32Array,\n    maskValues: Float32Array\n): boolean {\n    let needsMask = false;\n    const allowedValueFormats =\n        baseFormat.type === StringEncodedNumeralType.Meters ||\n        baseFormat.type === StringEncodedNumeralType.Pixels\n            ? StringEncodedMetricFormats\n            : StringEncodedColorFormats;\n\n    for (let valueIdx = 0; valueIdx < prop.values.length; ++valueIdx) {\n        let matched = false;\n        for (const valueFormat of allowedValueFormats) {\n            const value = prop.values[valueIdx];\n            matched = valueFormat.decoder(value, tmpBuffer);\n            if (!matched) {\n                continue;\n            }\n\n            if (valueFormat.mask !== undefined) {\n                maskValues[valueIdx] = valueFormat.mask;\n                needsMask = true;\n            }\n\n            for (let i = 0; i < valueFormat.size; ++i) {\n                propValues[valueIdx * valueFormat.size + i] = tmpBuffer[i];\n            }\n            break;\n        }\n        if (!matched) {\n            throw Error(\n                `Not all interpolation values match the same format: ${JSON.stringify(prop)}`\n            );\n        }\n    }\n\n    return needsMask;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Unit of measurement used to specify a font's size.\n */\nexport enum FontUnit {\n    Em,\n    Pixel,\n    Point,\n    Percent\n}\n\n/**\n * Pair of unit and size specifying a font's size.\n */\nexport interface FontSize {\n    unit: FontUnit;\n    size: number;\n    backgroundSize: number;\n}\n\n/**\n * Style to be used when rendering glyphs.\n */\nexport enum FontStyle {\n    Regular,\n    Bold,\n    Italic,\n    BoldItalic\n}\n\n/**\n * Variant to be used when rendering.\n */\nexport enum FontVariant {\n    Regular,\n    AllCaps,\n    SmallCaps\n}\n\n/**\n * Vertical alignment to be used when placing text.\n */\nexport enum VerticalAlignment {\n    Above = 0.0,\n    Center = -0.5,\n    Below = -1.0\n}\n\n/**\n * Horizontal alignment to be used when placing text.\n */\nexport enum HorizontalAlignment {\n    Left = 0.0,\n    Center = -0.5,\n    Right = -1.0\n}\n\n/**\n * Text wrapping rule used when `lineWidth` is reached.\n */\nexport enum WrappingMode {\n    None,\n    Character,\n    Word\n}\n\n/**\n * Namespace containing default values for all members of [[TextRenderParameters]] and\n * [[TextLayoutParameters]].\n */\nexport namespace DefaultTextStyle {\n    export const DEFAULT_FONT_NAME: string = \"\";\n    export const DEFAULT_FONT_SIZE: FontSize = {\n        unit: Object.freeze(FontUnit.Pixel),\n        size: Object.freeze(16.0),\n        backgroundSize: Object.freeze(0.0)\n    };\n    export const DEFAULT_FONT_STYLE: FontStyle = FontStyle.Regular;\n    export const DEFAULT_FONT_VARIANT: FontVariant = FontVariant.Regular;\n    export const DEFAULT_ROTATION: number = 0.0;\n    export const DEFAULT_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_OPACITY: number = 1.0;\n    export const DEFAULT_BACKGROUND_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_BACKGROUND_OPACITY: number = 0.0;\n\n    export const DEFAULT_TRACKING: number = 0.0;\n    export const DEFAULT_LEADING: number = 0.0;\n    export const DEFAULT_MAX_LINES: number = Infinity;\n    export const DEFAULT_LINE_WIDTH: number = Infinity;\n    export const DEFAULT_CANVAS_ROTATION: number = 0.0;\n    export const DEFAULT_LINE_ROTATION: number = 0.0;\n    export const DEFAULT_WRAPPING_MODE: WrappingMode = WrappingMode.Word;\n    export const DEFAULT_VERTICAL_ALIGNMENT: VerticalAlignment = VerticalAlignment.Above;\n    export const DEFAULT_HORIZONTAL_ALIGNMENT: HorizontalAlignment = HorizontalAlignment.Left;\n}\n\n/**\n * [[TextCanvas]] text rendering parameters.\n */\nexport interface TextRenderParameters {\n    fontName?: string;\n    fontSize?: FontSize;\n    fontStyle?: FontStyle;\n    fontVariant?: FontVariant;\n    rotation?: number;\n    color?: THREE.Color;\n    backgroundColor?: THREE.Color;\n    opacity?: number;\n    backgroundOpacity?: number;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextRenderStyle {\n    private m_params: TextRenderParameters;\n\n    /**\n     * Creates a new `TextRenderStyle`.\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns New `TextRenderStyle`.\n     */\n    constructor(params: TextRenderParameters = {}) {\n        this.m_params = {\n            fontName:\n                params.fontName !== undefined\n                    ? params.fontName\n                    : DefaultTextStyle.DEFAULT_FONT_NAME,\n            fontSize:\n                params.fontSize !== undefined\n                    ? params.fontSize\n                    : {\n                          unit: DefaultTextStyle.DEFAULT_FONT_SIZE.unit,\n                          size: DefaultTextStyle.DEFAULT_FONT_SIZE.size,\n                          backgroundSize: DefaultTextStyle.DEFAULT_FONT_SIZE.backgroundSize\n                      },\n            fontStyle:\n                params.fontStyle !== undefined\n                    ? params.fontStyle\n                    : DefaultTextStyle.DEFAULT_FONT_STYLE,\n            fontVariant:\n                params.fontVariant !== undefined\n                    ? params.fontVariant\n                    : DefaultTextStyle.DEFAULT_FONT_VARIANT,\n            rotation:\n                params.rotation !== undefined ? params.rotation : DefaultTextStyle.DEFAULT_ROTATION,\n            color:\n                params.color !== undefined\n                    ? params.color\n                    : new THREE.Color(DefaultTextStyle.DEFAULT_COLOR),\n            opacity:\n                params.opacity !== undefined ? params.opacity : DefaultTextStyle.DEFAULT_OPACITY,\n            backgroundColor:\n                params.backgroundColor !== undefined\n                    ? params.backgroundColor\n                    : new THREE.Color(DefaultTextStyle.DEFAULT_BACKGROUND_COLOR),\n            backgroundOpacity:\n                params.backgroundOpacity !== undefined\n                    ? params.backgroundOpacity\n                    : DefaultTextStyle.DEFAULT_BACKGROUND_OPACITY\n        };\n    }\n\n    /**\n     * Current [[TextRenderParameters]] for this style.\n     */\n    get params(): TextRenderParameters {\n        return this.m_params;\n    }\n    set params(value: TextRenderParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    get fontName(): string {\n        return this.m_params.fontName!;\n    }\n    set fontName(value: string) {\n        this.m_params.fontName = value;\n    }\n\n    /**\n     * Collection of unit and sizes to apply for the currently active [[Font]].\n     */\n    get fontSize(): FontSize {\n        return this.m_params.fontSize!;\n    }\n    set fontSize(value: FontSize) {\n        this.m_params.fontSize = value;\n    }\n\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    get fontStyle(): FontStyle {\n        return this.m_params.fontStyle!;\n    }\n    set fontStyle(value: FontStyle) {\n        this.m_params.fontStyle = value;\n    }\n\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    get fontVariant(): FontVariant {\n        return this.m_params.fontVariant!;\n    }\n    set fontVariant(value: FontVariant) {\n        this.m_params.fontVariant = value;\n    }\n\n    /**\n     * Glyph local rotation (radians).\n     */\n    get rotation(): number {\n        return this.m_params.rotation!;\n    }\n    set rotation(value: number) {\n        this.m_params.rotation = value;\n    }\n\n    /**\n     * Glyph color.\n     */\n    get color(): THREE.Color {\n        return this.m_params.color!;\n    }\n    set color(value: THREE.Color) {\n        this.m_params.color = value;\n    }\n\n    /**\n     * Glyph background color.\n     */\n    get backgroundColor(): THREE.Color {\n        return this.m_params.backgroundColor!;\n    }\n    set backgroundColor(value: THREE.Color) {\n        this.m_params.backgroundColor = value;\n    }\n\n    /**\n     * Glyph opacity.\n     */\n    get opacity(): number {\n        return this.m_params.opacity!;\n    }\n    set opacity(value: number) {\n        this.m_params.opacity = value;\n    }\n\n    /**\n     * Glyph background opacity.\n     */\n    get backgroundOpacity(): number {\n        return this.m_params.backgroundOpacity!;\n    }\n    set backgroundOpacity(value: number) {\n        this.m_params.backgroundOpacity = value;\n    }\n\n    /**\n     * Clone this `TextRenderStyle`.\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns Cloned `TextRenderStyle`.\n     */\n    clone(params: TextRenderParameters = {}): TextRenderStyle {\n        return new TextRenderStyle({ ...this.m_params, ...params });\n    }\n}\n\n/**\n * [[TextCanvas]] text layout parameters.\n */\nexport interface TextLayoutParameters {\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: WrappingMode;\n    verticalAlignment?: VerticalAlignment;\n    horizontalAlignment?: HorizontalAlignment;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextLayoutStyle {\n    private m_params: TextLayoutParameters;\n\n    /**\n     * Creates a new `TextLayoutStyle`.\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns New `TextLayoutStyle`.\n     */\n    constructor(params: TextLayoutParameters = {}) {\n        this.m_params = {\n            tracking:\n                params.tracking !== undefined ? params.tracking : DefaultTextStyle.DEFAULT_TRACKING,\n            leading:\n                params.leading !== undefined ? params.leading : DefaultTextStyle.DEFAULT_LEADING,\n            maxLines:\n                params.maxLines !== undefined\n                    ? params.maxLines\n                    : DefaultTextStyle.DEFAULT_MAX_LINES,\n            lineWidth:\n                params.lineWidth !== undefined\n                    ? params.lineWidth\n                    : DefaultTextStyle.DEFAULT_LINE_WIDTH,\n            canvasRotation:\n                params.canvasRotation !== undefined\n                    ? params.canvasRotation\n                    : DefaultTextStyle.DEFAULT_CANVAS_ROTATION,\n            lineRotation:\n                params.lineRotation !== undefined\n                    ? params.lineRotation\n                    : DefaultTextStyle.DEFAULT_LINE_ROTATION,\n            wrappingMode:\n                params.wrappingMode !== undefined\n                    ? params.wrappingMode\n                    : DefaultTextStyle.DEFAULT_WRAPPING_MODE,\n            verticalAlignment:\n                params.verticalAlignment !== undefined\n                    ? params.verticalAlignment\n                    : DefaultTextStyle.DEFAULT_VERTICAL_ALIGNMENT,\n            horizontalAlignment:\n                params.horizontalAlignment !== undefined\n                    ? params.horizontalAlignment\n                    : DefaultTextStyle.DEFAULT_HORIZONTAL_ALIGNMENT\n        };\n    }\n\n    /**\n     * Current [[TextLayoutParameters]] for this style.\n     */\n    get params(): TextLayoutParameters {\n        return this.m_params;\n    }\n    set params(value: TextLayoutParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Inter-glyph spacing (pixels). Scaled by [[FontSize]].\n     */\n    get tracking(): number {\n        return this.m_params.tracking!;\n    }\n    set tracking(value: number) {\n        this.m_params.tracking = value;\n    }\n\n    /**\n     * Inter-line spacing (pixels). Scaled by [[FontSize]].\n     */\n    get leading(): number {\n        return this.m_params.leading!;\n    }\n    set leading(value: number) {\n        this.m_params.leading = value;\n    }\n\n    /**\n     * Maximum number of lines to be considered when using [[TextCanvas]].\n     */\n    get maxLines(): number {\n        return this.m_params.maxLines!;\n    }\n    set maxLines(value: number) {\n        this.m_params.maxLines = value;\n    }\n\n    /**\n     * Maximum line width (pixels).\n     */\n    get lineWidth(): number {\n        return this.m_params.lineWidth!;\n    }\n    set lineWidth(value: number) {\n        this.m_params.lineWidth = value;\n    }\n\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    get canvasRotation(): number {\n        return this.m_params.canvasRotation!;\n    }\n    set canvasRotation(value: number) {\n        this.m_params.canvasRotation = value;\n    }\n\n    /**\n     * Line typesetting rotation (radians).\n     */\n    get lineRotation(): number {\n        return this.m_params.lineRotation!;\n    }\n    set lineRotation(value: number) {\n        this.m_params.lineRotation = value;\n    }\n\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    get wrappingMode(): WrappingMode {\n        return this.m_params.wrappingMode!;\n    }\n    set wrappingMode(value: WrappingMode) {\n        this.m_params.wrappingMode = value;\n    }\n\n    /**\n     * Text position regarding the baseline.\n     */\n    get verticalAlignment(): VerticalAlignment {\n        return this.m_params.verticalAlignment!;\n    }\n    set verticalAlignment(value: VerticalAlignment) {\n        this.m_params.verticalAlignment = value;\n    }\n\n    /**\n     * Text position inside a line.\n     */\n    get horizontalAlignment(): HorizontalAlignment {\n        return this.m_params.horizontalAlignment!;\n    }\n    set horizontalAlignment(value: HorizontalAlignment) {\n        this.m_params.horizontalAlignment = value;\n    }\n\n    /**\n     * Clone this `TextLayoutStyle`.\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns Cloned `TextLayoutStyle`.\n     */\n    clone(params: TextLayoutParameters = {}): TextLayoutStyle {\n        return new TextLayoutStyle({ ...this.m_params, ...params });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoCoordinates } from \"./GeoCoordinates\";\n\nimport * as THREE from \"three\";\n\n/**\n * `GeoBox` is used to represent a bounding box in geo coordinates.\n */\nexport class GeoBox {\n    /**\n     * Returns a `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    static fromCoordinates(southWest: GeoCoordinates, northEast: GeoCoordinates): GeoBox {\n        return new GeoBox(southWest, northEast);\n    }\n\n    /**\n     * Constructs a new `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    constructor(readonly southWest: GeoCoordinates, readonly northEast: GeoCoordinates) {}\n\n    /**\n     * Returns the minimum altitude or `undefined`.\n     */\n    get minAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.min(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the maximum altitude or `undefined`.\n     */\n    get maxAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.max(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the south latitude in degrees of this `GeoBox`.\n     */\n    get south(): number {\n        return this.southWest.latitude;\n    }\n\n    /**\n     * Returns the north altitude in degrees of this `GeoBox`.\n     */\n    get north(): number {\n        return this.northEast.latitude;\n    }\n\n    /**\n     * Returns the west longitude in degrees of this `GeoBox`.\n     */\n    get west(): number {\n        return this.southWest.longitude;\n    }\n\n    /**\n     * Returns the east longitude in degrees of this `GeoBox`.\n     */\n    get east(): number {\n        return this.northEast.longitude;\n    }\n\n    /**\n     * Returns the center of this `GeoBox`.\n     */\n    get center(): GeoCoordinates {\n        const latitude = (this.south + this.north) * 0.5;\n        const { west, east } = this;\n        const { minAltitude, altitudeSpan } = this;\n\n        let altitude: number | undefined;\n\n        if (minAltitude !== undefined && altitudeSpan !== undefined) {\n            altitude = minAltitude + altitudeSpan * 0.5;\n        }\n\n        if (west < east) {\n            return new GeoCoordinates(latitude, (west + east) * 0.5, altitude);\n        }\n\n        let longitude = (360 + east + west) * 0.5;\n\n        if (longitude > 360) {\n            longitude -= 360;\n        }\n\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns the latitude span in radians.\n     */\n    get latitudeSpanInRadians(): number {\n        return THREE.Math.degToRad(this.latitudeSpan);\n    }\n\n    /**\n     * Returns the longitude span in radians.\n     */\n    get longitudeSpanInRadians(): number {\n        return THREE.Math.degToRad(this.longitudeSpan);\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     */\n    get latitudeSpan(): number {\n        return this.north - this.south;\n    }\n\n    get altitudeSpan(): number | undefined {\n        if (this.maxAltitude === undefined || this.minAltitude === undefined) {\n            return undefined;\n        }\n        return this.maxAltitude - this.minAltitude;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     */\n    get longitudeSpan(): number {\n        let width = this.northEast.longitude - this.southWest.longitude;\n\n        if (width < 0) {\n            width += 360;\n        }\n\n        return width;\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     * @deprecated Use [[latitudeSpan]] instead.\n     */\n    get latitudeSpanInDegrees(): number {\n        return this.latitudeSpan;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     * @deprecated Use [[longitudeSpan]] instead.\n     */\n    get longitudeSpanInDegrees(): number {\n        return this.longitudeSpan;\n    }\n\n    /**\n     * Returns `true` if the given geo coordinates are contained in this `GeoBox`.\n     *\n     * @param point The geo coordinates.\n     */\n    contains(point: GeoCoordinates): boolean {\n        if (\n            point.altitude === undefined ||\n            this.minAltitude === undefined ||\n            this.maxAltitude === undefined\n        ) {\n            return this.containsHelper(point);\n        }\n\n        const isFlat = this.minAltitude === this.maxAltitude;\n        const isSameAltitude = this.minAltitude === point.altitude;\n        const isWithinAltitudeRange =\n            this.minAltitude <= point.altitude && this.maxAltitude > point.altitude;\n\n        // If box is flat, we should check the altitude and containment,\n        // otherwise we should check also altitude difference where we consider\n        // point to be inside if alt is from [m_minAltitude, m_maxAltitude) range!\n        if (isFlat ? isSameAltitude : isWithinAltitudeRange) {\n            return this.containsHelper(point);\n        }\n\n        return false;\n    }\n\n    /**\n     * Clones this `GeoBox` instance.\n     */\n    clone(): GeoBox {\n        return new GeoBox(this.southWest, this.northEast);\n    }\n\n    /**\n     * Update the bounding box by considering a given point.\n     *\n     * @param point The point that may expand the bounding box.\n     */\n    growToContain(point: GeoCoordinates) {\n        this.southWest.latitude = Math.min(this.southWest.latitude, point.latitude);\n        this.southWest.longitude = Math.min(this.southWest.longitude, point.longitude);\n        this.southWest.altitude =\n            this.southWest.altitude !== undefined && point.altitude !== undefined\n                ? Math.min(this.southWest.altitude, point.altitude)\n                : this.southWest.altitude !== undefined\n                ? this.southWest.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n\n        this.northEast.latitude = Math.max(this.northEast.latitude, point.latitude);\n        this.northEast.longitude = Math.max(this.northEast.longitude, point.longitude);\n        this.northEast.altitude =\n            this.northEast.altitude !== undefined && point.altitude !== undefined\n                ? Math.max(this.northEast.altitude, point.altitude)\n                : this.northEast.altitude !== undefined\n                ? this.northEast.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n    }\n\n    private containsHelper(point: GeoCoordinates): boolean {\n        if (point.latitude < this.southWest.latitude || point.latitude >= this.northEast.latitude) {\n            return false;\n        }\n\n        const { west, east } = this;\n\n        if (east > west) {\n            return point.longitude >= west && point.longitude < east;\n        }\n\n        return point.longitude > east || point.longitude <= west;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { FlatTileBoundingBoxGenerator } from \"./FlatTileBoundingBoxGenerator\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TileKeyUtils } from \"./TileKeyUtils\";\nimport { TileTreeTraverse } from \"./TileTreeTraverse\";\n\n/**\n * The `TilingScheme` represents how the data is tiled.\n */\nexport class TilingScheme {\n    readonly boundingBoxGenerator: FlatTileBoundingBoxGenerator;\n    readonly tileTreeTraverse: TileTreeTraverse;\n\n    /**\n     * Constructs a new `TilingScheme` with the given subdivision scheme and projection.\n     *\n     * @param subdivisionScheme The subdivision scheme used by this `TilingScheme`.\n     * @param projection The projection used by this `TilingScheme`.\n     */\n    constructor(readonly subdivisionScheme: SubdivisionScheme, readonly projection: Projection) {\n        this.boundingBoxGenerator = new FlatTileBoundingBoxGenerator(this);\n        this.tileTreeTraverse = new TileTreeTraverse(subdivisionScheme);\n    }\n\n    /**\n     * Returns the sub tile keys of the given tile.\n     *\n     * @param tileKey The [[TileKey]].\n     * @returns The list of the sub tile keys.\n     */\n    getSubTileKeys(tileKey: TileKey): Iterable<TileKey> {\n        return this.tileTreeTraverse.subTiles(tileKey);\n    }\n\n    /**\n     * Gets the [[TileKey]] from the given geo position and level.\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKey(geoPoint: GeoCoordinatesLike, level: number): TileKey | null {\n        return TileKeyUtils.geoCoordinatesToTileKey(this, geoPoint, level);\n    }\n\n    /**\n     * Gets the list of [[TileKey]]s contained in the given [[GeoBox]].\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKeys(geoBox: GeoBox, level: number): TileKey[] {\n        return TileKeyUtils.geoRectangleToTileKeys(this, geoBox, level);\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * @param tileKey The `TileKey`.\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        return this.boundingBoxGenerator.getGeoBox(tileKey);\n    }\n\n    /**\n     * Returns the bounding box in world coordinates.\n     *\n     * @param tileKey The `TileKey`.\n     * @param result The optional object that will contain the resulting bounding box.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        return this.boundingBoxGenerator.getWorldBox(tileKey, result);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/AnimatedExtrusionHandler\";\nexport * from \"./lib/CameraMovementDetector\";\nexport * from \"./lib/ClipPlanesEvaluator\";\nexport * from \"./lib/ColorCache\";\nexport * from \"./lib/composing\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/copyrights/CopyrightElementHandler\";\nexport * from \"./lib/copyrights/CopyrightInfo\";\nexport * from \"./lib/copyrights/CopyrightProvider\";\nexport * from \"./lib/copyrights/CopyrightCoverageProvider\";\nexport * from \"./lib/copyrights/UrlCopyrightProvider\";\nexport * from \"./lib/DataSource\";\nexport * from \"./lib/PolarTileDataSource\";\nexport * from \"./lib/DecodedTileHelpers\";\nexport * from \"./lib/DepthPrePass\";\nexport * from \"./lib/DisplacementMap\";\nexport * from \"./lib/ElevationProvider\";\nexport * from \"./lib/ElevationRangeSource\";\nexport * from \"./lib/image/Image\";\nexport * from \"./lib/image/ImageCache\";\nexport * from \"./lib/image/MapViewImageCache\";\nexport * from \"./lib/MapView\";\nexport * from \"./lib/MapViewFog\";\nexport * from \"./lib/MapViewPoints\";\nexport * from \"./lib/PickHandler\";\nexport * from \"./lib/poi/Poi\";\nexport * from \"./lib/poi/PoiManager\";\nexport * from \"./lib/poi/PoiTableManager\";\nexport * from \"./lib/RoadPicker\";\nexport * from \"./lib/Statistics\";\nexport * from \"./lib/text/TextElement\";\nexport * from \"./lib/text/TextElementsRenderer\";\nexport * from \"./lib/text/TextStyleCache\";\nexport * from \"./lib/ThemeLoader\";\nexport * from \"./lib/Tile\";\nexport * from \"./lib/geometry/TileDataAccessor\";\nexport * from \"./lib/geometry/TileGeometry\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VisibleTileSet\";\nexport * from \"./lib/WorkerBasedDecoder\";\nexport * from \"./lib/WorkerBasedTiler\";\nexport * from \"./lib/workers/WorkerLoader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * Values for boolean shader defines\n */\nexport const DEFINE_BOOL_TRUE = \"\";\nexport const DEFINE_BOOL_FALSE = undefined;\n\n/**\n * Insert shader includes after another shader include.\n *\n * @param shaderContent Original string.\n * @param shaderName String to append to.\n * @param insertedShaderName String to append after string `shaderA`.\n * @param addTab If `true`, a tab character will be inserted before `shaderB`.\n */\nexport function insertShaderInclude(\n    shaderContent: string,\n    shaderName: string,\n    insertedShaderName: string,\n    addTab?: boolean\n): string {\n    const tabChar = addTab === true ? \"\\t\" : \"\";\n\n    const result = shaderContent.replace(\n        `#include <${shaderName}>`,\n        `#include <${shaderName}>\n${tabChar}#include <${insertedShaderName}>`\n    );\n    return result;\n}\n\nexport interface ForcedBlending {\n    /**\n     * This material has `blending` always enabled regardless of `opacity` setting.s\n     */\n    forcedBlending?: true;\n}\n\n/**\n * THREE.js is enabling blending only when transparent is `true` or when a blend mode\n * different than `NormalBlending` is set.\n * Since we don't want to set transparent to true and mess up the render order we set\n * `CustomBlending` with the same parameters as the `NormalBlending`.\n\n * @param material `Material` that should use blending\n * @note This function should not be used in frame update after material has been passed to WebGL.\n * In such cases use [[enableBlending]] instead.\n */\nexport function enforceBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent) {\n        // Nothing to do\n        return;\n    }\n\n    enableBlending(material);\n    material.forcedBlending = true;\n}\n\n/**\n * Enable alpha blending using THREE.CustomBlending setup.\n *\n * Function enables blending using one of predefined modes, for both color and alpha components:\n * - Src: [[THREE.SrcAlphaFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * - Src: [[THREE.OneFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * The second blending equation is used when [[THREE.Material.premultipliedAlpha]] is enabled\n * for this material.\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @param material The material or material parameters to modify.\n */\nexport function enableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.CustomBlending;\n    if (material.premultipliedAlpha === true) {\n        material.blendSrc = THREE.OneFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    } else {\n        material.blendSrc = THREE.SrcAlphaFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    }\n}\n\n/**\n * Disable alpha blending using THREE.CustomBlending mode, switches to [[THREE.NormalBlending]].\n *\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @see enableBlending.\n * @param material The material or material parameters to modify.\n */\nexport function disableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.NormalBlending;\n}\n\n/**\n * Setup material shader _define_ using two allowable semantics.\n *\n * Function accepts two types of values for shader preprocessor _define_:\n * - [[boolean]], simple [[true]] or [[false]] which causes _define_ to be set with empty string,\n * such defines may be handled in the shader using __#ifdef__ semantics:\n * ```\n * #ifdef SOME_DEFINE && !defined(OTHER_DEFINE)\n * // do something\n * #endif\n * ```\n *\n * - [[number]] which sets _define_ to explicit value. You may use it to enable/disable some\n * code or even set compile time constants affecting shaders math:\n * ```\n * #if SOME_DEFINE_SWITCH && OTHER_DEFINE_SWITCH == 0\n * gl_FragColor = vec4(1, 1, 1, DEFINE_ALPHA)\n * #endif\n * ```\n * @note Setting _define_ with `false` value is not the same as setting is with number value of `0`.\n *\n * @param material The [[THREE.ShaderMaterial]] which shader _define_ will be set.\n * @param key Name of shader _define_ as used in shader, i.e. `USE_FOG`, `COLOR_ALPHA`, etc.\n * @param value The value to be set as number or boolean specifying if preprocessor define\n * should be defined or not.\n */\nexport function setShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    value: boolean | number\n) {\n    assert(\n        material.defines !== undefined,\n        \"Do not use this function in ShaderMaterial derived c-tor.\"\n    );\n    const semanticValue = getShaderMaterialDefine(material, key);\n    const needsUpdate = value !== semanticValue;\n    // Nothing to change - early exit\n    if (!needsUpdate) {\n        return;\n    }\n    setShaderDefine(material.defines, key, value);\n    material.needsUpdate = needsUpdate;\n}\n\n/**\n * Acquire value of [[THREE.ShaderMaterial]] GPU shader preprocessor define.\n *\n * The semantic used in entire engine assumes that preprocessor defines may have only binary\n * (defined / not defined) or numerical values, this ensures consistency in the shaders and\n * materials code.\n * @note If _define_ with [[key]] is _undefined_ function returns [[false]], if defined but\n * not numerical value it returns [[true]], otherwise returns number.\n * @see setShaderMaterialDefine.\n *\n * @param material The material which shader defines are accessed.\n * @param key The _define_ name (identifier).\n * @param fallbackValue The value returned when material `defines` are not initialized yet,\n * specified by default as [[false]], provide your own default if you expect numeric value.\n */\nexport function getShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    fallbackValue: boolean | number = false\n): boolean | number {\n    if (material.defines === undefined) {\n        return fallbackValue;\n    }\n    return getShaderDefine(material.defines, key);\n}\n\n/**\n * Sets new value of 'define' regardless of current value set.\n *\n * Update `defines` map with new key and value, if key is already occupied it overrides its value.\n * Helper function that may be used to setup [[THREE.ShaderMaterialParameters]] before\n * material is create (i.e. in c-tor).\n *\n * @param defines Shader `defines` stored in key-value map.\n * @param key The key used to identify _define_.\n * @param value The value to be stored.\n * @see setShaderMaterialDefine.\n */\nexport function setShaderDefine(\n    defines: { [key: string]: any },\n    key: string,\n    value: boolean | number\n) {\n    if (typeof value === \"number\") {\n        defines[key] = value;\n    } else if (value === true) {\n        defines[key] = DEFINE_BOOL_TRUE;\n    } else {\n        // Sets to BOOL_FALSE === undefined\n        delete defines[key];\n    }\n}\n\n/**\n * Acquire shader 'define' value from `defines` map.\n *\n * If there is no value under [[key]] specified, function returns false, otherwise result is\n * true or numeric value if there is a number stored.\n * @param defines The `defines` map.\n * @param key The identifier of the _define_.\n */\nexport function getShaderDefine(defines: { [key: string]: any }, key: string): boolean | number {\n    const currentValue = defines[key];\n    const semanticValue =\n        currentValue === DEFINE_BOOL_FALSE\n            ? false\n            : currentValue === DEFINE_BOOL_TRUE\n            ? true\n            : currentValue;\n    return semanticValue;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst SHIFT_TRANSPARENCY: number = 24;\nconst SHIFT_RED: number = 16;\nconst SHIFT_GREEN: number = 8;\nconst SHIFT_BLUE: number = 0;\n\n// tslint:disable: no-bitwise\n//    Allow bitwise operations for colors decoding\n\n// tslint:disable-next-line: no-bitwise\nconst HEX_FULL_CHANNEL: number = 0xff;\nconst HEX_RGB_MASK: number = 0xffffff;\nconst HEX_TRGB_MASK: number = 0xffffffff;\n\nconst tmpColor = new THREE.Color();\n\n/**\n * Utilities to convert RGBA colors encoded in custom number (hex) format to THREE.Color objects.\n *\n * The functions provided allows for conversion from and to our custom number based color format,\n * which contains transparency, red, green and blue color channels in a way that each channel\n * occupies 8 bits of resulting number (color format 0xTTRRGGBB).\n * In order to preserve compatibility with THREE.Color class and its hexadecimal color\n * representation, we do not store __alpha__ channel in encoded color's number, but replace it\n * with __transparency__ channel, which is simply opposite to alpha:\n * ```transparency = 0xFF - alpha```\n * Such channel value is stored on the oldest bits (octet) in the integral color (numeric) value,\n * so it is fully compatible with THREE.Color numerical representation (@see [[THREE.Color.getHex]],\n * [[THREE.Color.setHex]]).\n * See also [[getHexFromRgba]] and [[getRgbaFromHex]] for more info about conversion.\n */\nexport namespace ColorUtils {\n    /**\n     * Encodes RGBA channels in custom number coded format (represented in hex as 0xTTRRGGBB).\n     *\n     * We do not use direct alpha channel mapping to hex in order to preserve compatibility\n     * with THREE.js color format (0xRRGGBB). This is done by encoding transparency\n     * (255 - alpha) instead of alpha on the oldest bits, shifted by [[SHIFT_TRANSPARENCY]].\n     * This way simple 0xRRGGBB color is equal to 0x00RRGGBB without transparency and\n     * color defining transparency (alpha < 255) is always recognizable by the oldest\n     * bit set:\n     * ```typescript\n     * (color >> SHIFT_TRANSPARENCY) !== 0.\n     * ```\n     * @note All input components are floating points in <0, 1> range (inclusively).\n     * @note Although method encodes transparency channel in single number value, it is still\n     * compatible with THREE.js number based color coding (0xRRGGBB), so you may pass this value to\n     * [[THREE.Color]] c-tor, but keep in mind that transparency will be silently ignored.\n     */\n    export function getHexFromRgba(r: number, g: number, b: number, a: number): number {\n        assert(a >= 0 && a <= 1);\n        const t = HEX_FULL_CHANNEL - Math.floor(a * HEX_FULL_CHANNEL);\n        return (\n            (t << SHIFT_TRANSPARENCY) ^\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encodes RGB all color channels in single number with format 0xRRGGBB.\n     *\n     * All input channels should be in <0, 1> range (inclusively).\n     * See also [[getHexFromRgba]] for more information about [[THREE.Color]] compatibility.\n     *\n     * @note This method is fully compatible with THREE.js color encoding, so\n     * you may pass this value directly to THREE.Color c-tor.\n     */\n    export function getHexFromRgb(r: number, g: number, b: number): number {\n        assert(r >= 0 && r <= 1);\n        assert(g >= 0 && g <= 1);\n        assert(b >= 0 && b <= 1);\n        return (\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encode and convert HSL value to number coded color format (0xRRGGBB).\n     *\n     * @see getHexFromRgb.\n     * @param h Hue component value between 0 and 1.\n     * @param s Saturation value between 0 and 1.\n     * @param l Lightness channel between 0 and 1.\n     */\n    export function getHexFromHsl(h: number, s: number, l: number): number {\n        assert(h >= 0 && h <= 1);\n        assert(s >= 0 && s <= 1);\n        assert(l >= 0 && l <= 1);\n        return tmpColor.setHSL(h, s, l).getHex();\n    }\n\n    /**\n     * Retrieve RGBA channels separately from number encoded custom color format.\n     *\n     * Provides an easy way for channels extraction (r, g, b, a) from custom number coded color\n     * format.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns r, g, b, a channels in simple object, where each channel value is saved as floating\n     * point from 0 to 1 inclusively.\n     */\n    export function getRgbaFromHex(hex: number): { r: number; g: number; b: number; a: number } {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format: #\" + hex.toString(16));\n        return {\n            r: ((hex >> SHIFT_RED) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            g: ((hex >> SHIFT_GREEN) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            b: ((hex >> SHIFT_BLUE) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            a:\n                (HEX_FULL_CHANNEL - ((hex >> SHIFT_TRANSPARENCY) & HEX_FULL_CHANNEL)) /\n                HEX_FULL_CHANNEL\n        };\n    }\n\n    /**\n     * Determines if number encoded color contains alpha (opacity) defined and different then 255.\n     *\n     * @param hex The number encoded color (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns True if color has transparency defined.\n     */\n    export function hasAlphaInHex(hex: number): boolean {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format: #\" + hex.toString(16));\n        return hex >> SHIFT_TRANSPARENCY !== 0;\n    }\n\n    /**\n     * Retrieves alpha color channel from hex encoded color value.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns The floating point alpha component in <0, 1> range.\n     */\n    export function getAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format: #\" + hex.toString(16));\n        return (\n            ((HEX_FULL_CHANNEL - (hex >> SHIFT_TRANSPARENCY)) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL\n        );\n    }\n\n    /**\n     * Remove transparency info from the number coded color, makes it compatible with external libs.\n     *\n     * @see getAlphaFromHex.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns number coded color value representable as 0xRRGGBB in hex.\n     */\n    export function removeAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format: #\" + hex.toString(16));\n        return hex & HEX_RGB_MASK;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Namespace containing useful information when dealing with Unicode's code points.\n */\nexport namespace UnicodeUtils {\n    /**\n     * Range of Unicode code points considered as white space.\n     * https://en.wikipedia.org/wiki/Whitespace_character\n     */\n    export const whiteSpaceRanges = [\n        [0x0009, 0x0009],\n        [0x0020, 0x0020],\n        [0x1680, 0x1680],\n        [0x2000, 0x2006],\n        [0x2008, 0x200a],\n        [0x205f, 0x3000],\n        [0x180e, 0x180e],\n        [0x200b, 0x200d]\n    ];\n\n    /**\n     * Checks if a character should be considered as a white space.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isWhiteSpace(codePoint: number) {\n        for (const range of whiteSpaceRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as `NewLine`.\n     * https://en.wikipedia.org/wiki/Newline#Unicode\n     */\n    export const newLineRanges = [\n        [0x000a, 0x000d],\n        [0x0085, 0x0085],\n        [0x2028, 0x2029]\n    ];\n\n    /**\n     * Checks if a character should be considered as a new line.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isNewLine(codePoint: number) {\n        for (const range of newLineRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as non-printable.\n     * https://en.wikipedia.org/wiki/Unicode_control_characters\n     */\n    export const nonPrintableRanges = [\n        [0x0000, 0x001f],\n        [0x007f, 0x009f]\n    ];\n\n    /**\n     * Checks if a character's can be printed (rendered).\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isPrintable(codePoint: number) {\n        for (const range of nonPrintableRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Unicode code point direction.\n     */\n    export enum Direction {\n        Neutral = 0.0,\n        Weak = 0.5,\n        LTR = 1.0,\n        RTL = -1.0\n    }\n\n    // TODO: Review/Remove/Add any additional needed blocks (HARP-3330).\n    /**\n     * Unicode Blocks which have inherent RTL direction.\n     * These blocks correspond to the scripts described here:\n     * https://en.wikipedia.org/wiki/Right-to-left#List_of_RTL_scripts\n     */\n    export const rtlBlocks: string[] = [\n        \"Hebrew\",\n        \"Alphabetic Presentation Forms\",\n        \"Arabic\",\n        \"Arabic Supplement\",\n        \"Arabic Extended-A\",\n        \"Arabic Presentation Forms-A\",\n        \"Arabic Presentation Forms-B\",\n        \"Arabic Mathematical Alphabetic Symbols\",\n        \"Indic Siyaq Numbers\",\n        \"Rumi Numeral Symbols\",\n        \"Syriac\",\n        \"Syriac Supplement\",\n        \"Samaritan\",\n        \"Mandaic\",\n        \"Thaana\",\n        \"Mende Kikakui\",\n        \"NKo\",\n        \"Adlam\",\n        \"Hanifi Rohingya\"\n    ];\n\n    /**\n     * ASCII punctuation is considered to have neutral direction:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const neutralBidirectionalRanges = [\n        [0x0020, 0x002f],\n        [0x003a, 0x0040],\n        [0x005b, 0x0060],\n        [0x007b, 0x007e]\n    ];\n\n    /**\n     * Latin and arabic numerals are considered to have weak directionality:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     * https://en.wikipedia.org/wiki/Arabic_(Unicode_block)#Block\n     */\n    export const weakBidirectionalRanges = [\n        [0x0030, 0x0039],\n        [0x0660, 0x0669],\n        [0x06f0, 0x06f9]\n    ];\n\n    /**\n     * Returns the Unicode's character direction.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param block Character's Unicode block.\n     *\n     * @returns Character's direction.\n     */\n    export function getDirection(codePoint: number, block: string): Direction {\n        // Test for neutral and weak code points first (they're inside LTR/RTL ranges).\n        for (const weakRange of weakBidirectionalRanges) {\n            if (codePoint >= weakRange[0] && codePoint <= weakRange[1]) {\n                return Direction.Weak;\n            }\n        }\n        for (const neutralRange of neutralBidirectionalRanges) {\n            if (codePoint >= neutralRange[0] && codePoint <= neutralRange[1]) {\n                return Direction.Neutral;\n            }\n        }\n\n        // Check for RTL/LTR.\n        const rtl = rtlBlocks.find(element => {\n            return element === block;\n        });\n        if (rtl !== undefined) {\n            return Direction.RTL;\n        } else {\n            return Direction.LTR;\n        }\n    }\n\n    /**\n     * Some punctuation characters (like: (, ), <, >, [,], {, }) need to be mirrored when rendering\n     * a RTL string to preserve their intrinsic meaning.\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const rtlMirroredCodePoints = [\n        0x0028,\n        0x0029,\n        0x003c,\n        0x003e,\n        0x005b,\n        0x005d,\n        0x007b,\n        0x007d\n    ];\n\n    /**\n     * Checks if a character should be mirrored on an RTL run.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isRtlMirrored(codePoint: number): boolean {\n        return (\n            rtlMirroredCodePoints.find(element => {\n                return element === codePoint;\n            }) !== undefined\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute,\n    ColorUtils,\n    Expr,\n    getPropertyValue,\n    InterpolatedProperty,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isInterpolatedProperty,\n    isShaderTechnique,\n    isStandardTechnique,\n    isTerrainTechnique,\n    isTextureBuffer,\n    parseStringEncodedColor,\n    ShaderTechnique,\n    Technique,\n    techniqueDescriptors,\n    TEXTURE_PROPERTY_KEYS,\n    TextureProperties,\n    TRANSPARENCY_PROPERTY_KEYS,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport {\n    CirclePointsMaterial,\n    disableBlending,\n    enableBlending,\n    HighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshStandardMaterial,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { Circles, Squares } from \"./MapViewPoints\";\nimport { toPixelFormat, toTextureDataType, toTextureFilter, toWrappingMode } from \"./ThemeHelpers\";\n\nconst logger = LoggerManager.instance.create(\"DecodedTileHelpers\");\n\nconst DEFAULT_SKIP_PROPERTIES = [\n    ...TEXTURE_PROPERTY_KEYS,\n    \"mapProperties\",\n    \"normalMapProperties\",\n    \"displacementMapProperties\",\n    \"roughnessMapProperties\",\n    \"emissiveMapProperties\",\n    \"alphaMapProperties\",\n    \"metalnessMapProperties\",\n    \"bumpMapProperties\"\n];\n\n/**\n * The structure of the options to pass into [[createMaterial]].\n */\nexport interface MaterialOptions {\n    /**\n     * The shader [[Technique]] to choose.\n     */\n    technique: Technique;\n\n    /**\n     * The active zoom level at material creation for zoom-dependent properties.\n     */\n    level: number;\n\n    /**\n     * Properties to skip.\n     *\n     * @see [[applyTechniqueToMaterial]]\n     */\n    skipExtraProps?: string[];\n\n    /**\n     * `RawShaderMaterial` instances need to know about the fog at instantiation in order to avoid\n     * recompiling them manually later (ThreeJS does not update fog for `RawShaderMaterial`s).\n     */\n    fog?: boolean;\n}\n\n/**\n * Create a material, depending on the rendering technique provided in the options.\n *\n * @param options The material options the subsequent functions need.\n * @param materialUpdateCallback Optional callback when the material gets updated,\n *                               e.g. after texture loading.\n *\n * @returns new material instance that matches `technique.name`\n */\nexport function createMaterial(\n    options: MaterialOptions,\n    textureReadyCallback?: (texture: THREE.Texture) => void\n): THREE.Material | undefined {\n    const technique = options.technique;\n    const Constructor = getMaterialConstructor(technique);\n\n    const settings: { [key: string]: any } = {};\n\n    if (Constructor === undefined) {\n        return undefined;\n    }\n\n    if (\n        Constructor.prototype instanceof THREE.RawShaderMaterial &&\n        Constructor !== HighPrecisionLineMaterial\n    ) {\n        settings.fog = options.fog;\n    }\n\n    const material = new Constructor(settings);\n\n    if (technique.id !== undefined) {\n        material.name = technique.id;\n    }\n\n    if (isExtrudedPolygonTechnique(technique)) {\n        material.flatShading = true;\n        // We do not support mixing vertex colors (static) and material colors (may be dynamic)\n        // mixture. Vertex colors are stored in VBO and are not modifiable - some solution for\n        // this problem is proposed in the HARP-8289 and PR #1164.\n        // TODO: Remove when problem with substitute (vertex & material) colors will be solved.\n        if (technique.vertexColors === true) {\n            delete technique.color;\n        }\n    }\n\n    material.depthTest = isExtrudedPolygonTechnique(technique) && technique.depthTest !== false;\n\n    if (\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique)\n    ) {\n        TEXTURE_PROPERTY_KEYS.forEach((texturePropertyName: string) => {\n            const textureProperty = (technique as any)[texturePropertyName];\n            if (textureProperty === undefined) {\n                return;\n            }\n\n            const onLoad = (texture: THREE.Texture) => {\n                const properties = (technique as any)[\n                    texturePropertyName + \"Properties\"\n                ] as TextureProperties;\n                if (properties !== undefined) {\n                    if (properties.wrapS !== undefined) {\n                        texture.wrapS = toWrappingMode(properties.wrapS);\n                    }\n                    if (properties.wrapT !== undefined) {\n                        texture.wrapT = toWrappingMode(properties.wrapT);\n                    }\n                    if (properties.magFilter !== undefined) {\n                        texture.magFilter = toTextureFilter(properties.magFilter);\n                    }\n                    if (properties.minFilter !== undefined) {\n                        texture.minFilter = toTextureFilter(properties.minFilter);\n                    }\n                    if (properties.flipY !== undefined) {\n                        texture.flipY = properties.flipY;\n                    }\n                    if (properties.repeatU !== undefined) {\n                        texture.repeat.x = properties.repeatU;\n                    }\n                    if (properties.repeatV !== undefined) {\n                        texture.repeat.y = properties.repeatV;\n                    }\n                }\n                (material as any)[texturePropertyName] = texture;\n                texture.needsUpdate = true;\n                material.needsUpdate = true;\n\n                if (textureReadyCallback) {\n                    textureReadyCallback(texture);\n                }\n            };\n\n            const onError = (error: ErrorEvent | string) => {\n                logger.error(\"#createMaterial: Failed to load texture: \", error);\n            };\n\n            let textureUrl: string | undefined;\n            if (typeof textureProperty === \"string\") {\n                textureUrl = textureProperty;\n            } else if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.type === \"image/raw\") {\n                    const properties = textureProperty.dataTextureProperties;\n                    if (properties !== undefined) {\n                        const textureDataType: THREE.TextureDataType | undefined = properties.type\n                            ? toTextureDataType(properties.type)\n                            : undefined;\n                        const textureBuffer = getTextureBuffer(\n                            textureProperty.buffer,\n                            textureDataType\n                        );\n\n                        const texture = new THREE.DataTexture(\n                            textureBuffer,\n                            properties.width,\n                            properties.height,\n                            properties.format ? toPixelFormat(properties.format) : undefined,\n                            textureDataType\n                        );\n                        onLoad(texture);\n                    } else {\n                        onError(\"no data texture properties provided.\");\n                    }\n                } else {\n                    const textureBlob = new Blob([textureProperty.buffer], {\n                        type: textureProperty.type\n                    });\n                    textureUrl = URL.createObjectURL(textureBlob);\n                }\n            }\n\n            if (textureUrl) {\n                new THREE.TextureLoader().load(\n                    textureUrl,\n                    onLoad,\n                    undefined, // onProgress\n                    onError\n                );\n            }\n        });\n    }\n\n    if (isShaderTechnique(technique)) {\n        // Special case for ShaderTechnique.\n        applyShaderTechniqueToMaterial(technique, material);\n    } else {\n        // Generic technique.\n        applyTechniqueToMaterial(technique, material, options.level, options.skipExtraProps);\n    }\n\n    return material;\n}\n\n/**\n * Returns a [[THREE.BufferAttribute]] created from a provided [[BufferAttribute]] object.\n *\n * @param attribute BufferAttribute a WebGL compliant buffer\n */\nexport function getBufferAttribute(attribute: BufferAttribute): THREE.BufferAttribute {\n    switch (attribute.type) {\n        case \"float\":\n            return new THREE.BufferAttribute(\n                new Float32Array(attribute.buffer),\n                attribute.itemCount\n            );\n        case \"uint8\":\n            return new THREE.BufferAttribute(\n                new Uint8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint16\":\n            return new THREE.BufferAttribute(\n                new Uint16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint32\":\n            return new THREE.BufferAttribute(\n                new Uint32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int8\":\n            return new THREE.BufferAttribute(\n                new Int8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int16\":\n            return new THREE.BufferAttribute(\n                new Int16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int32\":\n            return new THREE.BufferAttribute(\n                new Int32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        default:\n            throw new Error(`unsupported buffer of type ${attribute.type}`);\n    } // switch\n}\n\n/**\n * The default `three.js` object used with a specific technique.\n */\nexport type ObjectConstructor = new (\n    geometry?: THREE.Geometry | THREE.BufferGeometry,\n    material?: THREE.Material\n) => THREE.Object3D;\n/**\n * Gets the default `three.js` object constructor associated with the given technique.\n *\n * @param technique The technique.\n */\nexport function getObjectConstructor(technique: Technique): ObjectConstructor | undefined {\n    if (technique.name === undefined) {\n        return undefined;\n    }\n    switch (technique.name) {\n        case \"extruded-line\":\n        case \"standard\":\n        case \"terrain\":\n        case \"extruded-polygon\":\n        case \"fill\":\n        case \"dashed-line\":\n        case \"solid-line\":\n            return THREE.Mesh as ObjectConstructor;\n\n        case \"circles\":\n            return Circles as ObjectConstructor;\n        case \"squares\":\n            return Squares as ObjectConstructor;\n\n        case \"line\":\n            return THREE.LineSegments as ObjectConstructor;\n\n        case \"segments\":\n            return THREE.LineSegments as ObjectConstructor;\n\n        case \"shader\": {\n            if (!isShaderTechnique(technique)) {\n                throw new Error(\"Invalid technique\");\n            }\n            switch (technique.primitive) {\n                case \"line\":\n                    return THREE.Line as ObjectConstructor;\n                case \"segments\":\n                    return THREE.LineSegments as ObjectConstructor;\n                case \"point\":\n                    return THREE.Points as ObjectConstructor;\n                case \"mesh\":\n                    return THREE.Mesh as ObjectConstructor;\n                default:\n                    return undefined;\n            }\n        }\n\n        case \"text\":\n        case \"labeled-icon\":\n        case \"line-marker\":\n        case \"label-rejection-line\":\n            return undefined;\n    }\n}\n\n/**\n * Non material properties of [[BaseTechnique]]\n */\nexport const BASE_TECHNIQUE_NON_MATERIAL_PROPS = [\"name\", \"id\", \"renderOrder\", \"transient\"];\n\n/**\n * Generic material type constructor.\n */\nexport type MaterialConstructor = new (params?: {}) => THREE.Material;\n\n/**\n * Returns a [[MaterialConstructor]] basing on provided technique object.\n *\n * @param technique [[Technique]] object which the material will be based on.\n */\nexport function getMaterialConstructor(technique: Technique): MaterialConstructor | undefined {\n    if (technique.name === undefined) {\n        return undefined;\n    }\n\n    switch (technique.name) {\n        case \"extruded-line\":\n            if (!isExtrudedLineTechnique(technique)) {\n                throw new Error(\"Invalid extruded-line technique\");\n            }\n            return technique.shading === \"standard\"\n                ? MapMeshStandardMaterial\n                : MapMeshBasicMaterial;\n\n        case \"standard\":\n        case \"terrain\":\n        case \"extruded-polygon\":\n            return MapMeshStandardMaterial;\n\n        case \"dashed-line\":\n        case \"solid-line\":\n            return SolidLineMaterial;\n\n        case \"fill\":\n            return MapMeshBasicMaterial;\n\n        case \"squares\":\n            return THREE.PointsMaterial;\n\n        case \"circles\":\n            return CirclePointsMaterial;\n\n        case \"line\":\n        case \"segments\":\n            return THREE.LineBasicMaterial;\n\n        case \"shader\":\n            return THREE.ShaderMaterial;\n\n        case \"text\":\n        case \"labeled-icon\":\n        case \"line-marker\":\n        case \"label-rejection-line\":\n            return undefined;\n    }\n}\n\n/**\n * Allows to easy parse/encode technique's base color property value as number coded color.\n *\n * Function takes care about property parsing, interpolation and encoding if neccessary. If\n * you wish to get default value without interpolation simply ignore @param zoom when calling.\n *\n * @see ColorUtils\n * @param technique the technique where we search for base (transparency) color value\n * @param zoomLevel zoom level used for value interpolation.\n * @returns [[number]] encoded color value (in custom #TTRRGGBB) format or [[undefined]] if\n * base color property is not defined in the technique passed.\n */\nexport function evaluateBaseColorProperty(\n    technique: Technique,\n    zoomLevel?: number\n): number | undefined {\n    const baseColorProp = getBaseColorProp(technique);\n    if (baseColorProp !== undefined) {\n        return evaluateColorProperty(baseColorProp, zoomLevel);\n    }\n    return undefined;\n}\n\n/**\n * Apply [[ShaderTechnique]] parameters to material.\n *\n * @param technique the [[ShaderTechnique]] which requires special handling\n * @param material material to which technique will be applied\n */\nfunction applyShaderTechniqueToMaterial(technique: ShaderTechnique, material: THREE.Material) {\n    // The shader technique takes the argument from its `params' member.\n    const params = technique.params as { [key: string]: any };\n    // Remove base color and transparency properties from the processed set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique.params;\n    const props = Object.getOwnPropertyNames(params).filter(propertyName => {\n        // Omit base color and related transparency attributes if its defined in technique\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof params;\n        if (prop === \"name\") {\n            // skip reserved property names\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all technique properties omitting base color and transparency attributes.\n    props.forEach(propertyName => {\n        // TODO: Check if properties values should not be interpolated, possible bug in old code!\n        // This behavior is kept in the new version too, level is set to undefined.\n        applyTechniquePropertyToMaterial(material, propertyName, params[propertyName]);\n    });\n\n    if (hasBaseColor) {\n        const propColor = baseColorPropName as keyof THREE.Material;\n        // Finally apply base color and related properties to material (opacity, transparent)\n        applyBaseColorToMaterial(material, material[propColor], technique, params[propColor]);\n    }\n}\n\n/**\n * Apply generic technique parameters to material.\n *\n * Skips non-material [[Technique]] props:\n *  * [[BaseTechnique]] props,\n *  * `name` which is used as discriminator for technique types,\n *  * props starting with `_`\n *  * props found `skipExtraProps`\n *\n * `THREE.Color` properties are supported.\n *\n * @param technique technique from where params are copied\n * @param material target material\n * @param zoomLevel tile zoom level for zoom-level dependent props\n * @param skipExtraProps optional, skipped props.\n */\nfunction applyTechniqueToMaterial(\n    technique: Technique,\n    material: THREE.Material,\n    zoomLevel: number,\n    skipExtraProps?: string[]\n) {\n    // Remove transparent color from the firstly processed properties set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique;\n    const genericProps = Object.getOwnPropertyNames(technique).filter(propertyName => {\n        if (\n            propertyName.startsWith(\"_\") ||\n            BASE_TECHNIQUE_NON_MATERIAL_PROPS.indexOf(propertyName) !== -1 ||\n            DEFAULT_SKIP_PROPERTIES.indexOf(propertyName) !== -1 ||\n            (skipExtraProps !== undefined && skipExtraProps.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        // Omit base color and related transparency attributes if its defined in technique.\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof technique;\n        const m = material as any;\n        if (typeof m[prop] === \"undefined\") {\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all other properties (even colors), but not transparent (base) ones.\n    genericProps.forEach(propertyName => {\n        const value = technique[propertyName as keyof Technique];\n        if (value !== undefined) {\n            applyTechniquePropertyToMaterial(material, propertyName, value, zoomLevel);\n        }\n    });\n\n    // Finally apply base (possibly transparent) color itself, using blend modes to\n    // provide transparency if needed.\n    if (hasBaseColor) {\n        applyBaseColorToMaterial(\n            material,\n            material[baseColorPropName as keyof THREE.Material],\n            technique,\n            technique[baseColorPropName as keyof Technique] as Value,\n            zoomLevel\n        );\n    }\n}\n\n/**\n * Apply single and generic technique property to corresponding material parameter.\n *\n * @note Special handling for material attributes of [[THREE.Color]] type is provided thus it\n * does not provide constructor that would take [[string]] or [[number]] values.\n *\n * @param material target material\n * @param propertyName material and technique parameter name (or index) that is to be transferred\n * @param techniqueAttrValue technique property value which will be applied to material attribute\n * @param zoomLevel optional tile zoom level.\n */\nfunction applyTechniquePropertyToMaterial(\n    material: THREE.Material,\n    propertyName: string,\n    techniqueAttrValue: Value,\n    zoomLevel?: number\n) {\n    const m = material as any;\n    if (m[propertyName] instanceof THREE.Color) {\n        applySecondaryColorToMaterial(\n            material[propertyName as keyof THREE.Material],\n            techniqueAttrValue,\n            zoomLevel\n        );\n    } else {\n        m[propertyName] = evaluateProperty(techniqueAttrValue, zoomLevel);\n    }\n}\n\n/**\n * Apply technique color to material taking special care with transparent (RGBA) colors.\n *\n * @note This function is intended to be used with secondary, triary etc. technique colors,\n * not the base ones that may contain transparency information. Such colors should be processed\n * with [[applyTechniqueBaseColorToMaterial]] function.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value\n * @param zoomLevel optional tile zoom level for zoom-level dependent properties are evaluated.\n */\nexport function applySecondaryColorToMaterial(\n    materialColor: THREE.Color,\n    techniqueColor: Value | Expr | InterpolatedProperty,\n    zoomLevel?: number\n) {\n    let value = evaluateColorProperty(techniqueColor, zoomLevel);\n\n    if (ColorUtils.hasAlphaInHex(value)) {\n        logger.warn(\"Used RGBA value for technique color without transparency support!\");\n        // Just for clarity remove transparency component, even if that would be ignored\n        // by THREE.Color.setHex() function.\n        value = ColorUtils.removeAlphaFromHex(value);\n    }\n\n    materialColor.setHex(value);\n}\n\n/**\n * Apply technique base color (transparency support) to material with modifying material opacity.\n *\n * This method applies main (or base) technique color with transparency support to the corresponding\n * material color, with an effect on entire [[THREE.Material]] __opacity__ and __transparent__\n * attributes.\n *\n * @note Transparent colors should be processed as the very last technique attributes,\n * since their effect on material properties like [[THREE.Material.opacity]] and\n * [[THREE.Material.transparent]] could be overridden by corresponding technique params.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value in custom number format\n * @param zoomLevel optional, tile zoom level for zoom-level dependent properties are evaluated.\n */\nexport function applyBaseColorToMaterial(\n    material: THREE.Material,\n    materialColor: THREE.Color,\n    technique: Technique,\n    techniqueColor: Value,\n    zoomLevel?: number\n) {\n    const colorValue = evaluateColorProperty(techniqueColor, zoomLevel);\n\n    const { r, g, b, a } = ColorUtils.getRgbaFromHex(colorValue);\n    // Override material opacity and blending by mixing technique defined opacity\n    // with main color transparency\n    const tech = technique as any;\n    let opacity = a;\n    if (tech.opacity !== undefined) {\n        opacity *= evaluateProperty(tech.opacity, zoomLevel);\n    }\n\n    opacity = THREE.Math.clamp(opacity, 0, 1);\n    material.opacity = opacity;\n    materialColor.setRGB(r, g, b);\n\n    const opaque = opacity >= 1.0;\n    if (!opaque) {\n        enableBlending(material);\n    } else {\n        disableBlending(material);\n    }\n}\n\n/**\n * Calculates the value of the technique defined property.\n *\n * Function takes care about property interpolation (when @param zoom is set) as also parsing\n * string encoded numbers.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param zoomLevel zoom level used for interpolation.\n */\nfunction evaluateProperty(value: any, zoomLevel?: number): any {\n    if (zoomLevel !== undefined && (isInterpolatedProperty(value) || Expr.isExpr(value))) {\n        value = getPropertyValue(value, zoomLevel);\n    }\n    return value;\n}\n\n/**\n * Calculates the numerical value of the technique defined color property.\n *\n * Function takes care about color interpolation (when @param zoom is set) as also parsing\n * string encoded colors.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param zoomLevel zoom level used for interpolation.\n */\nexport function evaluateColorProperty(value: Value, zoomLevel?: number): number {\n    value = evaluateProperty(value, zoomLevel);\n\n    if (typeof value === \"number\") {\n        return value;\n    }\n\n    if (typeof value === \"string\") {\n        const parsed = parseStringEncodedColor(value);\n        if (parsed !== undefined) {\n            return parsed;\n        }\n    }\n\n    throw new Error(`Unsupported color format: '${value}'`);\n}\n\n/**\n * Allows to access base color property value for given technique.\n *\n * The color value may be encoded in [[number]], [[string]] or even as\n * [[InterpolateProperty]].\n *\n * @param technique The techniqe where we seach for base color property.\n * @returns The value of technique color used to apply transparency.\n */\nfunction getBaseColorProp(technique: Technique): any {\n    const baseColorPropName = getBaseColorPropName(technique);\n    if (baseColorPropName !== undefined) {\n        if (!isShaderTechnique(technique)) {\n            const propColor = baseColorPropName as keyof typeof technique;\n            return technique[propColor];\n        } else {\n            const params = technique.params as { [key: string]: any };\n            const propColor = baseColorPropName as keyof typeof params;\n            return params[propColor];\n        }\n    }\n    return undefined;\n}\n\nfunction getBaseColorPropName(technique: Technique): string | undefined {\n    const techDescriptor = techniqueDescriptors[technique.name];\n    return techDescriptor !== undefined ? techDescriptor.attrTransparencyColor : undefined;\n}\n\nfunction getTextureBuffer(\n    buffer: ArrayBuffer,\n    textureDataType: THREE.TextureDataType | undefined\n): THREE.TypedArray {\n    if (textureDataType === undefined) {\n        return new Uint8Array(buffer);\n    }\n\n    switch (textureDataType) {\n        case THREE.UnsignedByteType:\n            return new Uint8Array(buffer);\n        case THREE.ByteType:\n            return new Int8Array(buffer);\n        case THREE.ShortType:\n            return new Int16Array(buffer);\n        case THREE.UnsignedShortType:\n            return new Uint16Array(buffer);\n        case THREE.IntType:\n            return new Int32Array(buffer);\n        case THREE.UnsignedIntType:\n            return new Uint32Array(buffer);\n        case THREE.FloatType:\n            return new Float32Array(buffer);\n        case THREE.HalfFloatType:\n            return new Uint16Array(buffer);\n    }\n\n    throw new Error(\"Unsupported texture data type\");\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeometryKind,\n    GeometryKindSet,\n    ImageTexture,\n    LineMarkerTechnique,\n    PoiStackMode,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport {\n    GlyphData,\n    TextBufferObject,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\nimport * as THREE from \"three\";\n\nimport { ImageItem } from \"../image/Image\";\nimport { PickResult } from \"../PickHandler\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * Additional information for an icon that is to be rendered along with a [[TextElement]].\n */\nexport interface PoiInfo {\n    /**\n     * Technique defining the POI or LineMarker\n     */\n    technique: PoiTechnique | LineMarkerTechnique;\n\n    /**\n     * Name of the [[ImageTexture]].\n     */\n    imageTextureName: string;\n\n    /**\n     * Name of the POI table [[PoiTable]].\n     */\n    poiTableName?: string;\n\n    /**\n     * Name of the POI description in the [[PoiTable]].\n     */\n    poiName?: string;\n\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n\n    /**\n     * If true, the text icon will appear even if the text part is blocked by other labels. Defaults\n     * to `false`.\n     */\n    textIsOptional?: boolean;\n\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, icon will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If isValid is `false`, the icon will no longer be placed or rendered. The reason may be a\n     * missing resource.\n     */\n    isValid?: boolean;\n\n    /**\n     * ID to identify the (POI) icon.\n     */\n    featureId?: number;\n\n    /**\n     * Reference back to owning [[TextElement]].\n     */\n    textElement: TextElement;\n\n    /**\n     * @hidden\n     * If false, text will not be rendered during camera movements. Defaults to `true`;\n     */\n    renderTextDuringMovements?: boolean;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageItem]] once it is resolved.\n     */\n    imageItem?: ImageItem;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageTexture]] once it is resolved.\n     */\n    imageTexture?: ImageTexture;\n\n    /**\n     * @hidden\n     * Layout help: A shield group is for all [[LineMarker]]s that have the same icon and text,\n     * making them the same road shield icon.\n     */\n    shieldGroupIndex?: number;\n\n    /**\n     * @hidden\n     * Internal reference to a render batch, made up of all icons that use the same Material.\n     */\n    poiRenderBatch?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedWidth?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedHeight?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    uvBox?: Math2D.UvBox;\n\n    /**\n     * @hidden\n     * Computed from owning [[TextElement]]. Value is set when `PoiInfo` is assigned to\n     * [[TextElement]].\n     */\n    renderOrder?: number;\n}\n\n/**\n * Return 'true' if the POI has been successfully prepared for rendering.\n *\n * @param poiInfo PoiInfo containing information for rendering the POI icon.\n */\nexport function poiIsRenderable(poiInfo: PoiInfo): boolean {\n    return poiInfo.poiRenderBatch !== undefined;\n}\n\nexport interface TextPickResult extends PickResult {\n    /**\n     * Text of the picked [[TextElement]]\n     */\n    text?: string;\n}\n\n/**\n * State of loading.\n */\nexport enum LoadingState {\n    Requested,\n    Loaded,\n    Initialized\n}\n\n/**\n * `TextElement` is used to create 2D text elements (for example, labels).\n */\nexport class TextElement {\n    /**\n     * Determines visibility. If set to `false`, it will not be rendered.\n     */\n    visible: boolean = true;\n\n    /**\n     * Determines minimum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    minZoomLevel?: number;\n    /**\n     * Determines maximum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * If `true`, label is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, label will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels, the\n     * render order is undefined;\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n\n    /**\n     * Ignore distance limit. Used for label in labeled-icons.\n     */\n    ignoreDistance?: boolean;\n\n    /**\n     * Scaling factor of text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale: number = 0.5;\n\n    /**\n     * Optional user data. Will be retrieved during picking.\n     */\n    userData?: any;\n\n    /**\n     * If specified, determines the render order between `TextElement`s. The number different\n     * renderOrders should be as small as possible, because every specific `renderOrder` may result\n     * in one or more draw calls.\n     *\n     * TextElements with the same integer `renderOrder` will be rendered in the same batch.\n     *\n     * The `renderOrder` of `TextElement`s are only relative to other `TextElement`s, and not other\n     * map elements.\n     *\n     * A `TextElement` with a higher `renderOrder` will be rendered after a `TextElement` with a\n     * lower `renderOrder`.\n     */\n    renderOrder?: number = 0;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    loadingState?: LoadingState;\n\n    /**\n     * @hidden\n     * Array storing the style [[GlyphData]] for this `TextElement` to speed up label placement in\n     * [[TextElementsRenderer]]. Valid after `loadingState` is `Initialized`.\n     */\n    glyphs?: GlyphData[];\n\n    /**\n     * @hidden\n     * Array storing the casing (`true`: uppercase, `false`: lowercase) for this `TextElement`.\n     * Used by labels in [[TextElementsRenderer]] to support `SmallCaps`. Valid after `loadingState`\n     * is `Initialized`.\n     */\n    glyphCaseArray?: boolean[];\n\n    /**\n     * Screen space bounds for this `TextElement`. Used by point labels in [[TextElementsRenderer]].\n     * Valid after `loadingState` is `Initialized`.\n     */\n    bounds?: THREE.Box2;\n\n    /**\n     * @hidden\n     * Pre-computed text vertex buffer. Used by point labels in [[TextElementsRenderer]]. Valid\n     * after label becomes visible for the first time.\n     */\n    textBufferObject?: TextBufferObject;\n\n    /**\n     * @hidden\n     * If `true`, the estimated bounding box of the path is too small for the label to fit, so it is\n     * being ignored for rendering in the latest frame.\n     */\n    dbgPathTooSmall?: boolean;\n\n    pathLengthSqr?: number;\n\n    type: TextElementType;\n\n    private m_poiInfo?: PoiInfo;\n\n    private m_renderStyle?: TextRenderStyle;\n\n    private m_layoutStyle?: TextLayoutStyle;\n\n    /**\n     * Creates a new `TextElement`.\n     *\n     * @param text The text to display.\n     * @param points The position or a list of points for a curved text, both in local tile space.\n     * @param renderParams `TextElement` text rendering parameters.\n     * @param layoutParams `TextElement` text layout parameters.\n     * @param priority The priority of the `TextElement. Elements with the highest priority get\n     *              placed first, elements with priority of `0` are placed last, elements with a\n     *              negative value are always rendered, ignoring priorities and allowing\n     *              overrides.\n     * @param xOffset Optional X offset of this `TextElement` in screen coordinates.\n     * @param yOffset Optional Y offset of this `TextElement` in screen coordinates.\n     * @param featureId Optional number to identify feature (originated from `OmvDataSource`).\n     * @param fadeNear Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label starts fading out (opacity decreases).\n     * @param fadeFar Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label becomes transparent. A value of <= 0.0 disables fading.\n     */\n    constructor(\n        readonly text: string,\n        readonly points: THREE.Vector3[] | THREE.Vector3,\n        readonly renderParams: TextRenderParameters | TextRenderStyle,\n        readonly layoutParams: TextLayoutParameters | TextLayoutStyle,\n        public priority = 0,\n        public xOffset: number = 0,\n        public yOffset: number = 0,\n        public featureId?: number,\n        public style?: string,\n        public fadeNear?: number,\n        public fadeFar?: number,\n        readonly tileOffset?: number\n    ) {\n        if (renderParams instanceof TextRenderStyle) {\n            this.renderStyle = renderParams;\n        }\n        if (layoutParams instanceof TextLayoutStyle) {\n            this.layoutStyle = layoutParams;\n        }\n\n        this.type =\n            points instanceof THREE.Vector3 ? TextElementType.PoiLabel : TextElementType.PathLabel;\n    }\n\n    /**\n     * The text element position or the first point of the path used to render a curved text, both\n     * in local tile space.\n     */\n    get position(): THREE.Vector3 {\n        if (this.points instanceof Array) {\n            const p = this.points[0];\n            return p;\n        }\n        return this.points as THREE.Vector3;\n    }\n\n    /**\n     * The list of points in local tile space used to render the text along a path or `undefined`.\n     */\n    get path(): THREE.Vector3[] | undefined {\n        if (this.points instanceof Array) {\n            return this.points;\n        }\n        return undefined;\n    }\n\n    /**\n     * If `true`, `TextElement` is allowed to overlap other labels or icons of lower priority.\n     *\n     * @default `false`\n     */\n    get textMayOverlap(): boolean {\n        return this.mayOverlap === true;\n    }\n\n    set textMayOverlap(mayOverlap: boolean) {\n        this.mayOverlap = mayOverlap;\n    }\n\n    /**\n     * If `true`, `TextElement` will reserve screen space, other markers of lower priority will not\n     * be able to overlap.\n     *\n     * @default `true`\n     */\n    get textReservesSpace(): boolean {\n        return this.reserveSpace !== false;\n    }\n\n    set textReservesSpace(reserveSpace: boolean) {\n        this.reserveSpace = reserveSpace;\n    }\n\n    /**\n     * Contains additional information about icon to be rendered along with text.\n     */\n    get poiInfo(): PoiInfo | undefined {\n        return this.m_poiInfo;\n    }\n\n    set poiInfo(poiInfo: PoiInfo | undefined) {\n        this.m_poiInfo = poiInfo;\n        if (poiInfo !== undefined) {\n            if (this.path !== undefined) {\n                this.type = TextElementType.LineMarker;\n            }\n            const poiRenderOrder = this.renderOrder !== undefined ? this.renderOrder : 0;\n            poiInfo.renderOrder = poiRenderOrder;\n        }\n    }\n\n    /**\n     * @returns The style used to render this text element, undefined if not set yet.\n     */\n    get renderStyle(): TextRenderStyle | undefined {\n        return this.m_renderStyle;\n    }\n\n    /**\n     * Sets style used for text rendering.\n     * @param style The style to use.\n     */\n    set renderStyle(style: TextRenderStyle | undefined) {\n        this.m_renderStyle = style;\n    }\n\n    /**\n     * @returns The style used to layout this text element, undefined if not set yet.\n     */\n    get layoutStyle(): TextLayoutStyle | undefined {\n        return this.m_layoutStyle;\n    }\n\n    /**\n     * Sets the style used for text layout.\n     * @param style The style to use.\n     */\n    set layoutStyle(style: TextLayoutStyle | undefined) {\n        this.m_layoutStyle = style;\n    }\n\n    hasFeatureId(): boolean {\n        return this.featureId !== undefined && this.featureId !== 0;\n    }\n\n    /**\n     * Update the minZoomLevel and maxZoomLevel from the values set in [[PoiInfo]].\n     * Selects the smaller/larger one of the two min/max values for icon and text, because the\n     * TextElement is a container for both.\n     */\n    updateMinMaxZoomLevelsFromPoiInfo() {\n        if (this.poiInfo !== undefined) {\n            if (this.minZoomLevel === undefined) {\n                this.minZoomLevel = MathUtils.min2(\n                    this.poiInfo.iconMinZoomLevel,\n                    this.poiInfo.textMinZoomLevel\n                );\n            }\n            if (this.maxZoomLevel === undefined) {\n                this.maxZoomLevel = MathUtils.max2(\n                    this.poiInfo.iconMaxZoomLevel,\n                    this.poiInfo.textMaxZoomLevel\n                );\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Types of text elements.\n */\nexport enum TextElementType {\n    PoiLabel,\n    PathLabel,\n    LineMarker\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LoggerManager, PerformanceTimer } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"Statistics\");\n\n/**\n * A simple ring buffer to store the last `n` values of the timer. The buffer works on\n * a First-In-First-Out (FIFO) basis.\n */\nexport class RingBuffer<T> {\n    buffer: T[];\n    size: number;\n    head: number;\n    tail: number;\n\n    /**\n     * Sets up the ring buffer.\n     *\n     * @param capacity The buffer's capacity.\n     */\n    constructor(readonly capacity: number) {\n        this.buffer = new Array(capacity);\n        this.capacity = capacity;\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Clears the contents, removes all elements.\n     */\n    clear(): void {\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Adds a single element to the ring buffer.\n     *\n     * @param data Data element.\n     */\n    enqOne(data: T): void {\n        let next = this.head + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size < this.capacity) {\n            this.size++;\n        }\n\n        this.buffer[this.head] = data;\n        this.head = next;\n\n        if (this.size === this.capacity) {\n            this.tail = this.head;\n        }\n    }\n\n    /**\n     * Adds one or more elements.\n     *\n     * @param data The elements to add.\n     */\n    enq(...data: T[]): void {\n        for (const v of data) {\n            this.enqOne(v);\n        }\n    }\n\n    /**\n     * Obtains the oldest element (FIFO). May throw an exception if a buffer underrun occurs.\n     * Before calling this method, make sure that `size > 0`.\n     */\n    deq(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        const data = this.buffer[this.tail];\n        let next = this.tail + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size > 0) {\n            this.size--;\n        }\n\n        this.tail = next;\n        return data;\n    }\n\n    /**\n     * Obtains the oldest element (FIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get top(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        return this.buffer[this.tail];\n    }\n\n    /**\n     * Obtains the latest element (LIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get bottom(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        let previous = this.head - 1;\n        if (previous < 0) {\n            previous = this.capacity - 1;\n        }\n        return this.buffer[previous];\n    }\n\n    /**\n     * Creates an iterator for the buffer.\n     */\n    iterator(): RingBuffer.Iterator<T> {\n        return new RingBuffer.Iterator<T>(this);\n    }\n\n    /**\n     * Returns a copy of the buffer, where the elements are properly sorted from oldest to newest.\n     */\n    asArray(): T[] {\n        const array = new Array<T>();\n        for (let i = 0; i < this.size; i++) {\n            array.push(this.buffer[(this.tail + i) % this.capacity]);\n        }\n        return array;\n    }\n}\n\nexport namespace RingBuffer {\n    /**\n     * A local class for RingBuffer<T>\n     */\n    export class Iterator<T> {\n        /**\n         * Creates an iterator for the ring buffer.\n         *\n         * @param m_buffer `Ringbuffer` to iterate over.\n         * @param m_index Start index.\n         */\n        constructor(private m_buffer: RingBuffer<T>, private m_index: number = 0) {}\n\n        /**\n         * Gets the iterator's current value. This function does not fail even if an overrun occurs.\n         * To detect an overrun, watch the result for [[next]].\n         */\n        get value(): T {\n            return this.m_buffer.buffer[\n                (this.m_buffer.tail + this.m_index) % this.m_buffer.capacity\n            ];\n        }\n\n        /**\n         * Advances the iterator to the next element.\n         *\n         * @returns `true` if the iterator is still valid; `false` if an overrun occurs.\n         */\n        next(): boolean {\n            this.m_index++;\n            return this.m_index < this.m_buffer.size;\n        }\n    }\n}\n\n/**\n * An interface for a Timer class, that abstracts the basic functions of a Timer. Implemented\n * by SimpleTimer, SampledTimer, and MultiStageTimer.\n */\nexport interface Timer {\n    readonly name: string;\n    readonly value?: number;\n\n    /**\n     * Resets value to be able to start again.\n     */\n    reset(): void;\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number;\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number;\n\n    /**\n     * Samples the timer. Requires that the timer has started. This function does not modify\n     * the timer's internal state.\n     *\n     * @returns Current timer value. `-1` if statistics are disabled.\n     */\n    now(): number;\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined): void;\n}\n\n/**\n * A simple timer that stores only the latest measurement.\n */\nexport class SimpleTimer implements Timer {\n    /** `true` if timer has been started. */\n    running = false;\n\n    private m_currentValue?: number;\n\n    constructor(public statistics: Statistics, readonly name: string) {}\n\n    /**\n     * Gets the latest measurement. This function may return `undefined` if no measurement\n     * was done.\n     */\n    get value(): number | undefined {\n        return this.m_currentValue;\n    }\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined) {\n        this.m_currentValue = val;\n    }\n\n    /**\n     * Resets the value to be able to start again.\n     */\n    reset() {\n        this.m_currentValue = undefined;\n    }\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' is already running\");\n        }\n        this.running = true;\n        return (this.m_currentValue = PerformanceTimer.now());\n    }\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            // this.currentValue is a number now!\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            this.m_currentValue = t;\n            this.setValue(t);\n            this.running = false;\n            return t;\n        }\n    }\n\n    /**\n     * Samples the timer. Requires that the timer has started.\n     *\n     * @returns the current timer value; `-1` if statistics are disabled.\n     */\n    now(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            return t;\n        }\n    }\n}\n\n/**\n * Simple statistics about the values in an array.\n */\nexport interface Stats {\n    /**\n     * The lowest value in the array.\n     */\n    min: number;\n\n    /**\n     * The highest value in the array.\n     */\n    max: number;\n\n    /**\n     * The average duration of all values in the array.\n     */\n    avg: number;\n\n    /**\n     * The median duration of all values in the array.\n     */\n    median: number;\n\n    /**\n     * The 75th percentile median of all values in the array.\n     */\n    median75: number;\n\n    /**\n     * The 90th percentile median of all values in the array.\n     */\n    median90: number;\n\n    /**\n     * The 95th percentile median of all values in the array.\n     */\n    median95: number;\n\n    /**\n     * The 97th percentile median of all values in the array.\n     */\n    median97: number;\n\n    /**\n     * The 99th percentile median of all values in the array.\n     */\n    median99: number;\n\n    /**\n     * The 99.9th percentile median of all values in the array.\n     */\n    median999: number;\n\n    /**\n     * The number of values in the array.\n     */\n    numSamples: number;\n}\n\n/**\n * A timer that stores the last `n` samples in a ring buffer.\n */\nexport class SampledTimer extends SimpleTimer {\n    /**\n     * The number of times the timer has reset.\n     */\n    numResets = 0;\n\n    /**\n     * Maximum samples until the statistics are reset and updated, which may destroy a median\n     * computation.\n     */\n    maxNumSamples = 1000;\n\n    /**\n     * The array of sampled values, its length cannot exceed `maxNumSamples`.\n     */\n    samples = new RingBuffer<number>(this.maxNumSamples);\n\n    /**\n     * Creates a `SampledTimer` instance. Must still be added to statistics if it should be logged!\n     *\n     * @param statistics Statistics to use for management.\n     * @param name Name of the timer. Use colons to build a hierarchy.\n     */\n    constructor(public statistics: Statistics, readonly name: string) {\n        super(statistics, name);\n    }\n\n    /**\n     * Resets the timer and clears all of its historical values.\n     * @override\n     */\n    reset() {\n        super.reset();\n        this.getStats();\n        this.samples.clear();\n        this.numResets++;\n    }\n\n    /**\n     * Add a single measurement to the sample.\n     *\n     * @param val A measurement to add.\n     * @override\n     */\n    setValue(val: number | undefined) {\n        super.setValue(val);\n\n        if (val !== undefined) {\n            this.samples.enqOne(val);\n        }\n    }\n\n    /**\n     * Updates the `min`, `max`, `avg`, and `median` values. Currently, this function is expensive,\n     * as it requires a copy of the sampled values.\n     */\n    getStats(): Stats | undefined {\n        return computeArrayStats(this.samples.asArray());\n    }\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the [[ArrayStats]] for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values. Will be modified (!) by sorting the\n *      entries.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayStats(samples: number[]): Stats | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    samples.sort((a: number, b: number) => {\n        return a - b;\n    });\n\n    const min: number = samples[0];\n    const max: number = samples[samples.length - 1];\n    let median: number;\n    let median75: number;\n    let median90: number;\n    let median95: number;\n    let median97: number;\n    let median99: number;\n    let median999: number;\n\n    if (samples.length === 1) {\n        median75 = median90 = median95 = median97 = median99 = median999 = median = samples[0];\n    } else if (samples.length === 2) {\n        median = samples[0] * 0.5 + samples[1] * 0.5;\n        median75 = median90 = median95 = median97 = median99 = median999 = samples[1];\n    } else {\n        const mid = Math.floor(samples.length / 2);\n        median =\n            samples.length % 2 === 0 ? samples[mid - 1] * 0.5 + samples[mid] * 0.5 : samples[mid];\n\n        const mid75 = Math.round(samples.length * 0.75) - 1;\n        median75 = samples[mid75];\n        const mid90 = Math.round(samples.length * 0.9) - 1;\n        median90 = samples[mid90];\n        const mid95 = Math.round(samples.length * 0.95) - 1;\n        median95 = samples[mid95];\n        const mid97 = Math.round(samples.length * 0.97) - 1;\n        median97 = samples[mid97];\n        const mid99 = Math.round(samples.length * 0.99) - 1;\n        median99 = samples[mid99];\n        const mid999 = Math.round(samples.length * 0.999) - 1;\n        median999 = samples[mid999];\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return {\n        min,\n        max,\n        avg,\n        median,\n        median75,\n        median90,\n        median95,\n        median97,\n        median99,\n        median999,\n        numSamples: samples.length\n    };\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the averages for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayAverage(samples: number[]): number | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return avg;\n}\n\n/**\n * Measures a sequence of connected events, such as multiple processing stages in a function.\n * Each stage is identified with a timer name, that must be a valid timer in the statistics\n * object. Additionally, all timers within a `MultiStageTimer` must be unique.\n *\n * Internally, the `MultiStageTimer` manages a list of timers where at the end of each stage,\n * one timer stops and the next timer starts.\n */\nexport class MultiStageTimer {\n    private currentStage: string | undefined;\n\n    /**\n     * Defines the `MultiStageTimer` with a list of timer names that represent its stages.\n     *\n     * @param statistics The statistics object that manages the timers.\n     * @param name Name of this `MultiStageTimer`.\n     * @param stages List of timer names.\n     */\n    constructor(private statistics: Statistics, readonly name: string, public stages: string[]) {\n        if (stages.length < 1) {\n            throw new Error(\"MultiStageTimer needs stages\");\n        }\n\n        stages.forEach(stage => {\n            if (!statistics.hasTimer(stage)) {\n                throw new Error(\"Unknown timer: \" + stage);\n            }\n        });\n    }\n\n    /**\n     * Gets the timer value for the last stage. If the `MultiStageTimer` did not finish its\n     * last stage, the value is `undefined`.\n     */\n    get value(): number | undefined {\n        return this.statistics.getTimer(this.stages[this.stages.length - 1]).value;\n    }\n\n    /**\n     * Resets the timers across all stages.\n     */\n    reset(): void {\n        if (!this.statistics.enabled) {\n            return;\n        }\n        this.stages.forEach(stage => {\n            this.statistics.getTimer(stage).reset();\n        });\n    }\n\n    /**\n     * Starts the `MultiStageTimer` at its first stage.\n     */\n    start(): number {\n        this.stage = this.stages[0];\n\n        return this.statistics.getTimer(this.stages[0]).value || -1;\n    }\n\n    /**\n     * Stops the `MultiStageTimer`. Returns the measurement of the last stage, which may be\n     * `undefined` if not all stages started.\n     */\n    stop(): number {\n        this.stage = undefined;\n        return this.value !== undefined ? this.value : -1;\n    }\n\n    /**\n     * Gets the current stage.\n     */\n    get stage(): string | undefined {\n        return this.currentStage;\n    }\n\n    /**\n     * Sets the current stage. If a new stage is provided, the current timer (if available) is\n     * stopped, and the next timer is started. If the timer in the next stage is `undefined`,\n     * this is equivalent to calling `stop` on the `MultiStageTimer`.\n     *\n     * @param stage The next stage to start.\n     */\n    set stage(stage: string | undefined) {\n        if (this.currentStage === stage) {\n            return;\n        }\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).stop();\n        }\n\n        this.currentStage = stage;\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).start();\n        }\n    }\n}\n\n/**\n * Manages a set of timers. The main objective of `Statistics` is to log these timers. You can\n * disable statistics to minimize their impact on performance.\n */\nexport class Statistics {\n    private timers: Map<string, Timer>;\n\n    private nullTimer: Timer;\n\n    /**\n     * Sets up a group of timers.\n     *\n     * @param name The statistics name, for logging purposes.\n     * @param enabled If `false`, the timers do not measure the performance.\n     */\n    constructor(public name?: string, public enabled = false) {\n        this.timers = new Map<string, Timer>();\n        this.nullTimer = new SimpleTimer(this, \"<null>\");\n    }\n\n    /**\n     * Adds a timer, based on the name specified.\n     *\n     * @param name The timer's name; must be unique.\n     */\n    createTimer(name: string, keepSamples = true): Timer {\n        const timer = keepSamples ? new SampledTimer(this, name) : new SimpleTimer(this, name);\n\n        return this.addTimer(timer);\n    }\n\n    /**\n     * Adds the timer specified.\n     *\n     * @param timer The timer's name, which must be unique within this statistics object.\n     */\n    addTimer(timer: Timer): Timer {\n        if (this.timers.get(timer.name) !== undefined) {\n            throw new Error(\"Duplicate timer name: '\" + timer.name + \"'\");\n        }\n\n        this.timers.set(timer.name, timer);\n\n        return timer;\n    }\n\n    /**\n     * Gets a timer by name.\n     *\n     * @param name The timer's name.\n     */\n    getTimer(name: string): Timer {\n        if (!this.enabled) {\n            return this.nullTimer;\n        }\n\n        const t = this.timers.get(name);\n        return t === undefined ? this.nullTimer : t;\n    }\n\n    /**\n     * Checks if a timer with the specified name already exists.\n     *\n     * @param name The timer's name.\n     * @returns `true` if a timer with `name` already exists; `false` otherwise.\n     */\n    hasTimer(name: string): boolean {\n        const t = this.timers.get(name);\n        return t !== undefined;\n    }\n\n    /**\n     * Resets all timers.\n     */\n    reset() {\n        this.timers.forEach((timer: Timer) => {\n            timer.reset();\n        });\n    }\n\n    /**\n     * Prints all values to the console.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        if (header !== undefined || this.name !== undefined) {\n            logger.log(header !== undefined ? header : this.name);\n        }\n\n        let maxNameLength = 0;\n\n        this.timers.forEach((timer: Timer) => {\n            maxNameLength = Math.max(maxNameLength, timer.name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.timers.forEach((timer: Timer) => {\n            let s = timer.name + \": \" + \" \".repeat(maxNameLength - timer.name.length);\n            s += print(timer.value);\n\n            // sampled timers also update their stats and log them\n            if (timer instanceof SampledTimer) {\n                const simpleStats = timer.getStats();\n                if (simpleStats !== undefined) {\n                    s +=\n                        `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                        `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                        `med95=${print(simpleStats.median95)}, med99=${print(\n                            simpleStats.median99\n                        )}, ` +\n                        `N=${print(simpleStats.numSamples)} ]`;\n                }\n            }\n            logger.log(s);\n        });\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n}\n\n/**\n * Class containing all counters, timers and events of the current frame.\n */\nexport class FrameStats {\n    readonly entries: Map<string, number> = new Map();\n    messages?: string[] = undefined;\n\n    /**\n     * Retrieve the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @returns The value of the performance number or `undefined` if it has not been declared by\n     *      `setValue` before.\n     */\n    getValue(name: string): number | undefined {\n        return this.entries.get(name);\n    }\n\n    /**\n     * Set the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @param name New value of the performance number.\n     */\n    setValue(name: string, value: number) {\n        this.entries.set(name, value);\n    }\n\n    /**\n     * Add a value to the current value of the performance number. If the performance is not known,\n     * it will be initialized with `value`.\n     *\n     * @param name Name of the performance number.\n     * @param name Value to be added to the performance number.\n     */\n    addValue(name: string, value: number) {\n        const oldValue = this.entries.get(name);\n        this.entries.set(name, value + (oldValue === undefined ? 0 : oldValue));\n    }\n\n    /**\n     * Add a text message to the frame, like \"Font XYZ has been loaded\"\n     *\n     * @param message The message to add.\n     */\n    addMessage(message: string) {\n        if (this.messages === undefined) {\n            this.messages = [];\n        }\n        this.messages.push(message);\n    }\n\n    /**\n     * Reset all known performance values to `0` and the messages to `undefined`.\n     */\n    reset() {\n        this.entries.forEach((value: number, name: string) => {\n            this.entries.set(name, 0);\n        });\n\n        this.messages = undefined;\n    }\n}\n\n/**\n * @ignore\n * Only exported for testing.\n *\n * Instead of passing around an array of objects, we store the frame statistics as an object of\n * arrays. This allows convenient computations from [[RingBuffer]],\n */\nexport class FrameStatsArray {\n    readonly frameEntries: Map<string, RingBuffer<number>> = new Map();\n    readonly messages: RingBuffer<string[] | undefined>;\n\n    constructor(readonly capacity: number = 0) {\n        this.messages = new RingBuffer<string[] | undefined>(capacity);\n    }\n\n    get length(): number {\n        return this.messages.size;\n    }\n\n    reset() {\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            buffer.clear();\n        });\n        this.messages.clear();\n    }\n\n    addFrame(frameStats: FrameStats) {\n        const currentSize = this.length;\n        const frameEntries = this.frameEntries;\n\n        frameStats.entries.forEach((value: number, name: string) => {\n            let buffer = frameEntries.get(name);\n\n            if (buffer === undefined) {\n                // If there is a buffer that has not been known before, add it to the known buffers,\n                // fill it up with with 0 to the size of all the other buffers to make them of equal\n                // size to make PerfViz happy.\n                buffer = new RingBuffer<number>(this.capacity);\n                for (let i = 0; i < currentSize; i++) {\n                    buffer.enqOne(0);\n                }\n                this.frameEntries.set(name, buffer);\n            }\n            buffer.enqOne(value);\n        });\n\n        this.messages.enq(frameStats.messages);\n    }\n\n    /**\n     * Prints all values to the console.\n     */\n    log() {\n        let maxNameLength = 0;\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            maxNameLength = Math.max(maxNameLength, name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            let s = name + \": \" + \" \".repeat(maxNameLength - name.length);\n\n            const simpleStats = computeArrayStats(buffer.asArray());\n            if (simpleStats !== undefined) {\n                s +=\n                    `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                    `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                    `med95=${print(simpleStats.median95)}, med99=${print(simpleStats.median99)}, ` +\n                    `N=${print(simpleStats.numSamples)} ]`;\n            }\n            logger.log(s);\n        });\n    }\n}\n\n/**\n * Chrome's MemoryInfo interface.\n */\ninterface ChromeMemoryInfo {\n    totalJSHeapSize: number;\n    usedJSHeapSize: number;\n    jsHeapSizeLimit: number;\n}\n\nexport interface SimpleFrameStatistics {\n    configs: Map<string, string>;\n    appResults: Map<string, number>;\n    frames: Map<string, number | number[]>;\n    messages: Array<string[] | undefined>;\n    frameStats?: Map<string, Stats | undefined>;\n    zoomLevelLabels?: string[];\n    zoomLevelData?: Map<string, number | number[]>;\n}\n\n/**\n * Performance measurement central. Maintains the current [[FrameStats]], which holds all individual\n * performance numbers.\n *\n * Implemented as an instance for easy access.\n */\nexport class PerformanceStatistics {\n    /**\n     * Returns `true` when the maximum number of storable frames is reached.\n     *\n     * @readonly\n     * @type {boolean}\n     * @memberof PerformanceStatistics\n     */\n    get isFull(): boolean {\n        return this.m_frameEvents.length >= this.maxNumFrames;\n    }\n    /**\n     * Global instance to the instance. The current instance can be overridden by creating a new\n     * `PerformanceStatistics`.\n     */\n    static get instance(): PerformanceStatistics {\n        if (PerformanceStatistics.m_instance === undefined) {\n            PerformanceStatistics.m_instance = new PerformanceStatistics(false, 0);\n        }\n        return PerformanceStatistics.m_instance;\n    }\n\n    private static m_instance?: PerformanceStatistics = undefined;\n\n    /**\n     * Current frame statistics. Contains all values for the current frame. Will be cleared when\n     * [[PerformanceStatistics#storeFrameInfo]] is called.\n     *\n     * @type {FrameStats}\n     * @memberof PerformanceStatistics\n     */\n    readonly currentFrame: FrameStats = new FrameStats();\n\n    /**\n     * @ignore\n     * Only exported for testing.\n     *\n     * Return the array of frame events.\n     */\n    get frameEvents(): FrameStatsArray {\n        return this.m_frameEvents;\n    }\n\n    /**\n     * Additional results stored for the current application run, not per frame. Only the last value\n     * is stored.\n     *\n     * @type {(Map<string, number>)}\n     */\n    readonly appResults: Map<string, number> = new Map();\n\n    /**\n     * Additional configuration values stored for the current application run, not per frame. Only\n     * the last value is stored.\n     *\n     * @type {(Map<string, string>)}\n     * @memberof PerformanceStatistics\n     */\n    readonly configs: Map<string, string> = new Map();\n\n    // Current array of frame events.\n    private m_frameEvents: FrameStatsArray;\n\n    /**\n     * Creates an instance of PerformanceStatistics. Overrides the current `instance`.\n     *\n     * @param {boolean} [enabled=true] If `false` the performance values will not be stored.\n     * @param {number} [maxNumFrames=1000] The maximum number of frames that are to be stored.\n     * @memberof PerformanceStatistics\n     */\n    constructor(public enabled = true, public maxNumFrames = 1000) {\n        PerformanceStatistics.m_instance = this;\n        this.m_frameEvents = new FrameStatsArray(maxNumFrames);\n    }\n\n    /**\n     * Clears all settings, all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clear() {\n        this.clearFrames();\n        this.configs.clear();\n        this.appResults.clear();\n    }\n\n    /**\n     * Clears only all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clearFrames() {\n        this.m_frameEvents.reset();\n        this.currentFrame.reset();\n    }\n\n    /**\n     * Stores the current frame events into the array of events. Uses [[THREE.WebGLInfo]] to add the\n     * render state information to the current frame.\n     *\n     * @param {THREE.WebGLInfo} webGlInfo\n     * @returns {boolean} Returns `false` if the maximum number of storable frames has been reached.\n     * @memberof PerformanceStatistics\n     */\n    storeFrameInfo(webGlInfo?: THREE.WebGLInfo): boolean {\n        if (this.m_frameEvents.length >= this.maxNumFrames) {\n            return false;\n        }\n\n        if (webGlInfo !== undefined) {\n            if (webGlInfo.render !== undefined) {\n                this.currentFrame.setValue(\n                    \"gl.numCalls\",\n                    webGlInfo.render.calls === null ? 0 : webGlInfo.render.calls\n                );\n                this.currentFrame.setValue(\n                    \"gl.numPoints\",\n                    webGlInfo.render.points === null ? 0 : webGlInfo.render.points\n                );\n                this.currentFrame.setValue(\n                    \"gl.numLines\",\n                    webGlInfo.render.lines === null ? 0 : webGlInfo.render.lines\n                );\n                this.currentFrame.setValue(\n                    \"gl.numTriangles\",\n                    webGlInfo.render.triangles === null ? 0 : webGlInfo.render.triangles\n                );\n            }\n            if (webGlInfo.memory !== undefined) {\n                this.currentFrame.setValue(\n                    \"gl.numGeometries\",\n                    webGlInfo.memory.geometries === null ? 0 : webGlInfo.memory.geometries\n                );\n                this.currentFrame.setValue(\n                    \"gl.numTextures\",\n                    webGlInfo.memory.textures === null ? 0 : webGlInfo.memory.textures\n                );\n            }\n            if (webGlInfo.programs !== undefined) {\n                this.currentFrame.setValue(\n                    \"gl.numPrograms\",\n                    webGlInfo.programs === null ? 0 : webGlInfo.programs.length\n                );\n            }\n        }\n\n        if (window !== undefined && window.performance !== undefined) {\n            const memory = (window.performance as any).memory as ChromeMemoryInfo;\n            if (memory !== undefined) {\n                this.currentFrame.setValue(\"memory.totalJSHeapSize\", memory.totalJSHeapSize);\n                this.currentFrame.setValue(\"memory.usedJSHeapSize\", memory.usedJSHeapSize);\n                this.currentFrame.setValue(\"memory.jsHeapSizeLimit\", memory.jsHeapSizeLimit);\n            }\n        }\n\n        this.m_frameEvents.addFrame(this.currentFrame);\n\n        this.currentFrame.reset();\n        return true;\n    }\n\n    /**\n     * Logs all values to the logger.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        logger.log(header !== undefined ? header : \"PerformanceStatistics\");\n\n        const appResults = this.appResults;\n        appResults.forEach((value: number, name: string) => {\n            logger.log(name, value);\n        });\n        const configs = this.configs;\n        configs.forEach((value: string, name: string) => {\n            logger.log(name, value);\n        });\n        this.m_frameEvents.log();\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsPlainObject(onlyLastFrame: boolean = false): any {\n        const appResults: any = {};\n        const configs: any = {};\n        const frames: any = {};\n        const plainObject: any = {\n            configs,\n            appResults,\n            frames\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults[name] = value;\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs[name] = value;\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.bottom;\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.asArray();\n            }\n        }\n        plainObject.messages = this.m_frameEvents.messages.asArray();\n        return plainObject;\n    }\n\n    /**\n     * Convert the last frame values to a plain object that can be serialized. Required to copy the\n     * test results over to nightwatch.\n     */\n    getLastFrameStatistics(): any {\n        return this.getAsPlainObject(true);\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsSimpleFrameStatistics(onlyLastFrame: boolean = false): SimpleFrameStatistics {\n        const configs: Map<string, string> = new Map();\n        const appResults: Map<string, number> = new Map();\n        const frames: Map<string, number | number[]> = new Map();\n\n        const simpleStatistics: SimpleFrameStatistics = {\n            configs,\n            appResults,\n            frames,\n            messages: this.m_frameEvents.messages.asArray()\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults.set(name, value);\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs.set(name, value);\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.bottom);\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.asArray());\n            }\n        }\n        return simpleStatistics;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The interface for the [[Pass]] class.\n */\nexport interface IPass {\n    /**\n     * Whether the [[Pass]] instance is active or not.\n     * @default `true`.\n     */\n    enabled: boolean;\n\n    /**\n     * Whether the render method should target a WebGLRenderTarget instance, or the frame buffer.\n     * @default `false`.\n     */\n    renderToScreen: boolean;\n\n    /**\n     * The resize method to extend in [[Pass]] implementations. It resizes the render targets. Call\n     * on resize events.\n     *\n     * @param width Width to resize to.\n     * @param height Height to resize to.\n     */\n    setSize(width: number, height: number): void;\n\n    /**\n     * The render method to extend in [[Pass]] implementations. This is the place where the desired\n     * effects or render operations are executed.\n     *\n     * @param renderer The WebGLRenderer instance in use.\n     * @param scene The scene to render.\n     * @param camera The camera to render the scene through.\n     * @param writeBuffer The optional WebGLRenderTarget instance to write to.\n     * @param readBuffer The optional WebGLRenderTarget instance of a previous pass to write onto.\n     * @param delta The time argument from the requestAnimationFrame.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ): void;\n}\n\n/**\n * The base class to extend for further passes in [[MapView]], like the [[MSAARenderPass]], possibly\n * a text pass, an AO effect etc. `Pass` provides the core logic for both :\n * - render passes (proper scene renders),\n * - and shader passes (quad renders, i.e. effects added on top of the render output as a\n * postprocess).\n *\n * Even some shader passes still actually fall within the render pass category as they need to\n * re-render the scene to then deduce an effect, such as masking, AO, DoF etc. Others just need the\n * previous input image to apply a shader on top of it, as for bloom or NVIDIA's FXAA for example.\n * These only are proper shader passes.\n */\nexport class Pass implements IPass {\n    enabled: boolean = false;\n    renderToScreen: boolean = false;\n    // tslint:disable-next-line:no-unused-variable\n    setSize(width: number, height: number) {\n        // Implemented in sub-classes.\n    }\n    // tslint:disable:no-unused-variable\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ) {\n        // Implemented in sub-classes.\n    }\n    // tslint:enable:no-unused-variable\n}\n\n/**\n * The pass that does a default normal scene rendering for further post-effects.\n */\nexport class RenderPass extends Pass {\n    constructor() {\n        super();\n    }\n\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null\n    ) {\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.render(scene, camera);\n    }\n}\n\n/**\n * The base class to extend for post-effects on the final render (like Vignette, Sepia, color\n * correction...)\n */\nexport class ShaderPass extends Pass {\n    uniforms: { [uniform: string]: THREE.IUniform };\n    material: THREE.Material;\n    fsQuad: FullScreenQuad;\n    constructor(shader: THREE.Shader, private textureID: string = \"tDiffuse\") {\n        super();\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: { ...(shader as any).defines },\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new FullScreenQuad(this.material);\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget,\n        readBuffer: THREE.WebGLRenderTarget,\n        delta?: number\n    ) {\n        if (this.uniforms[this.textureID]) {\n            this.uniforms[this.textureID].value = readBuffer.texture;\n        }\n        this.fsQuad.material = this.material;\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        this.fsQuad.render(renderer);\n    }\n}\n\nclass FullScreenQuad {\n    private m_mesh: THREE.Mesh;\n    private m_camera: THREE.Camera;\n    constructor(material: THREE.Material) {\n        this.m_camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        const geometry = new THREE.PlaneBufferGeometry(2, 2);\n        this.m_mesh = new THREE.Mesh(geometry, material);\n    }\n    get material(): THREE.Material {\n        return this.m_mesh.material as THREE.Material;\n    }\n    set material(value: THREE.Material) {\n        this.m_mesh.material = value;\n    }\n    render(renderer: THREE.WebGLRenderer) {\n        renderer.render((this.m_mesh as any) as THREE.Scene, this.m_camera);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nclass MercatorProjection extends Projection {\n    protected static clamp(val: number, min: number, max: number): number {\n        return Math.min(Math.max(min, val), max);\n    }\n\n    protected static latitudeClamp(latitude: number): number {\n        return MercatorProjection.clamp(\n            latitude,\n            -MercatorConstants.MAXIMUM_LATITUDE,\n            MercatorConstants.MAXIMUM_LATITUDE\n        );\n    }\n\n    private static latitudeProject(latitude: number): number {\n        return Math.log(Math.tan(Math.PI * 0.25 + latitude * 0.5)) / Math.PI;\n    }\n\n    private static latitudeClampProject(latitude: number): number {\n        return MercatorProjection.latitudeProject(MercatorProjection.latitudeClamp(latitude));\n    }\n\n    private static unprojectLatitude(y: number): number {\n        return 2.0 * Math.atan(Math.exp(Math.PI * y)) - Math.PI * 0.5;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh(2 * Math.PI * (worldPoint.y / this.unitScale - 0.5));\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        result.y =\n            (MercatorProjection.latitudeClampProject(geoPoint.latitudeInRadians) * 0.5 + 0.5) *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            MercatorProjection.unprojectLatitude((worldPoint.y / this.unitScale - 0.5) * 2.0),\n            (worldPoint.x / this.unitScale) * 2 * Math.PI - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(geoBox.center);\n        const worldNorth =\n            (MercatorProjection.latitudeClampProject(geoBox.northEast.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldSouth =\n            (MercatorProjection.latitudeClampProject(geoBox.southWest.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldYCenter = (worldNorth + worldSouth) * 0.5;\n\n        worldCenter.y = worldYCenter;\n\n        const latitudeSpan = worldNorth - worldSouth;\n        const longitudeSpan = (geoBox.longitudeSpan / 360) * this.unitScale;\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - longitudeSpan * 0.5;\n            result.min.y = worldCenter.y - latitudeSpan * 0.5;\n            result.max.x = worldCenter.x + longitudeSpan * 0.5;\n            result.max.y = worldCenter.y + latitudeSpan * 0.5;\n            const altitudeSpan = geoBox.altitudeSpan;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = longitudeSpan * 0.5;\n            result.extents.y = latitudeSpan * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (geoBox.altitudeSpan || 0) * 0.5);\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        // this implementation of [[reprojectPoint]] supports both\n        // [[WebMercatorProjection]] and [[MercatorProjection]]. The only\n        // difference betweeen these two variants of WEB Mercator\n        // is in the orientation of the Y axis, so we just flip Y coordinates\n        // when reprojecting between them.\n        if (\n            sourceProjection !== this &&\n            (sourceProjection === webMercatorProjection || sourceProjection === mercatorProjection)\n        ) {\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = worldPos.x;\n            result.y = this.unitScale - worldPos.y;\n            result.z = worldPos.z;\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n}\n\nclass WebMercatorProjection extends MercatorProjection {\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        /*\n         * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n         * might be a concrete class which is not available at runtime.\n         * Consider the following example:\n         *\n         *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n         *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n         *\n         * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n         */\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        const sy = Math.sin(MercatorProjection.latitudeClamp(geoPoint.latitudeInRadians));\n        result.y = (0.5 - Math.log((1 + sy) / (1 - sy)) / (4 * Math.PI)) * this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const x = worldPoint.x / this.unitScale - 0.5;\n        const y = 0.5 - worldPoint.y / this.unitScale;\n\n        const longitude = 360 * x;\n        const latitude = 90 - (360 * Math.atan(Math.exp(-y * 2 * Math.PI))) / Math.PI;\n\n        return new GeoCoordinates(latitude, longitude, worldPoint.z);\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const r = super.projectBox(geoBox, result);\n        if (isBox3Like(r)) {\n            // Invert the y axis for web mercator, this means that max => min & min => max\n            const maxY = r.max.y;\n            r.max.y = this.unitScale - r.min.y;\n            r.min.y = this.unitScale - maxY;\n        } else if (isOrientedBox3Like(r)) {\n            MathUtils.newVector3(1, 0, 0, r.xAxis);\n            MathUtils.newVector3(0, -1, 0, r.yAxis);\n            MathUtils.newVector3(0, 0, -1, r.zAxis);\n            r.position.y = this.unitScale - r.position.y;\n        }\n        return r;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = new GeoBox(\n            new GeoCoordinates(maxGeo.latitude, minGeo.longitude, minGeo.altitude),\n            new GeoCoordinates(minGeo.latitude, maxGeo.longitude, maxGeo.altitude)\n        );\n        return geoBox;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, -1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, -1, result.zAxis);\n        return result;\n    }\n}\n\nexport class MercatorConstants {\n    // Math.atan(Math.sinh(Math.PI))\n    static readonly MAXIMUM_LATITUDE: number = 1.4844222297453323;\n}\n\n/**\n * Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const mercatorProjection: Projection = new MercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n\n/**\n * Web Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const webMercatorProjection: Projection = new WebMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass QuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(): number {\n        return 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n}\n\n/**\n * [[SubdivisionScheme]] representing a quadtree.\n */\nexport const quadTreeSubdivisionScheme: SubdivisionScheme = new QuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000 // Math.pow(2, 52), highest bit that can be set correctly.\n];\n\n/**\n * The `TileKey` instances are used to address a tile in a quadtree.\n *\n * A tile key is defined by a row, a column, and a level. The tree has a root at level 0, with one\n * single tile. On every level, each tile is divided into four children (therefore the name\n * quadtree).\n *\n * Within each [[level]], any particular tile is addressed with [[row]] and [[column]]. The number\n * of rows and columns in each level is 2 to the power of the level. This means: On level 0, only\n * one tile exists, [[columnsAtLevel]]() and [[rowsAtLevel]]() are both 1. On level 1, 4 tiles\n * exist, in 2 rows and 2 columns. On level 2 we have 16 tiles, in 4 rows and 4 columns. And so on.\n *\n * A tile key is usually created using [[fromRowColumnLevel]]() method.\n *\n * `TileKey` instances are immutable, all members return new instances of `TileKey` and do not\n * modify the original object.\n *\n * Utility functions like [[parent]](), [[changedLevelBy]](), and [[changedLevelTo]]() allow for\n * easy vertical navigation of the tree. The number of available rows and columns in the tile's\n * level is given with [[rowCount]]() and [[columnCount]]().\n *\n * Tile keys can be created from and converted into various alternative formats:\n *\n *  - [[toQuadKey]]() / [[fromQuadKey]]() - string representation 4-based\n *  - [[toHereTile]]() / [[fromHereTile]]() - string representation 10-based\n *  - [[mortonCode]]() / [[fromMortonCode]]() - number representation\n *\n * Note - as JavaScript's number type can hold 53 bits in its mantissa, only levels up to 26 can be\n * represented in the number representation returned by [[mortonCode]]().\n */\nexport class TileKey {\n    /**\n     * Creates a tile key.\n     *\n     * @param row The requested row. Must be less than 2 to the power of level.\n     * @param column The requested column. Must be less than 2 to the power of level.\n     * @param level The requested level.\n     */\n    static fromRowColumnLevel(row: number, column: number, level: number): TileKey {\n        return new TileKey(row, column, level);\n    }\n\n    /**\n     * Creates a tile key from a quad string.\n     *\n     * The quad string can be created with [[toQuadKey]].\n     *\n     * @param quadkey The quadkey to convert.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromQuadKey(quadkey: string): TileKey {\n        const level = quadkey.length;\n        let row = 0;\n        let column = 0;\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < quadkey.length; ++i) {\n            const mask = 1 << i;\n            const d = parseInt(quadkey.charAt(level - i - 1), 10);\n            if (d & 0x1) {\n                column |= mask;\n            }\n            if (d & 0x2) {\n                row |= mask;\n            }\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n    /**\n     * Creates a tile key from a numeric Morton code representation.\n     *\n     * You can convert a tile key into a numeric Morton code with [[mortonCode]].\n     *\n     * @param quadKey64 The Morton code to be converted.\n     * @returns A new instance of [[TileKey]].\n     */\n    static fromMortonCode(quadKey64: number): TileKey {\n        let level = 0;\n        let row = 0;\n        let column = 0;\n        let quadKey = quadKey64;\n        // tslint:disable:no-bitwise\n        while (quadKey > 1) {\n            const mask: number = 1 << level;\n\n            if (quadKey & 0x1) {\n                column |= mask;\n            }\n            if (quadKey & 0x2) {\n                row |= mask;\n            }\n\n            level++;\n            quadKey = (quadKey - (quadKey & 0x3)) / 4;\n        }\n        // tslint:enable:no-bitwise\n        const result = TileKey.fromRowColumnLevel(row, column, level);\n        result.m_mortonCode = quadKey64;\n        return result;\n    }\n\n    /**\n     * Creates a tile key from a heretile code string.\n     *\n     * The string can be created with [[toHereTile]].\n     *\n     * @param quadkey64 The string representation of the HERE tile key.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromHereTile(quadkey64: string): TileKey {\n        const result = TileKey.fromMortonCode(parseInt(quadkey64, 10));\n        result.m_hereTile = quadkey64;\n        return result;\n    }\n\n    /**\n     * Returns the number of available columns at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of columns.\n     * @returns The available columns at the given level.\n     */\n    static columnsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the number of available rows at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of rows.\n     * @returns The available rows at the given level.\n     */\n    static rowsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the closest matching `TileKey` in a cartesian coordinate system.\n     *\n     * @param level The level for the tile key.\n     * @param coordX The X coordinate.\n     * @param coordY The Y coordinate.\n     * @param totalWidth The maximum X coordinate.\n     * @param totalHeight The maximum Y coordinate.\n     * @returns A new tile key at the given level that includes the given coordinates.\n     */\n    static atCoords(\n        level: number,\n        coordX: number,\n        coordY: number,\n        totalWidth: number,\n        totalHeight: number\n    ): TileKey {\n        return TileKey.fromRowColumnLevel(\n            Math.floor(coordY / (totalHeight / TileKey.rowsAtLevel(level))),\n            Math.floor(coordX / (totalWidth / TileKey.columnsAtLevel(level))),\n            level\n        );\n    }\n\n    /**\n     * Computes the Morton code of the parent tile key of the given Morton code.\n     *\n     * Note: The parent key of the root key is the root key itself.\n     *\n     * @param mortonCode A Morton code, for example, obtained from [[mortonCode]].\n     * @returns The Morton code of the parent tile.\n     */\n    static parentMortonCode(mortonCode: number): number {\n        return Math.floor(mortonCode / 4);\n    }\n\n    private m_mortonCode?: number;\n    private m_hereTile?: string;\n\n    /**\n     * Constructs a new immutable instance of a `TileKey`.\n     *\n     * For the better readability, [[TileKey.fromRowColumnLevel]] should be preferred.\n     *\n     * Note - row and column must not be greater than the maximum rows/columns for the given level.\n     *\n     * @param row Represents the row in the quadtree.\n     * @param column Represents the column in the quadtree.\n     * @param level Represents the level in the quadtree.\n     */\n    constructor(readonly row: number, readonly column: number, readonly level: number) {}\n\n    /**\n     * Returns a tile key representing the parent of the tile addressed by this tile key.\n     *\n     * Throws an exception is this tile is already the root.\n     */\n    parent(): TileKey {\n        if (this.level === 0) {\n            throw new Error(\"Cannot get the parent of the root tile key\");\n        }\n        // tslint:disable-next-line:no-bitwise\n        return TileKey.fromRowColumnLevel(this.row >>> 1, this.column >>> 1, this.level - 1);\n    }\n\n    /**\n     * Returns a new tile key at a level that differs from this tile's level by delta.\n     *\n     * Equivalent to `changedLevelTo(level() + delta)`.\n     *\n     * Note - root key is returned if `delta` is smaller than the level of this tile key.\n     *\n     * @param delta The numeric difference between the current level and the requested level.\n     */\n    changedLevelBy(delta: number): TileKey {\n        const level = Math.max(0, this.level + delta);\n        let row = this.row;\n        let column = this.column;\n\n        // tslint:disable:no-bitwise\n        if (delta >= 0) {\n            row <<= delta;\n            column <<= delta;\n        } else {\n            row >>>= -delta;\n            column >>>= -delta;\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    /**\n     * Returns a new tile key at the requested level.\n     *\n     * If the requested level is smaller than the tile's level, then the key of an ancestor of this\n     * tile is returned. If the requested level is larger than the tile's level, then the key of\n     * first child or grandchild of this tile is returned, for example, the child with the lowest\n     * row and column number. If the requested level equals this tile's level, then the tile key\n     * itself is returned. If the requested level is negative, the root tile key is returned.\n     *\n     * @param level The requested level.\n     */\n    changedLevelTo(level: number): TileKey {\n        return this.changedLevelBy(level - this.level);\n    }\n\n    /**\n     * Converts the tile key to a numeric code representation.\n     *\n     * You can create a tile key from a numeric Morton code with [[fromMortonCode]].\n     *\n     * Note - only levels <= 26 are supported.\n     */\n    mortonCode(): number {\n        if (this.m_mortonCode === undefined) {\n            let column = this.column;\n            let row = this.row;\n\n            // tslint:disable:no-bitwise\n            let result = powerOfTwo[this.level << 1];\n            for (let i = 0; i < this.level; ++i) {\n                if (column & 0x1) {\n                    result += powerOfTwo[2 * i];\n                }\n                if (row & 0x1) {\n                    result += powerOfTwo[2 * i + 1];\n                }\n                column >>>= 1;\n                row >>>= 1;\n            }\n            // tslint:enable:no-bitwise\n\n            this.m_mortonCode = result;\n        }\n        return this.m_mortonCode;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * The string is a quadkey Morton code representation as a string.\n     *\n     * You can convert back from a quadkey string with [[fromHereTile]].\n     */\n    toHereTile(): string {\n        if (this.m_hereTile === undefined) {\n            this.m_hereTile = this.mortonCode().toString();\n        }\n        return this.m_hereTile;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * If the tile is the root tile, the quadkey is '-'. Otherwise the string is a number to the\n     * base of 4, but without the leading 1, with the following properties:\n     *  1. the number of digits equals the level.\n     *  2. removing the last digit gives the parent tile's quadkey string, i.e. appending 0,1,2,3\n     *     to a quadkey string gives the tiles's children.\n     *\n     * You can convert back from a quadkey string with [[fromQuadKey]].\n     */\n    toQuadKey(): string {\n        let result: string = \"\";\n\n        // tslint:disable:no-bitwise\n        for (let i = this.level; i > 0; --i) {\n            const mask = 1 << (i - 1);\n\n            const col = (this.column & mask) !== 0;\n            const row = (this.row & mask) !== 0;\n\n            if (col && row) {\n                result += \"3\";\n            } else if (row) {\n                result += \"2\";\n            } else if (col) {\n                result += \"1\";\n            } else {\n                result += \"0\";\n            }\n        }\n        // tslint:enable:no-bitwise\n\n        return result;\n    }\n\n    /**\n     * Equality operator.\n     *\n     * @param qnr The tile key to compare to.\n     * @returns `true` if this tile key has identical row, column and level, `false` otherwise.\n     */\n    equals(qnr: TileKey): boolean {\n        return this.row === qnr.row && this.column === qnr.column && this.level === qnr.level;\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub quadkey.\n     *\n     * @param sub The sub key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubKey(sub: string): TileKey {\n        const subQuad = TileKey.fromQuadKey(sub.length === 0 ? \"-\" : sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub HERE tile key.\n     *\n     * @param sub The sub HERE key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubHereTile(sub: string): TileKey {\n        const subQuad = TileKey.fromHereTile(sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns a sub quadkey that is relative to its parent.\n     *\n     * This function can be used to generate sub keys that are relative to a parent that is delta\n     * levels up in the quadtree.\n     *\n     * This function can be used to create shortened keys for quads on lower levels if the parent is\n     * known.\n     *\n     * Note - the sub quadkeys fit in a 16-bit unsigned integer if the `delta` is smaller than 8. If\n     * `delta` is smaller than 16, the sub quadkey fits into an unsigned 32-bit integer.\n     *\n     * Deltas larger than 16 are not supported.\n     *\n     * @param delta The number of levels relative to its parent quadkey. Must be greater or equal to\n     * 0 and smaller than 16.\n     * @returns The quadkey relative to its parent that is `delta` levels up the tree.\n     */\n    getSubHereTile(delta: number): string {\n        const key = this.mortonCode();\n        // tslint:disable-next-line:no-bitwise\n        const msb = 1 << (delta * 2);\n        const mask = msb - 1;\n        // tslint:disable-next-line:no-bitwise\n        const result = (key & mask) | msb;\n        return result.toString();\n    }\n\n    /**\n     * Returns the number of available rows in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    rowCount(): number {\n        return TileKey.rowsAtLevel(this.level);\n    }\n\n    /**\n     * Returns the number of available columns in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    columnCount(): number {\n        return TileKey.columnsAtLevel(this.level);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace ExtrusionFeatureDefs {\n    /**\n     * Minimum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MIN: number = 0.0;\n    /**\n     * Maximum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MAX: number = 1;\n\n    /**\n     * Buildings height used whenever no height-data is present or height is very small.\n     *\n     * Used to avoid z-fighting between ground plane and building.\n     */\n    export const MIN_BUILDING_HEIGHT = 0.01;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    GeometryKind,\n    GradientSky,\n    ImageTexture,\n    Light,\n    PostEffects,\n    Sky,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport {\n    EarthConstants,\n    GeoCoordinates,\n    GeoCoordLike,\n    mercatorProjection,\n    Projection,\n    ProjectionType,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport {\n    assert,\n    getOptionValue,\n    LoggerManager,\n    LogLevel,\n    PerformanceTimer,\n    UriResolver\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { AnimatedExtrusionHandler } from \"./AnimatedExtrusionHandler\";\nimport { BackgroundDataSource } from \"./BackgroundDataSource\";\nimport { CameraMovementDetector } from \"./CameraMovementDetector\";\nimport { ClipPlanesEvaluator, createDefaultClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { IMapAntialiasSettings, IMapRenderingManager, MapRenderingManager } from \"./composing\";\nimport { ConcurrentDecoderFacade } from \"./ConcurrentDecoderFacade\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection } from \"./FrustumIntersection\";\nimport { overlayOnElevation } from \"./geometry/overlayOnElevation\";\nimport { PhasedTileGeometryManager } from \"./geometry/PhasedTileGeometryManager\";\nimport { SimpleTileGeometryManager, TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { MapViewImageCache } from \"./image/MapViewImageCache\";\nimport { MapViewFog } from \"./MapViewFog\";\nimport { PickHandler, PickResult } from \"./PickHandler\";\nimport { PoiManager } from \"./poi/PoiManager\";\nimport { PoiRendererFactory } from \"./poi/PoiRendererFactory\";\nimport { PoiTableManager } from \"./poi/PoiTableManager\";\nimport { PolarTileDataSource } from \"./PolarTileDataSource\";\nimport { ScreenCollisions, ScreenCollisionsDebug } from \"./ScreenCollisions\";\nimport { ScreenProjector } from \"./ScreenProjector\";\nimport { SkyBackground } from \"./SkyBackground\";\nimport { FrameStats, PerformanceStatistics } from \"./Statistics\";\nimport { FontCatalogLoader } from \"./text/FontCatalogLoader\";\nimport { MapViewState } from \"./text/MapViewState\";\nimport { TextCanvasFactory } from \"./text/TextCanvasFactory\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementsRenderer, ViewUpdateCallback } from \"./text/TextElementsRenderer\";\nimport { TextElementsRendererOptions } from \"./text/TextElementsRendererOptions\";\nimport { createLight } from \"./ThemeHelpers\";\nimport { ThemeLoader } from \"./ThemeLoader\";\nimport { Tile } from \"./Tile\";\nimport { MapViewUtils } from \"./Utils\";\nimport { ResourceComputationType, VisibleTileSet, VisibleTileSetOptions } from \"./VisibleTileSet\";\n\ndeclare const process: any;\n\n// Cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\nif (isProduction) {\n    // In production: silence logging below error.\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Error);\n} else {\n    // In dev: silence logging below log (silences \"debug\" and \"trace\" levels).\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Log);\n}\n/**\n * An interface describing [[THREE.Object3D]]s anchored on given [[GeoCoordinates]].\n *\n * Example:\n * ```typescript\n * const mesh: MapObject<THREE.Mesh> = new THREE.Mesh(geometry, material);\n * mesh.geoPosition = new GeoCoordinates(latitude, longitude, altitude);\n * mapView.mapAnchors.add(mesh);\n * ```\n *\n */\nexport type MapAnchor<T extends THREE.Object3D = THREE.Object3D> = T & {\n    /**\n     * The position of this [[MapObject]] in [[GeoCoordinates]].\n     */\n    geoPosition?: GeoCoordinates;\n};\n\nexport enum MapViewEventNames {\n    /** Called before this `MapView` starts to render a new frame. */\n    Update = \"update\",\n    /** Called when the WebGL canvas is resized. */\n    Resize = \"resize\",\n    /** Called when the frame is about to be rendered. */\n    Render = \"render\",\n    /** Called after a frame has been rendered. */\n    AfterRender = \"didrender\",\n    /** Called after the first frame has been rendered. */\n    FirstFrame = \"first-render\",\n    /** Called when the first view has all the necessary tiles loaded and rendered. */\n    FrameComplete = \"frame-complete\",\n    /** Called when the theme has been loaded with the internal [[ThemeLoader]]. */\n    ThemeLoaded = \"theme-loaded\",\n    /** Called when the animation mode has started. */\n    AnimationStarted = \"animation-started\",\n    /** Called when the animation mode has stopped. */\n    AnimationFinished = \"animation-finished\",\n    /** Called when a camera interaction has been detected. */\n    MovementStarted = \"movement-started\",\n    /** Called when a camera interaction has been stopped. */\n    MovementFinished = \"movement-finished\",\n    /** Called when a data source has been connected or failed to connect. */\n    DataSourceConnect = \"datasource-connect\",\n    /** Emitted when copyright info of rendered map has been changed. */\n    CopyrightChanged = \"copyright-changed\",\n    /** Called when the WebGL context is lost. */\n    ContextLost = \"webglcontext-lost\",\n    /** Called when the WebGL context is restored. */\n    ContextRestored = \"webglcontext-restored\",\n    /** Called when camera position has been changed. */\n    CameraPositionChanged = \"camera-changed\"\n}\n\nconst logger = LoggerManager.instance.create(\"MapView\");\nconst DEFAULT_CLEAR_COLOR = 0xefe9e1;\nconst DEFAULT_FOV_CALCULATION: FovCalculation = { type: \"dynamic\", fov: 40 };\nconst DEFAULT_CAM_NEAR_PLANE = 0.1;\nconst DEFAULT_CAM_FAR_PLANE = 4000000;\nconst MAX_FIELD_OF_VIEW = 140;\nconst MIN_FIELD_OF_VIEW = 10;\n// All objects in fallback tiles are reduced by this amount.\nexport const FALLBACK_RENDER_ORDER_OFFSET = 20000;\n\nconst DEFAULT_MIN_ZOOM_LEVEL = 1;\n\n/**\n * Default maximum zoom level.\n */\nconst DEFAULT_MAX_ZOOM_LEVEL = 20;\n\n/**\n * Default minimum camera height.\n */\nconst DEFAULT_MIN_CAMERA_HEIGHT = 20;\n\n/**\n * Amount of framerate values to pick average from\n */\nconst FRAME_RATE_RING_SIZE = 12;\n\n/**\n * Default starting value for FPS computation.\n */\nconst FALLBACK_FRAME_RATE = 30;\n\n/**\n * Zoom level to request terrain tiles for getting the height of the camera above terrain.\n */\nconst TERRAIN_ZOOM_LEVEL = 4;\n\n/**\n * Style set used by [[PolarTileDataSource]] by default.\n */\nconst DEFAULT_POLAR_STYLE_SET_NAME = \"polar\";\n\n/**\n * The type of `RenderEvent`.\n */\nexport interface RenderEvent extends THREE.Event {\n    type:\n        | MapViewEventNames.Render\n        | MapViewEventNames.FirstFrame\n        | MapViewEventNames.FrameComplete\n        | MapViewEventNames.ThemeLoaded\n        | MapViewEventNames.AnimationStarted\n        | MapViewEventNames.AnimationFinished\n        | MapViewEventNames.MovementStarted\n        | MapViewEventNames.MovementFinished\n        | MapViewEventNames.ContextLost\n        | MapViewEventNames.ContextRestored\n        | MapViewEventNames.CopyrightChanged;\n    time?: number;\n}\n\n// Event type: cast needed to workaround wrong THREE.js typings.\nconst UPDATE: RenderEvent = { type: MapViewEventNames.Update } as any;\nconst RENDER_EVENT: RenderEvent = { type: MapViewEventNames.Render } as any;\nconst DID_RENDER_EVENT: RenderEvent = { type: MapViewEventNames.AfterRender } as any;\nconst FIRST_FRAME_EVENT: RenderEvent = { type: MapViewEventNames.FirstFrame } as any;\nconst FRAME_COMPLETE_EVENT: RenderEvent = { type: MapViewEventNames.FrameComplete } as any;\nconst THEME_LOADED_EVENT: RenderEvent = { type: MapViewEventNames.ThemeLoaded } as any;\nconst ANIMATION_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationStarted } as any;\nconst ANIMATION_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationFinished } as any;\nconst MOVEMENT_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.MovementStarted } as any;\nconst MOVEMENT_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.MovementFinished } as any;\nconst CONTEXT_LOST_EVENT: RenderEvent = { type: MapViewEventNames.ContextLost } as any;\nconst CONTEXT_RESTORED_EVENT: RenderEvent = { type: MapViewEventNames.ContextRestored } as any;\nconst COPYRIGHT_CHANGED_EVENT: RenderEvent = { type: MapViewEventNames.CopyrightChanged } as any;\n\nconst cache = {\n    vector2: [new THREE.Vector2()],\n    vector3: [new THREE.Vector3()]\n};\n\n/**\n * Specifies how the FOV (Field of View) should be calculated.\n */\nexport interface FovCalculation {\n    /**\n     * How to interpret the [[fov]], can be either `fixed` or `dynamic`.\n     *\n     * `fixed` means that the FOV is fixed regardless of the [[viewportHeight]], such that shrinking\n     * the height causes the map to shrink to keep the content in view. The benefit is that,\n     * regardless of any resizes, the field of view is constant, which means there is no change in\n     * the distortion of buildings near the edges. However the trade off is that the zoom level\n     * changes, which means that the map will pull in new tiles, hence causing some flickering.\n     *\n     * `dynamic` means that the focal length is calculated based on the supplied [[fov]] and\n     * [[viewportHeight]], this means that the map doesn't scale (the image is essentially cropped\n     * but not shrunk) when the [[viewportHeight]] or [[viewportWidth]] is changed. The benefit is\n     * that the zoom level is (currently) stable during resize, because the focal length is used,\n     * however the tradeoff is that changing from a small to a big height will cause the fov to\n     * change a lot, and thus introduce distortion.\n     */\n    type: \"fixed\" | \"dynamic\";\n\n    /**\n     * If [[type]] is `fixed` then the supplied [[fov]] is fixed regardless of\n     * [[viewportHeight]] or [[viewportWidth]].\n     *\n     * If [[type]] is `dynamic` then the supplied [[fov]] is applied to the\n     * first frame, and the focal length calculated. Changes to the viewport\n     * height no longer shrink the content because the field of view is updated\n     * dynamically.\n     */\n    fov: number;\n}\n\n/**\n * Hint for the WebGL implementation on which power mode to prefer.\n *\n * @see https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.12\n */\nexport enum MapViewPowerPreference {\n    /** Default value. */\n    Default = \"default\",\n    /** Lower power mode, used to conserve energy. */\n    LowPower = \"low-power\",\n    /** Maximum performance. */\n    HighPerformance = \"high-performance\"\n}\n\n/**\n * User configuration for the [[MapView]].\n */\nexport interface MapViewOptions extends TextElementsRendererOptions {\n    /**\n     * The canvas element used to render the scene.\n     */\n    canvas: HTMLCanvasElement;\n\n    /**\n     * `true` if the canvas contains an alpha (transparency) buffer or not. Default is `false`.\n     */\n    alpha?: boolean;\n\n    /**\n     * Whether the native WebGL antialiasing should be enabled. It is better to disable it if the\n     * MapView's MSAA is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    enableNativeWebglAntialias?: boolean;\n\n    /**\n     * Antialias settings for the map rendering. It is better to disable the native antialising if\n     * the custom antialiasing is enabled.\n     */\n    customAntialiasSettings?: IMapAntialiasSettings;\n\n    /**\n     * `Projection` used by the `MapView`.\n     *\n     * The default value is [[mercatorProjection]].\n     */\n    projection?: Projection;\n\n    /**\n     * The URL of the script that the decoder worker runs. The default URL is\n     * `./decoder.bundle.js`.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     */\n    decoderUrl?: string;\n\n    /**\n     * The number of Web Workers used to decode data. The default is\n     * CLAMP(`navigator.hardwareConcurrency` - 1, 1, 2).\n     */\n    decoderCount?: number;\n\n    /**\n     * The [[Theme]] used by Mapview.\n     *\n     * This Theme can be one of the following:\n     *  - `string` : the URI of the theme file used to style this map\n     *  - `Theme` : the `Theme` object already loaded\n     *  - `Promise<Theme>` : the future `Theme` object\n     *  - `undefined` : the theme is not yet set up, but can be set later. Rendering waits until\n     *     the theme is set.\n     *\n     * **Note:** Layers that use a theme do not render any content until that theme is available.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with help\n     * of [[uriResolver]].\n     *\n     * @see [[ThemeLoader.load]] for details how theme is loaded\n     */\n    theme?: string | Theme | Promise<Theme>;\n\n    /**\n     * Resolve `URI` referenced in `MapView` assets using this resolver.\n     *\n     * Use, to support application/deployment specific `URI`s into actual `URLs` that can be loaded\n     * with `fetch`.\n     *\n     * Example:\n     * ```\n     * uriResolver: new PrefixMapUriResolver({\n     *     \"local://poiMasterList\": \"/assets/poiMasterList.json\",\n     *        // will match only 'local//:poiMasterList' and\n     *        // resolve to `/assets/poiMasterList.json`\n     *     \"local://icons/\": \"/assets/icons/\"\n     *        // will match only 'local//:icons/ANYPATH' (and similar) and\n     *        // resolve to `/assets/icons/ANYPATH`\n     * })\n     * ```\n     *\n     * @see [[UriResolver]]\n     * @See [[PrefixMapUriResolver]]\n     */\n    uriResolver?: UriResolver;\n\n    /**\n     * The minimum zoom level; default is `1`.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Determines the minimum camera height, in meters.\n     */\n    minCameraHeight?: number;\n\n    /**\n     * The maximum zoom level. The default is `14`.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * User-defined camera clipping planes distance evaluator.\n     * If not defined, [[TiltViewClipPlanesEvaluator]] will be used by [[MapView]].\n     *\n     * @default [[TiltViewClipPlanesEvaluator]]\n     */\n    clipPlanesEvaluator?: ClipPlanesEvaluator;\n\n    /**\n     * Set to true to extend the frustum culling. This improves the rejection of some tiles, which\n     * normal frustum culling cannot detect. You can disable this property to measure performance.\n     *\n     * @default true\n     */\n    extendedFrustumCulling?: boolean;\n\n    /**\n     * The maximum number of tiles rendered from one data source at a time.\n     *\n     * @default See [[MapViewDefaults.maxVisibleDataSourceTiles]].\n     */\n    maxVisibleDataSourceTiles?: number;\n\n    /**\n     * Size of a tile cache for one data source.\n     *\n     * @default See [[MapViewDefaults.tileCacheSize]].\n     */\n    tileCacheSize?: number;\n\n    /**\n     * Specify if the cache should be counted in tiles or in megabytes.\n     *\n     * @see [[MapViewDefaults.resourceComputationType]].\n     */\n    resourceComputationType?: ResourceComputationType;\n\n    /**\n     * Limits the number of reduced zoom levels (lower detail) to be searched for fallback tiles.\n     *\n     * When zooming in, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in lower zoom levels. The tiles may be\n     * located shallower in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceUp]]\n     */\n    quadTreeSearchDistanceUp?: number;\n\n    /**\n     * Limits the number of higher zoom levels (more detailed) to be searched for fallback tiles.\n     *\n     * When zooming out, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in higher zoom levels. These tiles may be\n     * located deeper in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSeaFIX]]\n     */\n    quadTreeSearchDistanceDown?: number;\n\n    /**\n     * Set to `true` to measure performance statistics.\n     */\n    enableStatistics?: boolean;\n\n    /**\n     * Preserve the buffers until they are cleared manually or overwritten.\n     *\n     * Set to `true` in order to copy [[MapView]] canvas contents to an image or another canvas.\n     *\n     * @default `false`.\n     * @see https://threejs.org/docs/#api/renderers/WebGLRenderer.preserveDrawingBuffer\n     */\n    preserveDrawingBuffer?: boolean;\n\n    /**\n     * Set to `true` to allow picking of roads. If set to `true`, additional memory is used to\n     * store road data.\n     */\n    enableRoadPicking?: boolean;\n\n    /**\n     * An optional canvas element that renders 2D collision debug information.\n     */\n    collisionDebugCanvas?: HTMLCanvasElement;\n\n    /**\n     * Maximum timeout, in milliseconds, before a [[MOVEMENT_FINISHED_EVENT]] is sent after the\n     * latest frame with a camera movement. The default is 300ms.\n     */\n    movementThrottleTimeout?: number;\n\n    /**\n     * How to calculate the Field of View, if not specified, then\n     * [[DEFAULT_FOV_CALCULATION]] is used.\n     */\n    fovCalculation?: FovCalculation;\n\n    /*\n     * An array of ISO 639-1 language codes for data sources.\n     */\n    languages?: string[];\n\n    /**\n     * Set fixed pixel ratio for rendering. Useful when rendering on high resolution displays with\n     * low performance GPUs that may be fill-rate limited.\n     * @default `window.devicePixelRatio`\n     */\n    pixelRatio?: number;\n\n    /**\n     * Set fixed pixel ratio for rendering when the camera is moving or an animation is running.\n     * Useful when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    dynamicPixelRatio?: number;\n\n    /**\n     * Set maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be\n     * reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate\n     * divided by an integer number.\n     *\n     * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40`\n     * (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of\n     * 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n     */\n    maxFps?: number;\n\n    /**\n     * Enable phased loading. If `false`, the geometry on a [[Tile]] is always being created in a\n     * single step, instead of (potentially) over multiple frames to smoothen animations.\n     *\n     * @default `false`\n     */\n    enablePhasedLoading?: boolean;\n\n    /**\n     * Enable map repeat for planar projections.\n     * If `true`, map will be repeated in longitudinal direction continuously.\n     * If `false`, map will end on lon -180 & 180 deg.\n     *\n     * @default `true`\n     */\n    tileWrappingEnabled?: boolean;\n\n    /**\n     * Set tiling scheme for [[BackgroundDataSource]]\n     */\n    backgroundTilingScheme?: TilingScheme;\n\n    /**\n     * Should be the [[PolarTileDataSource]] used on spherical projection.\n     * Default is `true`.\n     */\n    enablePolarDataSource?: boolean;\n\n    /**\n     * The name of the [[StyleSet]] used by [[PolarTileDataSource]] to evaluate for the decoding.\n     * Default is `\"polar\"`.\n     */\n    polarStyleSetName?: string;\n\n    /**\n     * Storage level offset of regular tiles from reference datasource to align\n     * [[PolarTileDataSource]] tiles to.\n     * Default is `-1`.\n     */\n    polarGeometryLevelOffset?: number;\n\n    /**\n     * Hint for the WebGL implementation on which power mode to prefer.\n     */\n    powerPreference?: MapViewPowerPreference;\n\n    /**\n     * Set to `true` to allow rendering scene synchronously.\n     *\n     * By calling `renderSync()` scene draws immediately, opposite to default case when\n     * `update` method requests redraw and waits for the next animation frame.\n     *\n     * You need to set up your own render loop controller.\n     * Event `MapViewEventNames.Update` fired when [[MapView]] requests for an redraw.\n     * E.g.: When tiles loaded asynchronously and ready for rendering.\n     *\n     * @note Internal `maxFps` will be overridden and may not work properly as `renderSync`\n     * intended to be called from external render loop.\n     *\n     * @default false.\n     */\n    synchronousRendering?: boolean;\n\n    /**\n     * Set initial camera target in geo coordinates.\n     *\n     * Longitude values outside of -180 and +180 are acceptable.\n     * @default new GeoCoordinates(25, 0)\n     */\n    target?: GeoCoordLike;\n\n    /**\n     * Set initial zoom level.\n     *\n     * @default 12\n     */\n    zoomLevel?: number;\n\n    /**\n     * Set initial camera heading in degrees.\n     *\n     * @default 0\n     */\n    heading?: number;\n\n    /**\n     * Set initial camera tilt in degrees.\n     *\n     * @default 0\n     */\n    tilt?: number;\n\n    /**\n     * Set true to enable rendering mixed levels of detail (increases rendering performance).\n     * If not set will enable mixed levels of detail for spherical projection\n     * and disable for other projections.\n     *\n     * @default undefined\n     */\n    enableMixedLod?: boolean;\n}\n\n/**\n * Default settings used by [[MapView]] collected in one place.\n */\nexport const MapViewDefaults = {\n    projection: mercatorProjection,\n\n    maxVisibleDataSourceTiles: 100,\n    extendedFrustumCulling: true,\n\n    tileCacheSize: 200,\n    resourceComputationType: ResourceComputationType.EstimationInMb,\n    quadTreeSearchDistanceUp: 3,\n    quadTreeSearchDistanceDown: 2,\n\n    pixelRatio:\n        typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0,\n    geoCenter: new GeoCoordinates(25, 0, 30000000),\n    target: new GeoCoordinates(25, 0),\n    zoomLevel: 5,\n    tilt: 0,\n    heading: 0,\n    theme: {}\n};\n\n/**\n * The core class of the library to call in order to create a map visualization. It needs to be\n * linked to datasources.\n */\nexport class MapView extends THREE.EventDispatcher {\n    dumpNext = false;\n\n    /**\n     * The instance of [[MapRenderingManager]] managing the rendering of the map. It is a public\n     * property to allow access and modification of some parameters of the rendering process at\n     * runtime.\n     */\n    readonly mapRenderingManager: IMapRenderingManager;\n\n    private m_renderLabels: boolean = true;\n\n    private m_movementFinishedUpdateTimerId?: any;\n    private m_postEffects?: PostEffects;\n\n    private m_skyBackground?: SkyBackground;\n    private m_createdLights?: THREE.Light[];\n\n    private readonly m_screenProjector: ScreenProjector;\n    private readonly m_screenCollisions:\n        | ScreenCollisions\n        | ScreenCollisionsDebug = new ScreenCollisions();\n\n    private m_visibleTiles: VisibleTileSet;\n\n    private m_elevationRangeSource?: ElevationRangeSource;\n    private m_elevationProvider?: ElevationProvider;\n    private m_visibleTileSetLock: boolean = false;\n    private m_tileGeometryManager: TileGeometryManager;\n\n    private m_tileWrappingEnabled: boolean = true;\n\n    private m_zoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_minZoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_maxZoomLevel: number = DEFAULT_MAX_ZOOM_LEVEL;\n    private m_minCameraHeight: number = DEFAULT_MIN_CAMERA_HEIGHT;\n\n    private readonly m_screenCamera = new THREE.OrthographicCamera(-1, 1, 1, -1);\n\n    private readonly m_camera: THREE.PerspectiveCamera;\n\n    /**\n     * Relative to eye camera.\n     *\n     * This camera is internal camera used to improve precision\n     * when rendering geometries.\n     */\n    private readonly m_rteCamera = new THREE.PerspectiveCamera();\n\n    private m_focalLength: number;\n    private m_lookAtDistance: number;\n    private readonly m_viewRanges: ViewRanges = {\n        near: DEFAULT_CAM_NEAR_PLANE,\n        far: DEFAULT_CAM_FAR_PLANE,\n        minimum: DEFAULT_CAM_NEAR_PLANE,\n        maximum: DEFAULT_CAM_FAR_PLANE\n    };\n    private m_pointOfView?: THREE.PerspectiveCamera;\n\n    private m_pixelToWorld?: number;\n    private m_pixelRatio?: number;\n\n    private readonly m_scene: THREE.Scene = new THREE.Scene();\n    private readonly m_fog: MapViewFog = new MapViewFog(this.m_scene);\n    private readonly m_mapTilesRoot = new THREE.Object3D();\n    private readonly m_mapAnchors = new THREE.Object3D();\n\n    private m_animationCount: number = 0;\n    private m_animationFrameHandle: number | undefined;\n    private m_drawing: boolean = false;\n    private m_updatePending: boolean = false;\n    private m_renderer: THREE.WebGLRenderer;\n    private m_frameNumber = 0;\n    private m_maxFps = 0;\n    private m_detectedFps: number = FALLBACK_FRAME_RATE;\n\n    private m_textElementsRenderer: TextElementsRenderer;\n\n    private m_forceCameraAspect: number | undefined = undefined;\n\n    //\n    // sources\n    //\n    private readonly m_tileDataSources: DataSource[] = [];\n    private readonly m_connectedDataSources = new Set<string>();\n    private readonly m_failedDataSources = new Set<string>();\n    private m_backgroundDataSource?: BackgroundDataSource;\n    private m_polarDataSource?: PolarTileDataSource;\n    private m_enablePolarDataSource: boolean = true;\n\n    // gestures\n    private readonly m_raycaster = new THREE.Raycaster();\n    private readonly m_plane = new THREE.Plane(new THREE.Vector3(0, 0, 1));\n    private readonly m_sphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\n\n    private readonly m_options: MapViewOptions;\n    private readonly m_visibleTileSetOptions: VisibleTileSetOptions;\n\n    private m_theme: Theme = {};\n    private m_uriResolver?: UriResolver;\n    private m_themeIsLoading: boolean = false;\n\n    private m_previousFrameTimeStamp?: number;\n    private m_firstFrameRendered = false;\n    private m_firstFrameComplete = false;\n    private m_initialTextPlacementDone = false;\n    private m_previousRequestAnimationTime?: number;\n    private m_targetRequestAnimationTime?: number;\n    private m_frameTimeIndex: number = 0;\n    private readonly m_frameTimeRing: number[] = [];\n\n    private handleRequestAnimationFrame: any;\n    private handlePostponedAnimationFrame: any;\n\n    private m_pickHandler: PickHandler;\n\n    private m_imageCache: MapViewImageCache = new MapViewImageCache(this);\n\n    private m_poiManager: PoiManager = new PoiManager(this);\n\n    private m_poiTableManager: PoiTableManager = new PoiTableManager(this);\n\n    private m_collisionDebugCanvas: HTMLCanvasElement | undefined;\n\n    // Detection of camera movement and scene change:\n    private m_movementDetector: CameraMovementDetector;\n\n    private m_thisFrameTilesChanged: boolean | undefined;\n    private m_lastTileIds: string = \"\";\n    private m_languages: string[] | undefined;\n    private m_copyrightInfo: CopyrightInfo[] = [];\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    private m_enableMixedLod: boolean | undefined;\n\n    /**\n     * Constructs a new `MapView` with the given options or canvas element.\n     *\n     * @param options The `MapView` options or the HTML canvas element used to display the map.\n     */\n    constructor(options: MapViewOptions) {\n        super();\n\n        // make a copy to avoid unwanted changes to the original options.\n        this.m_options = { ...options };\n\n        this.m_uriResolver = this.m_options.uriResolver;\n\n        if (this.m_options.minZoomLevel !== undefined) {\n            this.m_minZoomLevel = this.m_options.minZoomLevel;\n        }\n\n        if (this.m_options.maxZoomLevel !== undefined) {\n            this.m_maxZoomLevel = this.m_options.maxZoomLevel;\n        }\n\n        if (this.m_options.minCameraHeight !== undefined) {\n            this.m_minCameraHeight = this.m_options.minCameraHeight;\n        }\n\n        if (this.m_options.decoderUrl !== undefined) {\n            ConcurrentDecoderFacade.defaultScriptUrl = this.m_uriResolver\n                ? this.m_uriResolver.resolveUri(this.m_options.decoderUrl)\n                : this.m_options.decoderUrl;\n        }\n\n        if (this.m_options.decoderCount !== undefined) {\n            ConcurrentDecoderFacade.defaultWorkerCount = this.m_options.decoderCount;\n        }\n\n        this.m_visibleTileSetOptions = {\n            ...MapViewDefaults,\n            clipPlanesEvaluator:\n                options.clipPlanesEvaluator !== undefined\n                    ? options.clipPlanesEvaluator\n                    : createDefaultClipPlanesEvaluator()\n        };\n\n        if (options.projection !== undefined) {\n            this.m_visibleTileSetOptions.projection = options.projection;\n        }\n\n        if (options.extendedFrustumCulling !== undefined) {\n            this.m_visibleTileSetOptions.extendedFrustumCulling = options.extendedFrustumCulling;\n        }\n\n        if (options.maxVisibleDataSourceTiles !== undefined) {\n            this.m_visibleTileSetOptions.maxVisibleDataSourceTiles =\n                options.maxVisibleDataSourceTiles;\n        }\n\n        if (options.tileCacheSize !== undefined) {\n            this.m_visibleTileSetOptions.tileCacheSize = options.tileCacheSize;\n        }\n\n        if (options.resourceComputationType !== undefined) {\n            this.m_visibleTileSetOptions.resourceComputationType = options.resourceComputationType;\n        }\n\n        if (options.quadTreeSearchDistanceUp !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceUp =\n                options.quadTreeSearchDistanceUp;\n        }\n\n        if (options.quadTreeSearchDistanceDown !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceDown =\n                options.quadTreeSearchDistanceDown;\n        }\n\n        if (options.enablePolarDataSource !== undefined) {\n            this.m_enablePolarDataSource = options.enablePolarDataSource;\n        }\n\n        this.m_pixelRatio = options.pixelRatio;\n\n        if (options.maxFps !== undefined) {\n            this.m_maxFps = Math.max(0, options.maxFps);\n        }\n\n        this.m_options.enableStatistics = this.m_options.enableStatistics === true;\n\n        this.m_languages = this.m_options.languages;\n\n        if (\n            !isProduction &&\n            this.m_options.collisionDebugCanvas !== undefined &&\n            this.m_options.collisionDebugCanvas !== null\n        ) {\n            this.m_collisionDebugCanvas = this.m_options.collisionDebugCanvas;\n            this.m_screenCollisions = new ScreenCollisionsDebug(this.m_collisionDebugCanvas);\n        }\n\n        this.handleRequestAnimationFrame = this.renderFunc.bind(this);\n        this.handlePostponedAnimationFrame = this.postponedAnimationFrame.bind(this);\n        this.m_pickHandler = new PickHandler(\n            this,\n            this.m_rteCamera,\n            this.m_options.enableRoadPicking === true\n        );\n\n        if (this.m_options.tileWrappingEnabled !== undefined) {\n            this.m_tileWrappingEnabled = this.m_options.tileWrappingEnabled;\n        }\n\n        // Initialization of the stats\n        this.setupStats(this.m_options.enableStatistics);\n\n        this.canvas.addEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.addEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        // Initialization of the renderer\n        this.m_renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: this.nativeWebglAntialiasEnabled,\n            alpha: this.m_options.alpha,\n            preserveDrawingBuffer: this.m_options.preserveDrawingBuffer === true,\n            powerPreference:\n                this.m_options.powerPreference === undefined\n                    ? MapViewPowerPreference.Default\n                    : this.m_options.powerPreference\n        });\n        this.m_renderer.autoClear = false;\n\n        // This is detailed at https://threejs.org/docs/#api/renderers/WebGLRenderer.info\n        // When using several WebGLRenderer#render calls per frame, it is the only way to get\n        // correct rendering data from ThreeJS.\n        this.m_renderer.info.autoReset = false;\n\n        this.setupRenderer();\n\n        this.m_options.fovCalculation =\n            this.m_options.fovCalculation === undefined\n                ? DEFAULT_FOV_CALCULATION\n                : this.m_options.fovCalculation;\n        this.m_options.fovCalculation.fov = THREE.Math.clamp(\n            this.m_options.fovCalculation!.fov,\n            MIN_FIELD_OF_VIEW,\n            MAX_FIELD_OF_VIEW\n        );\n        // Initialization of mCamera and mVisibleTiles\n        const { width, height } = this.getCanvasClientSize();\n        const aspect = width / height;\n        this.m_camera = new THREE.PerspectiveCamera(\n            this.m_options.fovCalculation.fov,\n            aspect,\n            DEFAULT_CAM_NEAR_PLANE,\n            DEFAULT_CAM_FAR_PLANE\n        );\n        this.m_camera.up.set(0, 0, 1);\n        this.m_lookAtDistance = 0;\n        this.m_focalLength = 0;\n        this.m_scene.add(this.m_camera); // ensure the camera is added to the scene.\n        this.m_screenProjector = new ScreenProjector(this.m_camera);\n\n        // setup camera with initial position\n        this.setupCamera(options);\n\n        this.m_movementDetector = new CameraMovementDetector(\n            this.m_options.movementThrottleTimeout,\n            () => this.movementStarted(),\n            () => this.movementFinished()\n        );\n\n        const mapPassAntialiasSettings = this.m_options.customAntialiasSettings;\n        this.mapRenderingManager = new MapRenderingManager(\n            width,\n            height,\n            this.m_options.dynamicPixelRatio,\n            mapPassAntialiasSettings\n        );\n\n        this.m_tileGeometryManager =\n            this.m_options.enablePhasedLoading === true\n                ? new PhasedTileGeometryManager(this)\n                : new SimpleTileGeometryManager(this);\n\n        if (options.enableMixedLod !== undefined) {\n            this.m_enableMixedLod = options.enableMixedLod;\n        }\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.m_animatedExtrusionHandler = new AnimatedExtrusionHandler(this);\n\n        this.m_backgroundDataSource = new BackgroundDataSource();\n        this.addDataSource(this.m_backgroundDataSource);\n\n        if (this.m_enablePolarDataSource) {\n            const styleSetName =\n                options.polarStyleSetName !== undefined\n                    ? options.polarStyleSetName\n                    : DEFAULT_POLAR_STYLE_SET_NAME;\n\n            this.m_polarDataSource = new PolarTileDataSource({\n                styleSetName,\n                geometryLevelOffset: options.polarGeometryLevelOffset\n            });\n\n            this.updatePolarDataSource();\n        }\n\n        if (options.backgroundTilingScheme !== undefined) {\n            this.m_backgroundDataSource.setTilingScheme(options.backgroundTilingScheme);\n        }\n\n        this.initTheme();\n\n        this.m_textElementsRenderer = this.createTextRenderer();\n\n        this.drawFrame();\n    }\n\n    /**\n     * @returns Whether label rendering is enabled.\n     */\n    get renderLabels() {\n        return this.m_renderLabels;\n    }\n\n    /**\n     * Enables or disables rendering of labels.\n     * @param value `true` to enable labels `false` to disable them.\n     */\n    set renderLabels(value: boolean) {\n        this.m_renderLabels = value;\n    }\n\n    /**\n     * @hidden\n     * The [[TextElementsRenderer]] select the visible [[TextElement]]s and renders them.\n     */\n    get textElementsRenderer(): TextElementsRenderer {\n        return this.m_textElementsRenderer;\n    }\n\n    /**\n     * @hidden\n     * The [[CameraMovementDetector]] detects camera movements. Made available for performance\n     * measurements.\n     */\n    get cameraMovementDetector(): CameraMovementDetector {\n        return this.m_movementDetector;\n    }\n\n    /**\n     * The [[AnimatedExtrusionHandler]] controls animated extrusion effect\n     * of the extruded objects in the [[Tile]]\n     */\n    get animatedExtrusionHandler(): AnimatedExtrusionHandler {\n        return this.m_animatedExtrusionHandler;\n    }\n\n    /**\n     * The [[TileGeometryManager]] manages geometry during loading and handles hiding geometry of\n     * specified [[GeometryKind]]s.\n     */\n    get tileGeometryManager(): TileGeometryManager | undefined {\n        return this.m_tileGeometryManager;\n    }\n\n    get enableMixedLod(): boolean | undefined {\n        return this.m_enableMixedLod;\n    }\n\n    set enableMixedLod(enableMixedLod: boolean | undefined) {\n        // Skip unnecessary update\n        if (this.m_enableMixedLod === enableMixedLod) {\n            return;\n        }\n\n        this.m_enableMixedLod = enableMixedLod;\n        this.m_visibleTiles = this.createVisibleTileSet();\n        this.resetTextRenderer();\n        this.update();\n    }\n\n    /**\n     * Disposes this `MapView`.\n     *\n     * This function cleans the resources that are managed manually including those that exist in\n     * shared caches.\n     *\n     * Note: This function does not try to clean objects that can be disposed off easily by\n     * TypeScript's garbage collecting mechanism. Consequently, if you need to perform a full\n     * cleanup, you must ensure that all references to this `MapView` are removed.\n     */\n    dispose() {\n        if (this.m_movementFinishedUpdateTimerId) {\n            clearTimeout(this.m_movementFinishedUpdateTimerId);\n            this.m_movementFinishedUpdateTimerId = undefined;\n        }\n\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        this.canvas.removeEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.removeEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.dispose();\n        }\n        this.m_visibleTiles.clearTileCache();\n        this.m_textElementsRenderer.clearRenderStates();\n        this.m_renderer.dispose();\n        this.m_imageCache.clear();\n\n        this.m_movementDetector.dispose();\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_visibleTiles.resourceComputationType;\n    }\n\n    set resourceComputationType(value: ResourceComputationType) {\n        this.m_visibleTiles.resourceComputationType = value;\n    }\n\n    /**\n     * Returns the cache size.\n     */\n    getCacheSize(): number {\n        return this.m_visibleTiles.getDataSourceCacheSize();\n    }\n\n    /**\n     * Sets the cache size in number of tiles.\n     *\n     * @param size The cache size in tiles.\n     * @param numVisibleTiles The number of tiles visible, which is size/2 by default.\n     */\n    setCacheSize(size: number, numVisibleTiles?: number): void {\n        this.m_visibleTiles.setDataSourceCacheSize(size);\n        numVisibleTiles = numVisibleTiles !== undefined ? numVisibleTiles : size / 2;\n        this.m_visibleTiles.setNumberOfVisibleTiles(Math.floor(numVisibleTiles));\n        this.updateImages();\n        this.updateLighting();\n\n        this.m_textElementsRenderer.invalidateCache();\n\n        this.updateSkyBackground();\n        this.update();\n    }\n\n    /**\n     * Specfies whether extended frustum culling is enabled or disabled.\n     */\n    get extendedFrustumCulling(): boolean {\n        return this.m_options.extendedFrustumCulling !== undefined\n            ? this.m_visibleTileSetOptions.extendedFrustumCulling\n            : true;\n    }\n\n    /**\n     * Enable of disable extended frustum culling.\n     */\n    set extendedFrustumCulling(value: boolean) {\n        this.m_visibleTileSetOptions.extendedFrustumCulling = value;\n    }\n\n    /**\n     * Returns the status of frustum culling after each update.\n     */\n    get lockVisibleTileSet(): boolean {\n        return this.m_visibleTileSetLock;\n    }\n\n    /**\n     * Enable of disable frustum culling after each update.\n     */\n    set lockVisibleTileSet(value: boolean) {\n        this.m_visibleTileSetLock = value;\n    }\n\n    /**\n     * Gets the optional camera used to render the scene.\n     */\n    get pointOfView(): THREE.PerspectiveCamera | undefined {\n        return this.m_pointOfView;\n    }\n\n    /**\n     * Sets the optional camera used to render the scene.\n     */\n    set pointOfView(pointOfView: THREE.PerspectiveCamera | undefined) {\n        this.m_pointOfView = pointOfView;\n        this.update();\n    }\n\n    /**\n     * Loads a post effects definition file.\n     *\n     * @param postEffectsFile File URL describing the post effects.\n     */\n    loadPostEffects(postEffectsFile: string) {\n        fetch(postEffectsFile)\n            .then(response => response.json())\n            .then((postEffects: PostEffects) => {\n                this.m_postEffects = postEffects;\n                this.setPostEffects();\n            });\n    }\n\n    /**\n     * The abstraction of the [[MapRenderingManager]] API for post effects.\n     */\n    get postEffects(): PostEffects | undefined {\n        return this.m_postEffects;\n    }\n\n    set postEffects(postEffects: PostEffects | undefined) {\n        this.m_postEffects = postEffects;\n        this.setPostEffects();\n    }\n\n    /**\n     * Gets the current `Theme` used by this `MapView` to style map elements.\n     */\n    get theme(): Theme {\n        return this.m_theme;\n    }\n\n    /**\n     * Changes the `Theme` used by this `MapView` to style map elements.\n     */\n    set theme(theme: Theme) {\n        if (!ThemeLoader.isThemeLoaded(theme)) {\n            this.m_themeIsLoading = true;\n            // If theme is not yet loaded, let's set theme asynchronously\n            ThemeLoader.load(theme, { uriResolver: this.m_uriResolver })\n                .then(loadedTheme => {\n                    this.m_themeIsLoading = false;\n                    this.theme = loadedTheme;\n                })\n                .catch(error => {\n                    this.m_themeIsLoading = false;\n                    logger.error(`failed to set theme: ${error}`, error);\n                });\n            return;\n        }\n\n        // Fog and sky.\n        this.m_theme.fog = theme.fog;\n        this.m_theme.sky = theme.sky;\n        this.updateSkyBackground();\n        this.m_fog.reset(this.m_theme);\n\n        this.m_theme.lights = theme.lights;\n        this.updateLighting();\n\n        // Clear color.\n        this.m_theme.clearColor = theme.clearColor;\n        this.renderer.setClearColor(new THREE.Color(theme.clearColor));\n\n        // Images.\n        this.m_theme.images = theme.images;\n        this.m_theme.imageTextures = theme.imageTextures;\n        this.updateImages();\n\n        // POI tables.\n        this.m_theme.poiTables = theme.poiTables;\n        this.loadPoiTables();\n\n        // Text.\n        this.m_theme.textStyles = theme.textStyles;\n        this.m_theme.defaultTextStyle = theme.defaultTextStyle;\n        this.m_theme.fontCatalogs = theme.fontCatalogs;\n\n        this.resetTextRenderer();\n\n        if (this.m_theme.styles === undefined) {\n            this.m_theme.styles = {};\n        }\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.setTheme(this.m_theme);\n        }\n        this.m_theme.styles = theme.styles || {};\n        this.m_theme.definitions = theme.definitions;\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.setTheme(this.m_theme);\n        }\n        THEME_LOADED_EVENT.time = Date.now();\n        this.dispatchEvent(THEME_LOADED_EVENT);\n        this.update();\n    }\n\n    /**\n     * [[UriResolver]] used to resolve application/deployment specific `URI`s into actual `URLs`\n     * that can be loaded with `fetch`.\n     */\n    get uriResolver(): UriResolver | undefined {\n        return this.m_uriResolver;\n    }\n\n    /**\n     * Gets the value of the forced custom camera aspect.\n     * Every time a frame is rendered, `MapView` resets the camera aspect.\n     *\n     * You can disable this behavior by setting the value to `undefined`.\n     */\n    get forceCameraAspect(): number | undefined {\n        return this.m_forceCameraAspect;\n    }\n\n    /**\n     * Sets the custom forced camera aspect ratio to use while rendering.\n     */\n    set forceCameraAspect(aspect: number | undefined) {\n        this.m_forceCameraAspect = aspect;\n    }\n\n    /**\n     * Maximum FPS. If defined (and > 0) it is the maximum FPS that is used.\n     */\n    set maxFps(fps: number) {\n        this.m_maxFps = Math.max(0, fps);\n    }\n\n    get maxFps(): number {\n        return Math.max(0, this.m_maxFps);\n    }\n\n    /**\n     * Lists the ISO 639-1 language codes for DataSources to use.\n     */\n    get languages(): string[] | undefined {\n        return this.m_languages;\n    }\n\n    /**\n     * Sets the list of ISO 639-1 language codes for DataSources to use.\n     */\n    set languages(languages: string[] | undefined) {\n        this.m_languages = languages;\n        this.m_tileDataSources.forEach((dataSource: DataSource) => {\n            dataSource.setLanguages(this.m_languages);\n        });\n        this.update();\n    }\n\n    get copyrightInfo(): CopyrightInfo[] {\n        return this.m_copyrightInfo;\n    }\n\n    /**\n     * @hidden\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_textElementsRenderer.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_textElementsRenderer.disableFading;\n    }\n\n    /**\n     * @hidden\n     * Return current frame number.\n     */\n    get frameNumber(): number {\n        return this.m_frameNumber;\n    }\n\n    /**\n     * @hidden\n     * Reset the frame number to 0.\n     */\n    resetFrameNumber() {\n        this.m_frameNumber = 0;\n        this.m_previousFrameTimeStamp = undefined;\n    }\n\n    /**\n     * Adds an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * let frameCount = 0;\n     * mapView.addEventListener(MapViewEventNames.Render, () => {\n     *     ++frameCount;\n     * });\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    addEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    addEventListener(type: string, listener: any): void {\n        super.addEventListener(type, listener);\n    }\n\n    /**\n     * Removes an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * mapView.removeEventListener(MapViewEventNames.Render, listener);\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    removeEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    removeEventListener(type: string, listener: any): void {\n        super.removeEventListener(type, listener);\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get canvas(): HTMLCanvasElement {\n        return this.m_options.canvas;\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get collisionDebugCanvas(): HTMLCanvasElement | undefined {\n        return this.m_collisionDebugCanvas;\n    }\n\n    /**\n     * The THREE.js scene used by this `MapView`.\n     */\n    get scene(): THREE.Scene {\n        return this.m_scene;\n    }\n\n    /**\n     * The THREE.js camera used by this `MapView` to render the main scene.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * The THREE.js `WebGLRenderer` used by this scene.\n     */\n    get renderer(): THREE.WebGLRenderer {\n        return this.m_renderer;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    get clearColor() {\n        const rendererClearColor = this.m_renderer.getClearColor();\n        return rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    set clearColor(color: number) {\n        this.m_renderer.setClearColor(color);\n    }\n\n    /**\n     * The projection used to project geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.m_visibleTileSetOptions.projection;\n    }\n\n    /**\n     * Changes the projection at run time.\n     *\n     * @param projection The [[Projection]] instance to use.\n     */\n    set projection(projection: Projection) {\n        // The geo center must be reset when changing the projection, because the\n        // camera's position is based on the projected geo center.\n        const target = MapViewUtils.rayCastWorldCoordinates(this, 0, 0);\n        if (target === null) {\n            throw new Error(\"MapView does not support a view pointing in the void.\");\n        }\n        const targetCoordinates = this.projection.unprojectPoint(target);\n        const targetDistance = this.camera.position.distanceTo(target);\n        const attitude = MapViewUtils.extractAttitude(this, this.camera);\n        const pitchDeg = THREE.Math.radToDeg(attitude.pitch);\n        const headingDeg = -THREE.Math.radToDeg(attitude.yaw);\n\n        this.m_visibleTileSetOptions.projection = projection;\n        this.updatePolarDataSource();\n        this.clearTileCache();\n        this.textElementsRenderer.clearRenderStates();\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.lookAt(targetCoordinates, targetDistance, pitchDeg, headingDeg);\n    }\n\n    /**\n     * Get camera clipping planes evaluator used.\n     */\n    get clipPlanesEvaluator(): ClipPlanesEvaluator {\n        return this.m_visibleTileSetOptions.clipPlanesEvaluator;\n    }\n\n    /**\n     * Changes the clip planes evaluator at run time.\n     */\n    set clipPlanesEvaluator(clipPlanesEvaluator: ClipPlanesEvaluator) {\n        this.m_visibleTileSetOptions.clipPlanesEvaluator = clipPlanesEvaluator;\n    }\n\n    /**\n     * The distance (in pixels) between the screen and the camera.\n     */\n    get focalLength(): number {\n        return this.m_focalLength;\n    }\n\n    /**\n     * Get distance from camera to the point of focus in world units.\n     */\n    get lookAtDistance(): number {\n        return this.m_lookAtDistance;\n    }\n\n    /**\n     * Get object describing frustum planes distances and min/max visibility range for actual\n     * camera setup.\n     * Near and far plane distance are self explanatory while minimum and maximum visibility range\n     * describes the extreme near/far planes distances that may be achieved with current camera\n     * settings, meaning at current zoom level (ground distance) and any possible orientation.\n     * @note Visibility is directly related to camera [[ClipPlaneEvaluator]] used and determines\n     * the maximum possible distance of camera far clipping plane regardless of tilt, but may change\n     * whenever zoom level changes. Distance is measured in world units which may be approximately\n     * equal to meters, but this depends on the distortion related to projection type used.\n     */\n    get viewRanges(): ViewRanges {\n        return this.m_viewRanges;\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     */\n    get geoCenter(): GeoCoordinates {\n        return this.projection.unprojectPoint(this.m_camera.position).normalized();\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     * Longitude values outside of -180 and +180 are acceptable.\n     */\n    set geoCenter(geoCenter: GeoCoordinates) {\n        if (geoCenter.altitude !== undefined) {\n            this.projection.projectPoint(geoCenter, this.m_camera.position);\n        } else {\n            // Preserve the current altitude\n            const altitude = this.geoCenter.altitude;\n\n            this.projection.projectPoint(\n                new GeoCoordinates(geoCenter.latitude, geoCenter.longitude, altitude),\n                this.m_camera.position\n            );\n        }\n\n        this.update();\n    }\n\n    /**\n     * The node in this MapView's scene containing the user [[MapAnchor]]s.\n     * All (first level) children of this node will be positioned in world space according to the\n     * [[MapAnchor.geoPosition]].\n     * Deeper level children can be used to position custom objects relative to the anchor node.\n     */\n    get mapAnchors(): THREE.Object3D {\n        return this.m_mapAnchors;\n    }\n\n    /**\n     * The position in world coordinates of the center of the scene.\n     */\n    get worldCenter(): THREE.Vector3 {\n        return this.m_camera.position;\n    }\n\n    /**\n     * The root object of the scene. Contains all `rootObjects` of the [[Tile]]s.\n     */\n    get worldRootObject(): THREE.Object3D {\n        return this.m_mapTilesRoot;\n    }\n\n    /**\n     * Get the [[PickHandler]] for this `mapView`.\n     */\n    get pickHandler(): PickHandler {\n        return this.m_pickHandler;\n    }\n\n    /**\n     * Get the [[ImageCache]] that belongs to this `MapView`.\n     */\n    get imageCache(): MapViewImageCache {\n        return this.m_imageCache;\n    }\n\n    /**\n     * @hidden\n     * Get the [[PoiManager]] that belongs to this `MapView`.\n     */\n    get poiManager(): PoiManager {\n        return this.m_poiManager;\n    }\n\n    /**\n     * @hidden\n     * Get the array of [[PoiTableManager]] that belongs to this `MapView`.\n     */\n    get poiTableManager(): PoiTableManager {\n        return this.m_poiTableManager;\n    }\n\n    /**\n     * The minimum camera height in meters.\n     */\n    get minCameraHeight(): number {\n        return this.m_minCameraHeight;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    get minZoomLevel(): number {\n        return this.m_minZoomLevel;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    set minZoomLevel(zoomLevel: number) {\n        this.m_minZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * The maximum zoom level. Default is 14.\n     */\n    get maxZoomLevel(): number {\n        return this.m_maxZoomLevel;\n    }\n\n    /**\n     * The maximum zoom level.\n     */\n    set maxZoomLevel(zoomLevel: number) {\n        this.m_maxZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * Returns the zoom level for the given camera setup.\n     */\n    get zoomLevel(): number {\n        return this.m_zoomLevel;\n    }\n    set zoomLevel(zoomLevel: number) {\n        this.m_zoomLevel = THREE.Math.clamp(zoomLevel, this.m_minZoomLevel, this.m_maxZoomLevel);\n        MapViewUtils.zoomOnTargetPosition(this, 0, 0, this.m_zoomLevel);\n        this.update();\n    }\n\n    /**\n     * Returns the storage level for the given camera setup.\n     * Actual storage level of the rendered data also depends on [[DataSource.storageLevelOffset]].\n     */\n    get storageLevel(): number {\n        return THREE.Math.clamp(\n            Math.floor(this.m_zoomLevel),\n            this.m_minZoomLevel,\n            this.m_maxZoomLevel\n        );\n    }\n\n    /**\n     * Returns height of the viewport in pixels.\n     */\n    get viewportHeight(): number {\n        return this.canvas.height;\n    }\n\n    /**\n     * Returns `true` if the native WebGL antialiasing is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    get nativeWebglAntialiasEnabled(): boolean {\n        return this.m_options.enableNativeWebglAntialias === undefined\n            ? this.pixelRatio < 2.0\n            : this.m_options.enableNativeWebglAntialias;\n    }\n\n    /**\n     * Returns 'true' if the phased loading is currently enabled.\n     *\n     * @default true.\n     */\n    get phasedLoadingEnabled(): boolean {\n        return this.m_options.enablePhasedLoading !== false;\n    }\n\n    /**\n     * Returns [[DataSource]]s displayed by this `MapView`.\n     */\n    get dataSources(): DataSource[] {\n        return this.m_tileDataSources;\n    }\n\n    /**\n     * Set's the way in which the fov is calculated on the map view. Note, for\n     * this to take visual effect, the map should be rendered after calling this\n     * function.\n     * @param fovCalculation How the FOV is calculated.\n     */\n    setFovCalculation(fovCalculation: FovCalculation) {\n        this.m_options.fovCalculation = fovCalculation;\n        this.calculateFocalLength(this.m_renderer.getSize(cache.vector2[0]).height);\n        this.updateCameras();\n    }\n\n    /**\n     * Returns the unique [[DataSource]] matching the given name.\n     */\n    getDataSourceByName(dataSourceName: string): DataSource | undefined {\n        return this.m_tileDataSources.find(ds => ds.name === dataSourceName);\n    }\n\n    /**\n     * Returns the array of [[DataSource]]s referring to the same [[StyleSet]].\n     */\n    getDataSourcesByStyleSetName(styleSetName: string): DataSource[] {\n        return this.m_tileDataSources.filter(ds => ds.styleSetName === styleSetName);\n    }\n\n    /**\n     * Returns true if the specified [[DataSource]] is enabled.\n     */\n    isDataSourceEnabled(dataSource: DataSource): boolean {\n        return (\n            dataSource.enabled &&\n            dataSource.ready() &&\n            this.m_connectedDataSources.has(dataSource.name)\n        );\n    }\n\n    /**\n     * Adds a new [[DataSource]] to this `MapView`. `MapView` needs at least one [[DataSource]] to\n     * display something.\n     *\n     * @param dataSource The data source.\n     */\n    addDataSource(dataSource: DataSource): Promise<void> {\n        const twinDataSource = this.getDataSourceByName(dataSource.name);\n        if (twinDataSource !== undefined) {\n            throw new Error(\n                `A DataSource with the name \"${dataSource.name}\" already exists in this MapView.`\n            );\n        }\n\n        dataSource.attach(this);\n        dataSource.setEnableElevationOverlay(this.m_elevationProvider !== undefined);\n        this.m_tileDataSources.push(dataSource);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        return dataSource\n            .connect()\n            .then(() => {\n                return new Promise(resolve => {\n                    if (this.theme !== undefined && this.theme.styles !== undefined) {\n                        resolve();\n                        return;\n                    }\n\n                    const resolveOnce = () => {\n                        this.removeEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                        resolve();\n                    };\n\n                    this.addEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                });\n            })\n            .then(() => {\n                const alreadyRemoved = this.m_tileDataSources.indexOf(dataSource) === -1;\n                if (alreadyRemoved) {\n                    return;\n                }\n                dataSource.addEventListener(MapViewEventNames.Update, () => {\n                    this.update();\n                });\n\n                dataSource.setTheme(this.m_theme);\n\n                this.m_connectedDataSources.add(dataSource.name);\n\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name\n                });\n\n                this.update();\n            })\n            .catch(error => {\n                logger.error(\n                    `Failed to connect to datasource ${dataSource.name}: ${error.message}`\n                );\n\n                this.m_failedDataSources.add(dataSource.name);\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name,\n                    error\n                });\n            });\n    }\n\n    /**\n     * Removes [[DataSource]] from this `MapView`.\n     *\n     * @param dataSource The data source to be removed\n     */\n    removeDataSource(dataSource: DataSource) {\n        const dsIndex = this.m_tileDataSources.indexOf(dataSource);\n        if (dsIndex === -1) {\n            return;\n        }\n        dataSource.detach(this);\n\n        this.m_visibleTiles.removeDataSource(dataSource);\n        this.m_tileDataSources.splice(dsIndex, 1);\n        this.m_connectedDataSources.delete(dataSource.name);\n        this.m_failedDataSources.delete(dataSource.name);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        this.update();\n    }\n\n    /**\n     * Access the `VisibleTileSet` to get access to all current datasources and their visible tiles.\n     */\n    get visibleTileSet(): VisibleTileSet {\n        return this.m_visibleTiles;\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        this.m_textElementsRenderer.addOverlayText(textElements);\n        this.update();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_textElementsRenderer.clearOverlayText();\n    }\n\n    /**\n     * The method that sets the camera to the desired angle (`tiltDeg`) and `distance` (in meters)\n     * to the `target` location, from a certain heading (`headingAngle`).\n     *\n     * @param target The location to look at.\n     * @param distance The distance of the camera to the target in meters.\n     * @param tiltDeg The camera tilt angle in degrees (0 is vertical), curbed below 89deg.\n     * @param headingDeg The camera heading angle in degrees and clockwise (as opposed to yaw),\n     * starting north.\n     */\n    lookAt(\n        target: GeoCoordinates,\n        distance: number,\n        tiltDeg: number = 0,\n        headingDeg: number = 0\n    ): void {\n        const limitedTilt = Math.min(MapViewUtils.MAX_TILT_DEG, tiltDeg);\n        // MapViewUtils#setRotation uses pitch, not tilt, which is different in sphere projection.\n        // But in sphere, in the tangent space of the target of the camera, pitch = tilt. So, put\n        // the camera on the target, so the tilt can be passed to getRotation as a pitch.\n        MapViewUtils.getCameraRotationAtTarget(\n            this.projection,\n            target,\n            -headingDeg,\n            limitedTilt,\n            this.camera.quaternion\n        );\n        MapViewUtils.getCameraPositionFromTargetCoordinates(\n            target,\n            distance,\n            -headingDeg,\n            limitedTilt,\n            this.projection,\n            this.camera.position\n        );\n        this.camera.updateMatrixWorld(true);\n    }\n\n    /**\n     * Moves the camera to the specified [[GeoCoordinates]], sets the desired `zoomLevel` and\n     * adjusts the yaw and pitch. The pitch of the camera is always curbed so that the camera cannot\n     * look above the horizon. This paradigm is necessary in [[MapControls]], where the center of \\\n     * the screen is used for the orbiting interaction (3 fingers / right mouse button).\n     *\n     * @param geoPos Geolocation to move the camera to.\n     * @param zoomLevel Desired zoom level.\n     * @param yawDeg Camera yaw in degrees, counter-clockwise (as opposed to heading), starting\n     * north.\n     * @param pitchDeg Camera pitch in degrees.\n     */\n    setCameraGeolocationAndZoom(\n        geoPos: GeoCoordinates,\n        zoomLevel: number,\n        yawDeg: number = 0,\n        pitchDeg: number = 0\n    ): void {\n        this.geoCenter = geoPos;\n        let limitedPitch = Math.min(89, pitchDeg); // 90 leads to imprecision issues.\n        if (this.projection.type === ProjectionType.Spherical) {\n            const maxPitchRadWithCurvature = Math.asin(\n                EarthConstants.EQUATORIAL_RADIUS /\n                    (MapViewUtils.calculateDistanceToGroundFromZoomLevel(this, zoomLevel) +\n                        EarthConstants.EQUATORIAL_RADIUS)\n            );\n            const maxPitchDegWithCurvature = THREE.Math.radToDeg(maxPitchRadWithCurvature);\n            limitedPitch = Math.min(limitedPitch, maxPitchDegWithCurvature);\n        }\n        MapViewUtils.zoomOnTargetPosition(this, 0, 0, zoomLevel);\n        MapViewUtils.setRotation(this, yawDeg, limitedPitch);\n        this.update();\n    }\n\n    /**\n     * Returns `true` if this `MapView` is constantly redrawing the scene.\n     */\n    get animating(): boolean {\n        return this.m_animationCount > 0;\n    }\n\n    /**\n     * Begin animating the scene.\n     */\n    beginAnimation() {\n        if (this.m_animationCount++ === 0) {\n            if (!this.m_updatePending) {\n                this.m_updatePending = true;\n                this.drawFrame();\n            }\n            ANIMATION_STARTED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_STARTED_EVENT);\n        }\n    }\n\n    /**\n     * Stop animating the scene.\n     */\n    endAnimation() {\n        if (this.m_animationCount > 0) {\n            --this.m_animationCount;\n        }\n\n        if (this.m_animationCount === 0) {\n            ANIMATION_FINISHED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_FINISHED_EVENT);\n        }\n    }\n\n    /**\n     * Returns `true` if the camera moved in the last frame.\n     */\n    get cameraIsMoving() {\n        return this.m_movementDetector.cameraIsMoving;\n    }\n\n    /**\n     * Returns `true` if the current frame will immediately be followed by another frame.\n     */\n    get isDynamicFrame(): boolean {\n        return (\n            this.cameraIsMoving ||\n            this.animating ||\n            this.m_updatePending ||\n            this.m_animatedExtrusionHandler.isAnimating\n        );\n    }\n\n    /**\n     * Returns the ratio between a pixel and a world unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get pixelToWorld(): number {\n        if (this.m_pixelToWorld === undefined) {\n            // At this point fov calculation should be always defined.\n            assert(this.m_options.fovCalculation !== undefined);\n            // NOTE: Look at distance is the distance to camera focus (and pivot) point.\n            // In screen space this point is located in the center of canvas.\n            // Given that zoom level is not modified (clamped by camera pitch), the following\n            // formulas are all equivalent:\n            // lookAtDistance = (EQUATORIAL_CIRCUMFERENCE * focalLength) / (256 * zoomLevel^2);\n            // lookAtDistance = abs(cameraPos.z) / cos(cameraPitch);\n            // Here we may use precalculated distance (once pre frame):\n            const lookAtDistance = this.m_lookAtDistance;\n\n            // Find world space object size that corresponds to one pixel on screen.\n            this.m_pixelToWorld = MapViewUtils.calculateWorldSizeByFocalLength(\n                this.m_focalLength,\n                lookAtDistance,\n                1\n            );\n        }\n        return this.m_pixelToWorld;\n    }\n\n    /**\n     * Returns the ratio between a world and a pixel unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get worldToPixel() {\n        return 1.0 / this.pixelToWorld;\n    }\n\n    get pixelRatio(): number {\n        if (this.m_pixelRatio !== undefined) {\n            return this.m_pixelRatio;\n        }\n        return typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0;\n    }\n\n    /**\n     * PixelRatio in the WebGlRenderer. May contain values > 1.0 for high resolution screens\n     * (HiDPI).\n     *\n     * A value of `undefined` will make the getter return `window.devicePixelRatio`, setting a value\n     * of `1.0` will disable the use of HiDPI on all devices.\n     *\n     * @note Since the current pixelRatio may have been used in some calculations (e.g. the icons)\n     * they may appear in the wrong size now. To ensure proper display of data, a call to\n     * `clearTileCache()` is required if the pixelRatio is changed after tiles have been loaded.\n     *\n     * @memberof MapView\n     */\n    set pixelRatio(pixelRatio: number) {\n        this.m_pixelRatio = pixelRatio;\n        if (this.renderer.getPixelRatio() !== this.pixelRatio) {\n            this.renderer.setPixelRatio(this.pixelRatio);\n        }\n    }\n\n    /**\n     * PixelRatio ratio for rendering when the camera is moving or an animation is running. Useful\n     * when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate-limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    set dynamicPixelRatio(ratio: number | undefined) {\n        this.mapRenderingManager.lowResPixelRatio = ratio;\n    }\n\n    get dynamicPixelRatio(): number | undefined {\n        return this.mapRenderingManager.lowResPixelRatio;\n    }\n\n    /**\n     * Returns the screen position of the given geo coordinates.\n     *\n     * @param geoPos The geo coordinates.\n     * @returns The screen position in CSS/client coordinates (no pixel ratio applied) or\n     * `undefined`.\n     */\n    getScreenPosition(geoPos: GeoCoordinates): THREE.Vector2 | undefined {\n        this.projection.projectPoint(geoPos, cache.vector3[0]);\n        const p = this.m_screenProjector.project(cache.vector3[0]);\n        if (p !== undefined) {\n            const { width, height } = this.getCanvasClientSize();\n            p.x = p.x + width / 2;\n            p.y = height - (p.y + height / 2);\n        }\n        return p;\n    }\n\n    /**\n     * Returns a ray caster using the supplied screen positions.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     *\n     * @alpha\n     *\n     * @return Raycaster with origin at the camera and direction based on the supplied x / y screen\n     * points.\n     */\n    raycasterFromScreenPoint(x: number, y: number): THREE.Raycaster {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_rteCamera);\n        return this.m_raycaster;\n    }\n\n    /**\n     * Returns the world space position from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getWorldPositionAt(x: number, y: number): THREE.Vector3 | null {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_camera);\n        return this.projection.type === ProjectionType.Spherical\n            ? this.m_raycaster.ray.intersectSphere(this.m_sphere, cache.vector3[0])\n            : this.m_raycaster.ray.intersectPlane(this.m_plane, cache.vector3[0]);\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getGeoCoordinatesAt(x: number, y: number): GeoCoordinates | null {\n        const worldPosition = this.getWorldPositionAt(x, y);\n        if (!worldPosition) {\n            return null;\n        }\n        return this.projection.unprojectPoint(worldPosition);\n    }\n\n    /**\n     * Returns the normalized screen coordinates from the given pixel position.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getNormalizedScreenCoordinates(x: number, y: number): THREE.Vector3 {\n        // use clientWidth and clientHeight as it does not apply the pixelRatio and\n        // therefore supports also HiDPI devices\n        const { width, height } = this.getCanvasClientSize();\n        return new THREE.Vector3((x / width) * 2 - 1, -((y / height) * 2) + 1, 0);\n    }\n\n    /**\n     * Do a raycast on all objects in the scene. Useful for picking. Limited to objects that\n     * THREE.js can raycast, the solid lines that get their geometry in the shader cannot be tested\n     * for intersection.\n     *\n     * Note, if a [[DataSource]] adds an [[Object3D]] to a [[Tile]], it will be only pickable once\n     * [[MapView.render]] has been called, this is because [[MapView.render]] method creates the\n     * internal three.js root [[Object3D]] which is used in the [[PickHandler]] internally.\n     * This method will not test for intersection custom objects added to the scene by for\n     * example calling directly the [[scene.add]] method from THREE.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     * @returns The list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        return this.m_pickHandler.intersectMapObjects(x, y);\n    }\n\n    /**\n     * Resize the HTML canvas element and the THREE.js `WebGLRenderer`.\n     *\n     * @param width The new width.\n     * @param height The new height.\n     */\n    resize(width: number, height: number) {\n        this.m_renderer.setSize(width, height, false);\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        if (this.mapRenderingManager !== undefined) {\n            this.mapRenderingManager.setSize(width, height);\n        }\n\n        if (this.collisionDebugCanvas !== undefined) {\n            this.collisionDebugCanvas.width = width;\n            this.collisionDebugCanvas.height = height;\n        }\n\n        this.updateCameras();\n        this.update();\n\n        this.dispatchEvent({\n            type: MapViewEventNames.Resize,\n            size: {\n                width,\n                height\n            }\n        });\n    }\n\n    /**\n     * Redraws scene immediately\n     *\n     * @note Before using this method, set `synchronousRendering` to `true`\n     * in the [[MapViewOptions]]\n     */\n    renderSync() {\n        this.renderFunc(PerformanceTimer.now());\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     */\n    update() {\n        this.dispatchEvent(UPDATE);\n\n        if (this.m_updatePending) {\n            return;\n        } // compress the update request\n\n        this.m_updatePending = true;\n\n        if (this.animating) {\n            return;\n        } // nothing to do\n\n        this.drawFrame();\n    }\n\n    /**\n     * Returns `true` if an update has already been requested, such that after a currently rendering\n     * frame, the next frame will be rendered immediately.\n     */\n    get updatePending(): boolean {\n        return this.m_updatePending;\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     * @deprecated Use the [[update]] method instead.\n     */\n    requestUpdateIfNeeded() {\n        this.update();\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]s. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSourceName?: string) {\n        if (dataSourceName !== undefined) {\n            const dataSource = this.getDataSourceByName(dataSourceName);\n            if (dataSource) {\n                this.m_visibleTiles.clearTileCache(dataSource);\n                dataSource.clearCache();\n            }\n        } else {\n            this.m_visibleTiles.clearTileCache();\n            this.m_tileDataSources.forEach(dataSource => dataSource.clearCache());\n        }\n\n        if (this.m_elevationProvider !== undefined) {\n            this.m_elevationProvider.clearCache();\n        }\n    }\n\n    /**\n     * Apply visitor to all visible tiles.\n     *\n     * @param fun Visitor function\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachVisibleTile(fun);\n    }\n\n    /**\n     * Apply a visitor function to all tiles in the cache.\n     *\n     * @param visitor Visitor function\n     */\n    forEachCachedTile(visitor: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachCachedTile(visitor);\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     * If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        this.m_visibleTiles.markTilesDirty(dataSource);\n    }\n\n    /**\n     * Sets the DataSource which contains the elevations, the elevation range source, and the\n     * elevation provider. Only a single elevation source is possible per [[MapView]]\n     *\n     * If the terrain-datasource is merged with this repository, we could internally construct\n     * the [[ElevationRangeSource]] and the [[ElevationProvider]] and access would be granted to\n     * the application when it asks for it, to simplify the API.\n     *\n     * @param elevationSource The datasource containing the terrain tiles.\n     * @param elevationRangeSource Allows access to the elevation min / max per tile.\n     * @param elevationProvider Allows access to the elevation at a given location or a ray\n     *      from the camera.\n     */\n    setElevationSource(\n        elevationSource: DataSource,\n        elevationRangeSource: ElevationRangeSource,\n        elevationProvider: ElevationProvider\n    ) {\n        // Try to remove incase this method was already called, will do nothing if it doesn't exist.\n        this.removeDataSource(elevationSource);\n        this.addDataSource(elevationSource);\n        this.m_elevationRangeSource = elevationRangeSource;\n        this.m_elevationRangeSource.connect();\n        this.m_elevationProvider = elevationProvider;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(true);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback((tile: Tile) => {\n            overlayOnElevation(tile);\n        });\n        this.clearTileCache();\n    }\n\n    /**\n     * Clears any elevation sources and provider previously set.\n     * @param elevationSource The datasource to be cleared.\n     */\n    clearElevationSource(elevationSource: DataSource) {\n        this.removeDataSource(elevationSource);\n        this.m_elevationRangeSource = undefined;\n        this.m_elevationProvider = undefined;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(false);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback(undefined);\n        this.clearTileCache();\n    }\n\n    /**\n     * Public access to [[MapViewFog]] allowing to toggle it by setting its `enabled` property.\n     */\n    get fog(): MapViewFog {\n        return this.m_fog;\n    }\n\n    private setPostEffects() {\n        // First clear all the effects, then enable them from what is specified.\n        this.mapRenderingManager.bloom.enabled = false;\n        this.mapRenderingManager.outline.enabled = false;\n        this.mapRenderingManager.vignette.enabled = false;\n        this.mapRenderingManager.sepia.enabled = false;\n\n        if (this.m_postEffects !== undefined) {\n            if (this.m_postEffects.bloom !== undefined) {\n                this.mapRenderingManager.bloom = this.m_postEffects.bloom;\n            }\n            if (this.m_postEffects.outline !== undefined) {\n                this.mapRenderingManager.outline.enabled = this.m_postEffects.outline.enabled;\n                this.mapRenderingManager.updateOutline(this.m_postEffects.outline);\n            }\n            if (this.m_postEffects.vignette !== undefined) {\n                this.mapRenderingManager.vignette = this.m_postEffects.vignette;\n            }\n            if (this.m_postEffects.sepia !== undefined) {\n                this.mapRenderingManager.sepia = this.m_postEffects.sepia;\n            }\n        }\n    }\n\n    /**\n     * Returns the elevation provider.\n     */\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_elevationProvider;\n    }\n\n    /**\n     * Plug-in PolarTileDataSource for spherical projection and plug-out otherwise\n     */\n    private updatePolarDataSource() {\n        const dataSource = this.m_polarDataSource;\n        if (this.m_enablePolarDataSource === true && dataSource !== undefined) {\n            const twinDataSource = this.getDataSourceByName(dataSource.name);\n\n            if (this.projection.type === ProjectionType.Spherical) {\n                if (twinDataSource === undefined) {\n                    this.addDataSource(dataSource);\n                }\n            } else {\n                if (twinDataSource !== undefined) {\n                    this.removeDataSource(dataSource);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the camera and the projections and resets the screen collisions,\n     * note, setupCamera must be called before this is called.\n     * @param viewRanges optional parameter that supplies new view ranges, most importantly\n     * near/far clipping planes distance. If parameter is not provided view ranges will be\n     * calculated from [[ClipPlaneEvaluator]] used in [[VisibleTileSet]].\n     */\n    private updateCameras(viewRanges?: ViewRanges) {\n        const { width, height } = this.m_renderer.getSize(cache.vector2[0]);\n        this.m_camera.aspect =\n            this.m_forceCameraAspect !== undefined ? this.m_forceCameraAspect : width / height;\n        this.setFovOnCamera(this.m_options.fovCalculation!, height);\n\n        // When calculating clip planes account for the highest building on the earth,\n        // multiplying its height by projection scaling factor. This approach assumes\n        // constantHeight property of extruded polygon technique is set as default false,\n        // otherwise the near plane margins will be bigger then required, but still correct.\n        const projectionScale = this.projection.getScaleFactor(this.camera.position);\n        const maxGeometryHeightScaled =\n            projectionScale *\n            this.m_tileDataSources.reduce((r, ds) => Math.max(r, ds.maxGeometryHeight), 0);\n\n        // Copy all properties from new view ranges to our readonly object.\n        // This allows to keep all view ranges references valid and keeps up-to-date\n        // information within them. Works the same as copping all properties one-by-one.\n        Object.assign(\n            this.m_viewRanges,\n            viewRanges === undefined\n                ? this.m_visibleTiles.updateClipPlanes(maxGeometryHeightScaled)\n                : viewRanges\n        );\n        this.m_camera.near = this.m_viewRanges.near;\n        this.m_camera.far = this.m_viewRanges.far;\n\n        this.m_camera.updateProjectionMatrix();\n        this.m_camera.updateMatrixWorld(false);\n\n        // Update the \"relative to eye\" camera. Copy the public camera parameters\n        // and place the \"relative to eye\" at the world's origin.\n        this.m_rteCamera.copy(this.m_camera);\n        this.m_rteCamera.position.setScalar(0);\n        this.m_rteCamera.updateMatrixWorld(true);\n\n        this.m_screenCamera.left = width / -2;\n        this.m_screenCamera.right = width / 2;\n        this.m_screenCamera.bottom = height / -2;\n        this.m_screenCamera.top = height / 2;\n        this.m_screenCamera.updateProjectionMatrix();\n        this.m_screenCamera.updateMatrixWorld(false);\n\n        this.m_screenProjector.update(this.camera, width, height);\n        this.m_screenCollisions.update(width, height);\n\n        this.m_pixelToWorld = undefined;\n\n        const cameraPitch = MapViewUtils.extractAttitude(this, this.m_camera).pitch;\n        const cameraPosZ = this.getCameraHeightAboveTerrain(TERRAIN_ZOOM_LEVEL);\n\n        const target = MapViewUtils.rayCastWorldCoordinates(this, 0, 0);\n        if (target !== null) {\n            this.m_lookAtDistance = target.sub(this.camera.position).length();\n            const zoomLevelDistance = cameraPosZ / Math.cos(Math.min(cameraPitch, Math.PI / 3));\n            this.m_zoomLevel = MapViewUtils.calculateZoomLevelFromDistance(this, zoomLevelDistance);\n            this.m_fog.update(this, this.m_viewRanges.maximum);\n        }\n    }\n\n    /**\n     * Returns the height of the camera above the earths surface.\n     *\n     * If there is an ElevationProvider, this is used. Otherwise the projection is used to determine\n     * how high the camera is above the surface.\n     *\n     * @param level Which level to request the surface height from.\n     * @return Height in world units.\n     */\n    private getCameraHeightAboveTerrain(level?: number): number {\n        if (this.elevationProvider !== undefined) {\n            const heightAboveTerrain = this.elevationProvider.getHeight(this.geoCenter, level);\n            if (heightAboveTerrain !== undefined) {\n                const height =\n                    this.projection.unprojectAltitude(this.m_camera.position) - heightAboveTerrain;\n                return Math.max(height, 1);\n            }\n        }\n        return Math.abs(this.projection.groundDistance(this.m_camera.position));\n    }\n\n    private detectCurrentFps(now: number) {\n        // Skip the first frames, they are from not originated from requestAnimationFrame()\n        if (this.m_previousRequestAnimationTime !== undefined && this.m_frameNumber > 5) {\n            const currentFps = 1000 / (now - this.m_previousRequestAnimationTime);\n            this.m_frameTimeRing[this.m_frameTimeIndex % FRAME_RATE_RING_SIZE] = currentFps;\n            this.m_frameTimeIndex++;\n\n            const capturedFrames = Math.min(this.m_frameTimeIndex, FRAME_RATE_RING_SIZE);\n\n            let sum = 0;\n            for (let i = 0; i < capturedFrames; i++) {\n                sum += this.m_frameTimeRing[i];\n            }\n\n            this.m_detectedFps = sum / capturedFrames;\n        }\n        this.m_previousRequestAnimationTime = now;\n    }\n\n    /**\n     * Draw a new frame.\n     */\n    private drawFrame() {\n        if (this.m_drawing || this.m_options.synchronousRendering) {\n            return;\n        }\n        // Cancel an active requestAnimationFrame() cycle. Failure to do this may end up in\n        // rendering multiple times during a single frame.\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        if (this.m_maxFps <= 0) {\n            // Render at maximum FPS.\n            this.m_animationFrameHandle = requestAnimationFrame(this.handleRequestAnimationFrame);\n            return;\n        }\n\n        // Magic ingredient to compensate time flux.\n        const fudgeTimeInMs = 3;\n        const vSyncFrameTime = 1000 / this.m_detectedFps;\n        const frameInterval = 1000 / this.m_maxFps;\n\n        const previousFrameTime =\n            this.m_previousFrameTimeStamp === undefined ? 0 : this.m_previousFrameTimeStamp;\n\n        // Compute a practical value to compare against.\n        const targetTime = previousFrameTime + frameInterval - vSyncFrameTime - fudgeTimeInMs;\n\n        this.m_targetRequestAnimationTime = targetTime;\n        this.postponedAnimationFrame(previousFrameTime);\n    }\n\n    private postponedAnimationFrame(now: number) {\n        if (this.m_targetRequestAnimationTime === undefined) {\n            return;\n        }\n\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        this.detectCurrentFps(now);\n\n        this.m_animationFrameHandle = requestAnimationFrame(\n            now > this.m_targetRequestAnimationTime\n                ? this.handleRequestAnimationFrame\n                : this.handlePostponedAnimationFrame\n        );\n    }\n\n    /**\n     * Draw a new frame.\n     */\n    private renderFunc(time: number) {\n        this.render(time);\n    }\n\n    /**\n     * Returns the list of the enabled data sources.\n     */\n    private getEnabledTileDataSources(): DataSource[] {\n        // ### build this list once decoders && datasources are ready\n\n        const enabledDataSources: DataSource[] = [];\n\n        for (const dataSource of this.m_tileDataSources) {\n            if (this.isDataSourceEnabled(dataSource)) {\n                enabledDataSources.push(dataSource);\n            }\n        }\n\n        return enabledDataSources;\n    }\n\n    /**\n     * Renders the current frame.\n     */\n    private render(time: number): void {\n        if (this.m_drawing) {\n            return;\n        }\n        ++this.m_frameNumber;\n\n        const stats = PerformanceStatistics.instance;\n        const gatherStatistics: boolean = stats.enabled;\n\n        const frameStartTime = time;\n\n        RENDER_EVENT.time = time;\n        this.dispatchEvent(RENDER_EVENT);\n\n        let currentFrameEvent: FrameStats | undefined;\n\n        if (gatherStatistics) {\n            currentFrameEvent = stats.currentFrame;\n            currentFrameEvent.setValue(\"renderCount.frameNumber\", this.m_frameNumber);\n\n            if (this.m_previousFrameTimeStamp !== undefined) {\n                const timeSincePreviousFrame = frameStartTime - this.m_previousFrameTimeStamp;\n                if (gatherStatistics) {\n                    currentFrameEvent.setValue(\"render.fullFrameTime\", timeSincePreviousFrame);\n                    // For convenience and easy readability\n                    currentFrameEvent.setValue(\"render.fps\", 1000 / timeSincePreviousFrame);\n                }\n            }\n        }\n\n        this.m_previousFrameTimeStamp = frameStartTime;\n\n        let setupTime: number | undefined;\n        let cullTime: number | undefined;\n        let textPlacementTime: number | undefined;\n        let drawTime: number | undefined;\n        let textDrawTime: number | undefined;\n        let endTime: number | undefined;\n\n        this.m_renderer.info.reset();\n\n        this.m_updatePending = false;\n        this.m_thisFrameTilesChanged = undefined;\n\n        this.m_drawing = true;\n\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        this.updateCameras();\n        this.m_renderer.clear();\n\n        // clear the scene\n        while (this.m_mapTilesRoot.children.length > 0) {\n            this.m_mapTilesRoot.remove(this.m_mapTilesRoot.children[0]);\n        }\n\n        if (gatherStatistics) {\n            setupTime = PerformanceTimer.now();\n        }\n\n        // TBD: Update renderList only any of its params (camera, etc...) has changed.\n        if (!this.lockVisibleTileSet) {\n            const viewRangesStatus = this.m_visibleTiles.updateRenderList(\n                this.storageLevel,\n                Math.floor(this.zoomLevel),\n                this.getEnabledTileDataSources(),\n                this.m_elevationRangeSource\n            );\n            // View ranges has changed due to features (with elevation) that affects clip planes\n            // positioning, update cameras with new clip planes positions.\n            if (viewRangesStatus.viewRangesChanged) {\n                this.updateCameras(viewRangesStatus.viewRanges);\n            }\n        }\n\n        if (gatherStatistics) {\n            cullTime = PerformanceTimer.now();\n        }\n\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        // no need to check everything if we're not going to create text renderer.\n        renderList.forEach(({ zoomLevel, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                this.renderTileObjects(tile, zoomLevel);\n\n                //We know that rendered tiles are visible (in the view frustum), so we update the\n                //frame number, note we don't do this for the visibleTiles because some may still be\n                //loading (and therefore aren't visible in the sense of being seen on the screen).\n                //Note also, this number isn't currently used anywhere so should be considered to be\n                //removed in the future (though could be good for debugging purposes).\n                tile.frameNumLastVisible = this.m_frameNumber;\n            });\n        });\n\n        // Check if this is the time to place the labels for the first time. Pretty much everything\n        // should have been loaded, and no animation should be running.\n        if (\n            !this.m_initialTextPlacementDone &&\n            !this.m_firstFrameComplete &&\n            !this.isDynamicFrame &&\n            !this.m_themeIsLoading &&\n            this.m_poiTableManager.finishedLoading &&\n            this.m_visibleTiles.allVisibleTilesLoaded &&\n            this.m_connectedDataSources.size + this.m_failedDataSources.size ===\n                this.m_tileDataSources.length &&\n            !this.m_textElementsRenderer.initializing &&\n            !this.m_textElementsRenderer.loading\n        ) {\n            this.m_initialTextPlacementDone = true;\n        }\n\n        this.m_mapAnchors.children.forEach((childObject: MapAnchor) => {\n            if (childObject.geoPosition === undefined) {\n                return;\n            }\n            this.projection.projectPoint(childObject.geoPosition, childObject.position);\n            childObject.position.sub(this.camera.position);\n        });\n\n        this.m_animatedExtrusionHandler.zoom = this.m_zoomLevel;\n\n        if (currentFrameEvent !== undefined) {\n            // Make sure the counters all have a value.\n            currentFrameEvent.addValue(\"renderCount.numTilesRendered\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesVisible\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesLoading\", 0);\n\n            // Increment the counters for all data sources.\n            renderList.forEach(({ zoomLevel, renderedTiles, visibleTiles, numTilesLoading }) => {\n                currentFrameEvent!.addValue(\"renderCount.numTilesRendered\", renderedTiles.size);\n                currentFrameEvent!.addValue(\"renderCount.numTilesVisible\", visibleTiles.length);\n                currentFrameEvent!.addValue(\"renderCount.numTilesLoading\", numTilesLoading);\n            });\n        }\n\n        if (this.m_movementDetector.checkCameraMoved(this, time)) {\n            const { yaw, pitch, roll } = MapViewUtils.extractAttitude(this, this.camera);\n            const { latitude, longitude, altitude } = this.geoCenter;\n            this.dispatchEvent({\n                type: MapViewEventNames.CameraPositionChanged,\n                latitude,\n                longitude,\n                altitude,\n                yaw,\n                pitch,\n                roll,\n                zoom: this.zoomLevel\n            });\n        }\n\n        // The camera used to render the scene.\n        const camera = this.m_pointOfView !== undefined ? this.m_pointOfView : this.m_rteCamera;\n\n        if (this.renderLabels) {\n            this.prepareRenderTextElements(time);\n        }\n\n        if (gatherStatistics) {\n            textPlacementTime = PerformanceTimer.now();\n        }\n        if (this.m_skyBackground !== undefined && this.projection.type === ProjectionType.Planar) {\n            this.m_skyBackground.updateCamera(this.m_camera);\n        }\n\n        this.mapRenderingManager.render(\n            this.m_renderer,\n            this.m_scene,\n            camera,\n            !this.isDynamicFrame\n        );\n\n        if (gatherStatistics) {\n            drawTime = PerformanceTimer.now();\n        }\n\n        if (this.renderLabels) {\n            this.finishRenderTextElements();\n        }\n\n        if (gatherStatistics) {\n            textDrawTime = PerformanceTimer.now();\n        }\n\n        if (!this.m_firstFrameRendered) {\n            this.m_firstFrameRendered = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrame\", time);\n            }\n\n            FIRST_FRAME_EVENT.time = time;\n            this.dispatchEvent(FIRST_FRAME_EVENT);\n        }\n\n        this.m_visibleTiles.disposePendingTiles();\n\n        this.m_drawing = false;\n\n        if (this.animating || this.m_updatePending) {\n            this.drawFrame();\n        }\n\n        this.checkCopyrightUpdates();\n\n        if (currentFrameEvent !== undefined) {\n            endTime = PerformanceTimer.now();\n\n            currentFrameEvent.setValue(\"render.setupTime\", setupTime! - frameStartTime);\n            currentFrameEvent.setValue(\"render.cullTime\", cullTime! - setupTime!);\n            currentFrameEvent.setValue(\"render.textPlacementTime\", textPlacementTime! - cullTime!);\n            currentFrameEvent.setValue(\"render.drawTime\", drawTime! - textPlacementTime!);\n            currentFrameEvent.setValue(\"render.textDrawTime\", textDrawTime! - drawTime!);\n            currentFrameEvent.setValue(\"render.cleanupTime\", endTime - textDrawTime!);\n            currentFrameEvent.setValue(\"render.frameRenderTime\", endTime - frameStartTime);\n\n            PerformanceStatistics.instance.storeFrameInfo(this.m_renderer.info);\n        }\n\n        DID_RENDER_EVENT.time = time;\n        this.dispatchEvent(DID_RENDER_EVENT);\n\n        // After completely rendering this frame, it is checked if this frame was the first complete\n        // frame, with no more tiles, geometry and labels waiting to be added, and no animation\n        // running. The initial placement of text in this render call may have changed the loading\n        // state of the TextElementsRenderer, so this has to be checked again.\n        if (\n            !this.m_firstFrameComplete &&\n            this.m_initialTextPlacementDone &&\n            !this.isDynamicFrame &&\n            !this.textElementsRenderer.loading\n        ) {\n            this.m_firstFrameComplete = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrameComplete\", time);\n            }\n\n            FRAME_COMPLETE_EVENT.time = time;\n            this.dispatchEvent(FRAME_COMPLETE_EVENT);\n        }\n    }\n\n    private renderTileObjects(tile: Tile, zoomLevel: number) {\n        const worldOffsetX = tile.computeWorldOffsetX();\n        if (tile.willRender(zoomLevel)) {\n            for (const object of tile.objects) {\n                object.position.copy(tile.center);\n                if (object.displacement !== undefined) {\n                    object.position.add(object.displacement);\n                }\n                object.position.x += worldOffsetX;\n                object.position.sub(this.m_camera.position);\n                if (tile.localTangentSpace) {\n                    object.setRotationFromMatrix(tile.boundingBox.getRotationMatrix());\n                }\n                object.frustumCulled = false;\n                if (object._backupRenderOrder === undefined) {\n                    object._backupRenderOrder = object.renderOrder;\n                }\n\n                const isBuilding =\n                    object.userData !== undefined &&\n                    object.userData.kind !== undefined &&\n                    (object.userData.kind as GeometryKind[]).includes(GeometryKind.Building);\n\n                // When falling back to a parent tile (i.e. tile.levelOffset < 0) there will\n                // be overlaps with the already loaded tiles. Therefore all (flat) objects\n                // in a fallback tile must be shifted, such that their renderOrder is less\n                // than the groundPlane that each neighbouring Tile has (it has a renderOrder\n                // of -10000, see addGroundPlane in TileGeometryCreator), only then can we be\n                // sure that nothing of the parent will be rendered on top of the children,\n                // as such, we shift using the FALLBACK_RENDER_ORDER_OFFSET.\n                // This does not apply to buildings b/c they are 3d and the overlaps\n                // are resolved with a depth prepass. Note we set this always to ensure that if\n                // the Tile is used as a fallback, and then used normally, that we have the correct\n                // renderOrder.\n                object.renderOrder =\n                    object._backupRenderOrder +\n                    (!isBuilding && tile.levelOffset < 0\n                        ? FALLBACK_RENDER_ORDER_OFFSET * tile.levelOffset\n                        : 0);\n\n                this.m_mapTilesRoot.add(object);\n            }\n        }\n        tile.didRender();\n    }\n\n    private prepareRenderTextElements(time: number) {\n        // Disable rendering of text elements for debug camera. TextElements are rendered using an\n        // orthographic camera that covers the entire available screen space. Unfortunately, this\n        // particular camera set up is not compatible with the debug camera.\n        const debugCameraActive = this.m_pointOfView !== undefined;\n\n        if (debugCameraActive) {\n            return;\n        }\n\n        this.m_textElementsRenderer.placeText(\n            this.m_visibleTiles.dataSourceTileList,\n            this.projection,\n            time\n        );\n    }\n\n    private finishRenderTextElements() {\n        const canRenderTextElements = this.m_pointOfView === undefined;\n\n        if (canRenderTextElements) {\n            // copy far value from scene camera, as the distance to the POIs matter now.\n            this.m_screenCamera.far = this.m_viewRanges.maximum;\n            this.m_textElementsRenderer.renderText(this.m_screenCamera);\n        }\n    }\n\n    private initTheme() {\n        const theme = getOptionValue(this.m_options.theme, MapViewDefaults.theme);\n\n        this.m_themeIsLoading = true;\n        Promise.resolve<string | Theme>(theme)\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => ThemeLoader.load(theme, { uriResolver: this.m_uriResolver }))\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => {\n                this.m_themeIsLoading = false;\n                this.theme = theme;\n            })\n            .catch(error => {\n                this.m_themeIsLoading = false;\n                const themeName =\n                    typeof this.m_options.theme === \"string\" ? ` from ${this.m_options.theme}` : \"\";\n                logger.error(`Failed to load theme${themeName}: ${error}`, error);\n            });\n    }\n\n    private setupCamera(options: MapViewOptions) {\n        const { width, height } = this.getCanvasClientSize();\n\n        const defaultGeoCenter = MapViewDefaults.geoCenter;\n\n        this.projection.projectPoint(defaultGeoCenter, this.m_camera.position);\n\n        if (this.projection.type === ProjectionType.Spherical) {\n            this.m_camera.lookAt(this.scene.position);\n        }\n\n        this.m_lookAtDistance = defaultGeoCenter.altitude!;\n\n        this.calculateFocalLength(height);\n        this.m_visibleTiles = this.createVisibleTileSet();\n        this.setInitialCameraPosition(options);\n\n        // ### move & customize\n        this.resize(width, height);\n\n        this.m_screenCamera.position.z = 1;\n        this.m_screenCamera.near = 0;\n    }\n\n    private setInitialCameraPosition(options: MapViewOptions) {\n        const target = GeoCoordinates.fromObject(\n            getOptionValue(options.target, MapViewDefaults.target)\n        );\n        target.altitude = 0; // ensure that look at target has height of 0\n        const zoomLevel = getOptionValue(options.zoomLevel, MapViewDefaults.zoomLevel);\n        const tilt = getOptionValue(options.tilt, MapViewDefaults.tilt);\n        const heading = getOptionValue(options.heading, MapViewDefaults.heading);\n\n        this.lookAt(target, 300000, tilt, heading);\n        this.zoomLevel = zoomLevel;\n    }\n\n    private createVisibleTileSet(): VisibleTileSet {\n        const enableMixedLod =\n            this.m_enableMixedLod === undefined\n                ? this.projection.type === ProjectionType.Spherical\n                : this.m_enableMixedLod;\n\n        return new VisibleTileSet(\n            new FrustumIntersection(\n                this.m_camera,\n                this,\n                this.m_visibleTileSetOptions.extendedFrustumCulling,\n                this.m_tileWrappingEnabled,\n                enableMixedLod\n            ),\n            this.m_tileGeometryManager,\n            this.m_visibleTileSetOptions\n        );\n    }\n\n    private updateSkyBackground() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n        const theme = this.m_theme;\n        if (this.m_skyBackground instanceof SkyBackground && theme.sky !== undefined) {\n            // there is a sky in the view and there is a sky option in the theme. Update the colors\n            this.updateSkyBackgroundColors(theme.sky, theme.clearColor);\n        } else if (this.m_skyBackground === undefined && theme.sky !== undefined) {\n            // there is no sky in the view but there is a sky option in the theme\n            this.addNewSkyBackground(theme.sky, theme.clearColor);\n            return;\n        } else if (this.m_skyBackground instanceof SkyBackground && theme.sky === undefined) {\n            // there is a sky in the view, but not in the theme\n            this.removeSkyBackGround();\n        }\n    }\n\n    private addNewSkyBackground(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        this.m_skyBackground = new SkyBackground(sky, this.projection.type, this.m_camera);\n        this.m_scene.background = this.m_skyBackground.texture;\n    }\n\n    private removeSkyBackGround() {\n        this.m_scene.background = null;\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.dispose();\n            this.m_skyBackground = undefined;\n        }\n    }\n\n    private updateSkyBackgroundColors(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.updateTexture(sky, this.projection.type);\n        }\n    }\n\n    private updateLighting() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n        if (theme.clearColor !== undefined) {\n            this.m_renderer.setClearColor(new THREE.Color(theme.clearColor));\n        }\n\n        if (this.m_createdLights) {\n            this.m_createdLights.forEach((light: THREE.Light) => {\n                this.m_scene.remove(light);\n            });\n        }\n        if (theme.lights !== undefined) {\n            this.m_createdLights = [];\n            theme.lights.forEach((lightDescription: Light) => {\n                const light = createLight(lightDescription);\n                if (!light) {\n                    logger.warn(\n                        // tslint:disable-next-line: max-line-length\n                        `MapView: failed to create light ${lightDescription.name} of type ${lightDescription.type}`\n                    );\n                    return;\n                }\n                this.m_scene.add(light);\n                this.m_createdLights!.push(light);\n            });\n        }\n    }\n\n    private movementStarted() {\n        this.m_textElementsRenderer.movementStarted();\n\n        MOVEMENT_STARTED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_STARTED_EVENT);\n    }\n\n    private movementFinished() {\n        this.m_textElementsRenderer.movementFinished();\n\n        MOVEMENT_FINISHED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_FINISHED_EVENT);\n\n        // render at the next possible time.\n        if (!this.animating) {\n            if (this.m_movementFinishedUpdateTimerId !== undefined) {\n                clearTimeout(this.m_movementFinishedUpdateTimerId);\n            }\n            this.m_movementFinishedUpdateTimerId = setTimeout(() => {\n                this.m_movementFinishedUpdateTimerId = undefined;\n                this.update();\n            }, 0);\n        }\n    }\n\n    /**\n     * Check if the set of visible tiles changed since the last frame.\n     *\n     * May be called multiple times per frame.\n     *\n     * Equality is computed by creating a string containing the IDs of the tiles.\n     */\n    private checkIfTilesChanged() {\n        if (this.m_thisFrameTilesChanged !== undefined) {\n            return this.m_thisFrameTilesChanged;\n        }\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        const tileIdList: string[] = [];\n\n        tileIdList.length = 0;\n\n        renderList.forEach(({ dataSource, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                tileIdList.push(dataSource.name + \"-\" + tile.tileKey.mortonCode());\n            });\n        });\n\n        tileIdList.sort();\n\n        const newTileIds = tileIdList.join(\"#\");\n\n        if (newTileIds !== this.m_lastTileIds) {\n            this.m_lastTileIds = newTileIds;\n            this.m_thisFrameTilesChanged = true;\n        } else {\n            this.m_thisFrameTilesChanged = false;\n        }\n\n        return this.m_thisFrameTilesChanged;\n    }\n\n    private checkCopyrightUpdates() {\n        if (!this.checkIfTilesChanged()) {\n            return;\n        }\n\n        const newCopyrightInfo = this.getRenderedTilesCopyrightInfo();\n        if (newCopyrightInfo === this.m_copyrightInfo) {\n            return;\n        }\n        if (newCopyrightInfo.length === this.m_copyrightInfo.length) {\n            let allEqual = true;\n            for (let i = 0; i < newCopyrightInfo.length; i++) {\n                const a = newCopyrightInfo[i];\n                const b = this.m_copyrightInfo[i];\n                if (a.label !== b.label) {\n                    allEqual = false;\n                    break;\n                }\n            }\n            if (allEqual) {\n                return;\n            }\n        }\n        this.m_copyrightInfo = newCopyrightInfo;\n        this.dispatchEvent(COPYRIGHT_CHANGED_EVENT);\n    }\n\n    private getRenderedTilesCopyrightInfo(): CopyrightInfo[] {\n        let result: CopyrightInfo[] = [];\n        for (const tileList of this.m_visibleTiles.dataSourceTileList) {\n            for (const tile of tileList.renderedTiles.values()) {\n                const tileCopyrightInfo = tile.copyrightInfo;\n                if (tileCopyrightInfo === undefined || tileCopyrightInfo.length === 0) {\n                    continue;\n                }\n                result = CopyrightInfo.mergeArrays(result, tileCopyrightInfo);\n            }\n        }\n        return result;\n    }\n\n    private updateImages() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n\n        this.m_imageCache.clear();\n        this.poiManager.clear();\n\n        if (theme.images !== undefined) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                this.m_imageCache.addImage(name, image.url, image.preload === true);\n                if (typeof image.atlas === \"string\") {\n                    this.poiManager.addTextureAtlas(name, image.atlas);\n                }\n            }\n        }\n\n        if (theme.imageTextures !== undefined) {\n            theme.imageTextures.forEach((imageTexture: ImageTexture) => {\n                this.poiManager.addImageTexture(imageTexture);\n            });\n        }\n    }\n\n    private loadPoiTables() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n\n        this.poiTableManager.clear();\n\n        // Add the POI tables defined in the theme.\n        this.poiTableManager\n            .loadPoiTables(this.m_theme as Theme)\n            .then(() => this.update())\n            .catch(() => this.update());\n    }\n\n    private setupStats(enable: boolean) {\n        // tslint:disable-next-line:no-unused-expression\n        new PerformanceStatistics(enable, 1000);\n    }\n\n    private setupRenderer() {\n        this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n\n        this.m_scene.add(this.m_mapTilesRoot);\n        this.m_scene.add(this.m_mapAnchors);\n    }\n\n    private createTextRenderer(): TextElementsRenderer {\n        const updateCallback: ViewUpdateCallback = () => {\n            this.update();\n        };\n\n        return new TextElementsRenderer(\n            new MapViewState(this, this.checkIfTilesChanged.bind(this)),\n            this.m_camera,\n            updateCallback,\n            this.m_screenCollisions,\n            this.m_screenProjector,\n            new TextCanvasFactory(this.m_renderer),\n            this.m_poiManager,\n            new PoiRendererFactory(this),\n            new FontCatalogLoader(this.m_theme),\n            this.m_theme,\n            this.m_options\n        );\n    }\n\n    private resetTextRenderer(): void {\n        const overlayText = this.m_textElementsRenderer.overlayText;\n        this.m_textElementsRenderer = this.createTextRenderer();\n        if (overlayText !== undefined) {\n            this.m_textElementsRenderer.addOverlayText(overlayText);\n        }\n    }\n\n    /**\n     * Default handler for webglcontextlost event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextLost = (event: Event) => {\n        this.dispatchEvent(CONTEXT_LOST_EVENT);\n        logger.warn(\"WebGL context lost\", event);\n    };\n\n    /**\n     * Default handler for webglcontextrestored event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextRestored = (event: Event) => {\n        this.dispatchEvent(CONTEXT_RESTORED_EVENT);\n        if (this.m_renderer !== undefined) {\n            if (this.m_theme !== undefined && this.m_theme.clearColor !== undefined) {\n                this.m_renderer.setClearColor(new THREE.Color(this.m_theme.clearColor));\n            } else {\n                this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n            }\n            this.update();\n        }\n        logger.warn(\"WebGL context restored\", event);\n    };\n\n    private limitFov(fov: number, aspect: number): number {\n        fov = THREE.Math.clamp(fov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n\n        let hFov = THREE.Math.radToDeg(\n            MapViewUtils.calculateHorizontalFovByVerticalFov(THREE.Math.degToRad(fov), aspect)\n        );\n\n        if (hFov > MAX_FIELD_OF_VIEW || hFov < MIN_FIELD_OF_VIEW) {\n            hFov = THREE.Math.clamp(hFov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n            fov = THREE.Math.radToDeg(\n                MapViewUtils.calculateVerticalFovByHorizontalFov(THREE.Math.degToRad(hFov), aspect)\n            );\n        }\n        return fov as number;\n    }\n\n    /**\n     * Sets the field of view calculation, and applies it immediately to the camera.\n     *\n     * @param type How to calculate the FOV\n     */\n    private setFovOnCamera(fovCalculation: FovCalculation, height: number) {\n        let fov = 0;\n        if (fovCalculation.type === \"fixed\") {\n            this.calculateFocalLength(height);\n            fov = fovCalculation.fov;\n        } else {\n            assert(this.m_focalLength !== 0);\n            fov = MapViewUtils.calculateFovByFocalLength(this.m_focalLength, height);\n        }\n        this.m_camera.fov = this.limitFov(fov, this.m_camera.aspect);\n    }\n\n    /**\n     * Sets the focal length based on the supplied fov and the height of the canvas. This must be\n     * called at least once. This is necessary to be recalled when the [[FovCalculation]]'s type is\n     * fixed. In such cases, when the height changes, the focal length must be readjusted whereas\n     * the FOV stays the same. The opposite is true for the dynamic case, where the focal length is\n     * fixed but the FOV changes.\n     * @param height Height of the canvas in css / client pixels.\n     */\n    private calculateFocalLength(height: number) {\n        assert(this.m_options.fovCalculation !== undefined);\n        this.m_focalLength = MapViewUtils.calculateFocalLengthByVerticalFov(\n            THREE.Math.degToRad(this.m_options.fovCalculation!.fov),\n            height\n        );\n    }\n\n    /**\n     * Get canvas client size in css/client pixels.\n     *\n     * Supports canvases not attached to DOM, which have 0 as `clientWidth` and `clientHeight` by\n     * calculating it from actual canvas size and current pixel ratio.\n     */\n    private getCanvasClientSize(): { width: number; height: number } {\n        const { clientWidth, clientHeight } = this.canvas;\n        if (\n            clientWidth === 0 ||\n            clientHeight === 0 ||\n            typeof clientWidth !== \"number\" ||\n            typeof clientHeight !== \"number\"\n        ) {\n            const pixelRatio = this.m_renderer.getPixelRatio();\n            return {\n                width: Math.round(this.canvas.width / pixelRatio),\n                height: Math.round(this.canvas.height / pixelRatio)\n            };\n        } else {\n            return { width: clientWidth, height: clientHeight };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\nimport { StringEncodedNumeralType } from \"./StringEncodedNumeral\";\n\n/**\n * Interpolation mode used when computing a [[InterpolatedProperty]] value for a given zoom level.\n */\nexport enum InterpolationMode {\n    Discrete,\n    Linear,\n    Cubic,\n    Exponential\n}\n\n/**\n * Interpolated property could have its value (some initial value should be provided) changed\n * according to an interpolation type.\n *\n * Here is an example of an interpolated property from a map style:\n * \"lineWidth\": {\n *  \"interpolation\": \"Linear\",\n *  \"zoomLevels\": [13, 14, 15],\n *  \"values\": [ 1.5, 1.2, 0.9]\n * }\n */\nexport interface InterpolatedPropertyDefinition<T> {\n    interpolation?: \"Discrete\" | \"Linear\" | \"Cubic\" | \"Exponential\";\n    zoomLevels: number[];\n    values: T[];\n    exponent?: number;\n}\n\n/**\n * Property which value is interpolated across different zoom levels.\n */\nexport interface InterpolatedProperty {\n    /**\n     * Interpolation mode that should be used for this property.\n     */\n    interpolationMode: InterpolationMode;\n\n    /**\n     * Zoom level keys array.\n     */\n    zoomLevels: Float32Array;\n\n    /**\n     * Property values array.\n     */\n    values: ArrayLike<any>;\n\n    /**\n     * Exponent used in interpolation. Only valid with `Exponential` [[InterpolationMode]].\n     */\n    exponent?: number;\n\n    /**\n     * @hidden\n     * [[StringEncodedNumeral]] type needed to interpret interpolated values back to numbers.\n     */\n    _stringEncodedNumeralType?: StringEncodedNumeralType;\n\n    /**\n     * @hidden\n     * Array of `0` and `1`mask values used to modify the interpolation behaviour of some\n     * [[StringEncodedNumeral]]s.\n     */\n    _stringEncodedNumeralDynamicMask?: Float32Array;\n}\n\n/**\n * Converts an [[InterpolatedPropertyDefinition]] to a [[JsonExpr]].\n *\n * @param property A valid [[InterpolatedPropertyDefinition]]\n */\nexport function interpolatedPropertyDefinitionToJsonExpr(\n    property: InterpolatedPropertyDefinition<any>\n): JsonExpr {\n    if (property.interpolation === undefined || property.interpolation === \"Discrete\") {\n        const step: JsonExpr = [\"step\", [\"zoom\"], property.values[0]];\n        for (let i = 1; i < property.zoomLevels.length; ++i) {\n            step.push(property.zoomLevels[i], property.values[i]);\n        }\n        return step;\n    }\n    const interpolation: JsonExpr = [\"interpolate\"];\n    switch (property.interpolation) {\n        case \"Linear\":\n            interpolation.push([\"linear\"]);\n            break;\n        case \"Cubic\":\n            interpolation.push([\"cubic\"]);\n            break;\n        case \"Exponential\":\n            interpolation.push([\n                \"exponential\",\n                property.exponent !== undefined ? property.exponent : 2\n            ]);\n            break;\n        default:\n            throw new Error(`interpolation mode '${property.interpolation}' is not supported`);\n    } //switch\n    interpolation.push([\"zoom\"]);\n    for (let i = 0; i < property.zoomLevels.length; ++i) {\n        interpolation.push(property.zoomLevels[i], property.values[i]);\n    }\n    return interpolation;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils/lib/math/Vector3Like\";\nimport { isJsonExpr, JsonExpr } from \"./Expr\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedProperty\";\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    DynamicProperty,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams\n} from \"./TechniqueParams\";\n\n/**\n * Map theme is used to define what features are shown and how the map is styled, for example\n * which lightning is used or whether fog should be displayed.\n */\nexport interface Theme {\n    /**\n     * The URI of the JSON schema describing themes.\n     */\n    $schema?: string;\n\n    /**\n     * The base `Theme`s or `theme` URLs to extend.\n     *\n     * If used, base themes are loaded first, and then all the properties from inherited theme\n     * overwrite these defined in base theme.\n     */\n    extends?: string | Theme | Array<string | Theme>;\n\n    /**\n     * Actual URL the theme has been loaded from.\n     */\n    url?: string;\n\n    /**\n     * Color to be used as a clear background - no map objects.\n     * @format color-hex\n     */\n    clearColor?: string;\n\n    /**\n     * Define the default text style for styling labels and texts.\n     */\n    defaultTextStyle?: TextStyleDefinition;\n\n    /**\n     * Define the lightning available on the three.js scene.\n     */\n    lights?: Light[];\n\n    /**\n     * Define the style of the sky presented in the map scene.\n     */\n    sky?: Sky;\n\n    /**\n     * Define the fog used in the map scene.\n     */\n    fog?: Fog;\n\n    /**\n     * The definitions exported by these theme.\n     */\n    definitions?: Definitions;\n\n    /**\n     * Map styles available for datasources used to render the map.\n     */\n    styles?: Styles;\n\n    /**\n     * Define the style to render different types of text used on the map.\n     */\n    textStyles?: TextStyleDefinition[];\n\n    /**\n     * List available fonts to be used while rendering text.\n     */\n    fontCatalogs?: FontCatalogConfig[];\n\n    /**\n     * Optional images to be rendered on the map view.\n     */\n    images?: ImageDefinitions;\n\n    /**\n     * Image textures to be used while rendering geometries on the map view.\n     */\n    imageTextures?: ImageTexture[];\n\n    /**\n     * Optional list of [[ThemePoiTableDef]]s.\n     */\n    poiTables?: PoiTableRef[];\n}\n\n/**\n * Checks if the given definition implements the [[BoxedDefinition]] interface.\n */\nexport function isBoxedDefinition(def: Definition): def is BoxedDefinition {\n    const bdef = def as BoxedDefinition;\n    return (\n        typeof bdef === \"object\" &&\n        bdef !== null &&\n        (typeof bdef.type === \"string\" || typeof bdef.type === \"undefined\") &&\n        (typeof bdef.value === \"string\" ||\n            typeof bdef.value === \"number\" ||\n            typeof bdef.value === \"boolean\" ||\n            isInterpolatedPropertyDefinition(bdef.value) ||\n            isJsonExpr(bdef.value))\n    );\n}\n\nexport function isLiteralDefinition(def: Definition): def is LiteralValue {\n    return typeof def === \"string\" || typeof def === \"number\" || typeof def === \"boolean\";\n}\n\n/**\n * Value definition commons.\n */\nexport interface BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type?: string;\n\n    /**\n     * The description of the definition.\n     */\n    description?: string;\n}\n\n/**\n * Possible types of unboxed literal values carried by [[Definition]].\n */\nexport type LiteralValue = string | number | boolean;\n\n/**\n * Boxed definition without type.\n */\nexport interface BoxedAnyDefinition extends BaseValueDefinition {\n    /**\n     * The value of the definition.\n     */\n    value: LiteralValue | JsonExpr;\n}\n\n/**\n * A boxed boolean value definition.\n */\nexport interface BoxedBooleanDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"boolean\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<boolean>;\n}\n\n/**\n * A boxed numerical value definition.\n */\nexport interface BoxedNumericDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"number\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<number>;\n}\n\n/**\n * A boxed string value definition.\n */\nexport interface BoxedStringDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"string\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed color value definition.\n */\nexport interface BoxedColorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"color\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed selector value definition.\n */\nexport interface BoxedSelectorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"selector\";\n\n    /**\n     * The value of the definition.\n     *\n     * See [[BaseStyle.when]].\n     */\n    value: string | JsonExpr;\n}\n\n/**\n * A boxed value definition.\n */\nexport type BoxedDefinition =\n    | BoxedAnyDefinition\n    | BoxedBooleanDefinition\n    | BoxedNumericDefinition\n    | BoxedStringDefinition\n    | BoxedColorDefinition\n    | BoxedSelectorDefinition;\n\n/**\n * Possible values for `definitions` element of [Theme].\n */\nexport type Definition = LiteralValue | JsonExpr | BoxedDefinition | JsonExpr | StyleDeclaration;\n\n/**\n * An array of [[Definition]]s.\n */\nexport interface Definitions {\n    [name: string]: Definition;\n}\n\n/**\n * Base [StyleSelector] attributes required to match [Style] object against given feature.\n *\n * Contains [Style]'s members related to feature matching in [[StyleSetEvaluator]].\n */\nexport interface StyleSelector {\n    /**\n     * Condition that is applied to feature properties to check if given [[Style]] this feature\n     * should emit geometry of this style.\n     *\n     * Conditions are defined using [[Array]]s describing literals, built-in symbols and function\n     * calls:\n     *  - `[\"has\", string]` returns `true` if the given property exists.\n     *  - `[\"get\", string]` returns the value of the given feature property with the given name.\n     *  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n     *  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n     *  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n     *    expression is included in the given `Array` of literals.\n     *  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n     *  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than the result of evaluating the second expression.\n     *  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than the result of evaluating the second expression.\n     *  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than or equal the result of evaluating the second expression.\n     *  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than or equal the result of evaluating the second expression.\n     *  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is equal the result of evaluating the second expression.\n     *  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is not equal to the result of evaluating the second expression.\n     *  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n     *    a `string` or an `Array`; otherwise, returns `undefined`.\n     *  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression contains the `string` obtained from the\n     *    second expression; otherwise, returns `undefined`.\n     *  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression starts with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     *  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression ends with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     */\n    when: string | JsonExpr;\n\n    /**\n     * The layer containing the carto features processed by this style rule.\n     */\n    layer?: string;\n\n    /**\n     * Optional. If `true`, no more matching styles will be evaluated.\n     */\n    final?: boolean;\n}\n\nexport type JsonExprReference = [\"ref\", string];\n\n/**\n * Checks if the given value is a reference to a definition.\n *\n * @param value The value of a technique property.\n */\nexport function isJsonExprReference(value: any): value is JsonExprReference {\n    return (\n        Array.isArray(value) &&\n        value.length === 2 &&\n        value[0] === \"ref\" &&\n        typeof value[1] === \"string\"\n    );\n}\n\n/**\n * Like [[StyleDeclaration]], but without [[Reference]] type.\n */\nexport type ResolvedStyleDeclaration = Style & StyleSelector;\n\n/**\n * Like [[StyleSet]], but without [[Reference]] type.\n */\nexport type ResolvedStyleSet = ResolvedStyleDeclaration[];\n\n/**\n * Compound type that merges all raw [Style] with selector arguments from [BaseSelector], optionally\n * a [[Reference]].\n */\nexport type StyleDeclaration = (Style & StyleSelector) | JsonExpr;\n\nexport function isActualSelectorDefinition(def: Definition): def is Style & StyleSelector {\n    const styleDef = def as StyleDeclaration;\n    return (\n        typeof styleDef === \"object\" &&\n        styleDef !== null &&\n        !Array.isArray(styleDef) &&\n        typeof styleDef.technique === \"string\"\n    );\n}\n\n/**\n * An array of [[StyleSelector]]s that are used together to define how a [[DataSource]] should be\n * rendered. `StyleSet`s are applied to sources providing vector tiles via their method\n * `setStyleSet`. This is also handle internally when a whole theme is passed to a [[MapView]] via\n * `mapview.theme`.\n */\nexport type StyleSet = StyleDeclaration[];\n\n/**\n * The object that defines what way an item of a [[DataSource]] should be decoded to assemble a\n * tile. [[Style]] is describing which features are shown on a map and in what way they are being\n * shown.\n */\nexport interface BaseStyle {\n    /**\n     * Human readable description.\n     */\n    description?: string;\n\n    /**\n     * Technique name. See the classes extending from this class to determine what possible\n     * techniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"extruded-line\"`,\n     * `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.\n     */\n    technique?: string;\n\n    /**\n     * Specify `renderOrder` of value.\n     *\n     * @default If not specified in style file, `renderOrder` will be assigned with monotonically\n     * increasing values according to style position in file.\n     */\n    renderOrder?: number | JsonExpr;\n\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number | JsonExpr;\n\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number | JsonExpr;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n     * `false`.\n     */\n    transient?: boolean;\n\n    /**\n     * Optional: If `true`, the objects with matching `when` statement will be printed to the\n     * console.\n     */\n    debug?: boolean;\n\n    // TODO: Make pixel units default.\n    /**\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     *\n     * @deprecated use \"string encoded numerals\" as documented in TODO, wher eis the doc ?\n     */\n    metricUnit?: \"Meter\" | \"Pixel\";\n\n    /**\n     * XYZ defines the property to display as text label of a feature in the styles.\n     */\n    labelProperty?: string;\n}\n\n/**\n *\n * @defaultSnippets [\n *     {\n *         \"label\": \"New solid-line\",\n *         \"description\": \"Add a new 'solid-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"secondaryColor\": \"#$4ddd\",\n *                 \"secondaryWidth\": \"^${5:2}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New dashed-line\",\n *         \"description\": \"Add a new 'dashed-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"gapSize\": \"^${4:10}\",\n *                 \"dashSize\": \"^${5:10}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New fill\",\n *         \"description\": \"Add a new 'fill' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"fill\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:0}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New text\",\n *         \"description\": \"Add a new 'text' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"text\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New labeled-icon\",\n *         \"description\": \"Add a new 'labeled-icon' marker styling\",\n *         \"body\": {\n *             \"technique\": \"labeled-icon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line-marker\",\n *         \"description\": \"Add a new 'line-marker' marker styling\",\n *         \"body\": {\n *             \"technique\": \"line-marker\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line\",\n *         \"description\": \"Add a new 'line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New segments\",\n *         \"description\": \"Add a new 'segments' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"segments\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New standard\",\n *         \"description\": \"Add a new 'standard' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"standard\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-line\",\n *         \"description\": \"Add a new 'extruded-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"shading\": \"${2:standard}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"lineWidth\": \"^${4:1}\",\n *                 \"caps\": \"${5:Circle}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-polygon\",\n *         \"description\": \"Add a new 'extruded-polygon' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-polygon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\",\n *                 \"lineWidth\": \"^${7:1}\",\n *                 \"lineColor\": \"#${8:c0f}\",\n *                 \"defaultHeight\": \"^${9:20}\",\n *                 \"animateExtrusion\": \"^${10:true}\",\n *                 \"animateExtrusionDuration\": \"^${11:300}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New none\",\n *         \"description\": \"Add a new 'none' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"none\",\n *             \"when\": \"$1\",\n *             \"attr\": {}\n *         }\n *     },\n *     {\n *         \"label\": \"New shader\",\n *         \"description\": \"Add a new 'shader' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"shader\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"primitive\": \"${2:mesh}\",\n *                 \"params\": {}\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New squares\",\n *         \"description\": \"Add a new 'squares' point styling\",\n *         \"body\": {\n *             \"technique\": \"squares\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New circles\",\n *         \"description\": \"Add a new 'circles' point styling\",\n *         \"body\": {\n *             \"technique\": \"circles\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     }\n * ]\n *\n */\nexport type AllStyles =\n    | SquaresStyle\n    | CirclesStyle\n    | PoiStyle\n    | LineMarkerStyle\n    | LineStyle\n    | SegmentsStyle\n    | SolidLineStyle\n    | LabelRejectionLineStyle\n    | FillStyle\n    | StandardStyle\n    | BasicExtrudedLineStyle\n    | StandardExtrudedLineStyle\n    | ExtrudedPolygonStyle\n    | ShaderStyle\n    | TerrainStyle\n    | TextTechniqueStyle\n    | NoneStyle;\n\nexport type Style = AllStyles;\n/**\n * A dictionary of [[StyleSet]]s.\n */\nexport interface Styles {\n    [styleSetName: string]: StyleSet;\n}\n\n/**\n * A reference to a style definition.\n *\n * Use as value `attrs` to reference value from `definitions`.\n *\n * Example of usage:\n * ```json\n * {\n *   \"definitions\": {\n *     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n *   },\n *   \"styles\": { \"tilezen\": [\n *      {\n *       \"when\": \"kind == 'road\",\n *       \"technique\": \"solid-line\",\n *       \"attr\": {\n *         \"lineColor\": { \"$ref\": \"roadColor\" }\n *       }\n *     }\n *   ] }\n * }\n * ```\n */\n\n/**\n * The attributes of a technique.\n */\nexport type Attr<T> = { [P in keyof T]?: T[P] | JsonExpr };\n\n/**\n * Render feature as set of squares rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport interface SquaresStyle extends BaseStyle {\n    technique: \"squares\";\n    attr?: Attr<PointTechniqueParams>;\n}\n\n/**\n * Render feature as set of circles rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport interface CirclesStyle extends BaseStyle {\n    technique: \"circles\";\n    attr?: Attr<PointTechniqueParams>;\n}\n\n/**\n * Render feature as POIs (icons and text) rendered in screen space.\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport interface PoiStyle extends BaseStyle {\n    technique: \"labeled-icon\";\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as line markers, which is a recurring marker along a line (usually road).\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerStyle extends BaseStyle {\n    technique: \"line-marker\";\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as line.\n */\nexport interface LineStyle extends BaseStyle {\n    technique: \"line\";\n    secondaryRenderOrder?: number;\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as segments.\n */\nexport interface SegmentsStyle extends BaseStyle {\n    technique: \"segments\";\n    attr?: Attr<SegmentsTechniqueParams>;\n}\n\nexport interface SolidLineStyle extends BaseStyle {\n    technique: \"solid-line\" | \"dashed-line\";\n    secondaryRenderOrder?: number;\n    attr?: Attr<SolidLineTechniqueParams>;\n}\n\nexport interface LabelRejectionLineStyle extends BaseStyle {\n    technique: \"label-rejection-line\";\n    attr?: Attr<BaseTechniqueParams>;\n}\n\nexport interface FillStyle extends BaseStyle {\n    technique: \"fill\";\n    attr?: Attr<FillTechniqueParams>;\n}\n\nexport interface StandardStyle extends BaseStyle {\n    technique: \"standard\";\n    attr?: Attr<StandardTechniqueParams>;\n}\n\nexport interface TerrainStyle extends BaseStyle {\n    technique: \"terrain\";\n    attr?: Attr<TerrainTechniqueParams>;\n}\n\nexport interface BasicExtrudedLineStyle extends BaseStyle {\n    technique: \"extruded-line\";\n    shading?: \"basic\";\n    attr?: Attr<BasicExtrudedLineTechniqueParams>;\n}\n\nexport interface StandardExtrudedLineStyle extends BaseStyle {\n    technique: \"extruded-line\";\n    shading: \"standard\";\n    attr?: Attr<StandardExtrudedLineTechniqueParams>;\n}\n\n/**\n * Style used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonStyle extends BaseStyle {\n    technique: \"extruded-polygon\";\n    attr?: Attr<ExtrudedPolygonTechniqueParams>;\n}\n\nexport interface ShaderStyle extends BaseStyle {\n    technique: \"shader\";\n    attr?: Attr<ShaderTechniqueParams>;\n}\n\nexport interface TextTechniqueStyle extends BaseStyle {\n    technique: \"text\";\n    attr?: Attr<TextTechniqueParams>;\n}\n\nexport interface NoneStyle extends BaseStyle {\n    technique: \"none\";\n    attr?: {\n        [name: string]: any;\n    };\n}\n\n/**\n * Possible lights used for light the map.\n */\nexport type Light = AmbientLight | DirectionalLight;\n\nexport interface BaseLight {\n    type: string;\n    name: string;\n}\n\n/**\n * Light type: ambient.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Ambient Light\",\n *         \"description\": \"Adds a new Ambient Light\",\n *         \"body\": {\n *             \"type\": \"ambient\",\n *             \"name\": \"${1:ambient light}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\"\n *         }\n *     }\n * ]\n */\nexport interface AmbientLight extends BaseLight {\n    type: \"ambient\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity?: number;\n}\n\n/**\n * Light type: directional.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Directional Light\",\n *         \"description\": \"Adds a new Directional Light\",\n *         \"body\": {\n *             \"type\": \"directional\",\n *             \"name\": \"${1:directional-light$:1}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\",\n *             \"direction\": {\n *                 \"x\": \"^${4:1}\",\n *                 \"y\": \"^${5:0}\",\n *                 \"z\": \"^${6:0}\"\n *             }\n *         }\n *     }\n * ]\n */\nexport interface DirectionalLight extends BaseLight {\n    type: \"directional\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity: number;\n    direction: Vector3Like;\n    castShadow?: boolean;\n}\n\n/**\n * Various text styles used with labels and texts.\n */\nexport interface TextStyleDefinition {\n    name?: string;\n    fontCatalogName?: string;\n\n    fontName?: string;\n    size?: number;\n    backgroundSize?: number;\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    rotation?: number;\n    /**\n     * @format color-hex\n     */\n    color?: string;\n    /**\n     * @format color-hex\n     */\n    backgroundColor?: string;\n    opacity?: number;\n    backgroundOpacity?: number;\n\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: \"None\" | \"Character\" | \"Word\";\n    hAlignment?: \"Left\" | \"Center\" | \"Right\";\n    vAlignment?: \"Above\" | \"Center\" | \"Below\";\n}\n\n/**\n * Interface that defines a procedural gradient sky.\n */\nexport interface GradientSky {\n    /** Sky type. */\n    type: \"gradient\";\n    /**\n     * Color of the upper part of the gradient.\n     * @format color-hex\n     */\n    topColor: string;\n    /**\n     * Color of bottom part of the gradient.\n     * @format color-hex\n     */\n    bottomColor: string;\n    /**\n     * Color of the ground plane.\n     * @format color-hex\n     */\n    groundColor: string;\n    /** Texture's gradient power. */\n    monomialPower?: number;\n}\n\n/**\n * Interface that defines a cubemap sky.\n */\nexport interface CubemapSky {\n    /** Sky type. */\n    type: \"cubemap\";\n    /** Positive X cube map face. */\n    positiveX: string;\n    /** Negative X cube map face. */\n    negativeX: string;\n    /** Positive Y cube map face. */\n    positiveY: string;\n    /** Negative Y cube map face. */\n    negativeY: string;\n    /** Positive Z cube map face. */\n    positiveZ: string;\n    /** Negative Z cube map face. */\n    negativeZ: string;\n}\n\n/**\n * Interface that defines the options to configure the sky.\n */\nexport type Sky = GradientSky | CubemapSky;\n\n/**\n * Interface that defines the options to configure fog.\n */\nexport interface Fog {\n    /** Fog's color. */\n    color: string;\n    /** Distance ratio to far plane at which the linear fog begins. */\n    startRatio: number;\n}\n\n/**\n * Define an image (e.g. icon).\n */\nexport interface ImageDefinition {\n    /** Url to load content from. */\n    url: string;\n    /** `true` to start loading at init tile, `false` to lazily wait until required. */\n    preload: boolean;\n    /** Url of JSON file containing the texture atlas */\n    atlas?: string;\n}\n\nexport interface ImageDefinitions {\n    /** Name of Image. */\n    [name: string]: ImageDefinition;\n}\n\n/**\n * Can be used to create a texture atlas.\n */\nexport interface ImageTexture {\n    /** Name of ImageTexture. Used to reference texture in the styles. */\n    name: string;\n    /** Name of ImageDefinition to use. */\n    image: string;\n    /** Origin of image, defaults to \"topleft\" */\n    origin?: string;\n    /** Specify sub-region: Defaults to 0. */\n    xOffset?: number;\n    /** Specify sub-region: Defaults to 0. */\n    yOffset?: number;\n    /** Specify sub-region:  Defaults to 0, meaning width is taken from loaded image. */\n    width?: number;\n    /** Specify sub-region:  Defaults to 0, meaning height is taken from loaded image. */\n    height?: number;\n    /** Defaults to false. */\n    flipH?: boolean;\n    /** Defaults to false. */\n    flipV?: boolean;\n    /** Defaults to 1. */\n    opacity?: number;\n}\n\n/**\n * Definition for a [[PoiTable]] reference as part of the [[Theme]] object.\n */\nexport interface PoiTableRef {\n    /** Required name of the [[PoiTable]] for later reference. */\n    name: string;\n    /**\n     * Required URL from where to load [[PoiTable]].\n     *\n     * Should refer to JSON that is matched [[PoiTableDef]] interface.\n     */\n    url: string;\n    /**\n     * If set to `true`, the list of values in the field \"altNames\" will be used as names for this\n     * POI.\n     */\n    useAltNamesForKey: boolean;\n}\n\n/**\n * Interface for the JSON description of the [[PoiTable]]. It is being implemented in [[PoiTable]].\n */\nexport interface PoiTableDef {\n    /** Name of the `PoiTable`. Must be unique. */\n    name?: string;\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    poiList?: PoiTableEntryDef[];\n}\n\n/**\n * Interface for the JSON description of the [[PoiTableEntry]]. The interface is being implemented\n * as [[PoiTableEntry]].\n */\nexport interface PoiTableEntryDef {\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: string;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n}\n\n/**\n * Fonts used for all text related rendering.\n */\nexport interface FontCatalogConfig {\n    url: string;\n    name: string;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    BaseTechniqueParams,\n    BufferAttribute,\n    DecodedTile,\n    Expr,\n    ExtrudedPolygonTechnique,\n    FillTechnique,\n    Geometry,\n    GeometryKind,\n    GeometryKindSet,\n    getArrayConstructor,\n    getFeatureId,\n    getPropertyValue,\n    isCirclesTechnique,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isJsonExpr,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isSquaresTechnique,\n    isTerrainTechnique,\n    isTextTechnique,\n    MakeTechniqueAttrs,\n    needsVertexNormals,\n    SolidLineTechnique,\n    StandardExtrudedLineTechnique,\n    Technique,\n    TerrainTechnique,\n    TextPathGeometry\n} from \"@here/harp-datasource-protocol\";\n// tslint:disable:max-line-length\nimport { SphericalGeometrySubdivisionModifier } from \"@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier\";\nimport { EarthConstants, GeoCoordinates, ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    EdgeMaterial,\n    EdgeMaterialParameters,\n    FadingFeature,\n    isHighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshStandardMaterial,\n    setShaderMaterialDefine,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { AnimatedExtrusionTileHandler } from \"../AnimatedExtrusionHandler\";\nimport { ColorCache } from \"../ColorCache\";\nimport {\n    applyBaseColorToMaterial,\n    applySecondaryColorToMaterial,\n    createMaterial,\n    getBufferAttribute,\n    getObjectConstructor\n} from \"../DecodedTileHelpers\";\nimport {\n    createDepthPrePassMesh,\n    isRenderDepthPrePassEnabled,\n    setDepthPrePassStencil\n} from \"../DepthPrePass\";\nimport { DisplacementMap, TileDisplacementMap } from \"../DisplacementMap\";\nimport { FALLBACK_RENDER_ORDER_OFFSET } from \"../MapView\";\nimport { MapViewPoints } from \"../MapViewPoints\";\nimport { PathBlockingElement } from \"../PathBlockingElement\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport { TileGeometryLoader } from \"./TileGeometryLoader\";\n\nconst logger = LoggerManager.instance.create(\"TileGeometryCreator\");\nconst tmpVector3 = new THREE.Vector3();\nconst tmpVector2 = new THREE.Vector2();\n\n/**\n * Parameters that control fading.\n */\nexport interface FadingParameters {\n    fadeNear?: number;\n    fadeFar?: number;\n}\n\n/**\n * Parameters that control fading for extruded buildings with fading edges.\n */\nexport interface PolygonFadingParameters extends FadingParameters {\n    color?: string | number;\n    colorMix?: number;\n    lineFadeNear?: number;\n    lineFadeFar?: number;\n}\n\n/**\n * Support class to create geometry for a [[Tile]] from a [[DecodedTile]].\n */\nexport class TileGeometryCreator {\n    private static m_instance: TileGeometryCreator;\n\n    /**\n     * The `instance` of the `TileGeometryCreator`.\n     *\n     * @returns TileGeometryCreator\n     */\n    static get instance(): TileGeometryCreator {\n        return this.m_instance || (this.m_instance = new TileGeometryCreator());\n    }\n\n    /**\n     *  Creates an instance of TileGeometryCreator. Access is allowed only through `instance`.\n     */\n    private constructor() {\n        //\n    }\n\n    /**\n     * Apply `enabledKinds` and `disabledKinds` to all techniques in the `decodedTile`. If a\n     * technique is identified as disabled, its property `enabled` is set to `false`.\n     *\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     * @param enabledKinds Optional [[GeometryKindSet]] used to specify which object kinds should be\n     *      created.\n     * @param disabledKinds Optional [[GeometryKindSet]] used to filter objects that should not be\n     *      created.\n     */\n    initDecodedTile(\n        decodedTile: DecodedTile,\n        enabledKinds?: GeometryKindSet | undefined,\n        disabledKinds?: GeometryKindSet | undefined\n    ) {\n        for (const technique of decodedTile.techniques) {\n            // Already processed\n            if (technique.enabled !== undefined) {\n                continue;\n            }\n\n            // Turn technique.kind from the style, which may be a string or an array of strings,\n            // into a GeometryKindSet.\n            if (technique.kind !== undefined) {\n                if (Array.isArray(technique.kind)) {\n                    technique.kind = new GeometryKindSet(technique.kind);\n                } else if (typeof technique.kind !== \"string\") {\n                    logger.warn(\"Technique has unknown type of kind:\", technique);\n                    technique.kind = undefined;\n                }\n            }\n\n            // No info about kind, no way to filter it.\n            if (\n                technique.kind === undefined ||\n                (technique.kind instanceof Set && (technique.kind as GeometryKindSet).size === 0)\n            ) {\n                technique.enabled = true;\n                continue;\n            }\n\n            technique.enabled =\n                !(disabledKinds !== undefined && disabledKinds.hasOrIntersects(technique.kind)) ||\n                (enabledKinds !== undefined && enabledKinds.hasOrIntersects(technique.kind));\n        }\n        for (const srcGeometry of decodedTile.geometries) {\n            for (const group of srcGeometry.groups) {\n                group.createdOffsets = [];\n            }\n        }\n\n        // compile the dynamic expressions.\n        decodedTile.techniques.forEach((technique: any) => {\n            for (const propertyName in technique) {\n                if (!technique.hasOwnProperty(propertyName)) {\n                    continue;\n                }\n                const value = technique[propertyName];\n                if (isJsonExpr(value) && propertyName !== \"kind\") {\n                    // \"kind\" is reserved.\n                    try {\n                        technique[propertyName] = Expr.fromJSON(value);\n                    } catch (error) {\n                        logger.error(\"#initDecodedTile: Failed to compile expression:\", error);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Called after the `Tile` has been decoded. It is required to call `initDecodedTile` before\n     * calling this method.\n     *\n     * @see [[TileGeometryCreator#initDecodedTile]]\n     *\n     * @param tile The [[Tile]] to process.\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     */\n    createAllGeometries(tile: Tile, decodedTile: DecodedTile) {\n        const filter = (technique: Technique): boolean => {\n            return technique.enabled !== false;\n        };\n\n        if (decodedTile.maxGeometryHeight !== undefined) {\n            tile.maxGeometryHeight = decodedTile.maxGeometryHeight;\n        }\n        this.createObjects(tile, decodedTile, filter);\n\n        this.preparePois(tile, decodedTile);\n\n        // TextElements do not get their geometry created by Tile, but are managed on a\n        // higher level.\n        const textFilter = (technique: Technique): boolean => {\n            if (\n                !isPoiTechnique(technique) &&\n                !isLineMarkerTechnique(technique) &&\n                !isTextTechnique(technique)\n            ) {\n                return false;\n            }\n            return filter(technique);\n        };\n        this.createTextElements(tile, decodedTile, textFilter);\n\n        this.createLabelRejectionElements(tile, decodedTile);\n\n        // HARP-7899, disable ground plane for globe\n        if (tile.dataSource.addGroundPlane && tile.projection.type === ProjectionType.Planar) {\n            // The ground plane is required for when we change the zoom back and we fall back to the\n            // parent, in that case we reduce the renderOrder of the parent tile and this ground\n            // place ensures that parent doesn't come through. This value must be above the\n            // renderOrder of all objects in the fallback tile, otherwise there won't be a proper\n            // covering of the parent tile by the children, hence dividing by 2. To put a bit more\n            // concretely, we assume all objects are rendered with a renderOrder between 0 and\n            // FALLBACK_RENDER_ORDER_OFFSET / 2, i.e. 10000. The ground plane is put at -10000, and\n            // the fallback tiles have their renderOrder set between -20000 and -10000\n            TileGeometryCreator.instance.addGroundPlane(tile, -FALLBACK_RENDER_ORDER_OFFSET / 2);\n        }\n    }\n\n    createLabelRejectionElements(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.pathGeometries === undefined) {\n            return;\n        }\n        for (const path of decodedTile.pathGeometries) {\n            tile.addBlockingElement(new PathBlockingElement(path.path));\n        }\n    }\n\n    /**\n     * Apply enabled and disabled kinds as a filter.\n     *\n     * @param {DecodedTile} decodedTile\n     * @param {(GeometryKindSet | undefined)} enabledKinds\n     * @param {(GeometryKindSet | undefined)} disabledKinds\n     */\n    processTechniques(\n        decodedTile: DecodedTile,\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        for (const technique of decodedTile.techniques) {\n            // Make sure that all technique have their geometryKind set, either from the Theme or\n            // their default value.\n            if (technique.kind === undefined) {\n                TileGeometryLoader.setDefaultGeometryKind(technique);\n            }\n        }\n\n        // Speedup and simplify following code: Test all techniques if they intersect with\n        // enabledKinds and disabledKinds, in which case they are flagged. The disabledKinds can be\n        // ignored hereafter.\n        this.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n    }\n\n    /**\n     * Adds a THREE object to the root of the tile. Sets the owning tiles datasource.name and the\n     * tileKey in the `userData` property of the object, such that the tile it belongs to can be\n     * identified during picking.\n     *\n     * @param tile The [[Tile]] to add the object to.\n     * @param object The object to add to the root of the tile.\n     * @param geometryKind The kind of object. Can be used for filtering.\n     */\n    registerTileObject(\n        tile: Tile,\n        object: THREE.Object3D,\n        geometryKind: GeometryKind | GeometryKindSet | undefined\n    ) {\n        if (object.userData === undefined) {\n            object.userData = {};\n        }\n        const userData = object.userData;\n        userData.tileKey = tile.tileKey;\n        userData.dataSource = tile.dataSource.name;\n\n        userData.kind =\n            geometryKind instanceof Set\n                ? Array.from((geometryKind as GeometryKindSet).values())\n                : Array.isArray(geometryKind)\n                ? geometryKind\n                : [geometryKind];\n\n        // Force a visibility check of all objects.\n        tile.resetVisibilityCounter();\n    }\n\n    /**\n     * Splits the text paths that contain sharp corners.\n     *\n     * @param tile The [[Tile]] to process paths on.\n     * @param textPathGeometries The original path geometries that may have defects.\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    prepareTextPaths(\n        textPathGeometries: TextPathGeometry[],\n        decodedTile: DecodedTile,\n        textFilter?: (technique: Technique) => boolean\n    ): TextPathGeometry[] {\n        const processedPaths = new Array<TextPathGeometry>();\n        const newPaths = textPathGeometries.slice();\n\n        while (newPaths.length > 0) {\n            const textPath = newPaths.pop();\n\n            if (textPath === undefined) {\n                break;\n            }\n\n            const technique = decodedTile.techniques[textPath.technique];\n            if (\n                !isTextTechnique(technique) ||\n                (textFilter !== undefined && !textFilter(technique))\n            ) {\n                continue;\n            }\n\n            processedPaths.push(textPath);\n        }\n        return processedPaths;\n    }\n\n    /**\n     * Creates [[TextElement]] objects from the decoded tile and list of materials specified. The\n     * priorities of the [[TextElement]]s are updated to simplify label placement.\n     *\n     * @param tile The [[Tile]] to create the testElements on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    createTextElements(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        textFilter?: (technique: Technique) => boolean\n    ) {\n        const mapView = tile.mapView;\n        const textElementsRenderer = mapView.textElementsRenderer;\n        const displayZoomLevel = Math.floor(mapView.zoomLevel);\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            const textPathGeometries = this.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile,\n                textFilter\n            );\n\n            for (const textPath of textPathGeometries) {\n                const technique = decodedTile.techniques[textPath.technique];\n\n                if (\n                    technique.enabled === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const path: THREE.Vector3[] = [];\n                for (let i = 0; i < textPath.path.length; i += 3) {\n                    path.push(\n                        new THREE.Vector3(\n                            textPath.path[i] + worldOffsetX,\n                            textPath.path[i + 1],\n                            textPath.path[i + 2]\n                        )\n                    );\n                }\n\n                // Make sorting stable.\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, displayZoomLevel)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, displayZoomLevel)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, displayZoomLevel)\n                        : technique.fadeFar;\n                const userData = textPath.objInfos;\n                const featureId = getFeatureId(userData);\n                const textElement = new TextElement(\n                    ContextualArabicConverter.instance.convert(textPath.text),\n                    path,\n                    textElementsRenderer.styleCache.getRenderStyle(tile, technique),\n                    textElementsRenderer.styleCache.getLayoutStyle(tile, technique),\n                    priority,\n                    technique.xOffset !== undefined ? technique.xOffset : 0.0,\n                    technique.yOffset !== undefined ? technique.yOffset : 0.0,\n                    featureId,\n                    technique.style,\n                    fadeNear,\n                    fadeFar,\n                    tile.offset\n                );\n                textElement.pathLengthSqr = textPath.pathLengthSqr;\n                textElement.minZoomLevel =\n                    technique.minZoomLevel !== undefined\n                        ? technique.minZoomLevel\n                        : mapView.minZoomLevel;\n                textElement.maxZoomLevel =\n                    technique.maxZoomLevel !== undefined\n                        ? technique.maxZoomLevel\n                        : mapView.maxZoomLevel;\n                textElement.distanceScale =\n                    technique.distanceScale !== undefined\n                        ? technique.distanceScale\n                        : DEFAULT_TEXT_DISTANCE_SCALE;\n                textElement.mayOverlap = technique.mayOverlap === true;\n                textElement.reserveSpace = technique.reserveSpace !== false;\n                textElement.kind = technique.kind;\n                // Get the userData for text element picking.\n                textElement.userData = textPath.objInfos;\n\n                tile.addTextElement(textElement);\n            }\n        }\n\n        if (decodedTile.textGeometries !== undefined) {\n            for (const text of decodedTile.textGeometries) {\n                if (text.technique === undefined || text.stringCatalog === undefined) {\n                    continue;\n                }\n\n                const technique = decodedTile.techniques[text.technique];\n\n                if (\n                    technique.enabled === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const positions = new THREE.BufferAttribute(\n                    new Float32Array(text.positions.buffer),\n                    text.positions.itemCount\n                );\n\n                const numPositions = positions.count;\n                if (numPositions < 1) {\n                    continue;\n                }\n\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, displayZoomLevel)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, displayZoomLevel)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, displayZoomLevel)\n                        : technique.fadeFar;\n\n                for (let i = 0; i < numPositions; ++i) {\n                    const x = positions.getX(i) + worldOffsetX;\n                    const y = positions.getY(i);\n                    const z = positions.getZ(i);\n                    const label = text.stringCatalog[text.texts[i]];\n                    if (label === undefined) {\n                        // skip missing labels\n                        continue;\n                    }\n\n                    const userData = text.objInfos !== undefined ? text.objInfos[i] : undefined;\n                    const featureId = getFeatureId(userData);\n\n                    const textElement = new TextElement(\n                        ContextualArabicConverter.instance.convert(label!),\n                        new THREE.Vector3(x, y, z),\n                        textElementsRenderer.styleCache.getRenderStyle(tile, technique),\n                        textElementsRenderer.styleCache.getLayoutStyle(tile, technique),\n                        priority,\n                        technique.xOffset || 0.0,\n                        technique.yOffset || 0.0,\n                        featureId,\n                        technique.style,\n                        undefined,\n                        undefined,\n                        tile.offset\n                    );\n\n                    textElement.minZoomLevel =\n                        technique.minZoomLevel !== undefined\n                            ? technique.minZoomLevel\n                            : mapView.minZoomLevel;\n                    textElement.maxZoomLevel =\n                        technique.maxZoomLevel !== undefined\n                            ? technique.maxZoomLevel\n                            : mapView.maxZoomLevel;\n                    textElement.mayOverlap = technique.mayOverlap === true;\n                    textElement.reserveSpace = technique.reserveSpace !== false;\n                    textElement.kind = technique.kind;\n\n                    textElement.fadeNear = fadeNear;\n                    textElement.fadeFar = fadeFar;\n\n                    // Get the userData for text element picking.\n                    textElement.userData = userData;\n\n                    tile.addTextElement(textElement);\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates `Tile` objects from the decoded tile and list of materials specified.\n     *\n     * @param tile The [[Tile]] to create the geometry on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param techniqueFilter: Optional filter. Should return true for any technique that is\n     *      applicable.\n     */\n    createObjects(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        techniqueFilter?: (technique: Technique) => boolean\n    ) {\n        const materials: THREE.Material[] = [];\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const displayZoomLevel = Math.floor(mapView.zoomLevel);\n        const objects = tile.objects;\n        const viewRanges = mapView.viewRanges;\n\n        for (const srcGeometry of decodedTile.geometries) {\n            const groups = srcGeometry.groups;\n            const groupCount = groups.length;\n\n            for (let groupIndex = 0; groupIndex < groupCount; ) {\n                const group = groups[groupIndex++];\n                const start = group.start;\n                const techniqueIndex = group.technique;\n                const technique = decodedTile.techniques[techniqueIndex];\n\n                if (\n                    group.createdOffsets!.indexOf(tile.offset) !== -1 ||\n                    technique.enabled === false ||\n                    (techniqueFilter !== undefined && !techniqueFilter(technique))\n                ) {\n                    continue;\n                }\n\n                let count = group.count;\n                group.createdOffsets!.push(tile.offset);\n\n                // compress consecutive groups\n                for (\n                    ;\n                    groupIndex < groupCount && groups[groupIndex].technique === techniqueIndex;\n                    ++groupIndex\n                ) {\n                    if (start + count !== groups[groupIndex].start) {\n                        break;\n                    }\n\n                    count += groups[groupIndex].count;\n\n                    // Mark this group as created, so it does not get processed again.\n                    groups[groupIndex].createdOffsets!.push(tile.offset);\n                }\n\n                const ObjectCtor = getObjectConstructor(technique);\n\n                if (ObjectCtor === undefined) {\n                    continue;\n                }\n\n                let material: THREE.Material | undefined = materials[techniqueIndex];\n\n                if (material === undefined) {\n                    const onMaterialUpdated = (texture: THREE.Texture) => {\n                        dataSource.requestUpdate();\n                        if (texture !== undefined) {\n                            tile.addOwnedTexture(texture);\n                        }\n                    };\n                    material = createMaterial(\n                        {\n                            technique,\n                            level: displayZoomLevel,\n                            fog: mapView.scene.fog !== null\n                        },\n                        onMaterialUpdated\n                    );\n                    if (material === undefined) {\n                        continue;\n                    }\n                    materials[techniqueIndex] = material;\n                }\n\n                // Modify the standard textured shader to support height-based coloring.\n                if (isTerrainTechnique(technique)) {\n                    this.setupTerrainMaterial(technique, material, tile.mapView.clearColor);\n                }\n\n                const bufferGeometry = new THREE.BufferGeometry();\n\n                srcGeometry.vertexAttributes.forEach((vertexAttribute: BufferAttribute) => {\n                    const buffer = getBufferAttribute(vertexAttribute);\n                    bufferGeometry.setAttribute(vertexAttribute.name, buffer);\n                });\n\n                if (srcGeometry.interleavedVertexAttributes !== undefined) {\n                    srcGeometry.interleavedVertexAttributes.forEach(\n                        (attr: {\n                            type: any;\n                            buffer: any;\n                            stride: any;\n                            attributes: {\n                                forEach: (\n                                    arg0: (interleavedAttr: {\n                                        itemSize: any;\n                                        offset: any;\n                                        name: any;\n                                    }) => void\n                                ) => void;\n                            };\n                        }) => {\n                            const ArrayCtor = getArrayConstructor(attr.type);\n                            const buffer = new THREE.InterleavedBuffer(\n                                new ArrayCtor(attr.buffer),\n                                attr.stride\n                            );\n                            attr.attributes.forEach(\n                                (interleavedAttr: { itemSize: any; offset: any; name: any }) => {\n                                    const attribute = new THREE.InterleavedBufferAttribute(\n                                        buffer,\n                                        interleavedAttr.itemSize,\n                                        interleavedAttr.offset,\n                                        false\n                                    );\n                                    bufferGeometry.setAttribute(interleavedAttr.name, attribute);\n                                }\n                            );\n                        }\n                    );\n                }\n\n                if (srcGeometry.index) {\n                    bufferGeometry.setIndex(getBufferAttribute(srcGeometry.index));\n                }\n\n                if (!bufferGeometry.getAttribute(\"normal\") && needsVertexNormals(technique)) {\n                    bufferGeometry.computeVertexNormals();\n                }\n\n                bufferGeometry.addGroup(start, count);\n\n                if (isSolidLineTechnique(technique)) {\n                    // TODO: Unify access to shader defines via SolidLineMaterial setters\n                    assert(!isHighPrecisionLineMaterial(material));\n                    const lineMaterial = material as SolidLineMaterial;\n                    if (\n                        technique.clipping !== false &&\n                        tile.projection.type === ProjectionType.Planar\n                    ) {\n                        tile.boundingBox.getSize(tmpVector3);\n                        tmpVector2.set(tmpVector3.x, tmpVector3.y);\n                        lineMaterial.clipTileSize = tmpVector2;\n                    }\n\n                    if (bufferGeometry.getAttribute(\"color\")) {\n                        setShaderMaterialDefine(lineMaterial, \"USE_COLOR\", true);\n                    }\n                }\n\n                // Add the solid line outlines as a separate object.\n                const hasSolidLinesOutlines: boolean =\n                    isSolidLineTechnique(technique) && technique.secondaryWidth !== undefined;\n\n                const object = new ObjectCtor(bufferGeometry, material);\n                object.renderOrder = technique.renderOrder!;\n\n                if (group.renderOrderOffset !== undefined) {\n                    object.renderOrder += group.renderOrderOffset;\n                }\n\n                if (srcGeometry.uuid !== undefined) {\n                    object.userData.geometryId = srcGeometry.uuid;\n                }\n\n                if (\n                    (isCirclesTechnique(technique) || isSquaresTechnique(technique)) &&\n                    technique.enablePicking !== undefined\n                ) {\n                    // tslint:disable-next-line:max-line-length\n                    (object as MapViewPoints).enableRayTesting = technique.enablePicking!;\n                }\n\n                if (isLineTechnique(technique) || isSegmentsTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const fadingParams = this.getFadingParams(displayZoomLevel, technique);\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        hasDynamicColor\n                            ? (renderer, mat) => {\n                                  const lineMaterial = mat as THREE.LineBasicMaterial;\n                                  applyBaseColorToMaterial(\n                                      lineMaterial,\n                                      lineMaterial.color,\n                                      technique,\n                                      technique.color,\n                                      mapView.zoomLevel\n                                  );\n                              }\n                            : undefined\n                    );\n                }\n\n                if (isSolidLineTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const fadingParams = this.getFadingParams(displayZoomLevel, technique);\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        (renderer, mat) => {\n                            const lineMaterial = mat as SolidLineMaterial;\n                            const unitFactor =\n                                technique.metricUnit === \"Pixel\" ? mapView.pixelToWorld : 1.0;\n\n                            if (hasDynamicColor) {\n                                applyBaseColorToMaterial(\n                                    lineMaterial,\n                                    lineMaterial.color,\n                                    technique,\n                                    technique.color,\n                                    mapView.zoomLevel\n                                );\n                            }\n\n                            lineMaterial.lineWidth =\n                                getPropertyValue(\n                                    technique.lineWidth,\n                                    mapView.zoomLevel,\n                                    mapView.pixelToWorld\n                                ) *\n                                unitFactor *\n                                0.5;\n\n                            if (technique.outlineWidth !== undefined) {\n                                lineMaterial.outlineWidth =\n                                    getPropertyValue(\n                                        technique.outlineWidth,\n                                        mapView.zoomLevel,\n                                        mapView.pixelToWorld\n                                    ) * unitFactor;\n                            }\n\n                            if (technique.dashSize !== undefined) {\n                                lineMaterial.dashSize =\n                                    getPropertyValue(\n                                        technique.dashSize,\n                                        mapView.zoomLevel,\n                                        mapView.pixelToWorld\n                                    ) *\n                                    unitFactor *\n                                    0.5;\n                            }\n\n                            if (technique.gapSize !== undefined) {\n                                lineMaterial.gapSize =\n                                    getPropertyValue(\n                                        technique.gapSize,\n                                        mapView.zoomLevel,\n                                        mapView.pixelToWorld\n                                    ) *\n                                    unitFactor *\n                                    0.5;\n                            }\n                        }\n                    );\n                }\n\n                if (isExtrudedLineTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    // extruded lines are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    if (technique.fadeFar !== undefined || hasDynamicColor) {\n                        const fadingParams = this.getFadingParams(\n                            displayZoomLevel,\n                            technique as StandardExtrudedLineTechnique\n                        );\n\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true,\n                            hasDynamicColor\n                                ? (renderer, mat) => {\n                                      const extrudedMaterial = mat as\n                                          | MapMeshStandardMaterial\n                                          | MapMeshBasicMaterial;\n\n                                      applyBaseColorToMaterial(\n                                          extrudedMaterial,\n                                          extrudedMaterial.color,\n                                          technique,\n                                          technique.color!,\n                                          mapView.zoomLevel\n                                      );\n                                  }\n                                : undefined\n                        );\n                    }\n                }\n\n                this.addFeatureData(srcGeometry, technique, object);\n                this.addGeometryObjInfos(tile, srcGeometry, technique, object);\n\n                if (isExtrudedPolygonTechnique(technique) || isFillTechnique(technique)) {\n                    // filled polygons are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    const hasDynamicPrimaryColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const hasDynamicSecondaryColor =\n                        isExtrudedPolygonTechnique(technique) && Expr.isExpr(technique.emissive);\n                    const hasDynamicColor = hasDynamicPrimaryColor || hasDynamicSecondaryColor;\n\n                    if (technique.fadeFar !== undefined || hasDynamicColor) {\n                        const fadingParams = this.getFadingParams(displayZoomLevel, technique);\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true,\n                            hasDynamicColor\n                                ? (renderer, mat) => {\n                                      const polygonMaterial = mat as\n                                          | MapMeshBasicMaterial\n                                          | MapMeshStandardMaterial;\n\n                                      if (hasDynamicPrimaryColor) {\n                                          applyBaseColorToMaterial(\n                                              polygonMaterial,\n                                              polygonMaterial.color,\n                                              technique,\n                                              technique.color!,\n                                              mapView.zoomLevel\n                                          );\n                                      }\n\n                                      if (\n                                          hasDynamicSecondaryColor &&\n                                          // Just to omit compiler warnings\n                                          isExtrudedPolygonTechnique(technique)\n                                      ) {\n                                          const standardMat = mat as MapMeshStandardMaterial;\n\n                                          applySecondaryColorToMaterial(\n                                              standardMat.emissive,\n                                              technique.emissive!,\n                                              mapView.zoomLevel\n                                          );\n                                      }\n                                  }\n                                : undefined\n                        );\n                    }\n                }\n\n                const extrudedObjects: Array<{\n                    object: THREE.Object3D;\n                    /**\n                     * If set to `true`, an [[ExtrusionFeature]] that injects extrusion shader\n                     * chunk will be applied to the material. Otherwise, extrusion should\n                     * be added in the material's shader manually.\n                     */\n                    materialFeature: boolean;\n                }> = [];\n\n                const animatedExtrusionHandler = mapView.animatedExtrusionHandler;\n\n                let extrusionAnimationEnabled: boolean | undefined = false;\n\n                if (\n                    isExtrudedPolygonTechnique(technique) &&\n                    animatedExtrusionHandler !== undefined\n                ) {\n                    let animateExtrusionValue = getPropertyValue(\n                        technique.animateExtrusion,\n                        displayZoomLevel\n                    );\n                    if (animateExtrusionValue !== undefined) {\n                        animateExtrusionValue =\n                            typeof animateExtrusionValue === \"boolean\"\n                                ? animateExtrusionValue\n                                : typeof animateExtrusionValue === \"number\"\n                                ? animateExtrusionValue !== 0\n                                : false;\n                    }\n                    extrusionAnimationEnabled =\n                        animateExtrusionValue !== undefined &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? animateExtrusionValue\n                            : animatedExtrusionHandler.enabled;\n                }\n\n                const renderDepthPrePass =\n                    isExtrudedPolygonTechnique(technique) && isRenderDepthPrePassEnabled(technique);\n\n                if (renderDepthPrePass) {\n                    const depthPassMesh = createDepthPrePassMesh(object as THREE.Mesh);\n                    // Set geometry kind for depth pass mesh so that it gets the displacement map\n                    // for elevation overlay.\n                    this.registerTileObject(tile, depthPassMesh, technique.kind);\n                    objects.push(depthPassMesh);\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: depthPassMesh,\n                            materialFeature: true\n                        });\n                    }\n\n                    setDepthPrePassStencil(depthPassMesh, object as THREE.Mesh);\n                }\n\n                this.registerTileObject(tile, object, technique.kind);\n                objects.push(object);\n\n                // Add the extruded building edges as a separate geometry.\n                if (isExtrudedPolygonTechnique(technique) && srcGeometry.edgeIndex !== undefined) {\n                    const edgeGeometry = new THREE.BufferGeometry();\n                    edgeGeometry.setAttribute(\"position\", bufferGeometry.getAttribute(\"position\"));\n\n                    const colorAttribute = bufferGeometry.getAttribute(\"color\");\n                    if (colorAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"color\", colorAttribute);\n                    }\n\n                    const extrusionAttribute = bufferGeometry.getAttribute(\"extrusionAxis\");\n                    if (extrusionAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"extrusionAxis\", extrusionAttribute);\n                    }\n\n                    const normalAttribute = bufferGeometry.getAttribute(\"normal\");\n                    if (normalAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"normal\", normalAttribute);\n                    }\n\n                    const uvAttribute = bufferGeometry.getAttribute(\"uv\");\n                    if (uvAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"uv\", uvAttribute);\n                    }\n\n                    edgeGeometry.setIndex(\n                        getBufferAttribute(srcGeometry.edgeIndex! as BufferAttribute)\n                    );\n\n                    // Read the uniforms from the technique values (and apply the default values).\n                    const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(\n                        displayZoomLevel,\n                        extrudedPolygonTechnique\n                    );\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const edgeMaterial = new EdgeMaterial(materialParams);\n                    const edgeObj = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n\n                    // Set the correct render order.\n                    edgeObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        edgeObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false,\n                        extrudedPolygonTechnique.lineColor !== undefined &&\n                            Expr.isExpr(extrudedPolygonTechnique.lineColor)\n                            ? () => {\n                                  applyBaseColorToMaterial(\n                                      edgeMaterial,\n                                      edgeMaterial.color,\n                                      extrudedPolygonTechnique,\n                                      extrudedPolygonTechnique.lineColor!,\n                                      mapView.zoomLevel\n                                  );\n                              }\n                            : undefined\n                    );\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: edgeObj,\n                            materialFeature: false\n                        });\n                    }\n\n                    this.registerTileObject(tile, edgeObj, technique.kind);\n                    objects.push(edgeObj);\n                }\n\n                // animate the extrusion of buildings\n                if (isExtrudedPolygonTechnique(technique) && extrusionAnimationEnabled) {\n                    extrudedObjects.push({\n                        object,\n                        materialFeature: true\n                    });\n\n                    const extrusionAnimationDuration =\n                        technique.animateExtrusionDuration !== undefined &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? technique.animateExtrusionDuration\n                            : animatedExtrusionHandler.duration;\n\n                    tile.animatedExtrusionTileHandler = new AnimatedExtrusionTileHandler(\n                        tile,\n                        extrudedObjects,\n                        extrusionAnimationDuration\n                    );\n                    mapView.animatedExtrusionHandler.add(tile.animatedExtrusionTileHandler);\n                }\n\n                // Add the fill area edges as a separate geometry.\n\n                if (isFillTechnique(technique) && srcGeometry.edgeIndex !== undefined) {\n                    const outlineGeometry = new THREE.BufferGeometry();\n                    outlineGeometry.setAttribute(\n                        \"position\",\n                        bufferGeometry.getAttribute(\"position\")\n                    );\n                    outlineGeometry.setIndex(getBufferAttribute(srcGeometry.edgeIndex!));\n\n                    const fillTechnique = technique as FillTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(\n                        displayZoomLevel,\n                        fillTechnique\n                    );\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const outlineMaterial = new EdgeMaterial(materialParams);\n                    const outlineObj = new THREE.LineSegments(outlineGeometry, outlineMaterial);\n                    outlineObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false,\n                        fillTechnique.lineColor !== undefined &&\n                            Expr.isExpr(fillTechnique.lineColor)\n                            ? (renderer, mat) => {\n                                  const edgeMaterial = mat as EdgeMaterial;\n                                  applyBaseColorToMaterial(\n                                      edgeMaterial,\n                                      edgeMaterial.color,\n                                      fillTechnique,\n                                      fillTechnique.lineColor!,\n                                      mapView.zoomLevel\n                                  );\n                              }\n                            : undefined\n                    );\n\n                    this.registerTileObject(tile, outlineObj, technique.kind);\n                    objects.push(outlineObj);\n                }\n\n                // Add the fill area edges as a separate geometry.\n                if (hasSolidLinesOutlines) {\n                    const outlineTechnique = technique as SolidLineTechnique;\n                    const outlineMaterial = material.clone() as SolidLineMaterial;\n                    const outlineColor = ColorCache.instance.getColor(\n                        outlineTechnique.secondaryColor !== undefined\n                            ? getPropertyValue(outlineTechnique.secondaryColor!, displayZoomLevel)\n                            : 0x000000\n                    );\n                    outlineMaterial.uniforms.diffuse.value = outlineColor;\n                    if (outlineTechnique.secondaryCaps !== undefined) {\n                        outlineMaterial.caps = outlineTechnique.secondaryCaps;\n                    }\n                    const outlineObj = new ObjectCtor(bufferGeometry, outlineMaterial);\n\n                    outlineObj.renderOrder =\n                        outlineTechnique.secondaryRenderOrder !== undefined\n                            ? outlineTechnique.secondaryRenderOrder\n                            : technique.renderOrder - 0.0000001;\n\n                    if (group.renderOrderOffset !== undefined) {\n                        outlineObj.renderOrder += group.renderOrderOffset;\n                    }\n\n                    const fadingParams = this.getFadingParams(displayZoomLevel, technique);\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        (renderer, mat) => {\n                            const lineMaterial = mat as SolidLineMaterial;\n\n                            const unitFactor =\n                                outlineTechnique.metricUnit === \"Pixel\"\n                                    ? mapView.pixelToWorld\n                                    : 1.0;\n\n                            if (outlineTechnique.secondaryColor !== undefined) {\n                                applyBaseColorToMaterial(\n                                    lineMaterial,\n                                    lineMaterial.color,\n                                    outlineTechnique,\n                                    outlineTechnique.secondaryColor,\n                                    mapView.zoomLevel\n                                );\n                            }\n\n                            if (outlineTechnique.secondaryWidth !== undefined) {\n                                const techniqueLineWidth = getPropertyValue(\n                                    outlineTechnique.lineWidth!,\n                                    mapView.zoomLevel,\n                                    mapView.pixelToWorld\n                                );\n                                const techniqueSecondaryWidth = getPropertyValue(\n                                    outlineTechnique.secondaryWidth!,\n                                    mapView.zoomLevel,\n                                    mapView.pixelToWorld\n                                );\n                                const techniqueOpacity = getPropertyValue(\n                                    outlineTechnique.opacity,\n                                    mapView.zoomLevel\n                                );\n                                // hide outline when it's equal or smaller then line to avoid subpixel contour\n                                const lineWidth =\n                                    techniqueSecondaryWidth <= techniqueLineWidth &&\n                                    (techniqueOpacity === undefined || techniqueOpacity === 1)\n                                        ? 0\n                                        : techniqueSecondaryWidth;\n                                lineMaterial.lineWidth = lineWidth * unitFactor * 0.5;\n                            }\n                        }\n                    );\n\n                    this.registerTileObject(tile, outlineObj, technique.kind);\n                    objects.push(outlineObj);\n                }\n            }\n        }\n    }\n\n    /**\n     * Prepare the [[Tile]]s pois. Uses the [[PoiManager]] in [[MapView]].\n     */\n    preparePois(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.poiGeometries !== undefined) {\n            tile.mapView.poiManager.addPois(tile, decodedTile);\n        }\n    }\n\n    /**\n     * Creates and add a background plane for the tile.\n     */\n    addGroundPlane(tile: Tile, renderOrder: number) {\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const projection = tile.projection;\n\n        const color = mapView.clearColor;\n        const tmpV = new THREE.Vector3();\n\n        if (tile.projection.type === ProjectionType.Spherical) {\n            const { east, west, north, south } = tile.geoBox;\n            const sourceProjection = dataSource.getTilingScheme().projection;\n            const g = new THREE.BufferGeometry();\n            const posAttr = new THREE.BufferAttribute(\n                new Float32Array([\n                    ...sourceProjection\n                        .projectPoint(new GeoCoordinates(south, west), tmpV)\n                        .toArray(),\n                    ...sourceProjection\n                        .projectPoint(new GeoCoordinates(south, east), tmpV)\n                        .toArray(),\n                    ...sourceProjection\n                        .projectPoint(new GeoCoordinates(north, west), tmpV)\n                        .toArray(),\n                    ...sourceProjection\n                        .projectPoint(new GeoCoordinates(north, east), tmpV)\n                        .toArray()\n                ]),\n                3\n            );\n            g.setAttribute(\"position\", posAttr);\n            g.setIndex(new THREE.BufferAttribute(new Uint16Array([0, 1, 2, 2, 1, 3]), 1));\n            const modifier = new SphericalGeometrySubdivisionModifier(\n                THREE.Math.degToRad(10),\n                sourceProjection\n            );\n            modifier.modify(g);\n\n            for (let i = 0; i < posAttr.array.length; i += 3) {\n                tmpV.set(posAttr.array[i], posAttr.array[i + 1], posAttr.array[i + 2]);\n                projection.reprojectPoint(sourceProjection, tmpV, tmpV);\n                tmpV.sub(tile.center);\n                (posAttr.array as Float32Array)[i] = tmpV.x;\n                (posAttr.array as Float32Array)[i + 1] = tmpV.y;\n                (posAttr.array as Float32Array)[i + 2] = tmpV.z;\n            }\n            posAttr.needsUpdate = true;\n\n            const material = new MapMeshBasicMaterial({\n                color,\n                visible: true,\n                depthWrite: true\n            });\n            const mesh = new THREE.Mesh(g, material);\n            mesh.renderOrder = renderOrder;\n            this.registerTileObject(tile, mesh, GeometryKind.Background);\n            tile.objects.push(mesh);\n        } else {\n            // Add a ground plane to the tile.\n            tile.boundingBox.getSize(tmpV);\n            const groundPlane = this.createPlane(\n                tmpV.x,\n                tmpV.y,\n                tile.center,\n                color,\n                true,\n                renderOrder\n            );\n\n            this.registerTileObject(tile, groundPlane, GeometryKind.Background);\n            tile.objects.push(groundPlane);\n        }\n    }\n\n    private setupTerrainMaterial(\n        technique: TerrainTechnique,\n        material: THREE.Material,\n        terrainColor: number\n    ) {\n        if (technique.displacementMap === undefined) {\n            // Render terrain using the given color.\n            const stdMaterial = material as MapMeshStandardMaterial;\n            stdMaterial.color.set(terrainColor);\n            return;\n        }\n\n        // Render terrain using height-based colors.\n        (material as any).onBeforeCompile = (shader: THREE.Shader) => {\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_pars_fragment>\",\n                `#include <map_pars_fragment>\n    uniform sampler2D displacementMap;\n    uniform float displacementScale;\n    uniform float displacementBias;`\n            );\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_fragment>\",\n                `#ifdef USE_MAP\n    float minElevation = ${EarthConstants.MIN_ELEVATION.toFixed(1)};\n    float maxElevation = ${EarthConstants.MAX_ELEVATION.toFixed(1)};\n    float elevationRange = maxElevation - minElevation;\n\n    float disp = texture2D( displacementMap, vUv ).x * displacementScale + displacementBias;\n    vec4 texelColor = texture2D( map, vec2((disp - minElevation) / elevationRange, 0.0) );\n    texelColor = mapTexelToLinear( texelColor );\n    diffuseColor *= texelColor;\n#endif`\n            );\n            // We remove the displacement map from manipulating the vertices, it is\n            // however still required for the pixel shader, so it can't be directly\n            // removed.\n            shader.vertexShader = shader.vertexShader.replace(\n                \"#include <displacementmap_vertex>\",\n                \"\"\n            );\n        };\n        (material as MapMeshStandardMaterial).displacementMap!.needsUpdate = true;\n    }\n\n    /**\n     * Create a simple flat plane for a [[Tile]].\n     *\n     * @param {number} width Width of plane.\n     * @param {number} height Height of plane.\n     * @param {THREE.Vector3} planeCenter Center of plane.\n     * @param {number} colorHex Color of the plane mesh.\n     * @param {boolean} isVisible `True` to make the mesh visible.\n     * @returns {THREE.Mesh} The created plane.\n     */\n    private createPlane(\n        width: number,\n        height: number,\n        planeCenter: THREE.Vector3,\n        colorHex: number,\n        isVisible: boolean,\n        renderOrder: number\n    ): THREE.Mesh {\n        const geometry = new THREE.PlaneGeometry(width, height, 1);\n        // TODO cache the material HARP-4207\n        const material = new MapMeshBasicMaterial({\n            color: colorHex,\n            visible: isVisible,\n            depthWrite: false\n        });\n        const plane = new THREE.Mesh(geometry, material);\n        plane.position.copy(planeCenter);\n        // Render before everything else\n        plane.renderOrder = renderOrder;\n        return plane;\n    }\n\n    /**\n     * Pass the feature data on to the object, so it can be used in picking\n     * `MapView.intersectMapObjects()`. Do not pass the feature data if the technique is a\n     * solid-line, because the line picking functionality for the lines is not object based, but\n     * tile based.\n     *\n     * @param srcGeometry The original [[Geometry]].\n     * @param technique The corresponding [[Technique]].\n     * @param object The object to pass info to.\n     */\n    private addFeatureData(srcGeometry: Geometry, technique: Technique, object: THREE.Object3D) {\n        if (\n            ((srcGeometry.objInfos !== undefined && srcGeometry.objInfos.length > 0) ||\n                isCirclesTechnique(technique) ||\n                isSquaresTechnique(technique)) &&\n            !isSolidLineTechnique(technique)\n        ) {\n            const featureData: TileFeatureData = {\n                geometryType: srcGeometry.type,\n                starts: srcGeometry.featureStarts,\n                objInfos: srcGeometry.objInfos\n            };\n            object.userData.feature = featureData;\n        }\n    }\n\n    private addGeometryObjInfos(\n        tile: Tile,\n        srcGeometry: Geometry,\n        technique: Technique,\n        object: THREE.Object3D\n    ) {\n        if (srcGeometry.objInfos === undefined || Object.keys(object.userData).length > 0) {\n            return;\n        }\n\n        if (isTerrainTechnique(technique)) {\n            if (typeof srcGeometry.objInfos![0] === \"number\") {\n                assert(false, \"Wrong attribute map type for terrain geometry\");\n                return;\n            }\n\n            const displacementMap = (srcGeometry.objInfos as DisplacementMap[])[0];\n            const tileDisplacementMap: TileDisplacementMap = {\n                tileKey: tile.tileKey,\n                texture: new THREE.DataTexture(\n                    displacementMap.buffer,\n                    displacementMap.xCountVertices,\n                    displacementMap.yCountVertices,\n                    THREE.LuminanceFormat,\n                    THREE.FloatType\n                ),\n                displacementMap\n            };\n            object.userData = tileDisplacementMap;\n        } else {\n            object.userData = srcGeometry.objInfos;\n        }\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getFadingParams(\n        displayZoomLevel: number,\n        technique: MakeTechniqueAttrs<BaseTechniqueParams>\n    ): FadingParameters {\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, displayZoomLevel)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, displayZoomLevel)\n                : FadingFeature.DEFAULT_FADE_FAR;\n        return {\n            fadeNear,\n            fadeFar\n        };\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getPolygonFadingParams(\n        displayZoomLevel: number,\n        technique: FillTechnique | ExtrudedPolygonTechnique\n    ): PolygonFadingParameters {\n        let color: string | number | undefined;\n        let colorMix = EdgeMaterial.DEFAULT_COLOR_MIX;\n\n        if (technique.lineColor !== undefined) {\n            color = getPropertyValue(technique.lineColor, displayZoomLevel);\n            if (isExtrudedPolygonTechnique(technique)) {\n                const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n                colorMix =\n                    extrudedPolygonTechnique.lineColorMix !== undefined\n                        ? extrudedPolygonTechnique.lineColorMix\n                        : EdgeMaterial.DEFAULT_COLOR_MIX;\n            }\n        }\n\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, displayZoomLevel)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, displayZoomLevel)\n                : FadingFeature.DEFAULT_FADE_FAR;\n\n        const lineFadeNear =\n            technique.lineFadeNear !== undefined\n                ? getPropertyValue(technique.lineFadeNear, displayZoomLevel)\n                : fadeNear;\n        const lineFadeFar =\n            technique.lineFadeFar !== undefined\n                ? getPropertyValue(technique.lineFadeFar, displayZoomLevel)\n                : fadeFar;\n\n        if (color === undefined) {\n            color = EdgeMaterial.DEFAULT_COLOR;\n        }\n\n        return {\n            color,\n            colorMix,\n            fadeNear,\n            fadeFar,\n            lineFadeNear,\n            lineFadeFar\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Use `ColorCache` to reuse a color specified by name and save allocation as well as\n * setup time.\n *\n * Implemented as a singleton. Do not modify colors after getting them from the `ColorCache`.\n */\nexport class ColorCache {\n    /**\n     * Return instance of `ColorCache`.\n     */\n    static get instance() {\n        return this.m_instance;\n    }\n\n    private static m_instance: ColorCache = new ColorCache();\n    private m_map: Map<string, THREE.Color> = new Map();\n\n    /**\n     * Returns the color for the given `colorCode`. This function may reuse a previously generated\n     * color, so you cannot modify the contents of the color.\n     *\n     * @param colorCode ThreeJS color code or name. You must provide a valid color code or name,\n     * as this function does not do any validation.\n     */\n    getColor(colorCode: string | number): THREE.Color {\n        if (typeof colorCode === \"number\") {\n            colorCode = \"#\" + colorCode.toString(16).padStart(6, \"0\");\n        }\n\n        let color = this.m_map.get(colorCode);\n        if (color !== undefined) {\n            return color;\n        }\n        color = new THREE.Color(colorCode);\n        this.m_map.set(colorCode, color);\n        return color;\n    }\n\n    /**\n     * Returns the number of elements in the cache.\n     */\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    /**\n     * Clears the cache. Only references to the THREE.Color are removed from the cache.\n     * Consequently, clearing the cache does not cause any negative visual impact.\n     */\n    clear(): void {\n        this.m_map.clear();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LineMarkerTechnique, Theme } from \"@here/harp-datasource-protocol\";\nimport {\n    AdditionParameters,\n    DEFAULT_TEXT_CANVAS_LAYER,\n    FontCatalog,\n    TextBufferAdditionParameters,\n    TextBufferCreationParameters,\n    TextCanvas,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport {\n    assert,\n    LoggerManager,\n    LogLevel,\n    Math2D,\n    MathUtils,\n    PerformanceTimer\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { Projection } from \"@here/harp-geoutils\";\nimport { DataSource } from \"../DataSource\";\nimport { debugContext } from \"../DebugContext\";\nimport { PickObjectType, PickResult } from \"../PickHandler\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { PoiRendererFactory } from \"../poi/PoiRendererFactory\";\nimport { IBox, LineWithBound, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { Tile } from \"../Tile\";\nimport { MapViewUtils } from \"../Utils\";\nimport { DataSourceTileList } from \"../VisibleTileSet\";\nimport { FontCatalogLoader } from \"./FontCatalogLoader\";\nimport {\n    checkReadyForPlacement,\n    computeViewDistance,\n    getMaxViewDistance,\n    isPathLabelTooSmall,\n    placeIcon,\n    PlacementResult,\n    placePathLabel,\n    placePointLabel,\n    PrePlacementResult\n} from \"./Placement\";\nimport { PlacementStats } from \"./PlacementStats\";\nimport { RenderState } from \"./RenderState\";\nimport { SimpleLineCurve, SimplePath } from \"./SimplePath\";\nimport { TextCanvasFactory } from \"./TextCanvasFactory\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\nimport { LoadingState, TextElement, TextPickResult } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport {\n    initializeDefaultOptions,\n    TextElementsRendererOptions\n} from \"./TextElementsRendererOptions\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementStateCache } from \"./TextElementStateCache\";\nimport { TextElementType } from \"./TextElementType\";\nimport { TextElementStyle, TextStyleCache } from \"./TextStyleCache\";\nimport { UpdateStats } from \"./UpdateStats\";\nimport { ViewState } from \"./ViewState\";\n\ninterface RenderParams {\n    numRenderedTextElements: number;\n    // TODO: HARP-7373. Move to update() method at the end of the frame.\n    fadeAnimationRunning: boolean;\n    time: number;\n}\n\nenum Pass {\n    PersistentLabels,\n    NewLabels\n}\n\n/**\n * Default distance scale. Will be applied if distanceScale is not defined in the technique.\n * Defines the scale that will be applied to labeled icons (icon and text) in the distance.\n */\nexport const DEFAULT_TEXT_DISTANCE_SCALE = 0.5;\n\n/**\n * Maximum number of recommended labels. If more labels are encountered, the \"overloaded\" mode is\n * set, which modifies the behavior of label placement and rendering, trying to keep delivering an\n * interactive performance. The overloaded mode should not be activated if the [[MapView]] is\n * rendering a static image (camera not moving and no animation running).\n */\nconst OVERLOAD_LABEL_LIMIT = 20000;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Default number of labels/POIs updated in a frame. They are rendered only if they fit. If the\n * camera is not moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATED_LABEL_LIMIT = 100;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for placement. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATE_TIME_LIMIT = 5;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for rendering. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_PLACE_TIME_LIMIT = 10;\n\nconst logger = LoggerManager.instance.create(\"TextElementsRenderer\", { level: LogLevel.Log });\n\n// Development flag: Enable debug print.\nconst PRINT_LABEL_DEBUG_INFO: boolean = false;\nconst updateStats = PRINT_LABEL_DEBUG_INFO ? new UpdateStats(logger) : undefined;\nconst placementStats = PRINT_LABEL_DEBUG_INFO ? new PlacementStats(logger) : undefined;\n\nconst tempPosition = new THREE.Vector3();\nconst tempScreenPosition = new THREE.Vector2();\nconst tempScreenPoints: THREE.Vector2[] = [];\nconst tempPoiScreenPosition = new THREE.Vector2();\nconst tmpTextBufferCreationParams: TextBufferCreationParameters = {};\nconst tmpAdditionParams: AdditionParameters = {};\nconst tmpBufferAdditionParams: TextBufferAdditionParameters = {};\n\nclass TileTextElements {\n    constructor(readonly tile: Tile, readonly group: TextElementGroup) {}\n}\n\nclass TextElementLists {\n    constructor(readonly lists: TileTextElements[]) {}\n\n    get priority() {\n        assert(this.lists.length > 0);\n        // All text element lists here have the same priority.\n        return this.lists[0].group.priority;\n    }\n    /**\n     * Sum up the number of elements in all lists.\n     */\n    count(): number {\n        let n = 0;\n        for (const list of this.lists) {\n            n += list.group.elements.length;\n        }\n        return n;\n    }\n}\n\nfunction checkIfTextElementsChanged(dataSourceTileList: DataSourceTileList[]) {\n    let textElementsChanged = false;\n\n    dataSourceTileList.forEach(({ renderedTiles }) => {\n        renderedTiles.forEach(tile => {\n            if (tile.textElementsChanged) {\n                tile.textElementsChanged = false;\n                textElementsChanged = true;\n            }\n        });\n    });\n\n    return textElementsChanged;\n}\n\nfunction addTextToCanvas(\n    textElement: TextElement,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    path?: THREE.Path,\n    pathOverflow?: boolean\n) {\n    tmpAdditionParams.path = path;\n    tmpAdditionParams.pathOverflow = pathOverflow;\n    tmpAdditionParams.layer = textElement.renderOrder;\n    tmpAdditionParams.letterCaseArray = textElement.glyphCaseArray;\n    tmpAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addText(textElement.glyphs!, screenPosition, tmpAdditionParams);\n}\n\nfunction addTextBufferToCanvas(\n    textElementState: TextElementState,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    fadeFactor: number,\n    scaleFactor: number\n): boolean {\n    const textElement = textElementState.element;\n    const textRenderState = textElementState.textRenderState;\n    const opacity = textRenderState!.opacity * fadeFactor * textElement.renderStyle!.opacity;\n\n    if (opacity === 0) {\n        return false;\n    }\n\n    // Compute the TextBufferObject when we know we're gonna render this label.\n    tmpTextBufferCreationParams.letterCaseArray = textElement.glyphCaseArray;\n    if (textElement.textBufferObject === undefined) {\n        textElement.textBufferObject = canvas.createTextBufferObject(\n            textElement.glyphs!,\n            tmpTextBufferCreationParams\n        );\n    }\n    const backgroundIsVisible =\n        textElement.renderStyle!.backgroundOpacity > 0 &&\n        canvas.textRenderStyle.fontSize.backgroundSize > 0;\n\n    tmpBufferAdditionParams.layer = textElement.renderOrder;\n    tmpBufferAdditionParams.position = screenPosition;\n    tmpBufferAdditionParams.scale = scaleFactor;\n    tmpBufferAdditionParams.opacity = opacity;\n    tmpBufferAdditionParams.backgroundOpacity = backgroundIsVisible\n        ? tmpBufferAdditionParams.opacity * textElement.renderStyle!.backgroundOpacity\n        : 0.0;\n    tmpBufferAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addTextBufferObject(textElement.textBufferObject!, tmpBufferAdditionParams);\n    return true;\n}\n\nfunction shouldRenderPointText(\n    labelState: TextElementState,\n    viewState: ViewState,\n    options: TextElementsRendererOptions\n): boolean {\n    const textRenderState: RenderState | undefined = labelState.textRenderState;\n    const label = labelState.element;\n    const poiInfo = label.poiInfo;\n\n    assert(label.type !== TextElementType.PathLabel);\n\n    const hasText = textRenderState !== undefined && label.text !== \"\";\n    if (!hasText) {\n        return false;\n    }\n\n    const visibleInZoomLevel =\n        poiInfo === undefined ||\n        viewState.zoomLevel === undefined ||\n        MathUtils.isClamped(\n            viewState.zoomLevel,\n            poiInfo.iconMinZoomLevel,\n            poiInfo.iconMaxZoomLevel\n        );\n    if (!visibleInZoomLevel) {\n        return false;\n    }\n\n    const poiTextMaxDistance = getMaxViewDistance(viewState, options.maxDistanceRatioForPoiLabels!);\n    const visibleAtDistance =\n        label.ignoreDistance === true ||\n        labelState.viewDistance === undefined ||\n        labelState.viewDistance < poiTextMaxDistance;\n    if (!visibleAtDistance) {\n        return false;\n    }\n\n    // Do not render text if POI cannot be rendered and is not optional.\n    return poiInfo === undefined || poiInfo.isValid === true || poiInfo.iconIsOptional !== false;\n}\n\nfunction shouldRenderPoiText(labelState: TextElementState, viewState: ViewState) {\n    // Do not actually render (just allocate space) if camera is moving and\n    // renderTextDuringMovements is not true.\n    const poiInfo = labelState.element.poiInfo;\n\n    return (\n        !viewState.cameraIsMoving ||\n        poiInfo === undefined ||\n        poiInfo.renderTextDuringMovements === true\n    );\n}\n\nexport type ViewUpdateCallback = () => void;\n\nfunction isPlacementTimeExceeded(startTime: number | undefined): boolean {\n    // startTime is set in overload mode.\n    if (startTime === undefined || OVERLOAD_PLACE_TIME_LIMIT <= 0) {\n        return false;\n    }\n    const endTime = PerformanceTimer.now();\n    const elapsedTime = endTime - startTime;\n    if (elapsedTime > OVERLOAD_PLACE_TIME_LIMIT) {\n        logger.debug(\"Placement time limit exceeded.\");\n        return true;\n    }\n    return false;\n}\n\n/**\n * @hidden\n *\n * Internal class to manage all text rendering.\n */\nexport class TextElementsRenderer {\n    private m_initialized: boolean = false;\n    private m_initPromise: Promise<void> | undefined;\n    private m_glyphLoadingCount: number = 0;\n    private m_loadPromise: Promise<any> | undefined;\n    private readonly m_options: TextElementsRendererOptions;\n\n    private readonly m_textStyleCache: TextStyleCache;\n    private m_textRenderers: TextCanvasRenderer[] = [];\n\n    private m_overlayTextElements?: TextElement[];\n\n    // TODO: Replace this for an array of textures when more fonts are in use.\n    private m_debugGlyphTextureCacheMesh?: THREE.Mesh;\n    private m_debugGlyphTextureCacheWireMesh?: THREE.LineSegments;\n\n    private m_tmpVector = new THREE.Vector2();\n    private m_overloaded: boolean = false;\n    private m_cacheInvalidated: boolean = false;\n    private m_forceNewLabelsPass: boolean = false;\n\n    private readonly m_textElementStateCache: TextElementStateCache = new TextElementStateCache();\n\n    /**\n     * Create the `TextElementsRenderer` which selects which labels should be placed on screen as\n     * a preprocessing step, which is not done every frame, and also renders the placed\n     * [[TextElement]]s every frame.\n     *\n     * @param m_viewState State of the view for which this renderer will draw text.\n     * @param m_viewCamera Camera used by the view for which this renderer will draw text.\n     * @param m_viewUpdateCallback To be called whenever the view needs to be updated.\n     * @param m_screenCollisions General 2D screen occlusion management, may be shared between\n     *     instances.\n     * @param m_screenProjector Projects 3D coordinates into screen space.\n     * @param m_textCanvasFactory To create TextCanvas instances.\n     * @param m_poiRendererFactory To create PoiRenderer instances.\n     * @param m_poiManager To prepare pois for rendering.\n     * @param m_fontCatalogLoader To load font catalogs.\n     * @param m_theme Theme defining  text styles.\n     * @param options Configuration options for the text renderer. See\n     * [[TextElementsRendererOptions]].\n     */\n    constructor(\n        private m_viewState: ViewState,\n        private m_viewCamera: THREE.Camera,\n        private m_viewUpdateCallback: ViewUpdateCallback,\n        private m_screenCollisions: ScreenCollisions,\n        private m_screenProjector: ScreenProjector,\n        private m_textCanvasFactory: TextCanvasFactory,\n        private m_poiManager: PoiManager,\n        private m_poiRendererFactory: PoiRendererFactory,\n        private m_fontCatalogLoader: FontCatalogLoader,\n        private m_theme: Theme,\n        options: TextElementsRendererOptions\n    ) {\n        this.m_textStyleCache = new TextStyleCache(this.m_theme);\n\n        this.m_options = { ...options };\n        initializeDefaultOptions(this.m_options);\n\n        this.m_textCanvasFactory.setGlyphCountLimits(\n            this.m_options.minNumGlyphs!,\n            this.m_options.maxNumGlyphs!\n        );\n    }\n\n    /**\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_options.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_options.disableFading === true;\n    }\n\n    get styleCache() {\n        return this.m_textStyleCache;\n    }\n\n    /**\n     * Render the text using the specified camera into the current canvas.\n     *\n     * @param camera Orthographic camera to use.\n     */\n    renderText(camera: THREE.OrthographicCamera) {\n        if (!this.initialized) {\n            return;\n        }\n\n        this.updateGlyphDebugMesh();\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.render(camera);\n        }\n    }\n\n    /**\n     * Forces update of text elements in the next call to [[placeText]].\n     */\n    invalidateCache() {\n        this.m_cacheInvalidated = true;\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has started a movement.\n     */\n    movementStarted() {\n        // Nothing to do (yet)\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has finished its movement.\n     */\n    movementFinished() {\n        this.invalidateCache();\n    }\n\n    /**\n     * Is `true` if number of [[TextElement]]s in visible tiles is larger than the recommended\n     * number `OVERLOAD_LABEL_LIMIT`.\n     */\n    get overloaded(): boolean {\n        return this.m_overloaded;\n    }\n\n    /**\n     * Places text elements for the current frame.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     * @param projection The view's projection.\n     * @param time Current frame time.\n     */\n    placeText(dataSourceTileList: DataSourceTileList[], projection: Projection, time: number) {\n        const tileTextElementsChanged = checkIfTextElementsChanged(dataSourceTileList);\n\n        const textElementsAvailable = this.hasOverlayText() || tileTextElementsChanged;\n        if (!this.initialize(textElementsAvailable)) {\n            return;\n        }\n\n        const updateTextElements =\n            this.m_cacheInvalidated ||\n            tileTextElementsChanged ||\n            this.m_viewState.renderedTilesChanged;\n\n        logger.debug(\n            `FRAME: ${this.m_viewState.frameNumber}, ZOOM LEVEL: ${this.m_viewState.zoomLevel}`\n        );\n\n        if (updateTextElements) {\n            this.m_textElementStateCache.clearVisited();\n            this.updateTextElements(dataSourceTileList, projection);\n        }\n        const findReplacements = updateTextElements;\n        const anyTextGroupEvicted = this.m_textElementStateCache.update(\n            time,\n            this.m_options.disableFading!,\n            findReplacements,\n            this.m_viewState.zoomLevel\n        );\n\n        this.reset();\n        this.prepopulateScreenWithBlockingElements(dataSourceTileList);\n\n        // New text elements must be placed either if text elements were updated in this frame\n        // or if any text element group was evicted. The second case happens when the group is not\n        // visited anymore and all it's elements just became invisible, which means there's newly\n        // available screen space where new text elements could be placed. A common scenario where\n        // this happens is zooming in/out: text groups from the old level may still be fading out\n        // after all groups in the new level were updated.\n        const placeNewTextElements = updateTextElements || anyTextGroupEvicted;\n        this.placeTextElements(time, placeNewTextElements);\n        this.placeOverlayTextElements();\n        this.updateTextRenderers();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        if (textElements.length === 0) {\n            return;\n        }\n        this.m_overlayTextElements =\n            this.m_overlayTextElements === undefined\n                ? textElements.slice()\n                : this.m_overlayTextElements.concat(textElements);\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_overlayTextElements = [];\n    }\n\n    /**\n     * @returns Whether there's overlay text to be rendered.\n     */\n    hasOverlayText(): boolean {\n        return this.m_overlayTextElements !== undefined && this.m_overlayTextElements.length > 0;\n    }\n\n    get overlayText(): TextElement[] | undefined {\n        return this.m_overlayTextElements;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[TextElement]]s are found, the order of the results is unspecified.\n     *\n     * Note: [[TextElement]]s with identical `featureId` or identical `userData` will only appear\n     * once in the list `pickResults`.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickResults Array filled with pick results.\n     */\n    pickTextElements(screenPosition: THREE.Vector2, pickResults: PickResult[]) {\n        const pickHandler = (pickData: any | undefined, pickObjectType: PickObjectType) => {\n            const textElement = pickData as TextElement;\n\n            if (textElement === undefined) {\n                return;\n            }\n\n            let isDuplicate = false;\n\n            if (textElement.featureId !== undefined) {\n                isDuplicate = pickResults.some(pickResult => {\n                    return (\n                        pickResult !== undefined &&\n                        pickObjectType === pickResult.type &&\n                        ((pickResult.featureId !== undefined &&\n                            pickResult.featureId === textElement.featureId) ||\n                            (pickResult.userData !== undefined &&\n                                pickResult.userData === textElement.userData))\n                    );\n                });\n\n                if (!isDuplicate) {\n                    const pickResult: TextPickResult = {\n                        type: pickObjectType,\n                        point: screenPosition,\n                        distance: 0,\n                        featureId: textElement.featureId,\n                        userData: textElement.userData,\n                        text: textElement.text\n                    };\n\n                    pickResults.push(pickResult);\n                }\n            }\n        };\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.pickText(screenPosition, (pickData: any | undefined) => {\n                pickHandler(pickData, PickObjectType.Text);\n            });\n            textRenderer.poiRenderer.pickTextElements(\n                screenPosition,\n                (pickData: any | undefined) => {\n                    pickHandler(pickData, PickObjectType.Icon);\n                }\n            );\n        }\n    }\n\n    /**\n     * `true` if any resource used by any `FontCatalog` is still loading.\n     */\n    get loading(): boolean {\n        return this.m_fontCatalogLoader.loading || this.m_glyphLoadingCount > 0;\n    }\n\n    /**\n     * Waits till all pending resources from any `FontCatalog` are loaded.\n     */\n    async waitLoaded(): Promise<boolean> {\n        const initialized = await this.waitInitialized();\n        if (!initialized) {\n            return false;\n        }\n        if (this.m_loadPromise === undefined) {\n            return false;\n        }\n        await this.m_loadPromise;\n        return true;\n    }\n\n    /**\n     * Reset the current text render states of all visible tiles. All [[TextElement]]s will fade in\n     * after that as if they have just been added.\n     */\n    clearRenderStates() {\n        this.m_textElementStateCache.clear();\n    }\n\n    /**\n     * Return memory used by all objects managed by `TextElementsRenderer`.\n     *\n     * @returns `MemoryUsage` Heap and GPU memory used by this `TextElementsRenderer`.\n     */\n    getMemoryUsage(): MapViewUtils.MemoryUsage {\n        const memoryUsage = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        for (const renderer of this.m_textRenderers) {\n            renderer.textCanvas.getMemoryUsage(memoryUsage);\n            renderer.poiRenderer.getMemoryUsage(memoryUsage);\n        }\n\n        return memoryUsage;\n    }\n\n    get initialized(): boolean {\n        return this.m_initialized;\n    }\n\n    get initializing(): boolean {\n        return this.m_initPromise !== undefined;\n    }\n\n    /**\n     * Waits until initialization is done.\n     * @returns Promise resolved to true if initialization was done, false otherwise.\n     */\n    async waitInitialized(): Promise<boolean> {\n        if (this.initialized) {\n            return true;\n        }\n\n        if (!this.initializing) {\n            return false;\n        }\n        await this.m_initPromise;\n        return true;\n    }\n\n    /**\n     * Initializes the text renderer once there's any text element available for rendering.\n     * @param textElementsAvailable Indicates whether there's any text element to be rendered.\n     * @returns Whether the text renderer is initialized.\n     */\n    private initialize(textElementsAvailable: boolean): boolean {\n        if (!this.initialized && !this.initializing && textElementsAvailable) {\n            this.initializeDefaultAssets();\n            this.m_initPromise = this.initializeTextCanvases().then(() => {\n                this.m_initialized = true;\n                this.m_initPromise = undefined;\n                this.invalidateCache(); // Force cache update after initialization.\n                this.m_viewUpdateCallback();\n            });\n        }\n        return this.initialized;\n    }\n\n    /**\n     * Reset internal state at the beginning of a frame.\n     */\n    private reset() {\n        this.m_screenCollisions.reset();\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.clear();\n            textRenderer.poiRenderer.reset();\n        }\n    }\n\n    /**\n     * Update state at the end of a frame.\n     */\n    private updateTextRenderers() {\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.poiRenderer.update();\n        }\n    }\n\n    /**\n     * Fills the screen with lines projected from world space, see [[Tile.blockingElements]].\n     * @note These boxes have highest priority, so will block all other labels.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private prepopulateScreenWithBlockingElements(dataSourceTileList: DataSourceTileList[]) {\n        const boxes: IBox[] = [];\n        dataSourceTileList.forEach(renderListEntry => {\n            const startLinePointProj = new THREE.Vector3();\n            const endLinePointProj = new THREE.Vector3();\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                for (const pathBlockingElement of tile.blockingElements) {\n                    if (pathBlockingElement.points.length < 2) {\n                        continue;\n                    }\n                    this.m_screenProjector.project3(\n                        pathBlockingElement.points[0],\n                        startLinePointProj\n                    );\n                    for (let i = 1; i < pathBlockingElement.points.length; i++) {\n                        this.m_screenProjector.project3(\n                            pathBlockingElement.points[i],\n                            endLinePointProj\n                        );\n                        const line = pathBlockingElement.screenSpaceLines[i - 1];\n                        line.start.copy(startLinePointProj);\n                        line.end.copy(endLinePointProj);\n                        const lineWithBound: LineWithBound = {\n                            minX: Math.min(startLinePointProj.x, endLinePointProj.x),\n                            maxX: Math.max(startLinePointProj.x, endLinePointProj.x),\n                            minY: Math.min(startLinePointProj.y, endLinePointProj.y),\n                            maxY: Math.max(startLinePointProj.y, endLinePointProj.y),\n                            line\n                        };\n                        boxes.push(lineWithBound);\n                        startLinePointProj.copy(endLinePointProj);\n                    }\n                }\n            }\n        });\n        this.m_screenCollisions.allocateIBoxes(boxes);\n    }\n\n    /**\n     * @returns True if whole group was processed for placement,\n     * false otherwise (e.g. placement limit reached).\n     */\n    private placeTextElementGroup(\n        groupState: TextElementGroupState,\n        renderParams: RenderParams,\n        maxNumPlacedLabels: number,\n        pass: Pass\n    ): boolean {\n        // Unvisited text elements are never placed.\n        assert(groupState.visited);\n\n        if (this.m_textRenderers.length === 0) {\n            logger.warn(\"No text renderers initialized.\");\n            return false;\n        }\n\n        const shieldGroups: number[][] = [];\n        const hiddenKinds = this.m_viewState.hiddenGeometryKinds;\n\n        for (const textElementState of groupState.textElementStates) {\n            if (pass === Pass.PersistentLabels) {\n                if (placementStats) {\n                    ++placementStats.total;\n                }\n            }\n            if (\n                maxNumPlacedLabels >= 0 &&\n                renderParams.numRenderedTextElements >= maxNumPlacedLabels\n            ) {\n                logger.debug(\"Placement label limit exceeded.\");\n                return false;\n            }\n\n            // Skip all labels that are not initialized (didn't pass early placement tests)\n            // or don't belong to this pass.\n            if (!textElementState.initialized) {\n                if (placementStats) {\n                    ++placementStats.uninitialized;\n                }\n                continue;\n            }\n            if (textElementState.viewDistance === undefined) {\n                if (placementStats) {\n                    ++placementStats.tooFar;\n                }\n                continue;\n            }\n\n            const elementVisible = textElementState.visible;\n            if (\n                (pass === Pass.PersistentLabels && !elementVisible) ||\n                (pass === Pass.NewLabels && elementVisible)\n            ) {\n                continue;\n            }\n\n            const textElement = textElementState.element;\n\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            const poiRenderer = textElementStyle.poiRenderer;\n            if (textCanvas === undefined || poiRenderer === undefined) {\n                logger.warn(\"Text canvas or poi renderer not ready.\");\n                continue;\n            }\n\n            // TODO: HARP-7648. Discard hidden kinds sooner, before placement.\n            // Check if the label should be hidden.\n            if (\n                hiddenKinds !== undefined &&\n                textElement.kind !== undefined &&\n                hiddenKinds.hasOrIntersects(textElement.kind)\n            ) {\n                continue;\n            }\n\n            const elementType = textElement.type;\n            const isPathLabel = elementType === TextElementType.PathLabel;\n\n            // For paths, check if the label may fit.\n            if (isPathLabel) {\n                if (isPathLabelTooSmall(textElement, this.m_screenProjector, tempScreenPoints)) {\n                    if (placementStats) {\n                        placementStats.numNotVisible++;\n                    }\n                    if (textElement.dbgPathTooSmall === true) {\n                        if (placementStats) {\n                            placementStats.numPathTooSmall++;\n                        }\n                    }\n                    textElementState.textRenderState!.reset();\n                    continue;\n                }\n            }\n\n            const forceNewPassOnLoaded = true;\n            if (!this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded)) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    if (placementStats) {\n                        ++placementStats.numCannotAdd;\n                    }\n                    logger.warn(\"layer glyph storage capacity exceeded.\");\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            switch (elementType) {\n                case TextElementType.PoiLabel:\n                    this.addPoiLabel(textElementState, poiRenderer, textCanvas, renderParams);\n                    break;\n                case TextElementType.LineMarker:\n                    this.addLineMarkerLabel(\n                        textElementState,\n                        poiRenderer,\n                        shieldGroups,\n                        textCanvas,\n                        renderParams\n                    );\n                    break;\n                case TextElementType.PathLabel:\n                    this.addPathLabel(textElementState, tempScreenPoints, textCanvas, renderParams);\n            }\n        }\n        return true;\n    }\n\n    private initializeGlyphs(\n        textElement: TextElement,\n        textElementStyle: TextElementStyle,\n        forceNewPassOnLoaded: boolean\n    ): boolean {\n        // Trigger the glyph load if needed.\n        if (textElement.loadingState === LoadingState.Initialized) {\n            return true;\n        }\n\n        assert(textElementStyle.textCanvas !== undefined);\n        const textCanvas = textElementStyle.textCanvas!;\n\n        if (textElement.loadingState === undefined) {\n            textElement.loadingState = LoadingState.Requested;\n\n            if (textElement.renderStyle === undefined) {\n                textElement.renderStyle = new TextRenderStyle({\n                    ...textElementStyle.renderParams,\n                    ...textElement.renderParams\n                });\n            }\n            if (textElement.layoutStyle === undefined) {\n                textElement.layoutStyle = new TextLayoutStyle({\n                    ...textElementStyle.layoutParams,\n                    ...textElement.layoutParams\n                });\n            }\n\n            if (textElement.text === \"\") {\n                textElement.loadingState = LoadingState.Loaded;\n            } else {\n                const newLoadPromise = textCanvas.fontCatalog\n                    .loadCharset(textElement.text, textElement.renderStyle)\n                    .then(() => {\n                        --this.m_glyphLoadingCount;\n                        textElement.loadingState = LoadingState.Loaded;\n                        // Ensure that text elements still loading glyphs get a chance to\n                        // be rendered if there's no text element updates in the next frames.\n                        this.m_forceNewLabelsPass =\n                            this.m_forceNewLabelsPass || forceNewPassOnLoaded;\n                        this.m_viewUpdateCallback();\n                    });\n                if (this.m_glyphLoadingCount === 0) {\n                    this.m_loadPromise = undefined;\n                }\n                ++this.m_glyphLoadingCount;\n\n                this.m_loadPromise =\n                    this.m_loadPromise === undefined\n                        ? newLoadPromise\n                        : Promise.all([this.m_loadPromise, newLoadPromise]);\n            }\n        }\n        if (textElement.loadingState === LoadingState.Loaded) {\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n            textElement.glyphCaseArray = [];\n            textElement.bounds = undefined;\n            textElement.glyphs = textCanvas.fontCatalog.getGlyphs(\n                textElement.text,\n                textCanvas.textRenderStyle,\n                textElement.glyphCaseArray\n            );\n            textElement.loadingState = LoadingState.Initialized;\n        }\n        // Return true as soon as a text element has some glyphs assigned so that it's rendered.\n        // The glyphs may be either the final ones or some temporal glyphs inherited from a\n        // predecessor as part of the text element replacement process.\n        // See TextElementState.replace().\n        return textElement.glyphs !== undefined;\n    }\n\n    private initializeDefaultAssets(): void {\n        const defaultFontCatalogName = this.m_fontCatalogLoader.initialize(\n            this.m_options.fontCatalog!\n        );\n        this.m_textStyleCache.initializeDefaultTextElementStyle(defaultFontCatalogName);\n    }\n\n    private async initializeTextCanvases(): Promise<void> {\n        const catalogCallback = (name: string, catalog: FontCatalog) => {\n            const loadedTextCanvas = this.m_textCanvasFactory.createTextCanvas(catalog);\n\n            this.m_textRenderers.push({\n                fontCatalog: name,\n                textCanvas: loadedTextCanvas,\n                poiRenderer: this.m_poiRendererFactory.createPoiRenderer(loadedTextCanvas)\n            });\n        };\n\n        return this.m_fontCatalogLoader.loadCatalogs(catalogCallback).then(() => {\n            // Find the default TextCanvas and PoiRenderer.\n            let defaultTextCanvas: TextCanvas | undefined;\n            this.m_textRenderers.forEach(textRenderer => {\n                if (defaultTextCanvas === undefined) {\n                    defaultTextCanvas = textRenderer.textCanvas;\n                }\n            });\n            const defaultPoiRenderer = this.m_poiRendererFactory.createPoiRenderer(\n                defaultTextCanvas!\n            );\n\n            this.m_textStyleCache.initializeTextElementStyles(\n                defaultPoiRenderer,\n                defaultTextCanvas!,\n                this.m_textRenderers\n            );\n        });\n    }\n\n    private updateGlyphDebugMesh() {\n        const debugGlyphs = debugContext.getValue(\"DEBUG_GLYPHS\");\n        if (debugGlyphs === undefined) {\n            return;\n        }\n\n        if (debugGlyphs && this.m_debugGlyphTextureCacheMesh === undefined) {\n            this.initializeGlyphDebugMesh();\n        }\n        assert(this.m_debugGlyphTextureCacheMesh !== undefined);\n        assert(this.m_debugGlyphTextureCacheWireMesh !== undefined);\n\n        this.m_debugGlyphTextureCacheMesh!.visible = debugGlyphs;\n        this.m_debugGlyphTextureCacheWireMesh!.visible = debugGlyphs;\n    }\n\n    private initializeGlyphDebugMesh() {\n        const defaultFontCatalog = this.m_textRenderers[0].textCanvas.fontCatalog;\n\n        // Initialize glyph-debugging mesh.\n        const planeGeometry = new THREE.PlaneGeometry(\n            defaultFontCatalog.textureSize.width / 2.5,\n            defaultFontCatalog.textureSize.height / 2.5,\n            defaultFontCatalog.textureSize.width / defaultFontCatalog.maxWidth,\n            defaultFontCatalog.textureSize.height / defaultFontCatalog.maxHeight\n        );\n        const material = new THREE.MeshBasicMaterial({\n            transparent: true,\n            depthWrite: false,\n            depthTest: false,\n            map: defaultFontCatalog.texture\n        });\n        this.m_debugGlyphTextureCacheMesh = new THREE.Mesh(planeGeometry, material);\n        this.m_debugGlyphTextureCacheMesh.renderOrder = 10000;\n        this.m_debugGlyphTextureCacheMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheMesh.name = \"glyphDebug\";\n\n        const wireframe = new THREE.WireframeGeometry(planeGeometry);\n        const wireframeMaterial = new THREE.LineBasicMaterial({\n            transparent: true,\n            color: 0x999999,\n            depthWrite: false,\n            depthTest: false\n        });\n        this.m_debugGlyphTextureCacheWireMesh = new THREE.LineSegments(\n            wireframe,\n            wireframeMaterial\n        );\n        this.m_debugGlyphTextureCacheWireMesh.renderOrder = 9999;\n        this.m_debugGlyphTextureCacheWireMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheWireMesh.name = \"glyphDebug\";\n\n        this.m_textRenderers[0].textCanvas\n            .getLayer(DEFAULT_TEXT_CANVAS_LAYER)!\n            .storage.scene.add(\n                this.m_debugGlyphTextureCacheMesh,\n                this.m_debugGlyphTextureCacheWireMesh\n            );\n    }\n\n    /**\n     * Visit all visible tiles and add/ their text elements to cache. The update of\n     * [[TextElement]]s is a time consuming process, and cannot be done every frame, but should only\n     * be done when the camera moved (a lot) of whenever the set of visible tiles change.\n     *\n     * The actually rendered [[TextElement]]s are stored internally until the next update is done\n     * to speed up rendering when no camera movement was detected.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     * @param projection The view's projection.\n     */\n    private updateTextElements(dataSourceTileList: DataSourceTileList[], projection: Projection) {\n        logger.debug(\"updateTextElements\");\n\n        if (updateStats) {\n            updateStats.clear();\n        }\n\n        this.m_textElementStateCache.clearTextCache();\n        this.m_cacheInvalidated = false;\n\n        this.checkIfOverloaded(dataSourceTileList);\n\n        // Used with tile offset to compute the x coordinate offset for tiles.\n        const updateStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        // TODO: HARP-7648. Skip all data sources that won't contain text.\n        // TODO: HARP-7651. Higher priority labels should be updated before lower priority ones\n        // across all data sources.\n        // TODO: HARP-7373. Use rendered tiles (tiles currently rendered to cover the view,\n        // including fallbacks if necessary) instead of visible tiles (target tiles that might not\n        // be decoded yet).\n        // Otherwise labels persistent when crossing a zoom level boundary will flicker (fade out\n        // and back in) due to the delay in decoding the visible tiles.\n        dataSourceTileList.forEach(tileList => {\n            this.updateTextElementsFromSource(\n                tileList.dataSource,\n                tileList.storageLevel,\n                Array.from(tileList.renderedTiles.values()),\n                projection,\n                updateStartTime\n            );\n        });\n\n        if (updateStats) {\n            updateStats.log();\n        }\n    }\n\n    private updateTextElementsFromSource(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        visibleTiles: Tile[],\n        projection: Projection,\n        updateStartTime: number | undefined\n    ) {\n        if (updateStats) {\n            updateStats.tiles += visibleTiles.length;\n        }\n        const sortedTiles = visibleTiles;\n\n        // TODO: HARP-7648. Really needed? Should it be done here or in VisibleTileSet?\n        sortedTiles.sort((a: Tile, b: Tile) => {\n            return a.tileKey.mortonCode() - b.tileKey.mortonCode();\n        });\n\n        // Prepare user text elements.\n        for (const tile of sortedTiles) {\n            this.prepareTextElementGroup(tile.userTextElements, projection);\n        }\n\n        const sortedGroups: TextElementLists[] = [];\n        this.createSortedGroupsForSorting(tileDataSource, storageLevel, sortedTiles, sortedGroups);\n\n        let numTextElementsUpdated = 0;\n\n        for (const textElementLists of sortedGroups) {\n            this.selectTextElementsToUpdateByDistance(textElementLists, projection);\n\n            // The value of updateStartTime is set if this.overloaded is true.\n            if (updateStartTime !== undefined) {\n                // If overloaded and all time is used up, exit early.\n                if (OVERLOAD_UPDATE_TIME_LIMIT > 0) {\n                    const endTime = PerformanceTimer.now();\n                    const elapsedTime = endTime - updateStartTime;\n                    if (elapsedTime > OVERLOAD_UPDATE_TIME_LIMIT) {\n                        logger.debug(\"Update time limit exceeded.\");\n                        break;\n                    }\n                }\n\n                // Try not to update too many elements. They will be checked for visibility each\n                // frame.\n                numTextElementsUpdated += textElementLists.count();\n                if (numTextElementsUpdated >= OVERLOAD_UPDATED_LABEL_LIMIT) {\n                    logger.debug(\"Update label limit exceeded.\");\n                    break;\n                }\n            }\n        }\n    }\n\n    private prepareTextElementGroup(\n        textElementGroup: TextElementGroup,\n        projection: Projection,\n        maxViewDistance?: number\n    ) {\n        if (textElementGroup.elements.length === 0) {\n            return;\n        }\n\n        const textElementSelection: TextElementFilter = (\n            textElementState: TextElementState\n        ): number | undefined => {\n            let { result, viewDistance } = checkReadyForPlacement(\n                textElementState.element,\n                this.m_viewState,\n                this.m_viewCamera,\n                this.m_poiManager,\n                projection.type,\n                maxViewDistance\n            );\n\n            if (\n                result === PrePlacementResult.Ok &&\n                !this.m_textElementStateCache.deduplicateElement(\n                    this.m_viewState.zoomLevel,\n                    textElementState\n                )\n            ) {\n                result = PrePlacementResult.Duplicate;\n                viewDistance = undefined;\n            }\n\n            if (updateStats) {\n                updateStats.totalLabels++;\n                updateStats.results[result]++;\n            }\n            return viewDistance;\n        };\n\n        const [, found] = this.m_textElementStateCache.getOrSet(\n            textElementGroup,\n            textElementSelection\n        );\n\n        if (updateStats) {\n            ++updateStats.totalGroups;\n            if (!found) {\n                ++updateStats.newGroups;\n            }\n        }\n    }\n\n    private createSortedGroupsForSorting(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        sortedTiles: Tile[],\n        sortedGroups: TextElementLists[]\n    ) {\n        if (sortedTiles.length === 0) {\n            return;\n        }\n\n        const tilesToRender: Tile[] = [];\n\n        for (const tile of sortedTiles) {\n            if (tileDataSource.shouldRenderText(storageLevel, tile.tileKey)) {\n                tilesToRender.push(tile);\n            }\n        }\n\n        const groupedPriorityLists: Map<number, TextElementLists> = new Map();\n\n        for (const tile of tilesToRender) {\n            for (const group of tile.textElementGroups.groups.values()) {\n                if (group.elements.length === 0) {\n                    continue;\n                }\n\n                const foundGroup = groupedPriorityLists.get(group.priority);\n                if (foundGroup === undefined) {\n                    groupedPriorityLists.set(\n                        group.priority,\n                        new TextElementLists([new TileTextElements(tile, group)])\n                    );\n                } else {\n                    foundGroup.lists.push(new TileTextElements(tile, group));\n                }\n            }\n        }\n\n        if (groupedPriorityLists.size === 0) {\n            return;\n        }\n\n        for (const g of groupedPriorityLists) {\n            const lists = g[1];\n            sortedGroups.push(lists);\n        }\n\n        sortedGroups.sort((a: TextElementLists, b: TextElementLists) => {\n            return b.priority - a.priority;\n        });\n\n        const printTextInfo = false;\n\n        if (PRINT_LABEL_DEBUG_INFO && printTextInfo) {\n            let outString = \"\";\n            for (const textElementLists of sortedGroups) {\n                let size = 0;\n                for (const tileTextElements of textElementLists.lists) {\n                    size += tileTextElements.group.elements.length;\n                }\n                outString += `priority ${textElementLists.priority} size: ${size}\\n`;\n            }\n            logger.log(outString);\n        }\n    }\n\n    private selectTextElementsToUpdateByDistance(\n        textElementLists: TextElementLists,\n        projection: Projection\n    ) {\n        const farDistanceLimitRatio = Math.max(\n            this.m_options.maxDistanceRatioForTextLabels!,\n            this.m_options.maxDistanceRatioForPoiLabels!\n        );\n        const maxViewDistance = getMaxViewDistance(this.m_viewState, farDistanceLimitRatio);\n\n        for (const tileTextElements of textElementLists.lists) {\n            this.prepareTextElementGroup(tileTextElements.group, projection, maxViewDistance);\n        }\n    }\n\n    private placeTextElements(time: number, placeNewTextElements: boolean) {\n        const renderParams: RenderParams = {\n            numRenderedTextElements: 0,\n            fadeAnimationRunning: false,\n            time\n        };\n\n        const placeStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        if (placementStats) {\n            placementStats.clear();\n        }\n\n        if (this.m_textElementStateCache.size === 0) {\n            logger.debug(\"Text element cache empty.\");\n            return;\n        }\n\n        const placeNew = this.m_forceNewLabelsPass || placeNewTextElements;\n        if (this.m_forceNewLabelsPass) {\n            if (!placeNewTextElements) {\n                logger.debug(\"Force new label pass\");\n            }\n            this.m_forceNewLabelsPass = false;\n        }\n        const maxNumPlacedTextElements = this.m_options.maxNumVisibleLabels!;\n\n        // TODO: HARP-7648. Potential performance improvement. Place persistent labels + rejected\n        // candidates from previous frame if there's been no placement in this one.\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        let currentPriority: number = groupStates[0].priority;\n        let currentPriorityBegin: number = 0;\n\n        for (let i = 0; i < groupStates.length; ++i) {\n            const textElementGroupState = groupStates[i];\n            if (placementStats) {\n                ++placementStats.totalGroups;\n            }\n\n            const newPriority = textElementGroupState.priority;\n            if (placeNew && currentPriority !== newPriority) {\n                // Place all new labels of the previous priority before placing the persistent\n                // labels of this priority.\n                this.placeNewTextElements(currentPriorityBegin, i, renderParams);\n                if (isPlacementTimeExceeded(placeStartTime)) {\n                    break;\n                }\n                currentPriority = newPriority;\n                currentPriorityBegin = i;\n            }\n            if (\n                !this.placeTextElementGroup(\n                    textElementGroupState,\n                    renderParams,\n                    maxNumPlacedTextElements,\n                    Pass.PersistentLabels\n                )\n            ) {\n                break;\n            }\n\n            if (isPlacementTimeExceeded(placeStartTime)) {\n                break;\n            }\n        }\n\n        if (placeNew) {\n            // Place new text elements of the last priority.\n            this.placeNewTextElements(currentPriorityBegin, groupStates.length, renderParams);\n        }\n\n        if (placementStats) {\n            placementStats.numRenderedTextElements = renderParams.numRenderedTextElements;\n            placementStats.log();\n        }\n\n        if (!this.m_options.disableFading && renderParams.fadeAnimationRunning) {\n            this.m_viewUpdateCallback();\n        }\n    }\n\n    private placeNewTextElements(\n        beginGroupIndex: number,\n        endGroupIndex: number,\n        renderParams: RenderParams\n    ) {\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        for (let i = beginGroupIndex; i < endGroupIndex; ++i) {\n            if (\n                !this.placeTextElementGroup(\n                    groupStates[i],\n                    renderParams,\n                    this.m_options.maxNumVisibleLabels!,\n                    Pass.NewLabels\n                )\n            ) {\n                break;\n            }\n        }\n    }\n\n    private placeOverlayTextElements() {\n        if (this.m_overlayTextElements === undefined || this.m_overlayTextElements.length === 0) {\n            return;\n        }\n\n        const screenSize = this.m_tmpVector.set(\n            this.m_screenProjector.width,\n            this.m_screenProjector.height\n        );\n        const screenXOrigin = -screenSize.width / 2.0;\n        const screenYOrigin = screenSize.height / 2.0;\n\n        // Place text elements one by one.\n        for (const textElement of this.m_overlayTextElements!) {\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            if (textCanvas === undefined) {\n                continue;\n            }\n\n            const forceNewPassOnLoaded = false;\n            this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded);\n\n            if (textElement.loadingState !== LoadingState.Initialized) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            // Place text.\n            let textPath;\n            if (!(textElement.type === TextElementType.PathLabel)) {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin + textElement.position.x * screenSize.width;\n                tempScreenPosition.y = screenYOrigin - textElement.position.y * screenSize.height;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                tempPosition.x = tempScreenPosition.x;\n                tempPosition.y = tempScreenPosition.y;\n                tempPosition.z = 0.0;\n                addTextToCanvas(textElement, textCanvas, tempPosition);\n            } else {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin;\n                tempScreenPosition.y = screenYOrigin;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                // Get the screen points that define the label's segments and create a path with\n                // them.\n                // TODO: HARP-7648. Optimize array allocations.\n                const screenPoints: THREE.Vector2[] = [];\n                for (const pt of textElement.path!) {\n                    const pX = tempScreenPosition.x + pt.x * screenSize.width;\n                    const pY = tempScreenPosition.y - pt.y * screenSize.height;\n                    screenPoints.push(new THREE.Vector2(pX, pY));\n                }\n                textPath = new SimplePath();\n                for (let i = 0; i < screenPoints.length - 1; ++i) {\n                    textPath.add(new THREE.LineCurve(screenPoints[i], screenPoints[i + 1]));\n                }\n                addTextToCanvas(textElement, textCanvas, tempPosition, textPath, true);\n            }\n        }\n    }\n\n    private getDistanceScalingFactor(\n        label: TextElement,\n        distance: number,\n        lookAtDistance: number\n    ): number {\n        // Distance scale is based on relation between camera focus point distance and\n        // the actual label distance. For labels close to camera look at point the scale\n        // remains unchanged, the farther is label from that point the smaller size it is\n        // rendered in screen space. This method is unaffected by near and far clipping planes\n        // distances, but may be improved by taking FOV into equation or customizing the\n        // focus point screen position based on horizont, actual ground, tilt ets.\n        let factor = lookAtDistance / distance;\n        // The label.distanceScale property defines the influence ratio at which\n        // distance affects the final scaling of label.\n        factor = 1.0 + (factor - 1.0) * label.distanceScale;\n        // Preserve the constraints\n        factor = Math.max(factor, this.m_options.labelDistanceScaleMin!);\n        factor = Math.min(factor, this.m_options.labelDistanceScaleMax!);\n        return factor;\n    }\n\n    private getDistanceFadingFactor(\n        label: TextElement,\n        state: TextElementState,\n        maxVisibilityDist: number\n    ): number {\n        let distanceFadeValue = 1.0;\n        const textDistance = state.viewDistance;\n\n        if (textDistance !== undefined && label.fadeFar !== undefined && label.fadeFar > 0.0) {\n            const fadeNear = label.fadeNear === undefined ? 0.0 : label.fadeNear;\n            const fadeFar = label.fadeFar;\n            if (fadeFar > fadeNear) {\n                distanceFadeValue =\n                    1.0 -\n                    THREE.Math.clamp(\n                        (textDistance / maxVisibilityDist - fadeNear) / (fadeFar - fadeNear),\n                        0.0,\n                        1.0\n                    );\n            }\n        }\n        return distanceFadeValue;\n    }\n\n    private addPointLabel(\n        labelState: TextElementState,\n        position: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams,\n        iconIndex?: number\n    ): boolean {\n        const pointLabel: TextElement = labelState.element;\n        const textRenderState: RenderState | undefined = labelState.textRenderState;\n\n        assert(iconIndex === undefined || labelState.iconRenderStates !== undefined);\n        const iconRenderState: RenderState =\n            iconIndex !== undefined\n                ? labelState.iconRenderStates![iconIndex]\n                : labelState.iconRenderState!;\n        assert(iconRenderState !== undefined);\n\n        // Find the label's original position.\n        tempScreenPosition.x = tempPoiScreenPosition.x = screenPosition.x;\n        tempScreenPosition.y = tempPoiScreenPosition.y = screenPosition.y;\n\n        // Scale the text depending on the label's distance to the camera.\n        const textDistance = this.m_viewState.worldCenter.distanceTo(position);\n        if (\n            pointLabel.fadeFar !== undefined &&\n            (pointLabel.fadeFar <= 0.0 ||\n                pointLabel.fadeFar * this.m_viewState.maxVisibilityDist < textDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent.\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            return false;\n        }\n        labelState.setViewDistance(textDistance);\n\n        // Check if there is need to check for screen space for the label's icon.\n        const poiInfo = pointLabel.poiInfo;\n        let iconRejected = false;\n\n        // Check if icon should be rendered at this zoomLevel\n        const renderIcon =\n            poiInfo !== undefined &&\n            MathUtils.isClamped(\n                this.m_viewState.zoomLevel,\n                poiInfo.iconMinZoomLevel,\n                poiInfo.iconMaxZoomLevel\n            ) &&\n            poiInfo!.isValid !== false;\n\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pointLabel,\n            textDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const iconReady =\n            renderIcon && poiRenderer.prepareRender(pointLabel, this.m_viewState.zoomLevel);\n\n        if (iconReady) {\n            const result = placeIcon(\n                iconRenderState,\n                poiInfo!,\n                tempPoiScreenPosition,\n                distanceScaleFactor,\n                this.m_viewState.zoomLevel,\n                this.m_screenCollisions\n            );\n            if (result === PlacementResult.Invisible) {\n                iconRenderState.reset();\n\n                if (placementStats) {\n                    ++placementStats.numNotVisible;\n                }\n                return false;\n            }\n            iconRejected = result === PlacementResult.Rejected;\n        } else if (renderIcon && poiInfo!.isValid !== false) {\n            // Ensure that text elements still loading icons get a chance to be rendered if\n            // there's no text element updates in the next frames.\n            this.m_forceNewLabelsPass = true;\n        }\n\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pointLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        const renderText = shouldRenderPointText(labelState, this.m_viewState, this.m_options);\n\n        // Render the label's text...\n        // textRenderState is always defined at this point.\n        if (renderText) {\n            const placeResult = placePointLabel(\n                labelState,\n                tempScreenPosition,\n                distanceScaleFactor,\n                textCanvas,\n                this.m_screenCollisions,\n                iconRejected,\n                tempPosition\n            );\n            if (placeResult === PlacementResult.Invisible) {\n                if (placementStats) {\n                    placementStats.numPoiTextsInvisible++;\n                }\n                labelState.reset();\n                return false;\n            }\n\n            const textRejected = placeResult === PlacementResult.Rejected;\n            if (!iconRejected) {\n                const textIsOptional: boolean =\n                    pointLabel.poiInfo !== undefined && pointLabel.poiInfo.textIsOptional === true;\n                iconRejected = textRejected && !textIsOptional;\n            }\n\n            if (textRejected) {\n                textRenderState!.startFadeOut(renderParams.time);\n            }\n\n            const textNeedsDraw =\n                (!textRejected && shouldRenderPoiText(labelState, this.m_viewState)) ||\n                textRenderState!.isFading();\n\n            if (textNeedsDraw) {\n                if (!textRejected) {\n                    textRenderState!.startFadeIn(renderParams.time);\n                }\n                renderParams.fadeAnimationRunning =\n                    renderParams.fadeAnimationRunning || textRenderState!.isFading();\n                if (\n                    addTextBufferToCanvas(\n                        labelState,\n                        textCanvas,\n                        tempPosition,\n                        distanceFadeFactor,\n                        distanceScaleFactor\n                    ) &&\n                    placementStats\n                ) {\n                    placementStats.numRenderedPoiTexts++;\n                }\n            }\n        }\n        // ... and render the icon (if any).\n        if (iconReady) {\n            if (iconRejected) {\n                iconRenderState!.startFadeOut(renderParams.time);\n            } else {\n                iconRenderState!.startFadeIn(renderParams.time);\n            }\n\n            renderParams.fadeAnimationRunning =\n                renderParams.fadeAnimationRunning || iconRenderState!.isFading();\n\n            const opacity = iconRenderState.opacity * distanceFadeFactor;\n            if (opacity > 0) {\n                // Same as for text, don't allocate screen space for an icon that's fading out so\n                // that any label blocked by it gets a chance to be placed as soon as any other\n                // surrounding new labels.\n                const allocateSpace = poiInfo!.reserveSpace !== false && !iconRejected;\n                poiRenderer.renderPoi(\n                    poiInfo!,\n                    tempPoiScreenPosition,\n                    this.m_screenCollisions,\n                    labelState.renderDistance,\n                    distanceScaleFactor,\n                    allocateSpace,\n                    opacity,\n                    this.m_viewState.zoomLevel\n                );\n\n                if (placementStats) {\n                    placementStats.numRenderedPoiIcons++;\n                }\n            }\n        }\n        renderParams.numRenderedTextElements++;\n        return true;\n    }\n\n    private addPoiLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        const poiLabel = labelState.element;\n        const worldPosition = poiLabel.points as THREE.Vector3;\n\n        // Only process labels frustum-clipped labels\n        if (this.m_screenProjector.project(worldPosition, tempScreenPosition) === undefined) {\n            return false;\n        }\n        // Add this POI as a point label.\n        return this.addPointLabel(\n            labelState,\n            worldPosition,\n            tempScreenPosition,\n            poiRenderer,\n            textCanvas,\n            renderParams\n        );\n    }\n\n    private addLineMarkerLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        shieldGroups: number[][],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): void {\n        const lineMarkerLabel = labelState.element;\n        const path = lineMarkerLabel.points as THREE.Vector3[];\n\n        // Early exit if the line marker doesn't have the necessary data.\n        const poiInfo = lineMarkerLabel.poiInfo!;\n        if (\n            path.length === 0 ||\n            !poiRenderer.prepareRender(lineMarkerLabel, this.m_viewState.zoomLevel)\n        ) {\n            return;\n        }\n\n        // Initialize the shield group for this lineMarker.\n        let shieldGroup: number[] | undefined;\n        if (poiInfo.shieldGroupIndex !== undefined) {\n            shieldGroup = shieldGroups[poiInfo.shieldGroupIndex];\n            if (shieldGroup === undefined) {\n                shieldGroup = [];\n                shieldGroups[poiInfo.shieldGroupIndex] = shieldGroup;\n            }\n        }\n\n        const lineTechnique = poiInfo.technique as LineMarkerTechnique;\n        const minDistanceSqr =\n            lineTechnique.minDistance !== undefined\n                ? lineTechnique.minDistance * lineTechnique.minDistance\n                : 0;\n\n        // Process markers (with shield groups).\n        if (minDistanceSqr > 0 && shieldGroup !== undefined) {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    // Find a suitable location for the lineMarker to be placed at.\n                    let tooClose = false;\n                    for (let j = 0; j < shieldGroup.length; j += 2) {\n                        const distanceSqr = Math2D.distSquared(\n                            shieldGroup[j],\n                            shieldGroup[j + 1],\n                            tempScreenPosition.x,\n                            tempScreenPosition.y\n                        );\n                        tooClose = distanceSqr < minDistanceSqr;\n                        if (tooClose) {\n                            break;\n                        }\n                    }\n\n                    // Place it as a point label if it's not to close to other marker in the\n                    // same shield group.\n                    if (!tooClose) {\n                        if (\n                            this.addPointLabel(\n                                labelState,\n                                point,\n                                tempScreenPosition,\n                                poiRenderer,\n                                textCanvas,\n                                renderParams,\n                                pointIndex\n                            )\n                        ) {\n                            shieldGroup.push(tempScreenPosition.x, tempScreenPosition.y);\n                        }\n                    }\n                }\n            }\n        }\n        // Process markers (without shield groups).\n        else {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    this.addPointLabel(\n                        labelState,\n                        point,\n                        tempScreenPosition,\n                        poiRenderer,\n                        textCanvas,\n                        renderParams,\n                        pointIndex\n                    );\n                }\n            }\n        }\n    }\n\n    private addPathLabel(\n        labelState: TextElementState,\n        screenPoints: THREE.Vector2[],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        // TODO: HARP-7649. Add fade out transitions for path labels.\n        const textMaxDistance = getMaxViewDistance(\n            this.m_viewState,\n            this.m_options.maxDistanceRatioForTextLabels!\n        );\n        const pathLabel = labelState.element;\n\n        // Limit the text rendering of path labels in the far distance.\n        if (\n            !(\n                pathLabel.ignoreDistance === true ||\n                labelState.viewDistance === undefined ||\n                labelState.viewDistance < textMaxDistance\n            )\n        ) {\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        if (\n            pathLabel.fadeFar !== undefined &&\n            (pathLabel.fadeFar <= 0.0 ||\n                pathLabel.fadeFar * this.m_viewState.maxVisibilityDist < labelState.renderDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        // Get the screen points that define the label's segments and create a path with\n        // them.\n        let textPath = new THREE.Path();\n        tempScreenPosition.copy(screenPoints[0]);\n        for (let i = 0; i < screenPoints.length - 1; ++i) {\n            textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i + 1]));\n        }\n        // Flip the path if the label is gonna be rendered downwards.\n        if (textPath.getPoint(0.5).x - textPath.getPoint(0.51).x > 0) {\n            tempScreenPosition.copy(screenPoints[screenPoints.length - 1]);\n            textPath = new THREE.Path();\n            for (let i = screenPoints.length - 1; i > 0; --i) {\n                textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i - 1]));\n            }\n        }\n\n        // Update the real rendering distance to have smooth fading and scaling\n        labelState.setViewDistance(computeViewDistance(this.m_viewState.worldCenter, pathLabel));\n        const textRenderDistance = -labelState.renderDistance;\n\n        // Scale the text depending on the label's distance to the camera.\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pathLabel,\n            textRenderDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const prevSize = textCanvas.textRenderStyle.fontSize.size;\n        textCanvas.textRenderStyle.fontSize.size *= distanceScaleFactor;\n\n        if (\n            placePathLabel(\n                labelState,\n                textPath,\n                tempScreenPosition,\n                textCanvas,\n                this.m_screenCollisions\n            ) !== PlacementResult.Ok\n        ) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            if (placementStats) {\n                ++placementStats.numNotVisible;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        labelState.textRenderState!.startFadeIn(renderParams.time);\n\n        let opacity = pathLabel.renderStyle!.opacity;\n\n        if (labelState.textRenderState!.isFading()) {\n            opacity *= labelState.textRenderState!.opacity;\n            renderParams.fadeAnimationRunning = true;\n        }\n\n        if (labelState.textRenderState!.opacity === 0) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            return false;\n        }\n\n        const prevOpacity = textCanvas.textRenderStyle.opacity;\n        const prevBgOpacity = textCanvas.textRenderStyle.backgroundOpacity;\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pathLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        textCanvas.textRenderStyle.opacity = opacity * distanceFadeFactor;\n        textCanvas.textRenderStyle.backgroundOpacity =\n            textCanvas.textRenderStyle.opacity * pathLabel.renderStyle!.backgroundOpacity;\n\n        tempPosition.z = labelState.renderDistance;\n\n        addTextToCanvas(pathLabel, textCanvas, tempPosition, textPath);\n        renderParams.numRenderedTextElements++;\n\n        // Restore previous style values for text elements using the same style.\n        textCanvas.textRenderStyle.fontSize.size = prevSize;\n        textCanvas.textRenderStyle.opacity = prevOpacity;\n        textCanvas.textRenderStyle.backgroundOpacity = prevBgOpacity;\n        return true;\n    }\n\n    private checkIfOverloaded(dataSourceTileList: DataSourceTileList[]): boolean {\n        // Count the number of TextElements in the scene to see if we have to switch to\n        // \"overloadMode\".\n        let numTextElementsInScene = 0;\n\n        dataSourceTileList.forEach(renderListEntry => {\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                numTextElementsInScene += tile.textElementGroups.count();\n                numTextElementsInScene += tile.userTextElements.elements.length;\n            }\n        });\n        const newOverloaded = numTextElementsInScene > OVERLOAD_LABEL_LIMIT;\n\n        if (newOverloaded && !this.m_overloaded) {\n            logger.debug(\"Overloaded Mode enabled.\");\n        }\n        this.m_overloaded = newOverloaded;\n        return this.m_overloaded;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryType, getFeatureId, Technique } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\n\nimport { MapView } from \"./MapView\";\nimport { MapViewPoints } from \"./MapViewPoints\";\nimport { RoadPicker } from \"./RoadPicker\";\nimport { RoadIntersectionData, Tile, TileFeatureData } from \"./Tile\";\n\n/**\n * Describes the general type of a picked object.\n */\nexport enum PickObjectType {\n    /**\n     * Unspecified.\n     */\n    Unspecified = 0,\n\n    /**\n     * A point object.\n     */\n    Point,\n\n    /**\n     * A line object.\n     */\n    Line,\n\n    /**\n     * An area object.\n     */\n    Area,\n\n    /**\n     * The text part of a [[TextElement]]\n     */\n    Text,\n\n    /**\n     * The Icon of a [[TextElement]].\n     */\n    Icon,\n\n    /**\n     * Any general 3D object, for example, a landmark.\n     */\n    Object3D\n}\n\n/**\n * A general pick result. You can access the details of a picked geometry from the property\n * `intersection`, which is available if a geometry was hit. If a road was hit, a [[RoadPickResult]]\n * is returned, which has additional information, but no `intersection`.\n */\nexport interface PickResult {\n    /**\n     * General type of object.\n     */\n    type: PickObjectType;\n\n    /**\n     * A 2D point in screen coordinates, or a 3D point in world coordinates.\n     */\n    point: THREE.Vector2 | THREE.Vector3;\n\n    /**\n     * Distance from the camera to the picking point; used to determine the closest object.\n     */\n    distance: number;\n\n    /**\n     * An optional feature ID of the picked object; typically applies to the Optimized Map\n     * Vector (OMV) format.\n     */\n    featureId?: number;\n\n    /**\n     * Defined for geometry only.\n     */\n    intersection?: THREE.Intersection;\n\n    /**\n     * Defined for roads only.\n     */\n    technique?: Technique;\n\n    /**\n     * Optional user data that has been defined in the picked object. This object points directly to\n     * information contained in the original [[TileFeatureData]] stored in [[MapView]], and should\n     * not be modified.\n     */\n    userData?: any;\n}\n\n/**\n * Handles the picking of scene geometry and roads.\n */\nexport class PickHandler {\n    private readonly m_plane = new THREE.Plane(new THREE.Vector3(0, 0, 1));\n    private readonly m_roadPicker?: RoadPicker;\n\n    constructor(\n        readonly mapView: MapView,\n        readonly camera: THREE.Camera,\n        public enableRoadPicking = true\n    ) {\n        if (enableRoadPicking) {\n            this.m_roadPicker = new RoadPicker(mapView);\n        }\n    }\n\n    /**\n     * The `RoadPicker` class manages picking of roads, which may not be pickable in THREE.js,\n     * since their geometry is generated in the vertex shader. The `RoadPicker` requires that\n     * all [[Tile]]s are registered before they can be picked successfully.\n     */\n    registerTile(tile: Tile): RoadIntersectionData | undefined {\n        return this.m_roadPicker !== undefined ? this.m_roadPicker.registerTile(tile) : undefined;\n    }\n\n    /**\n     * Does a raycast on all objects in the scene; useful for picking. This function is Limited to\n     * objects that THREE.js can raycast. However, any solid lines that have their geometry in the\n     * shader cannot be tested for intersection.\n     *\n     * @param x The X position in CSS/client coordinates, without the applied display ratio.\n     * @param y The Y position in CSS/client coordinates, without the applied display ratio.\n     * @returns the list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        const worldPos = this.mapView.getNormalizedScreenCoordinates(x, y);\n\n        const rayCaster = this.mapView.raycasterFromScreenPoint(x, y);\n        const pickResults: PickResult[] = [];\n\n        if (this.mapView.textElementsRenderer !== undefined) {\n            const { clientWidth, clientHeight } = this.mapView.canvas;\n            const screenX = worldPos.x * clientWidth * 0.5 * this.mapView.pixelRatio;\n            const screenY = worldPos.y * clientHeight * 0.5 * this.mapView.pixelRatio;\n            const scenePosition = new THREE.Vector2(screenX, screenY);\n            this.mapView.textElementsRenderer.pickTextElements(scenePosition, pickResults);\n        }\n\n        // calculate objects intersecting the picking ray\n        const intersects = rayCaster.intersectObjects(this.mapView.worldRootObject.children, true);\n        for (const intersect of intersects) {\n            const pickResult: PickResult = {\n                type: PickObjectType.Unspecified,\n                point: intersect.point,\n                distance: intersect.distance,\n                intersection: intersect\n            };\n\n            if (\n                intersect.object.userData === undefined ||\n                intersect.object.userData.feature === undefined\n            ) {\n                pickResults.push(pickResult);\n                continue;\n            }\n\n            const featureData: TileFeatureData = intersect.object.userData.feature;\n\n            this.addObjInfo(featureData, intersect, pickResult);\n\n            if (featureData.objInfos !== undefined) {\n                const featureId =\n                    featureData.objInfos.length === 1\n                        ? getFeatureId(featureData.objInfos[0])\n                        : undefined;\n                pickResult.featureId = featureId;\n            }\n\n            let pickObjectType: PickObjectType;\n\n            switch (featureData.geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    pickObjectType = PickObjectType.Point;\n                    break;\n                case GeometryType.Line:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.SolidLine:\n                case GeometryType.TextPath:\n                    pickObjectType = PickObjectType.Line;\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    pickObjectType = PickObjectType.Area;\n                    break;\n                case GeometryType.Object3D:\n                    pickObjectType = PickObjectType.Object3D;\n                    break;\n                default:\n                    pickObjectType = PickObjectType.Unspecified;\n            }\n\n            pickResult.type = pickObjectType;\n            pickResults.push(pickResult);\n        }\n\n        if (this.enableRoadPicking) {\n            const planeIntersectPosition = new THREE.Vector3();\n            const cameraPos = this.mapView.camera.position.clone();\n\n            rayCaster.setFromCamera(worldPos, this.mapView.camera);\n            rayCaster.ray.intersectPlane(this.m_plane, planeIntersectPosition);\n\n            this.mapView.forEachVisibleTile(tile => {\n                this.m_roadPicker!.intersectRoads(\n                    tile,\n                    cameraPos,\n                    planeIntersectPosition,\n                    pickResults\n                );\n            });\n        }\n\n        pickResults.sort((a: PickResult, b: PickResult) => {\n            return a.distance - b.distance;\n        });\n\n        return pickResults;\n    }\n\n    private addObjInfo(\n        featureData: TileFeatureData,\n        intersect: THREE.Intersection,\n        pickResult: PickResult\n    ) {\n        if (pickResult.intersection!.object instanceof MapViewPoints) {\n            pickResult.userData = featureData.objInfos![intersect.index!];\n            return;\n        } else if (\n            featureData.objInfos === undefined ||\n            featureData.starts === undefined ||\n            intersect.faceIndex === undefined\n        ) {\n            return;\n        }\n\n        if (featureData.starts.length > 1) {\n            let objInfosIndex = 0;\n            for (const polygonStartFace of featureData.starts) {\n                if (polygonStartFace > intersect.faceIndex * 3) {\n                    break;\n                }\n                objInfosIndex++;\n            }\n            pickResult.userData = featureData.objInfos[objInfosIndex - 1];\n        } else {\n            pickResult.userData = featureData.objInfos[0];\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryType,\n    Technique,\n    TextPathGeometry\n} from \"@here/harp-datasource-protocol\";\nimport { GeoBox, OrientedBox3, Projection, TileKey } from \"@here/harp-geoutils\";\nimport { assert, CachedResource, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { AnimatedExtrusionTileHandler } from \"./AnimatedExtrusionHandler\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { TileGeometryLoader } from \"./geometry/TileGeometryLoader\";\nimport { MapView } from \"./MapView\";\nimport { PathBlockingElement } from \"./PathBlockingElement\";\nimport { PerformanceStatistics } from \"./Statistics\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementGroup } from \"./text/TextElementGroup\";\nimport { TextElementGroupPriorityList } from \"./text/TextElementGroupPriorityList\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst logger = LoggerManager.instance.create(\"Tile\");\n\nexport type TileObject = THREE.Object3D & {\n    /**\n     * Distance of this object from the [[Tile]]'s center.\n     */\n    displacement?: THREE.Vector3;\n\n    /**\n     * This stores the THREE.Object3D renderOrder property, we need to back it up because we need to\n     * reduce it if the tile is used as fall back. When it is used normally, the renderOrder needs\n     * to be reset.\n     * @hidden\n     */\n    _backupRenderOrder?: number;\n};\n\ninterface DisposableObject {\n    geometry?: THREE.BufferGeometry | THREE.Geometry;\n    material?: THREE.Material[] | THREE.Material;\n}\n\n/**\n * An interface for optional feature data that is saved in a `THREE.Object3D`'s `userData`\n * property.\n */\nexport interface TileFeatureData {\n    /**\n     * The original type of geometry.\n     */\n    geometryType?: GeometryType;\n\n    /**\n     * An optional array of indices into geometry where the feature starts. The lists of IDs\n     * and starting indices (starts) must have the same size.\n     */\n    starts?: number[];\n\n    /**\n     * An optional object containing properties defined by the developer. It has the same size as\n     * the list of IDs and the starting indices (starts).\n     */\n    objInfos?: Array<{} | undefined>;\n}\n\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION = 16;\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n\n/**\n * Compute the memory footprint of `TileFeatureData`.\n */\nexport function getFeatureDataSize(featureData: TileFeatureData): number {\n    let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n    if (featureData.starts !== undefined) {\n        numBytes += featureData.starts.length * 8;\n    }\n    if (featureData.objInfos !== undefined) {\n        // 16 (estimated) bytes per objInfos\n        numBytes += featureData.objInfos.length * MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION;\n    }\n\n    return numBytes;\n}\n\n/**\n * Contains data that describes the road on a `tile`. The `RoadIntersectionData` is generated by\n * the [[RoadPicker]] class.\n *\n * @see [[RoadPicker]]\n */\nexport interface RoadIntersectionData {\n    /**\n     * Optional array of feature IDs.\n     */\n    ids: Array<number | undefined>;\n\n    /**\n     * An array of indices into the technique catalog. The lists of `techniqueIndex` and `starts`\n     * have the same size.\n     */\n    techniqueIndex: number[];\n\n    /**\n     * An array of the indices into geometry where the feature starts. The lists of IDs and\n     * starting indices (starts) have the same size.\n     */\n    starts: number[];\n\n    /**\n     * An array of widths of the roads. The lists of IDs and widths have the same size.\n     */\n    widths: Array<number | (() => number)>;\n\n    /**\n     * An array of 2D numbers that make up the road geometry.\n     */\n    positions: number[];\n\n    /**\n     * A catalog of [[Technique]]s for road lines. Allows to reconstruct the visual appearance of\n     * the identified line.\n     */\n    techniques: Technique[];\n    /**\n     * An optional object that contains properties defined by the developer. This object has the\n     * same size as the list of IDs and the starts.\n     */\n    objInfos?: Array<{} | undefined>;\n}\n\n/**\n * Compute the memory footprint of `RoadIntersectionData`.\n */\nfunction getRoadIntersectionDataSize(intersectionData: RoadIntersectionData): number {\n    let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n    // 8 bytes per techniqueIndex\n    // 8 bytes per start\n    // 8 bytes per width\n    // 8 bytes per position\n    // 100 (estimated) bytes per technique\n    const bytesPerEntry = 8 + 8 + 8 + 8 + MINIMUM_OBJECT_SIZE_ESTIMATION;\n    const numEntries = intersectionData.techniqueIndex.length;\n    numBytes += intersectionData.techniqueIndex.length * bytesPerEntry;\n\n    if (intersectionData.ids !== undefined) {\n        numBytes += numEntries * 8;\n    }\n\n    if (intersectionData.objInfos !== undefined) {\n        // 16 (estimated) bytes per objInfos\n        numBytes += numEntries * MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION;\n    }\n\n    return numBytes;\n}\n\n/**\n * Missing Typedoc\n */\nexport enum TileLoaderState {\n    Initialized,\n    Loading,\n    Loaded,\n    Decoding,\n    Ready,\n    Canceled,\n    Failed\n}\n\nexport interface ITileLoader {\n    state: TileLoaderState;\n    payload?: ArrayBufferLike | {};\n    decodedTile?: DecodedTile;\n\n    isFinished: boolean;\n\n    loadAndDecode(): Promise<TileLoaderState>;\n    waitSettled(): Promise<TileLoaderState>;\n\n    updatePriority(area: number): void;\n\n    cancel(): void;\n}\n\n/**\n * An object that contains information about resources used by a tile.\n */\nexport interface TileResourceUsage {\n    /**\n     * The estimated memory usage, in bytes.\n     */\n    estimatedMemoryUsage: number;\n    /**\n     * The amount of vertices used by a tile.\n     */\n    numVertices: number;\n    /**\n     * The amount of colors used by a tile.\n     */\n    numColors: number;\n    /**\n     * The amount of objects used by a tile.\n     */\n    numObjects: number;\n    /**\n     * The amount of geometries used by a tile.\n     */\n    numGeometries: number;\n    /**\n     * The amount of materials used by a tile.\n     */\n    numMaterials: number;\n}\n\n/**\n * Simple information about resource usage by the [[Tile]]. Heap and GPU information are\n * estimations.\n */\nexport interface TileResourceInfo {\n    /**\n     * Estimated number of bytes used on the heap.\n     */\n    heapSize: number;\n    /**\n     * Estimated number of bytes used on the GPU.\n     */\n    gpuSize: number;\n    /**\n     * Number of [[THREE.Object3D]] in this tile.\n     */\n    num3dObjects: number;\n    /**\n     * Number of [[TextElement]]s in this tile.\n     */\n    numTextElements: number;\n    /**\n     * Number of user [[TextElement]]s in this tile.\n     */\n    numUserTextElements: number;\n}\n\nexport interface TextElementIndex {\n    groupIndex: number;\n    elementIndex: number;\n}\n\n/**\n * The class that holds the tiled data for a [[DataSource]].\n */\nexport class Tile implements CachedResource {\n    /**\n     * A list of the THREE.js objects stored in this `Tile`.\n     */\n    readonly objects: TileObject[] = [];\n\n    /**\n     * The optional list of HERE TileKeys of tiles with geometries that cross\n     * the boundaries of this `Tile`.\n     */\n    readonly dependencies: string[] = new Array<string>();\n\n    /**\n     * The bounding box of this `Tile` in geocoordinates.\n     */\n    readonly geoBox: GeoBox;\n\n    /**\n     * The bounding box of this `Tile` in world coordinates.\n     */\n    readonly boundingBox = new OrientedBox3();\n\n    /**\n     * Maximum height of geometry on this tile above ground level.\n     */\n    maxGeometryHeight: number = 0;\n\n    /**\n     * A record of road data that cannot be intersected with THREE.JS, because the geometry is\n     * created in the vertex shader.\n     */\n    roadIntersectionData?: RoadIntersectionData;\n\n    /**\n     * Copyright information of this `Tile`'s data.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Keeping some stats for the individual [[Tile]]s to analyze caching behavior.\n     *\n     * The frame the [[Tile]] was last requested. This is required to know when the given [[Tile]]\n     * can be removed from the cache.\n     */\n    frameNumLastRequested: number = -1;\n\n    /**\n     * The frame the `Tile` was first visible.\n     */\n    frameNumVisible: number = -1;\n\n    /**\n     * The last frame this `Tile` has been rendered (or was in the visible set). Used to determine\n     * visibility of `Tile` at the end of a frame, if the number is the current frame number, it is\n     * visible.\n     */\n    frameNumLastVisible: number = -1;\n\n    /**\n     * After removing from cache, this is the number of frames the `Tile` was visible.\n     */\n    numFramesVisible: number = 0;\n\n    /**\n     * Version stamp of the visibility set in the [[TileManager]]. If the counter is different, the\n     * visibility of the Tile's objects has to be calculated. Optimization to reduce overhead of\n     * computing visibility.\n     */\n    visibilityCounter: number = -1;\n\n    /**\n     * @hidden\n     *\n     * Prepared text geometries optimized for display.\n     */\n    preparedTextPaths: TextPathGeometry[] | undefined;\n\n    /**\n     * @hidden\n     *\n     * Used to tell if the Tile is used temporarily as a fallback tile.\n     *\n     * levelOffset is in in the range [-quadTreeSearchDistanceUp,\n     * quadTreeSearchDistanceDown], where these values come from the\n     * [[VisibleTileSetOptions]]\n     */\n    levelOffset: number = 0;\n\n    private m_disposed: boolean = false;\n    private m_localTangentSpace = false;\n\n    private m_forceHasGeometry: boolean | undefined = undefined;\n\n    private m_tileLoader?: ITileLoader;\n    private m_decodedTile?: DecodedTile;\n    private m_tileGeometryLoader?: TileGeometryLoader;\n\n    // TODO: Delay construction of text element groups until first text element is added.\n\n    // Used for [[TextElement]]s which the developer defines. Group created with maximum priority\n    // so that user text elements are placed before others.\n    private readonly m_userTextElements = new TextElementGroup(Number.MAX_SAFE_INTEGER);\n\n    // Used for [[TextElement]]s that are stored in the data, and that are placed explicitly,\n    // fading in and out.\n    private readonly m_textElementGroups = new TextElementGroupPriorityList();\n\n    // Blocks other labels from showing.\n    private readonly m_pathBlockingElements: PathBlockingElement[] = [];\n\n    // If `true`, the text content of the [[Tile]] changed.\n    private m_textElementsChanged: boolean = false;\n\n    private m_visibleArea: number = 0;\n    private m_minElevation: number = 0;\n    private m_maxElevation: number = 0;\n\n    private m_resourceInfo: TileResourceInfo | undefined;\n\n    // List of owned textures for disposal\n    private m_ownedTextures: WeakSet<THREE.Texture> = new WeakSet();\n\n    private m_animatedExtrusionTileHandler: AnimatedExtrusionTileHandler | undefined;\n\n    private m_nextTextElementToOverlay: TextElementIndex = {\n        groupIndex: 0,\n        elementIndex: 0\n    };\n\n    /**\n     * Creates a new [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] that created this [[Tile]].\n     * @param tileKey The unique identifier for this [[Tile]]. Currently only up to level 24 is\n     * supported, because of the use of the upper bits for the offset.\n     * @param offset The optional offset, this is an integer which represents what multiple of 360\n     * degrees to shift, only useful for flat projections, hence optional.\n     * @param localTangentSpace Whether the tile geometry is in local tangent space or not.\n     */\n    constructor(\n        readonly dataSource: DataSource,\n        readonly tileKey: TileKey,\n        public offset: number = 0,\n        localTangentSpace?: boolean\n    ) {\n        this.geoBox = this.dataSource.getTilingScheme().getGeoBox(this.tileKey);\n        this.projection.projectBox(this.geoBox, this.boundingBox);\n        this.m_localTangentSpace = localTangentSpace !== undefined ? localTangentSpace : false;\n    }\n\n    /**\n     * The visibility status of the [[Tile]]. It is actually visible or planned to become visible.\n     */\n    get isVisible(): boolean {\n        // Tiles are not evaluated as invisible until the second frame they aren't requested.\n        // This happens in order to prevent that, during [[VisibleTileSet]] visibility evaluation,\n        // visible tiles that haven't yet been evaluated for the current frame are preemptively\n        // removed from [[DataSourceCache]].\n        return this.frameNumLastRequested >= this.dataSource.mapView.frameNumber - 1;\n    }\n\n    set isVisible(visible: boolean) {\n        this.frameNumLastRequested = visible ? this.dataSource.mapView.frameNumber : -1;\n    }\n\n    /**\n     * The [[Projection]] currently used by the [[MapView]].\n     */\n    get projection(): Projection {\n        return this.dataSource.projection;\n    }\n\n    /**\n     * The [[MapView]] this `Tile` belongs to.\n     */\n    get mapView(): MapView {\n        return this.dataSource.mapView;\n    }\n\n    /**\n     * Whether the data of this tile is in local tangent space or not.\n     * If the data is in local tangent space (i.e. up vector is (0,0,1) for high zoomlevels) then\n     * [[MapView]] will rotate the objects before rendering using the rotation matrix of the\n     * oriented [[boundingBox]].\n     */\n    get localTangentSpace(): boolean {\n        return this.m_localTangentSpace;\n    }\n\n    /*\n     * The size of this Tile in system memory.\n     */\n    get memoryUsage(): number {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!.heapSize;\n    }\n\n    /**\n     * The center of this `Tile` in world coordinates.\n     */\n    get center(): THREE.Vector3 {\n        return this.boundingBox.position;\n    }\n\n    /**\n     * Compute [[TileResourceInfo]] of this `Tile`. May be using a cached value. The method\n     * `invalidateResourceInfo` can be called beforehand to force a recalculation.\n     *\n     * @returns `TileResourceInfo` for this `Tile`.\n     */\n    getResourceInfo(): TileResourceInfo {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!;\n    }\n\n    /**\n     * Force invalidation of the cached [[TileResourceInfo]]. Useful after the `Tile` has been\n     * modified.\n     */\n    invalidateResourceInfo(): void {\n        this.m_resourceInfo = undefined;\n    }\n\n    /**\n     * Add ownership of a texture to this tile. The texture will be disposed if the `Tile` is\n     * disposed.\n     * @param texture Texture to be owned by the `Tile`\n     */\n    addOwnedTexture(texture: THREE.Texture): void {\n        this.m_ownedTextures.add(texture);\n    }\n\n    /**\n     * Gets the list of developer-defined [[TextElement]] in this `Tile`. This list is always\n     * rendered first.\n     */\n    get userTextElements(): TextElementGroup {\n        return this.m_userTextElements;\n    }\n\n    /**\n     * Adds a developer-defined [[TextElement]] to this `Tile`. The [[TextElement]] is always\n     * visible, if it's in the map's currently visible area.\n     *\n     * @param textElement The Text element to add.\n     */\n    addUserTextElement(textElement: TextElement) {\n        this.m_userTextElements.elements.push(textElement);\n        this.textElementsChanged = true;\n    }\n\n    /**\n     * Removes a developer-defined [[TextElement]] from this `Tile`.\n     *\n     * @param textElement A developer-defined TextElement to remove.\n     * @returns `true` if the element has been removed successfully; `false` otherwise.\n     */\n    removeUserTextElement(textElement: TextElement): boolean {\n        const foundIndex = this.m_userTextElements.elements.indexOf(textElement);\n        if (foundIndex >= 0) {\n            this.m_userTextElements.elements.splice(foundIndex, 1);\n            this.textElementsChanged = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Adds a [[TextElement]] to this `Tile`, which is added to the visible set of\n     * [[TextElement]]s based on the capacity and visibility. The [[TextElement]]'s priority\n     * controls if or when it becomes visible.\n     *\n     * To ensure that a TextElement is visible, use a high value for its priority, such as\n     * `Number.MAX_SAFE_INTEGER`. Since the number of visible TextElements is limited by the\n     * screen space, not all TextElements are visible at all times.\n     *\n     * @param textElement The TextElement to add.\n     */\n    addTextElement(textElement: TextElement) {\n        this.textElementGroups.add(textElement);\n        this.textElementsChanged = true;\n    }\n\n    /**\n     * Adds a [[PathBlockingElement]] to this `Tile`. This path has the highest priority and blocks\n     * all other labels. There maybe in future a use case to give it a priority, but as that isn't\n     * yet required, it is left to be implemented later if required.\n     * @param blockingElement Element which should block all other labels.\n     */\n    addBlockingElement(blockingElement: PathBlockingElement) {\n        this.m_pathBlockingElements.push(blockingElement);\n    }\n\n    /**\n     * Removes a [[TextElement]] from this `Tile`. For the element to be removed successfully, the\n     * priority of the [[TextElement]] has to be equal to its priority when it was added.\n     *\n     * @param textElement The TextElement to remove.\n     * @returns `true` if the TextElement has been removed successfully; `false` otherwise.\n     */\n    removeTextElement(textElement: TextElement): boolean {\n        if (this.textElementGroups.remove(textElement)) {\n            this.textElementsChanged = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Gets the current [[GroupedPriorityList]] which contains a list of all [[TextElement]]s to be\n     * selected and placed for rendering.\n     */\n    get textElementGroups(): TextElementGroupPriorityList {\n        return this.m_textElementGroups;\n    }\n\n    /**\n     * Gets the current modification state for the list of [[TextElement]]s in the `Tile`. If the\n     * value is `true` the TextElement is placed for rendering during the next frame.\n     */\n    get textElementsChanged(): boolean {\n        return this.m_textElementsChanged;\n    }\n\n    set textElementsChanged(changed: boolean) {\n        this.m_textElementsChanged = changed;\n    }\n\n    /**\n     * Returns true if the `Tile` has any text elements to render.\n     */\n    hasTextElements(): boolean {\n        return this.m_textElementGroups.count() > 0 || this.m_userTextElements.elements.length > 0;\n    }\n\n    /**\n     * Get the current blocking elements.\n     */\n    get blockingElements(): PathBlockingElement[] {\n        return this.m_pathBlockingElements;\n    }\n\n    /**\n     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare its road\n     * geometry for picking.\n     */\n    prepareTileInfo() {\n        // If the tile is not ready for display, or if it has become invisible while being loaded,\n        // for example by moving the camera, the tile is not finished and its geometry is not\n        // created. This is an optimization for fast camera movements and zooms.\n        if (this.m_decodedTile === undefined || this.m_disposed || !this.isVisible) {\n            return;\n        }\n\n        if (this.m_decodedTile.tileInfo !== undefined) {\n            this.roadIntersectionData = this.dataSource.mapView.pickHandler.registerTile(this);\n        }\n    }\n\n    /**\n     * Called before [[MapView]] starts rendering this `Tile`.\n     *\n     * @param zoomLevel The current zoom level.\n     * @returns Returns `true` if this `Tile` should be rendered.\n     */\n    willRender(_zoomLevel: number): boolean {\n        return true;\n    }\n\n    /**\n     * Called after [[MapView]] has rendered this `Tile`.\n     */\n    didRender(): void {\n        // to be overridden by subclasses\n    }\n\n    /**\n     * Estimated visible area of tile used for sorting the priorities during loading.\n     */\n    get visibleArea(): number {\n        return this.m_visibleArea;\n    }\n\n    set visibleArea(area: number) {\n        this.m_visibleArea = area;\n        if (this.tileLoader !== undefined) {\n            this.tileLoader.updatePriority(area);\n        }\n    }\n\n    /**\n     * Estimated tile's minimum elevation above the sea level.\n     * @note Negative values indicates depressions.\n     */\n    get minElevation(): number {\n        return this.m_minElevation;\n    }\n\n    set minElevation(elevation: number) {\n        this.m_minElevation = elevation;\n    }\n\n    /**\n     * Estimated maximum ground elevation above the sea level that may be found on tile.\n     * @note Negative values indicates depressions.\n     */\n    get maxElevation(): number {\n        return this.m_maxElevation;\n    }\n\n    set maxElevation(elevation: number) {\n        this.m_maxElevation = elevation;\n    }\n\n    /**\n     * Gets the decoded tile; it is removed after geometry handling.\n     */\n    get decodedTile(): DecodedTile | undefined {\n        return this.m_decodedTile;\n    }\n\n    /**\n     * Applies the decoded tile to the tile.\n     * If the geometry is empty, then the tile's forceHasGeometry flag is set.\n     * Map is updated.\n     * @param decodedTile The decoded tile to set.\n     */\n    set decodedTile(decodedTile: DecodedTile | undefined) {\n        this.m_decodedTile = decodedTile;\n        this.invalidateResourceInfo();\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        if (decodedTile.geometries.length === 0) {\n            this.forceHasGeometry(true);\n        }\n\n        if (decodedTile.boundingBox !== undefined) {\n            // If the decoder provides a more accurate bounding box than the one we computed from\n            // the flat geo box we take it instead.\n            this.boundingBox.copy(decodedTile.boundingBox);\n        }\n\n        const stats = PerformanceStatistics.instance;\n        if (stats.enabled && decodedTile.decodeTime !== undefined) {\n            stats.currentFrame.addValue(\"decode.decodingTime\", decodedTile.decodeTime);\n            stats.currentFrame.addValue(\"decode.decodedTiles\", 1);\n        }\n\n        if (decodedTile.copyrightHolderIds !== undefined) {\n            this.copyrightInfo = decodedTile.copyrightHolderIds.map(id => ({ id }));\n        }\n\n        this.dataSource.requestUpdate();\n    }\n\n    /**\n     * Remove the decodedTile when no longer needed.\n     */\n    removeDecodedTile() {\n        this.m_decodedTile = undefined;\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Called by the [[TileLoader]] after the `Tile` has finished loading its map data. Can be used\n     * to add content to the `Tile`. The [[DecodedTile]] should still be available.\n     */\n    loadingFinished() {\n        // To be used in subclasses.\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free the geometry of a `Tile` object.\n     *\n     * @param object The object that references the geometry.\n     * @returns `true` if the geometry can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectGeometry(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a `Tile` object's material.\n     *\n     * @param object The object referencing the geometry.\n     * @returns `true` if the material can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectMaterial(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a Texture that is part of a `Tile` object's material.\n     *\n     * @param texture The texture about to be disposed.\n     * @returns `true` if the texture can be disposed.\n     */\n    shouldDisposeTexture(texture: THREE.Texture): boolean {\n        return this.m_ownedTextures.has(texture);\n    }\n\n    /**\n     * Returns `true` if this `Tile` has been disposed.\n     */\n    get disposed(): boolean {\n        return this.m_disposed;\n    }\n\n    /**\n     * Gets the [[TileGeometryLoader]] that manages this tile.\n     */\n    get tileGeometryLoader(): TileGeometryLoader | undefined {\n        return this.m_tileGeometryLoader;\n    }\n\n    /**\n     * Sets the [[TileGeometryLoader]] to manage this tile.\n     *\n     * @param tileGeometryLoader A [[TileGeometryLoader]] instance to manage the geometry creation\n     *      for this tile.\n     */\n    set tileGeometryLoader(tileGeometryLoader: TileGeometryLoader | undefined) {\n        this.m_tileGeometryLoader = tileGeometryLoader;\n    }\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    get basicGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.basicGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.allGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * MapView checks if this `Tile` is ready to be rendered while culling.\n     *\n     * By default, MapView checks if the [[objects]] list is not empty. However, you can override\n     * this check by manually setting this property.\n     */\n    get hasGeometry(): boolean {\n        if (this.m_forceHasGeometry === undefined) {\n            return this.objects.length !== 0;\n        } else {\n            return this.m_forceHasGeometry;\n        }\n    }\n\n    /**\n     * Overrides the default value for [[hasGeometry]] if value is not `undefined`.\n     *\n     * @param value A new value for the [[hasGeometry]] flag.\n     */\n    forceHasGeometry(value: boolean | undefined) {\n        this.m_forceHasGeometry = value;\n    }\n\n    /**\n     * Reset the visibility counter. This will force the visibility check to be rerun on all objects\n     * in this `Tile`.\n     */\n    resetVisibilityCounter(): void {\n        this.visibilityCounter = -1;\n    }\n\n    /**\n     * Gets the [[ITileLoader]] that manages this tile.\n     */\n    get tileLoader(): ITileLoader | undefined {\n        return this.m_tileLoader;\n    }\n\n    /**\n     * Sets the [[ITileLoader]] to manage this tile.\n     *\n     * @param tileLoader A [[ITileLoader]] instance to manage the loading process for this tile.\n     */\n    set tileLoader(tileLoader: ITileLoader | undefined) {\n        this.m_tileLoader = tileLoader;\n    }\n\n    /**\n     * Loads this `Tile` geometry.\n     */\n    load() {\n        const tileLoader = this.tileLoader;\n        if (tileLoader === undefined) {\n            return;\n        }\n\n        tileLoader\n            .loadAndDecode()\n            .then(tileLoaderState => {\n                assert(tileLoaderState === TileLoaderState.Ready);\n                const decodedTile = tileLoader.decodedTile;\n                this.decodedTile = decodedTile;\n            })\n            .catch(tileLoaderState => {\n                if (\n                    tileLoaderState !== TileLoaderState.Canceled &&\n                    tileLoaderState !== TileLoaderState.Failed\n                ) {\n                    logger.error(\"Unknown error\" + tileLoaderState);\n                }\n            });\n    }\n\n    /**\n     * Handler for animation of `Tile` geometries.\n     */\n    get animatedExtrusionTileHandler(): AnimatedExtrusionTileHandler | undefined {\n        return this.m_animatedExtrusionTileHandler;\n    }\n\n    set animatedExtrusionTileHandler(handler: AnimatedExtrusionTileHandler | undefined) {\n        this.m_animatedExtrusionTileHandler = handler;\n    }\n\n    get allTextElementsOverlaid(): boolean {\n        return (\n            this.allGeometryLoaded &&\n            this.nextTextElementToOverlay.groupIndex >= this.m_textElementGroups.groups.size\n        );\n    }\n\n    get nextTextElementToOverlay(): TextElementIndex {\n        return this.m_nextTextElementToOverlay;\n    }\n\n    set nextTextElementToOverlay(index: TextElementIndex) {\n        this.m_nextTextElementToOverlay = index;\n    }\n\n    /**\n     * Frees the rendering resources allocated by this `Tile`.\n     *\n     * The default implementation of this method frees the geometries and the materials for all the\n     * reachable objects.\n     * Textures are freed if they are owned by this `Tile` (i.e. if they where created by this\n     * `Tile`or if the ownership was explicitely set to this `Tile` by [[addOwnedTexture]]).\n     */\n    clear() {\n        const disposeMaterial = (material: THREE.Material) => {\n            Object.getOwnPropertyNames(material).forEach((property: string) => {\n                const materialProperty = (material as any)[property];\n                if (materialProperty !== undefined && materialProperty instanceof THREE.Texture) {\n                    const texture = materialProperty;\n                    if (this.shouldDisposeTexture(texture)) {\n                        texture.dispose();\n                    }\n                }\n            });\n            material.dispose();\n        };\n\n        const disposeObject = (object: TileObject & DisposableObject) => {\n            if (object.geometry !== undefined && this.shouldDisposeObjectGeometry(object)) {\n                object.geometry.dispose();\n            }\n\n            if (object.material !== undefined && this.shouldDisposeObjectMaterial(object)) {\n                if (object.material instanceof Array) {\n                    object.material.forEach((material: THREE.Material | undefined) => {\n                        if (material !== undefined) {\n                            disposeMaterial(material);\n                        }\n                    });\n                } else {\n                    disposeMaterial(object.material);\n                }\n            }\n        };\n\n        this.objects.forEach((rootObject: TileObject & DisposableObject) => {\n            rootObject.traverse((object: TileObject & DisposableObject) => {\n                disposeObject(object);\n            });\n\n            disposeObject(rootObject);\n        });\n        this.objects.length = 0;\n\n        if (this.preparedTextPaths) {\n            this.preparedTextPaths = [];\n        }\n\n        if (this.m_animatedExtrusionTileHandler !== undefined) {\n            this.m_animatedExtrusionTileHandler.dispose();\n        }\n\n        this.clearTextElements();\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Removes all [[TextElement]] from the tile.\n     */\n    clearTextElements() {\n        this.textElementsChanged = this.hasTextElements();\n        this.m_pathBlockingElements.splice(0);\n        this.textElementGroups.clear();\n        this.userTextElements.elements.length = 0;\n    }\n\n    /**\n     * Disposes this `Tile`, freeing all geometries and materials for the reachable objects.\n     */\n    dispose() {\n        if (this.m_disposed) {\n            return;\n        }\n        if (this.m_tileLoader) {\n            this.m_tileLoader.cancel();\n            this.m_tileLoader = undefined;\n        }\n        if (this.m_tileGeometryLoader !== undefined) {\n            this.m_tileGeometryLoader.dispose();\n            this.m_tileGeometryLoader = undefined;\n        }\n        this.clear();\n        this.userTextElements.elements.length = 0;\n        this.m_disposed = true;\n        // Ensure that tile is removable from tile cache.\n        this.frameNumLastRequested = 0;\n    }\n\n    /**\n     * Computes the offset in the x world coordinates corresponding to this tile, based on\n     * its [[offset]].\n     * @returns The x offset.\n     */\n    computeWorldOffsetX(): number {\n        return this.projection.worldExtent(0, 0).max.x * this.offset;\n    }\n\n    private computeResourceInfo(): void {\n        let heapSize = 0;\n        let num3dObjects = 0;\n        let numTextElements = 0;\n        let numUserTextElements = 0;\n\n        const aggregatedObjSize = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        // Keep a map of the uuids of the larger objects, like Geometries, Materials and Attributes.\n        // They should be counted only once even if they are shared.\n        const visitedObjects: Map<string, boolean> = new Map();\n\n        for (const object of this.objects) {\n            if (object.visible) {\n                num3dObjects++;\n            }\n            MapViewUtils.estimateObject3dSize(object, aggregatedObjSize, visitedObjects);\n        }\n\n        for (const group of this.textElementGroups.groups) {\n            numTextElements += group[1].elements.length;\n        }\n        numUserTextElements = this.userTextElements.elements.length;\n\n        // 216 was the shallow size of a single TextElement last time it has been checked, 312 bytes\n        // was the minimum retained size of a TextElement that was not being rendered. If a\n        // TextElement is actually rendered, the size may be _much_ bigger.\n        heapSize += (numTextElements + numUserTextElements) * 312;\n\n        if (this.m_decodedTile !== undefined && this.m_decodedTile.tileInfo !== undefined) {\n            aggregatedObjSize.heapSize += this.m_decodedTile.tileInfo.numBytes;\n        }\n\n        if (this.roadIntersectionData !== undefined) {\n            heapSize += getRoadIntersectionDataSize(this.roadIntersectionData);\n        }\n\n        this.m_resourceInfo = {\n            heapSize: aggregatedObjSize.heapSize + heapSize,\n            gpuSize: aggregatedObjSize.gpuSize,\n            num3dObjects,\n            numTextElements,\n            numUserTextElements\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ExtrusionFeature, ExtrusionFeatureDefs } from \"@here/harp-materials\";\nimport { MathUtils } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames, RenderEvent } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nimport * as THREE from \"three\";\n\n/**\n * Animation states for extrusion effect\n */\nexport enum AnimatedExtrusionState {\n    None,\n    Started,\n    Playing,\n    Finished\n}\n\n/**\n * Handles animated extrusion effect of the buildings in [[MapView]].\n */\nexport class AnimatedExtrusionHandler {\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    enabled: boolean = true;\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    duration: number = 750;\n    /**\n     * If `forceEnabled` is set to `true` then `animateExtrusion` and `animateExtrusionDuration`\n     * values from [[extrudedPolygonTechnique]] will be ignored in [[Tile]] and\n     * `AnimatedExtrusionHandler.enabled` with `AnimatedExtrusionHandler.duration` will be used\n     */\n    forceEnabled: boolean = false;\n\n    private m_zoomLevelPrevious: number;\n    private m_tileHandlerMap: Map<Tile, AnimatedExtrusionTileHandler> = new Map();\n    private m_zoomDirection: number = 0;\n    private m_forceAnimatedExtrusion: boolean | undefined;\n    private m_forceAnimatedExtrusionDuration: number | undefined;\n\n    /**\n     * Creates an [[AnimatedExtrusionHandler]] in [[MapView]].\n     *\n     * @param m_mapView Instance of [[MapView]] that passes `zoomLevel`\n     * through the `zoom` property update\n     */\n    constructor(private m_mapView: MapView) {\n        this.m_zoomLevelPrevious = this.m_mapView.zoomLevel;\n    }\n\n    /**\n     * Returns direction of the last zoom event.\n     * Zoom in - positive value, zoom out - negative value\n     */\n    get zoomDirection(): number {\n        return this.m_zoomDirection;\n    }\n\n    /**\n     * [[MapView]] updates zoom level. Then [[AnimatedExtrusionTileHandler]] calculates actual\n     * extrusion ratio and trigger animation\n     */\n    set zoom(zoomLevel: number) {\n        // if zoomLevel has been changed since last render\n        if (this.m_zoomLevelPrevious !== zoomLevel) {\n            this.m_tileHandlerMap.forEach(tileHandler => {\n                if (\n                    this.m_mapView.getDataSourceByName(tileHandler.tile.dataSource.name) !==\n                    undefined\n                ) {\n                    this.m_zoomDirection = zoomLevel > this.m_zoomLevelPrevious ? 1 : -1;\n                    tileHandler.zoomLevelChanged(this.m_zoomDirection);\n                }\n            });\n            this.m_zoomLevelPrevious = zoomLevel;\n        }\n    }\n\n    /**\n     * Checks whether animated extrusion effect was forcibly turned off/on in [[MapView]]\n     */\n    get forceAnimatedExtrusion(): boolean | undefined {\n        return this.m_forceAnimatedExtrusion;\n    }\n\n    /**\n     * If set to `true` it will force the animation extrusion effect to run.\n     * In case it was set to `false` animation extrusion effect will be switched off.\n     */\n    set forceAnimatedExtrusion(animatedExtrusion: boolean | undefined) {\n        this.m_forceAnimatedExtrusion = animatedExtrusion;\n    }\n\n    /**\n     * Returns `animatedExtrusionDuration` value that was set in [[MapView]].\n     */\n    get forceAnimatedExtrusionDuration(): number | undefined {\n        return this.m_forceAnimatedExtrusionDuration;\n    }\n\n    /**\n     * If value is set, it will overlap in [[Tile]] with\n     * `animatedExtrusionDuration` property from [[ExtrudedPolygonTechnique]]\n     * and `DEFAULT_DURATION` from [[AnimatedExtrusionTileHandler]].\n     */\n    set forceAnimatedExtrusionDuration(extrusionDuration: number | undefined) {\n        this.m_forceAnimatedExtrusionDuration = extrusionDuration;\n    }\n\n    /**\n     * Adds an [[AnimatedExtrusionTileHandler]] to [[AnimatedExtrusionHandler]]\n     */\n    add(tileHandler: AnimatedExtrusionTileHandler): void {\n        this.m_tileHandlerMap.set(tileHandler.tile, tileHandler);\n    }\n\n    /**\n     * Removes tile from the list subscribed for extrusion ratio updates\n     */\n    removeTile(tile: Tile): void {\n        this.m_tileHandlerMap.delete(tile);\n    }\n\n    /**\n     * Returns first [[AnimatedExtrusionTileHandler]] existed from the list of [[Tile]]s\n     */\n    find(tileKeys: Array<TileKey | undefined>): AnimatedExtrusionTileHandler | undefined {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            for (const tileKey of tileKeys) {\n                if (\n                    tileKey !== undefined &&\n                    tileHandler[0].tileKey.mortonCode() === tileKey.mortonCode()\n                ) {\n                    return tileHandler[1];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Is `true` if any extrusion handlers are currently animating.\n     */\n    get isAnimating(): boolean {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            if (tileHandler[1].isAnimating) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Implements animated extrusion effect for the extruded objects in the [[Tile]]\n */\nexport class AnimatedExtrusionTileHandler {\n    private m_extrudedObjects: THREE.Object3D[] = [];\n    private m_animatedExtrusionRatio: number = ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    private m_animatedExtrusionState: AnimatedExtrusionState = AnimatedExtrusionState.None;\n    private m_animatedExtrusionStartTime: number | undefined = undefined;\n    private m_mapView: MapView;\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    constructor(\n        private m_tile: Tile,\n        extrudedObjects: Array<{ object: THREE.Object3D; materialFeature: boolean }>,\n        private m_animatedExtrusionDuration: number\n    ) {\n        this.m_mapView = m_tile.mapView;\n        this.m_animatedExtrusionHandler = this.m_mapView.animatedExtrusionHandler;\n\n        extrudedObjects.forEach(extrudedObject => {\n            if (extrudedObject.materialFeature) {\n                ExtrusionFeature.addRenderHelper(extrudedObject.object);\n            }\n            this.m_extrudedObjects.push(extrudedObject.object);\n        });\n\n        this.startExtrusionAnimationIfNeeded(this.m_animatedExtrusionHandler.zoomDirection);\n    }\n\n    /**\n     * Set an extrusion ratio value for the materials [[MapMeshBasicMaterial]]\n     * and [[EdgeMaterial]]. Controlled by [[AnimatedExtrusionHandler]]\n     * for extrusion animation effect.\n     */\n    set extrusionRatio(value: number) {\n        this.m_animatedExtrusionRatio = value;\n\n        this.m_extrudedObjects.forEach(object => {\n            const material = (object as THREE.Mesh | THREE.LineSegments)\n                .material as ExtrusionFeature;\n            material.extrusionRatio = this.m_animatedExtrusionRatio;\n        });\n    }\n\n    /**\n     * Returns the [[Tile]] related to [[AnimatedExtrusionTileHandler]]\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * Return the current state of animated extrusion effect\n     */\n    get animationState(): AnimatedExtrusionState {\n        return this.m_animatedExtrusionState;\n    }\n\n    /**\n     * Is `true` if this handler is currently animating.\n     */\n    get isAnimating(): boolean {\n        return this.m_animatedExtrusionState !== AnimatedExtrusionState.Finished;\n    }\n\n    /**\n     * Cancel animation and remove from [[AnimatedExtrusionHandler]]\n     */\n    dispose() {\n        this.stopExtrusionAnimation();\n        this.m_animatedExtrusionHandler.removeTile(this.m_tile);\n    }\n\n    /**\n     * Start / Stop extrusion animation if zoom level was changed\n     */\n    zoomLevelChanged(zoomDirection: number) {\n        if (\n            this.m_tile.isVisible === false &&\n            this.m_animatedExtrusionState !== AnimatedExtrusionState.None\n        ) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.None;\n            this.stopExtrusionAnimation();\n        }\n\n        if (\n            this.m_tile.isVisible === true &&\n            this.m_animatedExtrusionState === AnimatedExtrusionState.None\n        ) {\n            this.startExtrusionAnimationIfNeeded(zoomDirection);\n        }\n    }\n\n    private getChildTiles(tileKeys: TileKey[]) {\n        const result: TileKey[] = [];\n\n        tileKeys.forEach(tileKey => {\n            const childTileKeys = this.tile.dataSource.getTilingScheme().getSubTileKeys(tileKey);\n\n            for (const childTileKey of childTileKeys) {\n                result.push(childTileKey);\n            }\n        });\n        return result;\n    }\n\n    // search for the [[Tile]] with extrusion animation started\n    private startExtrusionAnimationIfNeeded(zoomDirection?: number) {\n        const {\n            quadTreeSearchDistanceUp,\n            quadTreeSearchDistanceDown\n        } = this.tile.mapView.visibleTileSet.options;\n        const tile = this.m_tile;\n        let extrusionStartTime: number | undefined;\n\n        if (zoomDirection !== undefined) {\n            let tileHandler;\n\n            // if zoom out, go down and look for a child tile\n            if (zoomDirection < 0) {\n                let nextLevelDiff = 0;\n                let tileKeys = [tile.tileKey];\n                while (\n                    quadTreeSearchDistanceDown > nextLevelDiff &&\n                    extrusionStartTime === undefined\n                ) {\n                    const childTileKeys = this.getChildTiles(tileKeys);\n                    if (childTileKeys !== undefined) {\n                        tileHandler = this.m_animatedExtrusionHandler.find(childTileKeys);\n                        if (tileHandler !== undefined) {\n                            extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                            break;\n                        }\n                        tileKeys = childTileKeys;\n                    }\n                    nextLevelDiff++;\n                }\n            }\n            // if zoom in, go up and get the parent tile\n            if (zoomDirection > 0) {\n                let nextLevelDiff = 0;\n                let tileKey = tile.tileKey;\n                while (\n                    quadTreeSearchDistanceUp > nextLevelDiff &&\n                    extrusionStartTime === undefined &&\n                    tileKey.level !== 0\n                ) {\n                    const parentTileKey = tileKey.parent();\n                    tileHandler = this.m_animatedExtrusionHandler.find([parentTileKey]);\n                    if (tileHandler !== undefined) {\n                        extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                        break;\n                    }\n                    tileKey = parentTileKey;\n                    nextLevelDiff++;\n                }\n            }\n        }\n        this.startExtrusionAnimation(extrusionStartTime);\n    }\n\n    private startExtrusionAnimation(startTime?: number): void {\n        this.m_animatedExtrusionState = AnimatedExtrusionState.Started;\n        this.m_animatedExtrusionStartTime = startTime;\n        this.animateExtrusion();\n        this.m_mapView.addEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private stopExtrusionAnimation(): void {\n        this.m_mapView.removeEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private animateExtrusion = (event?: RenderEvent) => {\n        if (this.m_animatedExtrusionState !== AnimatedExtrusionState.Playing) {\n            if (this.m_animatedExtrusionState === AnimatedExtrusionState.Started) {\n                this.m_animatedExtrusionState = AnimatedExtrusionState.Playing;\n            } else {\n                return;\n            }\n        }\n\n        const currentTime = Date.now();\n        if (\n            this.m_animatedExtrusionStartTime === undefined ||\n            this.m_animatedExtrusionStartTime <= 0\n        ) {\n            this.m_animatedExtrusionStartTime = currentTime;\n        }\n\n        const timeProgress = Math.min(\n            currentTime - this.m_animatedExtrusionStartTime,\n            this.m_animatedExtrusionDuration\n        );\n\n        this.extrusionRatio = MathUtils.easeInOutCubic(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MIN,\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX,\n            timeProgress / this.m_animatedExtrusionDuration\n        );\n\n        if (timeProgress >= this.m_animatedExtrusionDuration) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.Finished;\n            this.stopExtrusionAnimation();\n        }\n\n        this.m_tile.dataSource.requestUpdate();\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Enum log levels\n */\nexport enum LogLevel {\n    Trace,\n    Debug,\n    Log,\n    Info,\n    Warn,\n    Error\n}\n\n/**\n * Logger options to configure logger\n */\nexport class LoggerOptions {\n    enabled?: boolean;\n    level?: LogLevel;\n}\n\n/**\n * Public interface for Logger class.\n */\nexport interface ILogger extends IChannel {\n    readonly name: string;\n\n    enabled: boolean;\n\n    level: LogLevel;\n\n    /**\n     * Update logger options\n     *\n     * @param  {LoggerOptions} options Set logger options and configure internal logger.\n     */\n    update(options: LoggerOptions): void;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Resolve URI of referenced object w.r.t parent URI.\n *\n * Resolves `childUri` as it would be loaded from location specified by `parentUri`.\n *\n * If `childUri` is absolute, then it is returned unchanged.\n * If `childUri` is origin-absolute path, then only origin path is taken from `parentUri`.\n *\n * See [[baseUri]] for reference how base URL of `parentUri` is determined.\n *\n * Examples:\n *\n *     // normal case, child is sibling\n *     https://foo.com/themes/day.json + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent is \"folder\", so child is just located in this folder\n *     https://foo.com/themes/ + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent looks like leaf, so last component is stripped\n *     https://foo.com/themes + images/foo.png -> https://foo.com/images/foo.png\n *\n *     // origin-absolute URL, takes only origin from parent\n *     https://foo.com/themes/day.json + /fonts/foo.json -> https://foo.com/fonts/foo.json\n *\n * @param parentUri URI of parent resource\n * @param childUri URI of child as referenced from parent resource\n * @return `childUrl` as if anchored in location of `parentUrl`\n */\nexport function resolveReferenceUri(parentUri: string | undefined, childUri: string): string {\n    if (absoluteUrlWithOriginRe.test(childUri)) {\n        return childUri;\n    } else if (childUri.startsWith(\"/\")) {\n        const origin = getUrlOrigin(parentUri);\n        return origin + childUri;\n    } else {\n        if (childUri.startsWith(\"./\")) {\n            childUri = childUri.substr(2);\n        }\n        const parentBaseUrl = baseUrl(parentUri);\n        return parentBaseUrl + childUri;\n    }\n}\n\nconst absoluteUrlWithOriginRe = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\n\n/**\n * Returns base URL of given resource URL.\n *\n * `Url` with trailing slash are considered genuine 'locations', they are returned as is, however if\n * `url` ends with name component it is treated as \"leaf\", so last path component is removed.\n *\n * Standalone files (without any folder structure) are considered relative to `./`.\n *\n * Examples:\n * ```\n *     https://foo.com/themes/a.json -> https://foo.com/themes/\n *     https://foo.com/themes/ -> https://foo.com/themes/\n *     https://foo.com/themes -> https://foo.com/ // note, themes is treated as leaf\n *     themes/day.json -> themes/\n *     themes -> ./\n * ```\n */\nexport function baseUrl(url: string | undefined) {\n    if (url === undefined) {\n        return \"./\";\n    }\n    let idx = url.indexOf(\"#\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.indexOf(\"?\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.lastIndexOf(\"/\");\n    if (idx === -1) {\n        return \"./\";\n    } else {\n        return url.substring(0, idx + 1);\n    }\n}\n\n/**\n * Get `origin` part of URL.\n *\n * @example\n *    https://example.com/foo -> https://example.com\n *    //example.com:8080/ -> //example.com:8080\n *    file:///etc/hosts ->\n *\n * @param url input URL\n * @return origin of given URL\n */\nexport function getUrlOrigin(url: string | undefined): string {\n    if (url === undefined) {\n        return \"\";\n    }\n    const parsed = getUrlHostAndProtocol(url);\n    if (parsed.protocol === \"file:\") {\n        return \"file://\";\n    } else if (parsed.host && parsed.protocol) {\n        return parsed.protocol + \"//\" + parsed.host;\n    } else if (parsed.host) {\n        return \"//\" + parsed.host;\n    } else if (parsed.protocol) {\n        return parsed.protocol + \"//\";\n    } else {\n        return \"\";\n    }\n}\n\n/**\n * Parse `host` and `protocol` part from URL.\n */\nexport function getUrlHostAndProtocol(\n    url: string\n): {\n    protocol: string;\n    host: string;\n} {\n    const urlOriginRe = new RegExp(/^(?:([a-z]+:))?\\/\\/([^\\/]*)/, \"i\");\n\n    const match = url.match(urlOriginRe);\n    if (!match) {\n        throw new Error(`getUrlHostAndProtocol: unable to parse URL '${url}'`);\n    }\n    return {\n        protocol: match[1],\n        host: match[2]\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { applyMixinsWithoutProperties, chainCallbacks } from \"@here/harp-utils\";\nimport { insertShaderInclude } from \"./Utils\";\n\nimport * as THREE from \"three\";\n\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport extrusionShaderChunk from \"./ShaderChunks/ExtrusionChunks\";\nimport fadingShaderChunk from \"./ShaderChunks/FadingChunks\";\n\n/**\n * The MapMeshMaterials [[MapMeshBasicMaterial]] and [[MapMeshStandardMaterial]] are the standard\n * [[THREE.MeshBasicMaterial]] and [[THREE.MeshStandardMaterial]], with the addition functionality\n * of fading out the geometry between a fadeNear and fadeFar value.\n *\n * The implementation is designed around a mixin class [[FadingFeatureMixin]], which requires\n * a bit of care when adding the FadingFeature to the existing mesh classes, but it is safe to use\n * and also reduces code duplication.\n */\n\n/**\n * Parameters used when constructing a new implementor of [[FadingFeature]].\n */\nexport interface FadingFeatureParameters {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Parameters used when constructing a new implementor of [[ExtrusionFeature]].\n */\nexport interface ExtrusionFeatureParameters {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value\n     */\n    extrusionRatio?: number;\n}\n\n/**\n * Parameters used when constructing a new implementor of [[DisplacementFeature]].\n */\nexport interface DisplacementFeatureParameters {\n    /**\n     * Texture used for vertex displacement along their normals.\n     */\n    displacementMap?: THREE.Texture;\n}\n\n/**\n * Used internally.\n *\n * @hidden\n */\ninterface UnifomType {\n    value: any;\n}\n\n/**\n * Used internally.\n *\n * @hidden\n */\ninterface UniformsType {\n    [index: string]: UnifomType;\n}\n\n/**\n * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n * [0..maxVisibilityRange].\n *\n * Copy from MapViewUtils, since it cannot be accessed here because of circular dependencies.\n *\n * @param distance Distance from the camera (range: [0, 1]).\n * @param visibilityRange object describiing maximum and minimum visibility range - distances\n * from camera at which objects won't be rendered anymore.\n */\nfunction cameraToWorldDistance(distance: number, visibilityRange: ViewRanges): number {\n    return distance * visibilityRange.maximum;\n}\n\n/**\n * Material properties used from THREE, which may not be defined in the type.\n */\nexport interface HiddenThreeJSMaterialProperties {\n    needsUpdate?: boolean;\n\n    /**\n     * Used internally for material shader defines.\n     */\n    defines?: any;\n\n    /**\n     * Hidden ThreeJS value that is made public here. Required to add new uniforms to subclasses of\n     * [[THREE.MeshBasicMaterial]]/[[THREE.MeshStandardMaterial]], basically all materials that are\n     * not THREE.ShaderMaterial.\n     */\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Available in all materials in ThreeJS.\n     */\n    transparent?: boolean;\n}\n\n/**\n * Base interface for all objects that should fade in the distance. The implemntation of the actual\n * FadingFeature is done with the help of the mixon class [[FadingFeatureMixin]] and a set of\n * supporting functions in the namespace of the same name.\n */\nexport interface FadingFeature extends HiddenThreeJSMaterialProperties {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent. A value\n     * of <= 0.0 disables fading.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Base interface for all objects that should have animated extrusion effect. The implemntation of\n * the actual ExtrusionFeature is done with the help of the mixin class [[ExtrusionFeatureMixin]]\n * and a set of supporting functions in the namespace of the same name.\n */\nexport interface ExtrusionFeature extends HiddenThreeJSMaterialProperties {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value. Minimum suggested value\n     * is `0.01`\n     */\n    extrusionRatio?: number;\n}\n\nexport type DisplacementFeature = HiddenThreeJSMaterialProperties & DisplacementFeatureParameters;\n\nexport namespace DisplacementFeature {\n    /**\n     * Update the internals of the `DisplacementFeature` depending on the value of\n     * [[displacementMap]].\n     *\n     * @param displacementMaterial DisplacementFeature\n     */\n    export function updateDisplacementFeature(displacementMaterial: DisplacementFeature): void {\n        displacementMaterial.needsUpdate = true;\n\n        if (displacementMaterial.defines === undefined) {\n            displacementMaterial.defines = {};\n        }\n\n        if (displacementMaterial.displacementMap !== undefined) {\n            displacementMaterial.displacementMap.needsUpdate = true;\n            // Add this define to differentiate it internally from other MeshBasicMaterial\n            displacementMaterial.defines.USE_DISPLACEMENTMAP = \"\";\n        }\n    }\n\n    /**\n     * This function should be called on implementors of DisplacementFeature in the\n     * `onBeforeCompile` callback of that material. It adds the required code to the shaders to\n     * apply displacement maps.\n     *\n     * @param displacementMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(displacementMaterial: DisplacementFeature, shader: any) {\n        if (displacementMaterial.displacementMap === undefined) {\n            return;\n        }\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are not available for this material, so the fading shader chunks\n        // have the #ifdefs commented out.\n\n        // Create the uniforms for the shader (if not already existing), and add the new uniforms\n        // to it:\n        const uniforms = shader.uniforms as UniformsType;\n        uniforms.displacementMap = { value: displacementMaterial.displacementMap };\n        uniforms.displacementScale = { value: 1 };\n        uniforms.displacementBias = { value: 0 };\n\n        // Append the displacement map chunk to the vertex shader.\n        shader.vertexShader = shader.vertexShader.replace(\n            \"#include <skinbase_vertex>\",\n            `#include <skinbase_vertex>\n#ifndef USE_ENVMAP\n    vec3 objectNormal = vec3( normal );\n#endif`\n        );\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"uv2_pars_vertex\",\n            \"displacementmap_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"skinning_vertex\",\n            \"displacementmap_vertex\",\n            true\n        );\n    }\n}\n\nexport class DisplacementFeatureMixin implements DisplacementFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    private m_displacementMap?: THREE.Texture;\n\n    protected getDisplacementMap(): THREE.Texture | undefined {\n        return this.m_displacementMap;\n    }\n\n    protected setDisplacementMap(map: THREE.Texture | undefined) {\n        this.needsUpdate = this.needsUpdate || map !== this.m_displacementMap;\n        this.m_displacementMap = map;\n        if (this.needsUpdate) {\n            DisplacementFeature.updateDisplacementFeature(this);\n        }\n    }\n\n    /**\n     * The mixin class should call this method to register the property [[displacementMap]]\n     */\n    protected addDisplacementProperties(): void {\n        Object.defineProperty(this, \"displacementMap\", {\n            get: () => {\n                return this.getDisplacementMap();\n            },\n            set: val => {\n                this.setDisplacementMap(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the displacementMap value from the parameters to the respective properties.\n     */\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.displacementMap !== undefined) {\n                this.setDisplacementMap(params.displacementMap);\n            }\n        }\n\n        (this as any).onBeforeCompile = (shader: any) => {\n            DisplacementFeature.onBeforeCompile(this, shader);\n        };\n    }\n\n    /**\n     * Copy displacementMap from other DisplacementFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        this.setDisplacementMap(source.displacementMap);\n        return this;\n    }\n}\n\n/**\n * Namespace with support functions for implementors of `FadingFeature`.\n */\nexport namespace FadingFeature {\n    export const DEFAULT_FADE_NEAR: number = -1.0;\n    export const DEFAULT_FADE_FAR: number = -1.0;\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.fading_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, fadingShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `FadingFeature` depending on the value of [[fadeNear]]. The\n     * fading feature will be disabled if fadeFar <= 0.0.\n     *\n     * @param fadingMaterial FadingFeature\n     */\n    export function updateDistanceFadeFeature(fadingMaterial: FadingFeature): void {\n        fadingMaterial.needsUpdate = true;\n\n        if (fadingMaterial.defines === undefined) {\n            fadingMaterial.defines = {};\n        }\n\n        if (fadingMaterial.fadeFar !== undefined && fadingMaterial.fadeFar > 0.0) {\n            // Add this define to differentiate it internally from other MeshBasicMaterial\n            fadingMaterial.defines.FADING_MATERIAL = \"\";\n        }\n    }\n\n    /**\n     * This function should be called on implementors of FadingFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control fading based on view distance.\n     *\n     * @param fadingMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(fadingMaterial: FadingFeature, shader: any) {\n        if (fadingMaterial.fadeFar === undefined || fadingMaterial.fadeFar <= 0.0) {\n            return;\n        }\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are not available for this material, so the fading shader chunks\n        // have the #ifdefs commented out.\n\n        // Create the uniforms for the shader (if not already existing), and add the new uniforms\n        // to it:\n        const uniforms = shader.uniforms as UniformsType;\n        uniforms.fadeNear = { value: fadingMaterial.fadeNear };\n        uniforms.fadeFar = { value: fadingMaterial.fadeFar };\n\n        // Append the new fading shader cod directly after the fog code. This is done by adding an\n        // include directive for the fading code.\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_pars_vertex\",\n            \"fading_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_vertex\",\n            \"fading_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"fading_pars_fragment\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"fading_fragment\",\n            true\n        );\n    }\n\n    /**\n     * As threejs is rendering the transparent objects last (internally), regardless of their\n     * renderOrder value, we set the transparent value to false in the [[onAfterRenderCall]]. In\n     * [[onBeforeRender]], the function [[calculateDepthFromCameraDistance]] sets it to true if the\n     * fade distance value is less than 1.\n     *\n     * @param object [[THREE.Object3D]] to prepare for rendering.\n     * @param viewRanges The visibility ranges (clip planes and maxiumum visible distance) for\n     * actual camera setup.\n     * @param fadeNear The fadeNear value to set in the material.\n     * @param fadeFar The fadeFar value to set in the material.\n     * @param updateUniforms If `true`, the fading uniforms are set. Not rquired if material is\n     *          handling the uniforms already, like in a [[THREE.ShaderMaterial]].\n     * @param additionalCallback If defined, this function will be called before the function will\n     *          return.\n     */\n    export function addRenderHelper(\n        object: THREE.Object3D,\n        viewRanges: ViewRanges,\n        fadeNear: number | undefined,\n        fadeFar: number | undefined,\n        updateUniforms: boolean,\n        additionalCallback?: (\n            renderer: THREE.WebGLRenderer,\n            material: THREE.Material & FadingFeature\n        ) => void\n    ) {\n        // tslint:disable-next-line:no-unused-variable\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            (\n                renderer: THREE.WebGLRenderer,\n                scene: THREE.Scene,\n                camera: THREE.Camera,\n                geometry: THREE.Geometry | THREE.BufferGeometry,\n                material: THREE.Material & FadingFeature,\n                group: THREE.Group\n            ) => {\n                const fadingMaterial = material as FadingFeature;\n\n                fadingMaterial.fadeNear =\n                    fadeNear === undefined\n                        ? FadingFeature.DEFAULT_FADE_NEAR\n                        : cameraToWorldDistance(fadeNear, viewRanges);\n\n                fadingMaterial.fadeFar =\n                    fadeFar === undefined\n                        ? FadingFeature.DEFAULT_FADE_FAR\n                        : cameraToWorldDistance(fadeFar, viewRanges);\n                if (updateUniforms) {\n                    const properties = renderer.properties.get(material);\n\n                    if (\n                        properties.shader !== undefined &&\n                        properties.shader.uniforms.fadeNear !== undefined\n                    ) {\n                        properties.shader.uniforms.fadeNear.value = fadingMaterial.fadeNear;\n                        properties.shader.uniforms.fadeFar.value = fadingMaterial.fadeFar;\n                        fadingMaterial.uniformsNeedUpdate = true;\n                    }\n                }\n\n                if (additionalCallback !== undefined) {\n                    additionalCallback(renderer, material);\n                }\n            }\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `fadeNear` and\n * `fadeFar`. Thre is some special handling for the fadeNear/fadeFar properties, which get some\n * setters and getters in a way that works well with the mixin.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class FadingFeatureMixin implements FadingFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    private m_fadeNear: number = FadingFeature.DEFAULT_FADE_NEAR;\n    private m_fadeFar: number = FadingFeature.DEFAULT_FADE_FAR;\n\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected getFadeNear(): number {\n        return this.m_fadeNear;\n    }\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected setFadeNear(value: number) {\n        this.needsUpdate = this.needsUpdate || value !== this.m_fadeNear;\n        this.m_fadeNear = value;\n        if (this.needsUpdate) {\n            FadingFeature.updateDistanceFadeFeature(this);\n        }\n    }\n\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected getFadeFar(): number {\n        return this.m_fadeFar;\n    }\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected setFadeFar(value: number) {\n        this.needsUpdate = this.needsUpdate || value !== this.m_fadeFar;\n        this.m_fadeFar = value;\n        if (this.needsUpdate) {\n            FadingFeature.updateDistanceFadeFeature(this);\n        }\n    }\n\n    /**\n     * The mixin classes should call this method to register the properties [[fadeNear]] and\n     * [[fadeFar]].\n     */\n    protected addFadingProperties(): void {\n        Object.defineProperty(this, \"fadeNear\", {\n            get: () => {\n                return this.getFadeNear();\n            },\n            set: val => {\n                this.setFadeNear(val);\n            }\n        });\n        Object.defineProperty(this, \"fadeFar\", {\n            get: () => {\n                return this.getFadeFar();\n            },\n            set: val => {\n                this.setFadeFar(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the fadeNear/fadeFar values from the parameters to the respective properties.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.fadeNear !== undefined) {\n                this.setFadeNear(params.fadeNear);\n            }\n            if (params.fadeFar !== undefined) {\n                this.setFadeFar(params.fadeFar);\n            }\n        }\n\n        (this as any).onBeforeCompile = (shader: any) => {\n            FadingFeature.onBeforeCompile(this, shader);\n        };\n    }\n\n    /**\n     * Copy fadeNear/fadeFar values from other FadingFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyFadingParameters(source: FadingFeature) {\n        this.setFadeNear(\n            source.fadeNear === undefined ? FadingFeature.DEFAULT_FADE_NEAR : source.fadeNear\n        );\n        this.setFadeFar(\n            source.fadeFar === undefined ? FadingFeature.DEFAULT_FADE_FAR : source.fadeFar\n        );\n        return this;\n    }\n}\n\nexport namespace ExtrusionFeature {\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.extrusion_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, extrusionShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `ExtrusionFeature` depending on the value of [[extrusionRatio]].\n     *\n     * @param ExtrusionMaterial ExtrusionFeature\n     */\n    export function updateExtrusionFeature(extrusionMaterial: ExtrusionFeature): void {\n        extrusionMaterial.needsUpdate = true;\n\n        if (extrusionMaterial.defines === undefined) {\n            extrusionMaterial.defines = {};\n        }\n\n        if (\n            extrusionMaterial.extrusionRatio !== undefined &&\n            extrusionMaterial.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN\n        ) {\n            // Add this define to differentiate it internally from other MeshBasicMaterial\n            extrusionMaterial.defines.EXTRUSION_MATERIAL = \"\";\n        }\n    }\n\n    /**\n     * This function should be called on implementors of ExtrusionFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control extrusion.\n     *\n     * @param extrusionMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(extrusionMaterial: ExtrusionFeature, shader: any) {\n        if (extrusionMaterial.extrusionRatio === undefined) {\n            return;\n        }\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n\n        // Create the uniforms for the shader (if not already existing), and add the new uniforms\n        // to it:\n        const uniforms = shader.uniforms as UniformsType;\n        uniforms.extrusionRatio = { value: extrusionMaterial.extrusionRatio };\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"common\",\n            \"extrusion_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"begin_vertex\",\n            \"extrusion_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"extrusion_pars_fragment\"\n        );\n\n        shader.fragmentShader = shader.fragmentShader.replace(\n            \"#include <normal_fragment_begin>\",\n            \"#include <extrusion_normal_fragment_begin>\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"extrusion_fragment\",\n            true\n        );\n    }\n\n    /**\n     * Handles animated extrusion on each frame. Should be installed as respective\n     * Object3D.onBeforeRender of meshes which use animated extusion feature.\n     */\n    export function addRenderHelper(object: THREE.Object3D) {\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            ExtrusionFeature.onBeforeRender\n        );\n    }\n\n    export function onBeforeRender(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        material: THREE.Material,\n        group: THREE.Group\n    ) {\n        const extrusionMaterial = material as ExtrusionFeature;\n        const properties = renderer.properties.get(material);\n\n        if (\n            properties.shader !== undefined &&\n            properties.shader.uniforms.extrusionRatio !== undefined\n        ) {\n            properties.shader.uniforms.extrusionRatio.value =\n                extrusionMaterial.extrusionRatio || ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n            extrusionMaterial.uniformsNeedUpdate = true;\n        }\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `extrusionRatio`.\n * Thre is some special handling for the extrusionRatio property, which get some setters and\n * getters in a way that works well with the mixin.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class ExtrusionFeatureMixin implements ExtrusionFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    private m_extrusion: number = ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected getExtrusionRatio(): number {\n        return this.m_extrusion;\n    }\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected setExtrusionRatio(value: number) {\n        this.needsUpdate = this.needsUpdate || value !== this.m_extrusion;\n        this.m_extrusion = value;\n        if (this.needsUpdate) {\n            ExtrusionFeature.updateExtrusionFeature(this);\n        }\n    }\n\n    /**\n     * The mixin class should call this method to register the property [[extrusionRatio]]\n     */\n    protected addExtrusionProperties(): void {\n        Object.defineProperty(this, \"extrusionRatio\", {\n            get: () => {\n                return this.getExtrusionRatio();\n            },\n            set: val => {\n                this.setExtrusionRatio(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the extrusionRatio value from the parameters to the respective properties.\n     */\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.extrusionRatio !== undefined) {\n                this.setExtrusionRatio(params.extrusionRatio);\n            }\n        }\n\n        (this as any).onBeforeCompile = (shader: any) => {\n            ExtrusionFeature.onBeforeCompile(this, shader);\n        };\n    }\n\n    /**\n     * Copy extrusionRatio values from other ExtrusionFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyExtrusionParameters(source: ExtrusionFeature) {\n        if (source.extrusionRatio !== undefined) {\n            this.setExtrusionRatio(source.extrusionRatio);\n        }\n        return this;\n    }\n}\n\n/**\n * Subclass of [[THREE.MeshBasicMaterial]]. Adds new properties required for [[fadeNear]] and\n * [[fadeFar]]. In addition to the new properties (which update their respective uniforms), it is\n * also required to update the material in their objects [[onBeforeRender]] and [[OnAfterRender]]\n * calls, where their flag [[transparent]] is set and the internal fadeNear/fadeFar values are\n * updated to world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshBasicMaterial extends THREE.MeshBasicMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    /**\n     * Constructs a new `FadingMeshBasicMaterial`.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshBasicMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters &\n            DisplacementFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters(params);\n\n        this.addDisplacementProperties();\n        this.applyDisplacementParameters(params);\n    }\n\n    clone(): this {\n        return new MapMeshBasicMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        this.copyDisplacementParameters(source);\n        return this;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    get displacementMap(): THREE.Texture | undefined {\n        return undefined;\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    set displacementMap(value: THREE.Texture | undefined) {\n        // to be overridden\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addDisplacementProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Subclass of THREE.MeshStandardMaterial. Adds new properties required for `fadeNear` and\n * `fadeFar`. In addition to the new properties (which fill respective uniforms), it is also\n * required to update the material in their objects `onBeforeRender` and `OnAfterRender` calls,\n * where their flag `transparent` is set and the internal fadeNear/fadeFar values are updated to\n * world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshStandardMaterial extends THREE.MeshStandardMaterial\n    implements FadingFeature, ExtrusionFeature {\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Constructs a new `FadingMeshStandardMaterial`.\n     *\n     * @param params `FadingMeshStandardMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshStandardMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters(params);\n    }\n\n    clone(): this {\n        return new MapMeshStandardMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        return this;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Finish the classes MapMeshBasicMaterial and MapMeshStandardMaterial by assigning them the actual\n * implementations of the mixed in functions.\n */\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [DisplacementFeatureMixin]);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Lists supported line caps types/modes.\n */\nexport enum LineCapsModes {\n    CAPS_NONE = 0,\n    CAPS_SQUARE,\n    CAPS_ROUND,\n    CAPS_TRIANGLE_IN,\n    CAPS_TRIANGLE_OUT\n}\n\nexport default {\n    extrude_line_vert_func: `\nvec3 extrudeLine(\n        in vec3 vertexPosition,\n        in float linePosition,\n        in float lineWidth,\n        in vec4 bitangent,\n        in vec3 tangent,\n        inout vec2 uv\n    ) {\n    vec3 result = vertexPosition;\n    // Retrieve the angle between this segment and the previous one (stored in the bitangent w\n    // component).\n    float angle = bitangent.w;\n    // Extrude according to the angle between segments to properly render narrow joints...\n    if (angle != 0.0) {\n        result += uv.y * lineWidth * bitangent.xyz / cos(angle / 2.0);\n        uv.x = linePosition + uv.x * lineWidth * uv.y * tan(angle / 2.0);\n    }\n    // ... or extrude in a simple manner for segments that keep the same direction.\n    else {\n        result += uv.y * lineWidth * bitangent.xyz + uv.x * lineWidth * tangent;\n        uv.x = linePosition + uv.x * lineWidth;\n    }\n    uv.y *= lineWidth;\n    return result;\n}\n`,\n    round_edges_and_add_caps: `\n#define CAPS_NONE ${LineCapsModes.CAPS_NONE}\n#define CAPS_SQUARE ${LineCapsModes.CAPS_SQUARE}\n#define CAPS_ROUND ${LineCapsModes.CAPS_ROUND}\n#define CAPS_TRIANGLE_IN ${LineCapsModes.CAPS_TRIANGLE_IN}\n#define CAPS_TRIANGLE_OUT ${LineCapsModes.CAPS_TRIANGLE_OUT}\n\nfloat roundEdgesAndAddCaps(in vec4 coords, in vec3 range) {\n    // Compute the line's width to length ratio.\n    float widthRatio = range.y / range.x;\n\n    // Compute the inner segment distance (same for all cap mode).\n    float dist = abs(coords.y);\n    float segmentBeginMask = clamp(ceil(coords.z - coords.x), 0.0, 1.0);\n    float segmentEndMask = clamp(ceil(coords.x - coords.w), 0.0, 1.0);\n    dist = max(dist, segmentBeginMask * length(vec2((coords.x - coords.z) / widthRatio, coords.y)));\n    dist = max(dist, segmentEndMask * length(vec2((coords.x - coords.w) / widthRatio, coords.y)));\n\n    #if CAPS_MODE != CAPS_ROUND\n    // Compute the caps mask.\n    float capRangeMask = clamp(1.0 - ceil(range.z - drawRange.y), 0.0, 1.0);\n    float beginCapMask = clamp(ceil(drawRange.x - coords.x), 0.0, 1.0);\n    float endCapMask = clamp(ceil(coords.x - drawRange.y), 0.0, 1.0);\n    float capMask = capRangeMask * max(beginCapMask, endCapMask);\n\n    // Compute the outer segment distance (specific for each cap mode).\n    float capDist = max(coords.x - drawRange.y, drawRange.x - coords.x) / widthRatio;\n    #if CAPS_MODE == CAPS_NONE\n    dist = mix(dist, max(abs(coords.y), (capDist + 0.1) / 0.1), capMask);\n    #elif CAPS_MODE == CAPS_SQUARE\n    dist = mix(dist, max(abs(coords.y), capDist), capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_OUT\n    dist = mix(dist, abs(coords.y) + capDist, capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_IN\n    dist = mix(dist, max(abs(coords.y), (capDist - abs(coords.y)) + capDist), capMask);\n    #endif\n    #endif // CAPS_MODE != CAPS_ROUND\n\n    return dist;\n}\n`,\n    tile_clip_func: `\nvoid tileClip(vec2 tilePos, vec2 tileSize) {\n    if (tileSize.x > 0.0 && (tilePos.x < -tileSize.x / 2.0 || tilePos.x > tileSize.x / 2.0))\n        discard;\n    if (tileSize.y > 0.0 && (tilePos.y < -tileSize.y / 2.0 || tilePos.y > tileSize.y / 2.0))\n        discard;\n}\n`,\n    high_precision_vert_func: `\nvec3 subtractDblEyePos( const in vec3 pos ) {\n    vec3 t1 = positionLow - u_eyepos_lowpart;\n    vec3 e = t1 - positionLow;\n    vec3 t2 = ((-u_eyepos_lowpart - e) + (positionLow - (t1 - e))) + pos - u_eyepos;\n    vec3 high_delta = t1 + t2;\n    vec3 low_delta = t2 - (high_delta - t1);\n    return (high_delta + low_delta);\n}\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { assert } from \"@here/harp-utils\";\nimport { Color } from \"three\";\nimport { ColorUtils } from \"./ColorUtils\";\n\nconst tmpColor = new Color();\n\n/**\n * Enumeration of supported string encoded numerals.\n */\nexport enum StringEncodedNumeralType {\n    Meters,\n    Pixels,\n    Hex,\n    RGB,\n    RGBA,\n    HSL\n}\n\n/**\n * Interface containing information about a [[StringEncodedNumeral]] format, component size and\n * evaluation.\n */\nexport interface StringEncodedNumeralFormat {\n    readonly type: StringEncodedNumeralType;\n    readonly size: number;\n    readonly regExp: RegExp;\n    mask?: number;\n    decoder: (encodedValue: string, target: number[]) => boolean;\n}\nconst StringEncodedMeters: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Meters,\n    size: 1,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))m$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedMeters.regExp.exec(encodedValue);\n        return match ? (target[0] = Number(match[1])) !== undefined : false;\n    }\n};\nconst StringEncodedPixels: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Pixels,\n    size: 1,\n    mask: 1.0,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))px$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedPixels.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        target[0] = Number(match[1]);\n        return true;\n    }\n};\nconst StringEncodedHex: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Hex,\n    size: 4,\n    regExp: /^\\#((?:[0-9A-Fa-f][0-9A-Fa-f]){3,4}|[0-9A-Fa-f]{3,4})$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedHex.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        const hex = match[1];\n        const size = hex.length;\n        // Only few sizes are possible for given reg-exp.\n        assert(\n            size === 3 || size === 4 || size === 6 || size === 8,\n            `Matched incorrect hex format: ${encodedValue}`\n        );\n        // Note that we simply ignore alpha channel value.\n        // TODO: To be resolved with HARP-7517\n        if (size === 3 || size === 4) {\n            // #RGB or #RGBA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n            target[1] = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n            target[2] = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n            target[3] = size === 4 ? parseInt(hex.charAt(3) + hex.charAt(3), 16) / 255 : 1;\n        } else if (size === 6 || size === 8) {\n            // #RRGGBB or #RRGGBBAA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n            target[1] = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n            target[2] = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n            target[3] = size === 8 ? parseInt(hex.charAt(6) + hex.charAt(7), 16) / 255 : 1;\n        }\n        return true;\n    }\n};\nconst StringEncodedRGB: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGB,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgb\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGB.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        return true;\n    }\n};\nconst StringEncodedRGBA: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGBA,\n    size: 4,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgba\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:(0(?:\\.[0-9]+)?|1(?:\\.0+)?)) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGBA.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        target[3] = parseFloat(channels[4]);\n        return true;\n    }\n};\nconst StringEncodedHSL: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.HSL,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^hsl\\( ?((?:[0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-9]{1,2}|3[0-5][0-9]|360)), ?(?:([0-9]|[1-9][0-9]|100)%), ?(?:([0-9]|[1-9][0-9]|100)%) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedHSL.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        tmpColor.setHSL(\n            parseInt(channels[1], 10) / 360,\n            parseInt(channels[2], 10) / 100,\n            parseInt(channels[3], 10) / 100\n        );\n        target[0] = tmpColor.r;\n        target[1] = tmpColor.g;\n        target[2] = tmpColor.b;\n        return true;\n    }\n};\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing sizes, lengths and distances.\n */\nexport const StringEncodedMetricFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedMeters,\n    StringEncodedPixels\n];\n\nconst StringEncodedMetricFormatMaxSize = StringEncodedMetricFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing color data.\n */\nexport const StringEncodedColorFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedHex,\n    StringEncodedRGB,\n    StringEncodedRGBA,\n    StringEncodedHSL\n];\n\nconst StringEncodedColorFormatMaxSize = StringEncodedColorFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of supported [[StringEncodedNumeralFormat]]s (intended to be indexed with\n * [[StringEncodedNumeralType]] enum).\n */\nexport const StringEncodedNumeralFormats: StringEncodedNumeralFormat[] = [\n    ...StringEncodedMetricFormats,\n    ...StringEncodedColorFormats\n];\n\nexport const StringEncodedNumeralFormatMaxSize = Math.max(\n    StringEncodedColorFormatMaxSize,\n    StringEncodedMetricFormatMaxSize\n);\n\nconst tmpBuffer: number[] = new Array(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Parse string encoded numeral values using all known [[StringEncodedNumeralFormats]].\n *\n * @param numeral The string representing numeric value.\n * @param pixelToMeters The ratio used to convert from meters to pixels (default 1.0).\n * @returns Number parsed or __undefined__ if non of the numeral patterns matches the expression\n * provided in [[numeral]].\n */\nexport function parseStringEncodedNumeral(\n    numeral: string,\n    pixelToMeters: number = 1.0\n): number | undefined {\n    let result: number | undefined;\n    const formatMatch = (format: StringEncodedNumeralFormat) => {\n        if (format.decoder(numeral, tmpBuffer)) {\n            switch (format.type) {\n                case StringEncodedNumeralType.Meters:\n                    result = tmpBuffer[0];\n                    break;\n                case StringEncodedNumeralType.Pixels:\n                    result = tmpBuffer[0] * pixelToMeters;\n                    break;\n                case StringEncodedNumeralType.Hex:\n                case StringEncodedNumeralType.RGBA:\n                    result = ColorUtils.getHexFromRgba(\n                        tmpBuffer[0],\n                        tmpBuffer[1],\n                        tmpBuffer[2],\n                        tmpBuffer[3]\n                    );\n                    break;\n                case StringEncodedNumeralType.RGB:\n                case StringEncodedNumeralType.HSL:\n                    result = ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n                    break;\n                default:\n                    result = tmpBuffer[0];\n                    break;\n            }\n            return true;\n        }\n        return false;\n    };\n    StringEncodedNumeralFormats.some(formatMatch);\n    return result;\n}\n\n/**\n * Parse string encoded color value using all known [[StringEncodedColorFormats]].\n *\n * @param color The string encoded color expression (i.e. '#FFF', 'rgb(255, 0, 0)', etc.).\n * @returns The color parsed or __undefined__ if non of the known representations matches\n * the expression provided in [[color]].\n */\nexport function parseStringEncodedColor(color: string): number | undefined {\n    const matchedFormat = matchFormat(StringEncodedColorFormats, color, tmpBuffer);\n    if (matchedFormat === undefined) {\n        return undefined;\n    }\n    switch (matchedFormat.type) {\n        case StringEncodedNumeralType.Hex:\n        case StringEncodedNumeralType.RGBA:\n            return ColorUtils.getHexFromRgba(\n                tmpBuffer[0],\n                tmpBuffer[1],\n                tmpBuffer[2],\n                tmpBuffer[3]\n            );\n        case StringEncodedNumeralType.RGB:\n        case StringEncodedNumeralType.HSL:\n            return ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n        default:\n            return tmpBuffer[0];\n    }\n}\n\nfunction matchFormat(\n    formats: StringEncodedNumeralFormat[],\n    numeral: string,\n    result: number[]\n): StringEncodedNumeralFormat | undefined {\n    return formats.find(format => {\n        return format.decoder(numeral, result) ? true : false;\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    isTextureBuffer,\n    LineTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    PolygonalTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams,\n    TextureCoordinateType\n} from \"./TechniqueParams\";\n\nimport { Expr, JsonExpr } from \"./Expr\";\nimport { InterpolatedProperty, InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\nimport {\n    AttrScope,\n    mergeTechniqueDescriptor,\n    TechniqueDescriptor,\n    TechniqueDescriptorRegistry\n} from \"./TechniqueDescriptor\";\n/**\n * Names of the supported texture properties.\n */\nexport const TEXTURE_PROPERTY_KEYS = [\n    \"map\",\n    \"normalMap\",\n    \"displacementMap\",\n    \"roughnessMap\",\n    \"emissiveMap\",\n    \"alphaMap\",\n    \"metalnessMap\",\n    \"bumpMap\"\n];\n\n/**\n * Names of the properties controlling transparency.\n */\nexport const TRANSPARENCY_PROPERTY_KEYS = [\"opacity\", \"transparent\"];\n\n// TODO: Can be removed, when all when interpolators are implemented as [[Expr]]s\nexport type RemoveInterpolatedPropDef<T> = T | InterpolatedPropertyDefinition<any> extends T\n    ? Exclude<T, InterpolatedPropertyDefinition<any>>\n    : T;\nexport type RemoveJsonExpr<T> = T | JsonExpr extends T ? Exclude<T, JsonExpr> : T;\n\n/**\n * Make runtime representation of technique attributes from JSON-compatible typings.\n *\n * Translates\n *  - InterpolatedPropertyDefinition -> InterpolatedProperty\n *  - JsonExpr -> Expr\n */\nexport type MakeTechniqueAttrs<T> = {\n    [P in keyof T]: T[P] | JsonExpr extends T[P]\n        ? RemoveInterpolatedPropDef<RemoveJsonExpr<T[P]>> | Expr | InterpolatedProperty\n        : T[P];\n};\n\nexport const techniqueDescriptors: TechniqueDescriptorRegistry = {};\n\nexport const baseTechniqueParamsDescriptor: TechniqueDescriptor<BaseTechniqueParams> = {\n    // TODO: Choose which techniques should support color with transparency.\n    // For now we chosen all, but it maybe not suitable for text or line marker techniques.\n    attrTransparencyColor: \"color\",\n    attrScopes: {\n        renderOrder: AttrScope.TechniqueGeometry,\n        renderOrderOffset: AttrScope.TechniqueGeometry,\n        enabled: AttrScope.TechniqueGeometry,\n        kind: AttrScope.TechniqueGeometry,\n        transient: AttrScope.TechniqueGeometry,\n        fadeFar: AttrScope.TechniqueRendering,\n        fadeNear: AttrScope.TechniqueRendering\n    }\n};\n\nexport const pointTechniquePropTypes = mergeTechniqueDescriptor<PointTechniqueParams>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            texture: AttrScope.TechniqueGeometry,\n            enablePicking: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueGeometry\n        }\n    }\n);\n\n/**\n * Runtime representation of [[SquaresStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface SquaresTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"squares\";\n}\n\nexport const squaresTechniquePropTypes = mergeTechniqueDescriptor<SquaresTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.squares = squaresTechniquePropTypes;\n\n/**\n * Runtime representation of [[CirclesStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface CirclesTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"circles\";\n}\n\nexport const circlesTechniquePropTypes = mergeTechniqueDescriptor<CirclesTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.circles = circlesTechniquePropTypes;\n\n/**\n * Runtime representation of [[PoiStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface PoiTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"labeled-icon\";\n}\n\n/**\n * Runtime representation of [[LineMarkerStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"line-marker\";\n}\n\nconst lineMarkerTechniquePropTypes = mergeTechniqueDescriptor<LineMarkerTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n            priority: AttrScope.TechniqueGeometry,\n            textMinZoomLevel: AttrScope.TechniqueGeometry,\n            textMaxZoomLevel: AttrScope.TechniqueGeometry,\n            iconMinZoomLevel: AttrScope.TechniqueGeometry,\n            iconMaxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            textMayOverlap: AttrScope.TechniqueGeometry,\n            iconMayOverlap: AttrScope.TechniqueGeometry,\n            textReserveSpace: AttrScope.TechniqueGeometry,\n            iconReserveSpace: AttrScope.TechniqueGeometry,\n            renderTextDuringMovements: AttrScope.TechniqueGeometry,\n            alwaysOnTop: AttrScope.TechniqueGeometry,\n            textIsOptional: AttrScope.TechniqueGeometry,\n            showOnMap: AttrScope.TechniqueGeometry,\n            stackMode: AttrScope.TechniqueGeometry,\n            minDistance: AttrScope.TechniqueGeometry,\n            iconIsOptional: AttrScope.TechniqueGeometry,\n            iconFadeTime: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            iconXOffset: AttrScope.TechniqueGeometry,\n            iconYOffset: AttrScope.TechniqueGeometry,\n            iconScale: AttrScope.TechniqueGeometry,\n            screenHeight: AttrScope.TechniqueGeometry,\n            screenWidth: AttrScope.TechniqueGeometry,\n            poiTable: AttrScope.TechniqueGeometry,\n            poiName: AttrScope.FeatureGeometry,\n            poiNameField: AttrScope.TechniqueGeometry,\n            imageTexture: AttrScope.FeatureGeometry,\n            imageTextureField: AttrScope.TechniqueGeometry,\n            imageTexturePrefix: AttrScope.TechniqueGeometry,\n            imageTexturePostfix: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"line-marker\"] = lineMarkerTechniquePropTypes;\ntechniqueDescriptors[\"labeled-icon\"] = lineMarkerTechniquePropTypes;\n\n/**\n * Runtime representation of [[SegmentsStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SegmentsTechniqueParams]].\n */\nexport interface SegmentsTechnique extends MakeTechniqueAttrs<SegmentsTechniqueParams> {\n    name: \"segments\";\n}\n\nconst polygonalTechniqueDescriptor: TechniqueDescriptor<PolygonalTechniqueParams> = {\n    attrScopes: {\n        polygonOffset: AttrScope.TechniqueRendering,\n        polygonOffsetFactor: AttrScope.TechniqueRendering,\n        polygonOffsetUnits: AttrScope.TechniqueRendering,\n        lineColor: AttrScope.TechniqueRendering,\n        lineFadeFar: AttrScope.TechniqueRendering,\n        lineFadeNear: AttrScope.TechniqueRendering\n    }\n};\n/**\n * Runtime representation of [[BasicExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[BasicExtrudedLineTechniqueParams]].\n */\nexport interface BasicExtrudedLineTechnique\n    extends MakeTechniqueAttrs<BasicExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[StandardExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[StandardExtrudedLineTechniqueParams]].\n */\nexport interface StandardExtrudedLineTechnique\n    extends MakeTechniqueAttrs<StandardExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[SolidLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SolidLineTechniqueParams]].\n */\nexport interface SolidLineTechnique extends MakeTechniqueAttrs<SolidLineTechniqueParams> {\n    name: \"solid-line\" | \"dashed-line\";\n}\n\nexport const solidLineTechniqueDescriptor = mergeTechniqueDescriptor<SolidLineTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            clipping: AttrScope.TechniqueGeometry,\n            secondaryRenderOrder: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            secondaryWidth: AttrScope.TechniqueRendering,\n            secondaryColor: AttrScope.TechniqueRendering,\n            dashSize: AttrScope.TechniqueRendering,\n            gapSize: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"solid-line\"] = solidLineTechniqueDescriptor;\n// TODO: Remove deprecated \"dashed-line\" support in future releases.\ntechniqueDescriptors[\"dashed-line\"] = solidLineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[LineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[LineTechniqueParams]].\n */\nexport interface LineTechnique extends MakeTechniqueAttrs<LineTechniqueParams> {\n    name: \"line\";\n}\n\nexport const lineTechniqueDescriptor = mergeTechniqueDescriptor<LineTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            // TODO, check, which are really dynamic !\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.FeatureGeometry\n        }\n    }\n);\n\ntechniqueDescriptors.line = lineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[FillStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[FillTechniqueParams]].\n */\nexport interface FillTechnique extends MakeTechniqueAttrs<FillTechniqueParams> {\n    name: \"fill\";\n}\n\nconst fillTechniqueDescriptor = mergeTechniqueDescriptor<FillTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.fill = fillTechniqueDescriptor;\n\n/**\n * Technique used to render a mesh geometry.\n * For technique parameters see [[StandardTechniqueParams]].\n */\nexport interface StandardTechnique extends MakeTechniqueAttrs<StandardTechniqueParams> {\n    name: \"standard\";\n}\nconst standardTechniqueDescriptor = mergeTechniqueDescriptor<StandardTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.FeatureGeometry,\n            vertexColors: AttrScope.FeatureGeometry,\n            wireframe: AttrScope.TechniqueRendering,\n            roughness: AttrScope.TechniqueRendering,\n            metalness: AttrScope.TechniqueRendering,\n            alphaTest: AttrScope.TechniqueRendering,\n            depthTest: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            emissive: AttrScope.TechniqueRendering,\n            emissiveIntensity: AttrScope.TechniqueRendering,\n            refractionRatio: AttrScope.TechniqueRendering,\n            map: AttrScope.TechniqueGeometry,\n            mapProperties: AttrScope.TechniqueGeometry,\n            normalMap: AttrScope.TechniqueGeometry,\n            normalMapProperties: AttrScope.TechniqueGeometry,\n            displacementMap: AttrScope.TechniqueGeometry,\n            displacementMapProperties: AttrScope.TechniqueGeometry,\n            roughnessMap: AttrScope.TechniqueGeometry,\n            roughnessMapProperties: AttrScope.TechniqueGeometry,\n            emissiveMap: AttrScope.TechniqueGeometry,\n            emissiveMapProperties: AttrScope.TechniqueGeometry,\n            bumpMap: AttrScope.TechniqueGeometry,\n            bumpMapProperties: AttrScope.TechniqueGeometry,\n            metalnessMap: AttrScope.TechniqueGeometry,\n            metalnessMapProperties: AttrScope.TechniqueGeometry,\n            alphaMap: AttrScope.TechniqueGeometry,\n            alphaMapProperties: AttrScope.TechniqueGeometry\n        }\n    }\n);\ntechniqueDescriptors.standard = standardTechniqueDescriptor;\n\n/**\n * Runtime representation of [[ExtrudedPolygonStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[ExtrudedPolygonTechniqueParams]].\n */\nexport interface ExtrudedPolygonTechnique\n    extends MakeTechniqueAttrs<ExtrudedPolygonTechniqueParams> {\n    name: \"extruded-polygon\";\n}\n\nconst extrudedPolygonTechniqueDescriptor = mergeTechniqueDescriptor<ExtrudedPolygonTechnique>(\n    baseTechniqueParamsDescriptor,\n    standardTechniqueDescriptor,\n    {\n        attrScopes: {\n            height: AttrScope.FeatureGeometry,\n            floorHeight: AttrScope.FeatureGeometry,\n            color: AttrScope.FeatureGeometry,\n            defaultColor: AttrScope.FeatureGeometry,\n            defaultHeight: AttrScope.FeatureGeometry,\n            constantHeight: AttrScope.FeatureGeometry,\n            boundaryWalls: AttrScope.FeatureGeometry,\n            footprint: AttrScope.FeatureGeometry,\n            maxSlope: AttrScope.FeatureGeometry,\n            enableDepthPrePass: AttrScope.TechniqueGeometry,\n            animateExtrusionDuration: AttrScope.TechniqueGeometry,\n            animateExtrusion: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            lineFadeNear: AttrScope.TechniqueRendering,\n            lineFadeFar: AttrScope.TechniqueRendering,\n            lineColorMix: AttrScope.TechniqueGeometry,\n            lineColor: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"extruded-polygon\"] = extrudedPolygonTechniqueDescriptor;\n/**\n * Runtime representation of [[TextStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[TextTechniqueParams]].\n */\nexport interface TextTechnique extends MakeTechniqueAttrs<TextTechniqueParams> {\n    name: \"text\";\n}\n\nconst textTechniqueDescriptor = mergeTechniqueDescriptor<TextTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n\n            minZoomLevel: AttrScope.TechniqueGeometry,\n            maxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            mayOverlap: AttrScope.TechniqueGeometry,\n            reserveSpace: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            priority: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.text = textTechniqueDescriptor;\n\n/**\n * Special technique for user-defined shaders.\n * For technique parameters see [[ShaderTechniqueParams]].\n */\nexport interface ShaderTechnique extends MakeTechniqueAttrs<ShaderTechniqueParams> {\n    name: \"shader\";\n}\n\nconst shaderTechniqueDescriptor = mergeTechniqueDescriptor<ShaderTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            primitive: AttrScope.TechniqueGeometry,\n            params: AttrScope.TechniqueRendering\n        }\n    }\n);\n\ntechniqueDescriptors.shader = shaderTechniqueDescriptor;\n\n/**\n * Technique used to render a terrain geometry with textures.\n * For technique parameters see [[TerrainTechniqueParams]].\n */\nexport interface TerrainTechnique extends MakeTechniqueAttrs<TerrainTechniqueParams> {\n    name: \"terrain\";\n}\n\n/**\n * Technique to avoid label rendering on top of certain line geometries.\n * For technique parameters see [[BaseTechniqueParams]].\n */\nexport interface LabelRejectionLineTechnique extends MakeTechniqueAttrs<BaseTechniqueParams> {\n    name: \"label-rejection-line\";\n}\n\n/**\n * Possible techniques that can be used to draw a geometry on the map.\n */\nexport type Technique =\n    | SquaresTechnique\n    | CirclesTechnique\n    | PoiTechnique\n    | LineMarkerTechnique\n    | LineTechnique\n    | SegmentsTechnique\n    | SolidLineTechnique\n    | FillTechnique\n    | StandardTechnique\n    | TerrainTechnique\n    | BasicExtrudedLineTechnique\n    | StandardExtrudedLineTechnique\n    | ExtrudedPolygonTechnique\n    | ShaderTechnique\n    | TextTechnique\n    | LabelRejectionLineTechnique;\n\n/**\n * Additional params used for optimized usage of `Techniques`.\n */\nexport interface IndexedTechniqueParams {\n    /**\n     * Optimization: Index into table in [[StyleSetEvaluator]] or in [[DecodedTile]].\n     * @hidden\n     */\n    _index: number;\n\n    /**\n     * Unique technique key derived from all dynamic expressions that were input to this particular\n     * technique instance.\n     * @hidden\n     */\n    _key: string;\n\n    /**\n     * Optimization: Unique [[Technique]] index of [[Style]] from which technique was derived.\n     * @hidden\n     */\n    _styleSetIndex: number;\n}\n\n/**\n * For efficiency, [[StyleSetEvaluator]] returns [[Techniques]] additional params as defined in\n * [[IndexedTechniqueParams]].\n */\nexport type IndexedTechnique = Technique & IndexedTechniqueParams;\n\n/**\n * Type guard to check if an object is an instance of [[CirclesTechnique]].\n */\nexport function isCirclesTechnique(technique: Technique): technique is CirclesTechnique {\n    return technique.name === \"circles\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SquaresTechnique]].\n */\nexport function isSquaresTechnique(technique: Technique): technique is SquaresTechnique {\n    return technique.name === \"squares\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[PoiTechnique]].\n */\nexport function isPoiTechnique(technique: Technique): technique is PoiTechnique {\n    return technique.name === \"labeled-icon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineMarkerTechnique]].\n */\nexport function isLineMarkerTechnique(technique: Technique): technique is LineMarkerTechnique {\n    return technique.name === \"line-marker\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineTechnique]].\n */\nexport function isLineTechnique(technique: Technique): technique is LineTechnique {\n    return technique.name === \"line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]].\n */\nexport function isSolidLineTechnique(technique: Technique): technique is SolidLineTechnique {\n    return technique.name === \"solid-line\" || technique.name === \"dashed-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SegmentsTechnique]].\n */\nexport function isSegmentsTechnique(technique: Technique): technique is SegmentsTechnique {\n    return technique.name === \"segments\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]]\n * or [[StandardExtrudedLineTechnique]].\n */\nexport function isExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique | StandardExtrudedLineTechnique {\n    return technique.name === \"extruded-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]].\n */\nexport function isBasicExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"basic\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardExtrudedLineTechnique]].\n */\nexport function isStandardExtrudedLineTechnique(\n    technique: Technique\n): technique is StandardExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[FillTechnique]].\n */\nexport function isFillTechnique(technique: Technique): technique is FillTechnique {\n    return technique.name === \"fill\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ExtrudedPolygonTechnique]].\n */\nexport function isExtrudedPolygonTechnique(\n    technique: Technique\n): technique is ExtrudedPolygonTechnique {\n    return technique.name === \"extruded-polygon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardTechnique]].\n */\nexport function isStandardTechnique(technique: Technique): technique is StandardTechnique {\n    return technique.name === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TerrainTechnique]].\n */\nexport function isTerrainTechnique(technique: Technique): technique is TerrainTechnique {\n    return technique.name === \"terrain\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TextTechnique]].\n */\nexport function isTextTechnique(technique: Technique): technique is TextTechnique {\n    return technique.name === \"text\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ShaderTechnique]].\n */\nexport function isShaderTechnique(technique: Technique): technique is ShaderTechnique {\n    return technique.name === \"shader\";\n}\n\nexport function isLabelRejectionLineTechnique(\n    technique: Technique\n): technique is LabelRejectionLineTechnique {\n    return technique.name === \"label-rejection-line\";\n}\n\n/**\n * Check if vertex normals should be generated for this technique (if no normals are in the data).\n * @param technique Technique to check.\n */\nexport function needsVertexNormals(technique: Technique): boolean {\n    return (\n        isFillTechnique(technique) ||\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isStandardExtrudedLineTechnique(technique)\n    );\n}\n\n/**\n * Get the texture coordinate type if the technique supports it.\n */\nexport function textureCoordinateType(technique: Technique): TextureCoordinateType | undefined {\n    if (isStandardTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isExtrudedPolygonTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isTerrainTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Add all the buffers of the technique to the transfer list.\n */\nexport function addBuffersToTransferList(technique: Technique, transferList: ArrayBuffer[]) {\n    if (\n        isStandardTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique) ||\n        isTerrainTechnique(technique)\n    ) {\n        for (const texturePropertyKey of TEXTURE_PROPERTY_KEYS) {\n            const textureProperty = (technique as any)[texturePropertyKey];\n            if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.buffer instanceof ArrayBuffer) {\n                    transferList.push(textureProperty.buffer);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Compose full texture name for given image name with technique specified.\n * Some techniques allows to add prefix/postfix to icons names specified, this\n * function uses technique information to create fully qualified texture name.\n * @param imageName base name of the marker icon.\n * @param technique the technique describing POI or line marker.\n * @returns fully qualified texture name for loading from atlas (without extension).\n */\nexport function composeTechniqueTextureName(\n    imageName: string,\n    technique: PoiTechnique | LineMarkerTechnique\n): string {\n    let textureName = imageName;\n    if (typeof technique.imageTexturePrefix === \"string\") {\n        textureName = technique.imageTexturePrefix + textureName;\n    }\n    if (typeof technique.imageTexturePostfix === \"string\") {\n        textureName = textureName + technique.imageTexturePostfix;\n    }\n    return textureName;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Definitions, StyleSet, Theme } from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nconst UPDATE_EVENT = { type: \"update\" };\n\n/**\n * Derive a class from `DataSource` to contribute data and geometries to the [[MapView]].\n */\nexport abstract class DataSource extends THREE.EventDispatcher {\n    /**\n     * A counter to generate unique names for each `DataSource`, if no name is provided in the\n     * constructor.\n     */\n    private static uniqueNameCounter: number = 0;\n\n    /**\n     * Set to `true` if this `DataSource` is enabled; `false` otherwise.\n     */\n    enabled: boolean = true;\n\n    /**\n     * Set to `true` if the [[MapView]] can cache tiles produced by this `DataSource`.\n     */\n    cacheable: boolean = false;\n\n    /**\n     * Set to `true` if the loader should be used to get the tile contents.\n     */\n    useGeometryLoader: boolean = false;\n\n    /**\n     * The unique name of a `DataSource` instance.\n     */\n    name: string;\n\n    /**\n     * Whether the datasource should have a ground plane (this plane covers the tile entirely and\n     * has the minimum possible renderOrder), this can be required in some cases when fallback\n     * parent tiles need to be covered by the children, otherwise the content will overlap.\n     * Default is false\n     */\n    addGroundPlane: boolean = false;\n\n    /**\n     * The [[MapView]] instance holding a reference to this `DataSource`.\n     */\n    private m_mapView?: MapView;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    private m_styleSetName?: string;\n\n    /**\n     * Minimum zoom level this `DataSource` can be displayed in.\n     */\n    private m_minZoomLevel: number = 1;\n\n    /**\n     * Maximum zoom level this `DataSource` can be displayed in.\n     */\n    private m_maxZoomLevel: number = 20;\n\n    /**\n     * Current value of [[maxGeometryHeight]] property.\n     */\n    private m_maxGeometryHeight = 0;\n\n    /**\n     * Storage level offset applied to this `DataSource`.\n     */\n    private m_storageLevelOffset: number = 0;\n\n    /**\n     * Constructs a new `DataSource`.\n     *\n     * @param uniqueName A unique name that represents this `DataSource`.\n     * @param styleSetName The name of the [[StyleSet]] to refer to in a [[Theme]], to decode vector\n     * tiles.\n     * @param minZoomLevel Minimum zoom level this `DataSource` can be displayed in.\n     * @param maxZoomLevel Maximum zoom level this `DataSource` can be displayed in.\n     * @param storageLevelOffset Storage level offset applied to this `DataSource`.\n     */\n    constructor(\n        uniqueName?: string,\n        styleSetName?: string,\n        minZoomLevel?: number,\n        maxZoomLevel?: number,\n        storageLevelOffset?: number\n    ) {\n        super();\n        if (uniqueName === undefined || uniqueName.length === 0) {\n            uniqueName = `anonymous-datasource#${++DataSource.uniqueNameCounter}`;\n        }\n        this.name = uniqueName;\n\n        this.styleSetName = styleSetName;\n\n        if (minZoomLevel !== undefined) {\n            this.m_minZoomLevel = minZoomLevel;\n        }\n        if (maxZoomLevel !== undefined) {\n            this.m_maxZoomLevel = maxZoomLevel;\n        }\n        if (storageLevelOffset !== undefined) {\n            this.m_storageLevelOffset = storageLevelOffset;\n        }\n    }\n\n    /**\n     * Returns the name of the [[StyleSet]] to use for the decoding.\n     */\n    get styleSetName(): string | undefined {\n        return this.m_styleSetName;\n    }\n\n    /**\n     * Sets the name of the [[StyleSet]] to use for the decoding. If this [[DataSource]] is already\n     * attached to a [[MapView]], this setter then reapplies [[StyleSet]] with this name found in\n     * [[MapView]]s theme.\n     */\n    set styleSetName(styleSetName: string | undefined) {\n        this.m_styleSetName = styleSetName;\n        if (this.m_mapView !== undefined && styleSetName !== undefined) {\n            this.setTheme(this.m_mapView.theme);\n        }\n    }\n\n    /**\n     * Destroys this `DataSource`.\n     */\n    dispose() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Purges all the caching done by this `DataSource`\n     */\n    clearCache() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Returns `true` if this `DataSource` is ready and the [[MapView]] can invoke `getTile()` to\n     * start requesting data.\n     */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * The [[MapView]] that is holding this `DataSource`.\n     */\n    get mapView(): MapView {\n        if (this.m_mapView === undefined) {\n            throw new Error(\"This DataSource was not added to MapView\");\n        }\n\n        return this.m_mapView;\n    }\n\n    /**\n     * The [[Projection]] used by the [[MapView]] that is holding this `DataSource`.\n     *\n     * An `Error` is thrown if you call this method before this `DataSource` has been added\n     * to a [[MapView]].\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * This method is called when the `DataSource` is added to a [[MapView]]. Reimplement this\n     * method to provide any custom initialization, such as, to establish a network connection,\n     * or to initialize complex data structures.\n     */\n    async connect(): Promise<void> {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Returns the [[TilingScheme]] used by this `DataSource`.\n     */\n    abstract getTilingScheme(): TilingScheme;\n\n    /**\n     * This method is called when this `DataSource` is added to a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    attach(mapView: MapView): void {\n        this.m_mapView = mapView;\n    }\n\n    /**\n     * This method is called when this `DataSource` is removed from a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    detach(mapView: MapView) {\n        assert(this.m_mapView === mapView);\n        this.m_mapView = undefined;\n    }\n\n    /**\n     * Invoked by [[MapView]] to notify when the [[Theme]] has been changed.\n     *\n     * If `DataSource` depends on a `styleSet` or `languages`, it must update its tiles' geometry.\n     *\n     * @deprecated, Use [[setTheme]].\n     *\n     * @param styleSet The new theme that [[MapView]] uses.\n     * @param languages An optional list of languages for the `DataSource`.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * If `DataSource` depends on a `styleSet` defined by this theme or `languages`, it must update\n     * its tiles' geometry.\n     *\n     * @param languages\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Used to configure the languages used by the `DataSource` according to priority;\n     * the first language in the array has the highest priority.\n     *\n     * @param languages An array of ISO 639-1 language codes.\n     */\n    setLanguages(languages?: string[]): void {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called when [[MapView]] needs to visualize or preload the content of a\n     * [[TileKey]].\n     *\n     * @param tileKey The unique identifier for a map tile.\n     */\n    abstract getTile(tileKey: TileKey): Tile | undefined;\n\n    /**\n     * This method is called by [[MapView]] before the tile needs to be updated, for example after\n     * a theme change.\n     *\n     * @param tile The [[Tile]] to update.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    updateTile(tile: Tile) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called by the [[MapView]] to determine if the content of the surrounding\n     * tiles must be preloaded.\n     *\n     * @returns `true` if the [[MapView]] should try to preload tiles surrounding the visible\n     * tiles; `false` otherwise. The default is `false`.\n     */\n    shouldPreloadTiles(): boolean {\n        return false;\n    }\n\n    /**\n     * The minimum zoom level to use for display.\n     *\n     * @returns The minimum zoom level to use for display.\n     */\n    get minZoomLevel(): number {\n        return this.m_minZoomLevel;\n    }\n\n    set minZoomLevel(level: number) {\n        this.m_minZoomLevel = level;\n    }\n\n    /**\n     * The maximum zoom level to use for display.\n     */\n    get maxZoomLevel(): number {\n        return this.m_maxZoomLevel;\n    }\n\n    set maxZoomLevel(level: number) {\n        this.m_maxZoomLevel = level;\n    }\n\n    /**\n     * Maximum geometry height above ground level this `DataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default 0.\n     */\n    get maxGeometryHeight() {\n        return this.m_maxGeometryHeight;\n    }\n    set maxGeometryHeight(value: number) {\n        this.m_maxGeometryHeight = value;\n    }\n\n    /**\n     * The difference between storage level and display level of tile.\n     *\n     * Storage level offset is a value applied (added) to current zoom level giving\n     * a final tile level being displayed. This way we may differentate current\n     * zoom level from the storage level that is displayed, giving fine grained\n     * control over the tiles being decoded an displayed.\n     */\n    get storageLevelOffset() {\n        return this.m_storageLevelOffset;\n    }\n\n    /**\n     * Setup the relative offset between storage level and display level of tile.\n     *\n     * @param levelOffset Difference between zoom level and display level.\n     */\n    set storageLevelOffset(levelOffset: number) {\n        this.m_storageLevelOffset = levelOffset;\n    }\n\n    /**\n     * Enables or disables overlay of geometry on elevation. It must be overloaded by data sources\n     * supporting this feature.\n     *\n     * @param value True to enable, false to disable.\n     */\n    setEnableElevationOverlay(enable: boolean) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Computes the zoom level to use for display.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @returns The zoom level to use for display.\n     */\n    getDisplayZoomLevel(zoomLevel: number): number {\n        return THREE.Math.clamp(\n            zoomLevel + this.m_storageLevelOffset,\n            this.m_minZoomLevel,\n            this.m_maxZoomLevel\n        );\n    }\n\n    /**\n     * Returns `true` if [[DataSource]] can load tile with given [[TileKey]] and zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the tile for the given [[TileKey]] can be loaded.\n     */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should traverse tiles further with given [[TileKey]] and\n     * zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the subtiles of the given [[TileKey]] should be\n     * checked for collisions.\n     */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should render the text elements with the given [[TileKey]] and\n     * zoom level.\n     *\n     * This is an additional check for the tiles that are already selected for rendering so the\n     * default implementation returns `true`.\n     *\n     * @param zoomLevel The zoom level.\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the text elements created for the given [[TileKey]] should be rendered.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldRenderText(zoomLevel: number, tileKey: TileKey): boolean {\n        return true;\n    }\n\n    /**\n     * Sends a request to the [[MapView]] to redraw the scene.\n     */\n    requestUpdate() {\n        this.dispatchEvent(UPDATE_EVENT);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Font } from \"./FontCatalog\";\n\n/**\n * Structure containing all the required information necessary to render a BMFont glyph using\n * [[TextCanvas]].\n */\nexport class GlyphData {\n    /**\n     * Unicode character represented by this glyph.\n     */\n    readonly character: string;\n\n    /**\n     * Glyph' direction.\n     */\n    readonly direction: UnicodeUtils.Direction;\n\n    /**\n     * Array containing the positions for all corners of this glyph.\n     */\n    positions: THREE.Vector3[] = [];\n\n    /**\n     * Array containing the source texture coordinates for all corners of this glyph.\n     * Used to sample the original texture atlas pages.\n     */\n    sourceTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Array containing the dynamic texture coordinates for all corners of this glyph.\n     * Used to sample the dynamic texture atlas page.\n     */\n    dynamicTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Source texture atlas' page copy index.\n     */\n    copyIndex: number = 0;\n\n    /**\n     * Flag indicating if glyph can be currently rendered.\n     */\n    isInCache: boolean = false;\n\n    /**\n     * Creates a new `GlyphData` object.\n     *\n     * @param codePoint Unicode code point.\n     * @param block Unicode block.\n     * @param width Glyph' width.\n     * @param height Glyph' height.\n     * @param advanceX Amount of pixel to move after placing this glyph.\n     * @param offsetX Horizontal offset from the glyph' origin.\n     * @param offsetY Vertical offset from the glyph' origin.\n     * @param u0 Glyph' left texture coordinate.\n     * @param v0 Glyph' bottom texture coordinate.\n     * @param u1 Glyph' right texture coordinate.\n     * @param v1 Glyph' top texture coordinate.\n     * @param texture Glyph' source texture atlas page.\n     * @param font Glyph' font.\n     *\n     * @returns New `GlyphData`.\n     */\n    constructor(\n        readonly codePoint: number,\n        readonly block: string,\n        readonly width: number,\n        readonly height: number,\n        readonly advanceX: number,\n        readonly offsetX: number,\n        readonly offsetY: number,\n        u0: number,\n        v0: number,\n        u1: number,\n        v1: number,\n        readonly texture: THREE.Texture,\n        readonly font: Font\n    ) {\n        this.character = String.fromCodePoint(codePoint);\n        this.direction = UnicodeUtils.getDirection(codePoint, block);\n\n        const left = this.offsetX;\n        const right = left + this.width;\n        const top = font.metrics.lineHeight - this.offsetY;\n        const bottom = top - this.height;\n\n        this.positions.push(\n            new THREE.Vector3(left, bottom, 1.0),\n            new THREE.Vector3(right, bottom, 1.0),\n            new THREE.Vector3(left, top, 1.0),\n            new THREE.Vector3(right, top, 1.0)\n        );\n\n        this.sourceTextureCoordinates.push(\n            new THREE.Vector2(u0, v0),\n            new THREE.Vector2(u1, v0),\n            new THREE.Vector2(u0, v1),\n            new THREE.Vector2(u1, v1)\n        );\n\n        this.dynamicTextureCoordinates.push(\n            new THREE.Vector2(0.0, 0.0),\n            new THREE.Vector2(1.0, 0.0),\n            new THREE.Vector2(0.0, 1.0),\n            new THREE.Vector2(1.0, 1.0)\n        );\n    }\n\n    /**\n     * Clone this `GlyphData`.\n     *\n     * @returns Cloned `GlyphData`.\n     */\n    clone(): GlyphData {\n        return new GlyphData(\n            this.codePoint,\n            this.block,\n            this.width,\n            this.height,\n            this.advanceX,\n            this.offsetX,\n            this.offsetY,\n            this.sourceTextureCoordinates[0].x,\n            this.sourceTextureCoordinates[0].y,\n            this.sourceTextureCoordinates[3].x,\n            this.sourceTextureCoordinates[3].y,\n            this.texture,\n            this.font\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/LRUCache\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextBufferObject } from \"./TextBufferObject\";\nimport { TextRenderStyle } from \"./TextStyle\";\n\nexport const MAX_CAPACITY = 65536;\nexport const VERTEX_BUFFER_STRIDE = 16;\nexport const INDEX_BUFFER_STRIDE = 1;\nexport const VERTICES_PER_QUAD = 4;\nexport const INDICES_PER_QUAD = 6;\nexport const QUAD_VERTEX_MEMORY_FOOTPRINT = VERTICES_PER_QUAD * VERTEX_BUFFER_STRIDE;\nexport const QUAD_INDEX_MEMORY_FOOTPRINT = INDICES_PER_QUAD * INDEX_BUFFER_STRIDE;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * Interface containing user-supplied picking data, as well as the [[TextGeometry]] range it's\n * assigned to.\n */\ninterface PickingData {\n    start: number;\n    end: number;\n    data: any;\n}\n\n/**\n * Procedural geometry that holds vertex attribute data for all glyphs in a [[TextCanvas]].\n */\nexport class TextGeometry {\n    /**\n     * Count of currently drawn glyphs.\n     */\n    get drawCount(): number {\n        return this.m_drawCount;\n    }\n\n    /**\n     * Mesh used to render foreground glyphs.\n     */\n    get mesh(): THREE.Mesh {\n        return this.m_mesh;\n    }\n\n    /**\n     * Mesh used to render background glyphs.\n     */\n    get backgroundMesh(): THREE.Mesh {\n        return this.m_bgMesh;\n    }\n    /**\n     * Maximum glyph capacity.\n     */\n    readonly capacity: number;\n\n    private m_currentCapacity: number;\n    private m_drawCount: number;\n    private m_updateOffset: number;\n\n    private m_vertexBuffer: THREE.InterleavedBuffer;\n    private m_positionAttribute: THREE.InterleavedBufferAttribute;\n    private m_uvAttribute: THREE.InterleavedBufferAttribute;\n    private m_colorAttribute: THREE.InterleavedBufferAttribute;\n    private m_bgColorAttribute: THREE.InterleavedBufferAttribute;\n    private m_indexBuffer: THREE.BufferAttribute;\n\n    private m_geometry: THREE.BufferGeometry;\n    private m_mesh: THREE.Mesh;\n    private m_bgMesh: THREE.Mesh;\n\n    private m_pickingCount: number;\n    private m_pickingDataArray: PickingData[];\n\n    /**\n     * Creates a new `TextGeometry`.\n     *\n     * @param material Material used to render foreground glyphs.\n     * @param backgroundMaterial Material used to render background glyphs.\n     * @param initialSize Initial amount of glyphs that can be stored.\n     * @param capacity Maximum glyph capacity.\n     *\n     * @returns New `TextGeometry`.\n     */\n    constructor(\n        readonly scene: THREE.Scene,\n        material: THREE.Material,\n        backgroundMaterial: THREE.Material,\n        initialSize: number,\n        capacity: number\n    ) {\n        this.capacity = Math.min(capacity, MAX_CAPACITY);\n        this.m_currentCapacity = Math.min(initialSize, capacity);\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(\n            new Float32Array(this.m_currentCapacity * QUAD_VERTEX_MEMORY_FOOTPRINT),\n            VERTEX_BUFFER_STRIDE\n        );\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        this.m_indexBuffer = new THREE.BufferAttribute(\n            new Uint32Array(this.m_currentCapacity * QUAD_INDEX_MEMORY_FOOTPRINT),\n            INDEX_BUFFER_STRIDE\n        );\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray = new Array(this.m_currentCapacity);\n\n        this.m_mesh = new THREE.Mesh(this.m_geometry, material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, backgroundMaterial);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_geometry.dispose();\n    }\n\n    /**\n     * Clear the geometry.\n     */\n    clear() {\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n    }\n\n    /**\n     * Update the GPU resources to reflect the latest additions to the geometry.\n     */\n    update() {\n        if (this.drawCount > this.m_updateOffset) {\n            this.m_vertexBuffer.needsUpdate = true;\n            this.m_vertexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_vertexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.needsUpdate = true;\n            this.m_indexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_INDEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_INDEX_MEMORY_FOOTPRINT;\n        }\n        this.m_updateOffset = this.m_drawCount;\n        this.m_geometry.setDrawRange(0, this.m_drawCount * INDICES_PER_QUAD);\n    }\n\n    /**\n     * Add a new glyph to the `TextGeometry`.\n     *\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be horizontally mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     *\n     * @returns Result of the addition.\n     */\n    add(\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): boolean {\n        if (this.m_drawCount >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const baseVertex = this.m_drawCount * VERTICES_PER_QUAD;\n        const baseIndex = this.m_drawCount * INDICES_PER_QUAD;\n\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            this.m_positionAttribute.setXYZW(\n                baseVertex + i,\n                corners[i].x,\n                corners[i].y,\n                corners[i].z,\n                (mirrored ? -1.0 : 1.0) * style.rotation\n            );\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            this.m_uvAttribute.setXYZW(\n                baseVertex + i,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].x,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].y,\n                weight,\n                bgWeight\n            );\n            this.m_colorAttribute.setXYZW(\n                baseVertex + i,\n                style.color.r,\n                style.color.g,\n                style.color.b,\n                style.opacity\n            );\n            this.m_bgColorAttribute.setXYZW(\n                baseVertex + i,\n                style.backgroundColor.r,\n                style.backgroundColor.g,\n                style.backgroundColor.b,\n                style.backgroundOpacity\n            );\n        }\n\n        this.m_indexBuffer.setX(baseIndex, baseVertex);\n        this.m_indexBuffer.setX(baseIndex + 1, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 2, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 3, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 4, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_drawCount;\n        return true;\n    }\n\n    /**\n     * Add a new glyph to a text buffer.\n     *\n     * @param buffer Target buffer where glyph attributes will be stored.\n     * @param offset Offset of the target buffer.\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     */\n    addToBuffer(\n        buffer: Float32Array,\n        offset: number,\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): void {\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            const vertexOffset = offset + VERTEX_BUFFER_STRIDE * i;\n            buffer[vertexOffset] = corners[i].x;\n            buffer[vertexOffset + 1] = corners[i].y;\n            buffer[vertexOffset + 2] = corners[i].z;\n            buffer[vertexOffset + 3] = (mirrored ? -1.0 : 1.0) * style.rotation;\n\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            buffer[vertexOffset + 4] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].x;\n            buffer[vertexOffset + 5] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].y;\n            buffer[vertexOffset + 6] = weight;\n            buffer[vertexOffset + 7] = bgWeight;\n\n            buffer[vertexOffset + 8] = style.color.r;\n            buffer[vertexOffset + 9] = style.color.g;\n            buffer[vertexOffset + 10] = style.color.b;\n            buffer[vertexOffset + 11] = style.opacity;\n\n            buffer[vertexOffset + 12] = style.backgroundColor.r;\n            buffer[vertexOffset + 13] = style.backgroundColor.g;\n            buffer[vertexOffset + 14] = style.backgroundColor.b;\n            buffer[vertexOffset + 15] = style.backgroundOpacity;\n        }\n    }\n\n    /**\n     * Add a previously computed [[TextBufferObject]] to the `TextGeometry`. Extra parameters can\n     * be passed to override the passed attribute data.\n     *\n     * @param textBufferObject [[TextBufferObject]] containing computed glyphs.\n     * @param position Override position value.\n     * @param scale Override scale value.\n     * @param rotation Override rotation value.\n     * @param color Override color value.\n     * @param opacity Override opacity value.\n     * @param bgColor Override background color value.\n     * @param bgOpacity Override background opacity value.\n     *\n     * @returns Result of the addition.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        position?: THREE.Vector3,\n        scale?: number,\n        rotation?: number,\n        color?: THREE.Color,\n        opacity?: number,\n        bgColor?: THREE.Color,\n        bgOpacity?: number\n    ): boolean {\n        if (this.m_drawCount + textBufferObject.glyphs.length >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount + textBufferObject.glyphs.length >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const s = scale || 1.0;\n        const r = rotation || 0.0;\n        const cosR = Math.cos(r);\n        const sinR = Math.sin(r);\n        const offsetX = position !== undefined ? position.x : 0.0;\n        const offsetY = position !== undefined ? position.y : 0.0;\n        const offsetZ = position !== undefined ? position.z : 0.0;\n\n        const buffer = textBufferObject.buffer;\n\n        const rot = buffer[3];\n        const rotSign = rot < 0 ? -1.0 : 1.0;\n\n        const red = color !== undefined ? color.r : buffer[8];\n        const green = color !== undefined ? color.g : buffer[9];\n        const blue = color !== undefined ? color.b : buffer[10];\n        const alpha = opacity !== undefined ? opacity : buffer[11];\n        const bgRed = bgColor !== undefined ? bgColor.r : buffer[12];\n        const bgGreen = bgColor !== undefined ? bgColor.g : buffer[13];\n        const bgBlue = bgColor !== undefined ? bgColor.b : buffer[14];\n        const bgAlpha = bgOpacity !== undefined ? bgOpacity : buffer[15];\n\n        const targetOffset = this.m_drawCount * VERTICES_PER_QUAD;\n        for (let i = 0; i < textBufferObject.glyphs.length; ++i) {\n            const srcOffset = i * QUAD_VERTEX_MEMORY_FOOTPRINT;\n\n            const glyph = textBufferObject.glyphs[i];\n            if (!glyph.isInCache) {\n                return false;\n            }\n\n            const mirrored = buffer[srcOffset + 4] > buffer[srcOffset + VERTEX_BUFFER_STRIDE + 4];\n            const w = buffer[srcOffset + 6];\n            const bw = buffer[srcOffset + 7];\n\n            for (let j = 0; j < VERTICES_PER_QUAD; ++j) {\n                const x = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE];\n                const y = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 1];\n                this.m_positionAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    x * s * cosR + y * s * -sinR + offsetX,\n                    x * s * sinR + y * s * cosR + offsetY,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 2] + offsetZ,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 3] + rotSign * r\n                );\n                const mirroredUVIdx = mirrored ? ((j + 1) % 2) + Math.floor(j / 2) * 2 : j;\n                this.m_uvAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].x,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].y,\n                    w,\n                    (bw - w) / s + w\n                );\n                this.m_colorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    red,\n                    green,\n                    blue,\n                    alpha\n                );\n                this.m_bgColorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    bgRed,\n                    bgGreen,\n                    bgBlue,\n                    bgAlpha\n                );\n            }\n\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 1,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 2,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 3,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 4,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 5,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 3\n            );\n        }\n\n        this.m_drawCount += textBufferObject.glyphs.length;\n        return true;\n    }\n\n    /**\n     * Adds picking data for glyphs from the specified start until the last glyph added.\n     *\n     * @param startIdx First glyph index that this picking data is associated to.\n     * @param endIdx Last glyph index that this picking data is associated to.\n     * @param pickingData Picking data to be added.\n     */\n    addPickingData(startIdx: number, endIdx: number, pickingData: any): boolean {\n        if (this.m_pickingCount >= this.m_currentCapacity) {\n            return false;\n        }\n\n        this.m_pickingDataArray[this.m_pickingCount] = {\n            start: Math.min(startIdx, this.capacity),\n            end: Math.min(endIdx, this.capacity),\n            data: pickingData\n        };\n\n        ++this.m_pickingCount;\n        return true;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple glyphs\n     * are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pick(screenPosition: THREE.Vector2, pickCallback: (pickData: any | undefined) => void) {\n        for (const pickingData of this.m_pickingDataArray) {\n            if (pickingData === undefined) {\n                return;\n            }\n\n            for (let i = pickingData.start; i < pickingData.end; ++i) {\n                const positionIndex = i * VERTICES_PER_QUAD;\n\n                const minX = Math.min(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x < minX) {\n                    continue;\n                }\n\n                const maxX = Math.max(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x > maxX) {\n                    continue;\n                }\n\n                const minY = Math.min(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y < minY) {\n                    continue;\n                }\n\n                const maxY = Math.max(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y > maxY) {\n                    continue;\n                }\n\n                pickCallback(pickingData.data);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextGeometry`.\n     *\n     * @param info The info object to increment with the values from this `TextGeometry`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.m_vertexBuffer.count * NUM_BYTES_PER_FLOAT +\n            this.m_indexBuffer.count * NUM_BYTES_PER_INT32;\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    private resizeBuffers(size: number) {\n        this.m_currentCapacity = size;\n\n        const newVertexBuffer = new Float32Array(size * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        newVertexBuffer.set(this.m_vertexBuffer.array);\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(newVertexBuffer, VERTEX_BUFFER_STRIDE);\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        const newIndexBuffer = new Uint32Array(size * QUAD_INDEX_MEMORY_FOOTPRINT);\n        newIndexBuffer.set(this.m_indexBuffer.array);\n        this.m_indexBuffer = new THREE.BufferAttribute(newIndexBuffer, INDEX_BUFFER_STRIDE);\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry.dispose();\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray.length = this.m_currentCapacity;\n\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_mesh = new THREE.Mesh(this.m_geometry, this.m_mesh.material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, this.m_bgMesh.material);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GlyphData } from \"../rendering/GlyphData\";\nimport { FontUnit, FontVariant } from \"../rendering/TextStyle\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\n\n/**\n * Collection of different constants and utility functions used by [[Typesetter]]s.\n */\nexport namespace TypesettingUtils {\n    /**\n     * Ratio between EMs and Pixels.\n     */\n    export const EM_TO_PX = 16.0;\n\n    /**\n     * Ratio between Points and Pixels.\n     */\n    export const PT_TO_PX = 1.25;\n\n    /**\n     * Angle used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_ANGLE = 0.174533;\n\n    /**\n     * Horizontal offset used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_OFFSET = Math.tan(OBLIQUE_ANGLE);\n\n    /**\n     * Convert between any size specified in any [[FontUnit]] to pixels.\n     *\n     * @param size Font size (specified in `unit`).\n     * @param unit Size unit.\n     * @param originalSize Original size (pixels)\n     *\n     * @returns Pixel size.\n     */\n    export function getPixelSize(size: number, unit: FontUnit, originalSize: number) {\n        let result = size;\n        switch (unit) {\n            case FontUnit.Em:\n                result *= EM_TO_PX;\n                break;\n            case FontUnit.Point:\n                result *= PT_TO_PX;\n                break;\n            case FontUnit.Percent:\n                result *= (1.0 / 100) * originalSize;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * Gets the scale applied to a certain character when using the [[FontVariant]].`SmallCaps`.\n     *\n     * @param glyphs Array containing [[TransformedGlyphData]].\n     * @param index Index to `glyphDataArray`.\n     * @param fontVariant Currently active [[FontVariant]].\n     *\n     * @returns Glyph `SmallCaps` scale.\n     */\n    export function getSmallCapsScale(\n        glyphs: GlyphData[],\n        smallCapsTransformations: boolean[],\n        index: number,\n        fontVariant: FontVariant\n    ): number {\n        const isSmallCaps =\n            smallCapsTransformations[index] && fontVariant === FontVariant.SmallCaps;\n        return isSmallCaps\n            ? glyphs[index].font.metrics.xHeight / glyphs[index].font.metrics.capHeight\n            : 1.0;\n    }\n\n    /**\n     * Returns the first strong direction (LTR or RTL) found for a given array of [[GlyphData]].\n     *\n     * @param glyphs Array containing [[GlyphData]].\n     * @param offset `glyphDataArray` offset.\n     *\n     * @returns Strong direction.\n     */\n    export function getDirection(glyphs: GlyphData[], offset: number): UnicodeUtils.Direction {\n        let result = UnicodeUtils.Direction.LTR;\n        let index = offset;\n        while (\n            glyphs[index].direction !== UnicodeUtils.Direction.LTR &&\n            glyphs[index].direction !== UnicodeUtils.Direction.RTL &&\n            index < glyphs.length - 1\n        ) {\n            ++index;\n        }\n\n        if (Math.abs(glyphs[index].direction) === 1.0) {\n            result = glyphs[index].direction;\n        }\n        return result;\n    }\n\n    /**\n     * Computes the transformation matrix for a glyph.\n     *\n     * @param transform Matrix used to store the results.\n     * @param position Glyph' position.\n     * @param scale Glyph' scale.\n     * @param rotation [[TextCanvas]] rotation.\n     * @param localRotation Glyph' local rotation.\n     */\n    export function computeGlyphTransform(\n        transform: THREE.Matrix3,\n        position: THREE.Vector3,\n        scale: number,\n        rotation: number,\n        localRotation: number\n    ): void {\n        const cosAngle = Math.cos(rotation);\n        const sinAngle = Math.sin(rotation);\n        const localCosAngle = Math.cos(localRotation);\n        const localSinAngle = Math.sin(localRotation);\n        transform.set(\n            scale * localCosAngle,\n            scale * -localSinAngle,\n            cosAngle * position.x - sinAngle * position.y,\n            scale * localSinAngle,\n            scale * localCosAngle,\n            sinAngle * position.x + cosAngle * position.y,\n            0,\n            0,\n            1.0\n        );\n    }\n\n    /**\n     * Updates the supplied bounds with the computed screen-space corners for a given glyph.\n     *\n     * @param corners Glyph' corners.\n     * @param globalBounds Global text bounds.\n     * @param individualBounds Individual per-character bounds.\n     */\n    export function updateBounds(\n        corners: THREE.Vector3[],\n        globalBounds: THREE.Box2,\n        individualBounds?: { array: THREE.Box2[]; offset: number }\n    ): void {\n        const minX = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const maxX = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const minY = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        const maxY = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n\n        if (individualBounds !== undefined) {\n            if (individualBounds.array[individualBounds.offset] !== undefined) {\n                individualBounds.array[individualBounds.offset].min.set(minX, minY);\n                individualBounds.array[individualBounds.offset].max.set(maxX, maxY);\n            } else {\n                individualBounds.array.push(\n                    new THREE.Box2(new THREE.Vector2(minX, minY), new THREE.Vector2(maxX, maxY))\n                );\n            }\n            ++individualBounds.offset;\n        }\n\n        globalBounds.min.set(\n            Math.min(globalBounds.min.x, minX),\n            Math.min(globalBounds.min.y, minY)\n        );\n        globalBounds.max.set(\n            Math.max(globalBounds.max.x, maxX),\n            Math.max(globalBounds.max.y, maxY)\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\n\n/**\n * `MapViewPoints` is a class to extend for the `\"circles\"` and `\"squares\"` [[Technique]]s to\n * implement raycasting of [[THREE.Points]] as expected in [[MapView]], that is in screen space. It\n * copies the behaviour of the `raycast` method in [[THREE.Points]] and dispatches it to its\n * children classes, [[Circles]] and [[Squares]], who hold the intersection testing in the\n * `testPoint` method. This class also has the ability to dismiss the testing via the\n * `enableRayTesting` flag.\n *\n * Its main motivation is to handle the point styles of XYZ projects.\n *\n * @see https://github.com/mrdoob/three.js/blob/master/src/objects/Points.js\n */\nexport abstract class MapViewPoints extends THREE.Points {\n    /**\n     * This allows to discard the ray testing.\n     */\n    enableRayTesting: boolean = true;\n\n    /**\n     * Implements the intersection testing in screen space between the drawn points and the ray. The\n     * drawing of the points being different between [[Circles]] and [[Squares]], this method is\n     * implemented in these child classes.\n     *\n     * @param point The point to test.\n     * @param screenPosition The point position on screen.\n     * @param pickCoordinates The picking position on screen.\n     * @param index The index of the point in the [[THREE.Geometry]].\n     * @param distance The distance between the point and the ray origin.\n     * @param intersects The results array.\n     */\n    abstract testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ): void;\n\n    /**\n     * This method is similar to the original method `raycast` in [[THREE.Points]] except that it\n     * then calls the tailored `testPoint` method in the children classes to test intersections\n     * depending on whether the points are circles or squares, which [[THREE.Points]] cannot do.\n     *\n     * @param raycaster The raycaster.\n     * @param intersects The array to fill with the results.\n     */\n    raycast(raycaster: PickingRaycaster, intersects: THREE.Intersection[]) {\n        if (!this.enableRayTesting) {\n            return;\n        }\n\n        const geometry = this.geometry;\n        const matrixWorld = this.matrixWorld;\n        const screenCoords = raycaster.ray.origin\n            .clone()\n            .add(raycaster.ray.direction)\n            .project(raycaster.mapView.camera);\n        const { clientWidth, clientHeight } = raycaster.mapView.canvas;\n        const mouseCoords = new THREE.Vector2(\n            Math.ceil(((screenCoords.x + 1) / 2) * clientWidth),\n            Math.ceil(((1 - screenCoords.y) / 2) * clientHeight)\n        );\n\n        if (geometry instanceof THREE.BufferGeometry) {\n            const point = new THREE.Vector3();\n            const index = geometry.index;\n            const attributes = geometry.attributes;\n            const positions = attributes.position.array;\n            if (index !== null) {\n                const indices = index.array;\n                for (let i = 0, il = indices.length; i < il; i++) {\n                    const a = indices[i];\n                    point.fromArray(positions as number[], a * 3);\n                    const pointInfo = getPointInfo(\n                        point,\n                        matrixWorld,\n                        raycaster,\n                        clientWidth,\n                        clientHeight\n                    );\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            } else {\n                for (let i = 0, l = positions.length / 3; i < l; i++) {\n                    point.fromArray(positions as number[], i * 3);\n                    const pointInfo = getPointInfo(\n                        point,\n                        matrixWorld,\n                        raycaster,\n                        clientWidth,\n                        clientHeight\n                    );\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            }\n        } else {\n            const vertices = geometry.vertices;\n            for (let index = 0; index < vertices.length; index++) {\n                const point = vertices[index];\n                const pointInfo = getPointInfo(\n                    point,\n                    matrixWorld,\n                    raycaster,\n                    clientWidth,\n                    clientHeight\n                );\n                if (pointInfo.pointIsOnScreen) {\n                    this.testPoint(\n                        point,\n                        pointInfo.absoluteScreenPosition!,\n                        mouseCoords,\n                        index,\n                        pointInfo.distance!,\n                        intersects\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getPointInfo(\n    point: THREE.Vector3,\n    matrixWorld: THREE.Matrix4,\n    raycaster: PickingRaycaster,\n    width: number,\n    height: number\n): {\n    pointIsOnScreen: boolean;\n    absoluteScreenPosition?: THREE.Vector2;\n    distance?: number;\n} {\n    const worldPosition = point.clone();\n    worldPosition.applyMatrix4(matrixWorld);\n    const distance = worldPosition.distanceTo(raycaster.ray.origin);\n    worldPosition.project(raycaster.mapView.camera);\n    const relativeScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n    const pointIsOnScreen =\n        relativeScreenPosition.x < 1 &&\n        relativeScreenPosition.x > -1 &&\n        relativeScreenPosition.y < 1 &&\n        relativeScreenPosition.y > -1;\n    if (pointIsOnScreen) {\n        worldPosition.x = ((worldPosition.x + 1) / 2) * width;\n        worldPosition.y = ((1 - worldPosition.y) / 2) * height;\n        const absoluteScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n        return {\n            absoluteScreenPosition,\n            pointIsOnScreen,\n            distance\n        };\n    }\n    return {\n        pointIsOnScreen\n    };\n}\n\n/**\n * Point object that implements the raycasting of circles in screen space.\n */\nexport class Circles extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        const radius = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (dist <= radius) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n\n/**\n * Point object that implements the raycasting of squares in screen space.\n */\nexport class Squares extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const halfSize = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (Math.abs(dx) <= halfSize && Math.abs(dy) <= halfSize) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Usage in Modules:\n *\n * import { DebugContext, debugContext } from \"../lib/DebugContext\";\n *\n * Declare a debug option:\n * debugContext.settings.setOption(\"MY_DBG_OPT\", \"default\");\n *\n * Access an option:\n * if (debugContext.settings.option(\"MY_DBG_OPT\")) {\n *     ...\n * }\n *\n *\n * Access in browser console:\n *\n * window.__debugContext.settings.addEventListener(\"MY_DBG_OPT\", function(event) {\n *  console.log(\"name:\", event.type, \"value:\", event.value)});\n *\n */\n\n/**\n * Allows access to the global `window` object here. The constructor of [[DebugContext]] adds the\n * instance to `window`, so it is available from the browser console.\n */\n\ninterface DebugInfo {\n    __debugContext?: DebugContext;\n}\n\nconst isNode = typeof window === \"undefined\";\n\n/**\n * A `DebugOption` is a pair that consists of an option value and an array of change listeners.\n * Listeners are called up when setting the option's value.\n */\nclass DebugOption extends THREE.EventDispatcher {\n    static SET_EVENT_TYPE: string = \"set\";\n\n    /**\n     * Constructs the `DebugOption`.\n     *\n     * @param value The value of the option.\n     */\n    constructor(public value: any) {\n        super();\n    }\n\n    /**\n     * Updates the value of a given option.\n     *\n     * @param value The new value for the option.\n     * @param name The name of the option to set.\n     */\n    set(value: any, name: string) {\n        this.value = value;\n        this.dispatchEvent({ type: DebugOption.SET_EVENT_TYPE, name, value });\n    }\n}\n\n/**\n * Maintains a map of [[DebugOption]]s. You can add listeners to debug options by passing their\n * names.\n */\nexport class DebugContext {\n    private m_optionsMap: Map<string, DebugOption>;\n\n    /**\n     * Builds a `DebugContext`.\n     */\n    constructor() {\n        this.m_optionsMap = new Map<string, DebugOption>();\n\n        // If we have a `window` object, we store the context in it to make it available in the\n        // console.\n        if (!isNode && typeof window !== \"undefined\" && window) {\n            const debugInfo = window as DebugInfo;\n            debugInfo.__debugContext = this;\n        }\n    }\n\n    /**\n     * Sets the value of an option. Calls change listeners of that option, even if the value has\n     * not been changed. The change listeners provided here are not called during this set\n     * operation.\n     *\n     * @param name Name of the option.\n     * @param value Value of the option.\n     */\n    setValue(name: string, value: any): void {\n        let opt = this.m_optionsMap.get(name);\n        if (!opt) {\n            opt = new DebugOption(value);\n            this.m_optionsMap.set(name, opt);\n        } else {\n            opt.set(value, name);\n        }\n    }\n\n    /**\n     * Gets the option value.\n     *\n     * @param name Name of option.\n     */\n    getValue(name: string): any {\n        const opt = this.m_optionsMap.get(name);\n        return opt ? opt.value : undefined;\n    }\n\n    /**\n     * Determines if the option is registered.\n     *\n     * @param name Name of option.\n     */\n    hasOption(name: string): boolean {\n        return this.m_optionsMap.get(name) !== undefined;\n    }\n\n    /**\n     * Adds a listener to a debug option.\n     *\n     * @param name Name of the option that requires a listener.\n     * @param listener The listener function to add.\n     */\n    addEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.addEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Checks for a listener in a debug option.\n     *\n     * @param name Name of the option to check for.\n     * @param listener The listener function to check for.\n     */\n    hasEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            return opt.hasEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Removes a listener from a debug option.\n     *\n     * @param name Name of the option from which to remove a listener.\n     * @param listener The listener function to remove.\n     */\n    removeEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.removeEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Provides access to the options map. This method is useful for creating an automatic\n     * browser GUI.\n     */\n    get options(): Map<string, any> {\n        return this.m_optionsMap;\n    }\n\n    /**\n     * Clears away all debug options. Currently, `THREE.EventDispatcher` does not provide an API\n     * to remove all event listeners.\n     */\n    clear() {\n        this.m_optionsMap.forEach(option => {\n            option.set(undefined, \"\");\n        });\n    }\n}\n\nexport const debugContext = new DebugContext();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryKind,\n    GeometryKindSet,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isTextTechnique,\n    Technique\n} from \"@here/harp-datasource-protocol\";\nimport { PerformanceTimer } from \"@here/harp-utils\";\n\nimport { PerformanceStatistics } from \"../Statistics\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryCreator } from \"./TileGeometryCreator\";\n\n/**\n * Loads the geometry for its [[Tile]]. Derived classes allow for different loading strategies.\n */\nexport interface TileGeometryLoader {\n    /**\n     * The [[Tile]] this `TileGeometryLoader` is managing.\n     */\n    tile: Tile;\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded and the loading process is finished.\n     */\n    isFinished: boolean;\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    basicGeometryLoaded: boolean;\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    allGeometryLoaded: boolean;\n\n    /**\n     * The kinds of geometry stored in this [[Tile]].\n\n     */\n    availableGeometryKinds: GeometryKindSet | undefined;\n\n    /**\n     * Start with or continue with loading geometry. Called repeatedly until `isFinished` is `true`.\n     */\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void;\n\n    /**\n     * Dispose of any resources.\n     */\n    dispose(): void;\n\n    /**\n     * Reset the loader to its initial state and cancels any asynchronous work.\n     */\n    reset(): void;\n}\n\nexport namespace TileGeometryLoader {\n    /**\n     * Make sure that all technique have their geometryKind set, either from the theme or their\n     * default value.\n     *\n     * Also gather set of the [[GeometryKind]]s found in the techniques and return it.\n     *\n     * @param {DecodedTile} decodedTile\n     * @returns {GeometryKindSet} The set of kinds used in the decodeTile.\n     */\n    export function prepareDecodedTile(decodedTile: DecodedTile): GeometryKindSet {\n        const foundSet: GeometryKindSet = new GeometryKindSet();\n\n        for (const technique of decodedTile.techniques) {\n            let geometryKind = technique.kind;\n\n            // Set default kind based on technique.\n            if (geometryKind === undefined) {\n                geometryKind = setDefaultGeometryKind(technique);\n            }\n\n            if (Array.isArray(geometryKind)) {\n                geometryKind = new GeometryKindSet(geometryKind);\n            }\n\n            if (geometryKind instanceof Set) {\n                for (const kind of geometryKind) {\n                    foundSet.add(kind);\n                }\n            } else {\n                foundSet.add(geometryKind);\n            }\n        }\n        return foundSet;\n    }\n\n    /**\n     * Make sure that the technique has its geometryKind set, either from the theme or their default\n     * value.\n     *\n     * @param {Technique} technique\n     */\n    export function setDefaultGeometryKind(technique: Technique): GeometryKind | GeometryKindSet {\n        let geometryKind = technique.kind;\n\n        // Set default kind based on technique.\n        if (geometryKind === undefined) {\n            if (isFillTechnique(technique)) {\n                geometryKind = GeometryKind.Area;\n            } else if (\n                isLineTechnique(technique) ||\n                isSolidLineTechnique(technique) ||\n                isSegmentsTechnique(technique) ||\n                isExtrudedLineTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Line;\n            } else if (isExtrudedPolygonTechnique(technique)) {\n                geometryKind = GeometryKind.Building;\n            } else if (\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique) ||\n                isTextTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Label;\n            } else {\n                geometryKind = GeometryKind.All;\n            }\n\n            technique.kind = geometryKind;\n        }\n\n        return geometryKind;\n    }\n}\n\n/**\n * Simplest implementation of a [[TileGeometryLoader]]. It loads all geometry in a single step.\n */\nexport class SimpleTileGeometryLoader implements TileGeometryLoader {\n    private m_decodedTile?: DecodedTile;\n    private m_isFinished: boolean = false;\n    private m_availableGeometryKinds: GeometryKindSet | undefined;\n    private m_timeout: any;\n\n    constructor(private m_tile: Tile) {}\n\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    get isFinished(): boolean {\n        return this.m_isFinished;\n    }\n\n    get basicGeometryLoaded(): boolean {\n        return this.m_tile.hasGeometry;\n    }\n\n    get allGeometryLoaded(): boolean {\n        return this.m_isFinished;\n    }\n\n    /**\n     * Set the [[DecodedTile]] of the tile. Is called after the decoded tile has been loaded, and\n     * prepares its content for later processing in the 'updateXXX' methods.\n     *\n     * @param {DecodedTile} decodedTile The decoded tile with the flat geometry data belonging to\n     *      this tile.\n     * @returns {DecodedTile} The processed decoded tile.\n     */\n    setDecodedTile(decodedTile: DecodedTile): DecodedTile {\n        this.m_decodedTile = decodedTile;\n\n        if (this.m_decodedTile !== undefined) {\n            this.m_availableGeometryKinds = TileGeometryLoader.prepareDecodedTile(\n                this.m_decodedTile\n            );\n        }\n        return this.m_decodedTile;\n    }\n\n    get availableGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_availableGeometryKinds;\n    }\n\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const tile = this.tile;\n\n        // First time this tile is handled:\n        if (this.m_decodedTile === undefined && tile.decodedTile !== undefined) {\n            TileGeometryCreator.instance.processTechniques(\n                tile.decodedTile,\n                enabledKinds,\n                disabledKinds\n            );\n\n            this.setDecodedTile(tile.decodedTile);\n            this.prepareForRender(enabledKinds, disabledKinds);\n        }\n    }\n\n    dispose(): void {\n        this.m_decodedTile = undefined;\n    }\n\n    reset(): void {\n        this.m_decodedTile = undefined;\n        this.m_isFinished = false;\n        if (this.m_availableGeometryKinds !== undefined) {\n            this.m_availableGeometryKinds.clear();\n        }\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n        }\n    }\n\n    private finish() {\n        this.m_tile.loadingFinished();\n        this.m_tile.removeDecodedTile();\n        this.m_isFinished = true;\n        this.m_timeout = undefined;\n    }\n\n    /**\n     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare geometry.\n     */\n    private prepareForRender(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ) {\n        // If the tile is not ready for display, or if it has become invisible while being loaded,\n        // for example by moving the camera, the tile is not finished and its geometry is not\n        // created. This is an optimization for fast camera movements and zooms.\n        const tile = this.tile;\n        const decodedTile = this.m_decodedTile;\n        this.m_decodedTile = undefined;\n        if (decodedTile === undefined || tile.disposed || !tile.isVisible) {\n            this.finish();\n            return;\n        }\n        this.m_timeout = setTimeout(() => {\n            const stats = PerformanceStatistics.instance;\n            // If the tile has become invisible while being loaded, for example by moving the\n            // camera, the tile is not finished and its geometry is not created. This is an\n            // optimization for fast camera movements and zooms.\n            if (!tile.isVisible) {\n                // Dispose the tile from the visible set, so it can be reloaded properly next time\n                // it is needed.\n                tile.mapView.visibleTileSet.disposeTile(tile);\n\n                if (stats.enabled) {\n                    stats.currentFrame.addMessage(\n                        // tslint:disable-next-line: max-line-length\n                        `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - invisible`\n                    );\n                }\n                this.finish();\n                return;\n            }\n            let now = 0;\n            if (stats.enabled) {\n                now = PerformanceTimer.now();\n            }\n\n            const geometryCreator = TileGeometryCreator.instance;\n\n            tile.clear();\n            geometryCreator.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n\n            geometryCreator.createAllGeometries(tile, decodedTile);\n\n            if (stats.enabled) {\n                const geometryCreationTime = PerformanceTimer.now() - now;\n                const currentFrame = stats.currentFrame;\n                currentFrame.addValue(\"geometry.geometryCreationTime\", geometryCreationTime);\n                currentFrame.addValue(\"geometryCount.numGeometries\", decodedTile.geometries.length);\n                currentFrame.addValue(\"geometryCount.numTechniques\", decodedTile.techniques.length);\n                currentFrame.addValue(\n                    \"geometryCount.numPoiGeometries\",\n                    decodedTile.poiGeometries !== undefined ? decodedTile.poiGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextGeometries\",\n                    decodedTile.textGeometries !== undefined ? decodedTile.textGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextPathGeometries\",\n                    decodedTile.textPathGeometries !== undefined\n                        ? decodedTile.textPathGeometries.length\n                        : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numPathGeometries\",\n                    decodedTile.pathGeometries !== undefined ? decodedTile.pathGeometries.length : 0\n                );\n                currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row}`\n                );\n            }\n            this.finish();\n            tile.dataSource.requestUpdate();\n        }, 0);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITileDecoder } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedDecoder } from \"./WorkerBasedDecoder\";\n\n/**\n * Default concurrent decoder helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedDecoder]]s for data sources.\n */\nexport class ConcurrentDecoderFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and decoders.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount?: number = undefined;\n\n    /**\n     * Returns a [[WorkerBasedDecoder]] instance.\n     *\n     * @param decoderServiceType The name of the decoder service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTileDecoder(\n        decoderServiceType: string,\n        scriptUrl?: string,\n        workerCount?: number\n    ): ITileDecoder {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedDecoder(workerSet, decoderServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue, MathUtils } from \"@here/harp-utils\";\n\n/**\n * Copyright info attached to data displayed on map. Provided by [[DataSource]] and attached\n * to [[Tile]]s.\n *\n * In most cases, an application should display this information on [[MapView]] to conform with\n * licencing terms of its map data providers.\n *\n * @see [[CopyrightElementHandler]]\n */\nexport interface CopyrightInfo {\n    /**\n     * Unique id of the copyright holder.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * Examples:\n     *\n     *  * `openstreetmap.org` - for data originating from OpenStreetMap project\n     *  * `naturalearthdata.com` - for data originating from Natural Earth dataset\n     *\n     * Note: [[DataSource]] may return [[CopyrightInfo]] with only `id`, thus defining only holder\n     * of copyright, however, valid attribution may require proper `label` and `link`.\n     *\n     * Entries with same `id` are deduplicated by [[CopyrightInfo.mergeArrays]].\n     */\n    id: string;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     *\n     * If undefined, `id` is used as text label.\n     * Set it to empty string to not render a copyright info.\n     */\n    label?: string;\n\n    /**\n     * Optional URL pointing to further copyright information.\n     */\n    link?: string;\n\n    /**\n     * Optional, copyright notice year.\n     */\n    year?: number;\n}\n\nexport namespace CopyrightInfo {\n    /**\n     * Merge [[CopyrightInfo]] arrays, removing duplicates.\n     *\n     * `id` and `label` are considered keys in deduplication algorithm.\n     *\n     * @param sources non-duplicate elements from this array are added to `target`\n     * @returns merge of all copyright infos in `sources`\n     */\n    export function mergeArrays(a: CopyrightInfo[], b?: CopyrightInfo[]): CopyrightInfo[] {\n        const result: CopyrightInfo[] = [];\n        for (const source of [a, b]) {\n            if (source === undefined) {\n                continue;\n            }\n\n            for (const sourceInfo of source) {\n                const existingInfo = result.find(\n                    findItem =>\n                        findItem.id === sourceInfo.id ||\n                        (findItem.label !== undefined && findItem.label === sourceInfo.label)\n                );\n\n                if (existingInfo === undefined) {\n                    result.push({ ...sourceInfo });\n                } else {\n                    existingInfo.year = MathUtils.max2(sourceInfo.year, existingInfo.year);\n                    existingInfo.label = getOptionValue(sourceInfo.label, existingInfo.label);\n                    existingInfo.link = getOptionValue(sourceInfo.link, existingInfo.link);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Format copyright information to a HTML string that can be displayed in the UI.\n     *\n     * * Empty list returns empty string.\n     * * Entries with empty (but defined) labels are skipped.\n     */\n    export function formatAsHtml(copyrightInfo: CopyrightInfo[]): string {\n        if (copyrightInfo.length === 0) {\n            return \"\";\n        }\n\n        const filtered = copyrightInfo.filter(entry => entry.label !== \"\");\n        if (filtered.length === 0) {\n            return \"\";\n        }\n\n        return (\n            \"© \" +\n            filtered\n                .map(entry => {\n                    const label = entry.label !== undefined ? entry.label : entry.id;\n                    const text = entry.year !== undefined ? `${entry.year} ${label}` : label;\n                    return entry.link ? `<a href=\"${entry.link}\">${text}</a>` : `${text}`;\n                })\n                .join(\", \")\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    HighPrecisionLineMaterial,\n    HighPrecisionPointMaterial,\n    isHighPrecisionPointMaterial\n} from \"@here/harp-materials\";\nimport {\n    BufferAttribute,\n    BufferGeometry,\n    Camera,\n    Color,\n    Float32BufferAttribute,\n    InterleavedBuffer,\n    InterleavedBufferAttribute,\n    Matrix4,\n    PointsMaterialParameters,\n    ShaderMaterial,\n    ShaderMaterialParameters,\n    Vector3\n} from \"three\";\n\nimport * as HPL from \"./HighPrecisionLines\";\nimport * as HPP from \"./HighPrecisionPoints\";\nimport { triangulateLine } from \"./TriangulateLines\";\n\nexport namespace HighPrecisionUtils {\n    /**\n     * Extract the `float` parts of all vector members, Making this a `Vector3` of `float`.\n     * precision.\n     *\n     * @param v\n     */\n    export function doubleToFloatVec(v: Vector3): Vector3 {\n        return new Vector3(Math.fround(v.x), Math.fround(v.y), Math.fround(v.z));\n    }\n\n    /**\n     * Convert a `Vector3` to `float` (in place!) Returns the minor float vector, which is the\n     * difference of the double elements and their float counterparts.\n     *\n     * @param v Vector3 to convert to float IN-PLACE!\n     */\n    export function makeFloatVec(v: Vector3): Vector3 {\n        const majorX = Math.fround(v.x);\n        const majorY = Math.fround(v.y);\n        const majorZ = Math.fround(v.z);\n\n        const minorVec = new Vector3(v.x - majorX, v.y - majorY, v.z - majorZ);\n\n        v.x = Math.fround(majorX);\n        v.y = Math.fround(majorY);\n        v.z = Math.fround(majorZ);\n\n        return minorVec;\n    }\n\n    /**\n     * Describes addtional postion data needed to render high-precision vertices. Created by\n     * [[createHighPrecisionCameraPos]].\n     */\n    export interface HighPrecisionCameraInfo {\n        /**\n         * View Projection matrix of this high-precision camera.\n         */\n        viewProjection: Matrix4;\n\n        /**\n         * Low-order bits of the high-precision camera's position.\n         */\n        eyePosLo: Vector3;\n\n        /**\n         * High-order bits of the high-precision camera's position.\n         */\n        eyePosHi: Vector3;\n    }\n\n    /**\n     * Describes different properties used when creating a [[HighPrecisionLine]] or\n     * a [[HighPrecisionWireFrameLine]].\n     */\n    export interface HighPrecisionLineParams extends ShaderMaterialParameters {\n        /**\n         * Color of the rendered line.\n         */\n        color?: number | string | Color;\n\n        /**\n         * Width of the rendered line (specified in world units).\n         */\n        lineWidth?: number;\n\n        /**\n         * Add rounded caps to the extremes of the line if set to `true`.\n         */\n        addCircles?: boolean;\n\n        /**\n         * Opacity of the rendered line.\n         */\n        opacity?: number;\n\n        /**\n         * Renders a wireframe line if set to `true`.\n         */\n        wireFrame?: boolean;\n    }\n\n    /**\n     * Calculate high-precision camera position used in vertex shader of high-precision materials.\n     *\n     * @param camera Camera used to get the high-precision position.\n     * @param objectInverseWorldMatrix Inverse World Matrix of the rendered [[HighPrecisionObject]].\n     */\n    export function createHighPrecisionCameraPos(\n        camera: Camera,\n        objectInverseWorldMatrix: Matrix4\n    ): HighPrecisionCameraInfo {\n        const _projScreenMatrix = new Matrix4().copy(camera.projectionMatrix);\n        const mvp = _projScreenMatrix.multiply(camera.matrixWorldInverse);\n        const eyePos = new Vector3(0, 0, 0).applyMatrix4(objectInverseWorldMatrix);\n\n        // split the double float vector into hi and lo parts\n        const eyePosFloat = doubleToFloatVec(eyePos);\n\n        const eyePosLo = doubleToFloatVec(eyePos.sub(eyePosFloat));\n\n        return {\n            viewProjection: mvp,\n            eyePosHi: eyePosFloat,\n            eyePosLo\n        };\n    }\n\n    /**\n     * Updates the high-precision uniform data of a material used to render a\n     * [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] used for rendering.\n     * @param camera Camera used to get the high-precision position.\n     * @param shaderMaterial Material which uniforms will be updated.\n     */\n    export function updateHpUniforms(\n        object: HPL.HighPrecisionObject,\n        camera: Camera,\n        shaderMaterial: ShaderMaterial\n    ): void {\n        const highPrecisionCameraInfo = createHighPrecisionCameraPos(\n            camera,\n            object.matrixWorldInverse\n        );\n        const mvp = highPrecisionCameraInfo.viewProjection;\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_mvp &&\n                shaderMaterial.uniforms.u_eyepos &&\n                shaderMaterial.uniforms.u_eyepos_lowpart\n            ) {\n                shaderMaterial.uniforms.u_mvp.value = new Float32Array(mvp.elements);\n                shaderMaterial.uniforms.u_eyepos.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosHi.toArray()\n                );\n                shaderMaterial.uniforms.u_eyepos_lowpart.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosLo.toArray()\n                );\n            } else {\n                throw Error(\"High pecision material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"High pecision line has no high precision material\");\n        }\n    }\n\n    /**\n     * Assembles the necessary attribute buffers needed to render [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     */\n    export function createAttributes(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): {\n        positionHigh: BufferAttribute;\n        positionLow: BufferAttribute;\n    } {\n        if (positions.length > 0) {\n            const v = positions[0];\n\n            if (v === undefined || v === null) {\n                throw Error(\"Empty element in positions\");\n            }\n\n            const positionVec = new Array<number>();\n            const positionVecLow = new Array<number>();\n\n            const addHPValue = (...values: number[]) => {\n                for (const value of values) {\n                    const major = Math.fround(value);\n                    positionVecLow.push(value - major);\n                    positionVec.push(major);\n                }\n            };\n\n            const addHPVector = (vec: Vector3) => {\n                addHPValue(vec.x, vec.y, vec.z);\n            };\n\n            const vAny = v as any;\n            if (vAny.z !== undefined) {\n                (positions as Vector3[]).forEach(vec => {\n                    addHPVector(vec);\n                });\n            } else {\n                if (positionVec.length % 3 !== 0) {\n                    throw Error(\"Positions must be 3D, not 2D\");\n                }\n                (positions as number[]).forEach((n: number): void => {\n                    addHPValue(n);\n                });\n            }\n\n            return {\n                positionHigh: new Float32BufferAttribute(positionVec, 3),\n                positionLow: new Float32BufferAttribute(positionVecLow, 3)\n            };\n        } else {\n            return {\n                positionHigh: new Float32BufferAttribute([], 3),\n                positionLow: new Float32BufferAttribute([], 3)\n            };\n        }\n    }\n\n    /**\n     * Assembles an interleaved buffer containing the position attribute data for a\n     * [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     * @param stride Stride of the elements in the `positions` array.\n     * @param positionOffset Offset into the `positions` array.\n     */\n    export function addInterleavedAttributes3(\n        positions: ArrayLike<number>,\n        stride: number,\n        positionOffset = 0\n    ): ArrayLike<number> {\n        const newPositions = new Array<number>();\n\n        const end = positions.length;\n\n        for (let i = 0; i < end; i += stride) {\n            for (let j = 0; j < positionOffset; j++) {\n                newPositions.push(positions[i + j]);\n            }\n\n            const x = positions[i + positionOffset];\n            const y = positions[i + positionOffset + 1];\n            const z = positions[i + positionOffset + 2];\n            const majorX = Math.fround(x);\n            const minorX = x - majorX;\n            const majorY = Math.fround(y);\n            const minorY = y - majorY;\n            const majorZ = Math.fround(z);\n            const minorZ = z - majorZ;\n\n            // insert values in interleaved buffer\n            newPositions.push(majorX, majorY, majorZ, minorX, minorY, minorZ);\n\n            for (let j = positionOffset + 3; j < stride; j++) {\n                newPositions.push(positions[i + j]);\n            }\n        }\n\n        return newPositions;\n    }\n\n    /**\n     * Adds the high-precision position attribute data to a [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] which position attribute will be set.\n     * @param positions Array of positions.\n     */\n    export function setPositions(\n        object: HPL.HighPrecisionObject,\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): number {\n        const attributes = createAttributes(positions);\n\n        object.bufferGeometry.setAttribute(\"position\", attributes.positionHigh);\n        object.bufferGeometry.setAttribute(\"positionLow\", attributes.positionLow);\n\n        return attributes.positionHigh.itemSize;\n    }\n\n    /**\n     * Convert positions from `Array<Vector3>` to `Array<number>`.\n     *\n     * @param positions Array of positions.\n     */\n    export function convertPositions(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): { positions: number[] } {\n        if (positions.length <= 0) {\n            return { positions: [] };\n        }\n\n        const v = positions[0];\n\n        if (v === undefined || v === null) {\n            throw Error(\"Empty element in positions\");\n        }\n\n        const vAny = v as any;\n        if (vAny.y === undefined && vAny.z === undefined) {\n            return { positions: positions as number[] };\n        }\n\n        const returnPositions = new Array<number>();\n        (positions as Vector3[]).forEach(vec => {\n            returnPositions.push(vec.x, vec.y, vec.z);\n        });\n\n        return { positions: returnPositions };\n    }\n\n    /**\n     * Creates a [[HighPrecisionLine]] or [[HighPrecisionWireFrameLine]] object.\n     *\n     * @param linePositions Array of 2D/3D positions.\n     * @param params Parameters used to configure the created [[HighPrecisionObject]].\n     */\n    export function createLine(\n        linePositions: ArrayLike<number>,\n        params: HighPrecisionLineParams\n    ): HPL.HighPrecisionLine | HPL.HighPrecisionWireFrameLine {\n        const lineWidth = params.lineWidth !== undefined ? params.lineWidth : 5;\n        const addCircles = params.addCircles !== undefined ? params.addCircles : false;\n        const wireFrame = params.wireFrame !== undefined ? params.wireFrame : false;\n\n        const positions: number[] = [];\n        const indices: number[] = [];\n\n        triangulateLine(linePositions, lineWidth, positions, indices, addCircles);\n\n        const hpLineGeometry = new BufferGeometry();\n        const hpPositions = addInterleavedAttributes3(positions, 3);\n        const buffer = new InterleavedBuffer(new Float32Array(hpPositions), 6);\n\n        const positionAttribute = new InterleavedBufferAttribute(buffer, 3, 0, false);\n        const positionLowAttribute = new InterleavedBufferAttribute(buffer, 3, 3, false);\n\n        hpLineGeometry.setAttribute(\"position\", positionAttribute);\n        hpLineGeometry.setAttribute(\"positionLow\", positionLowAttribute);\n        hpLineGeometry.setIndex(new BufferAttribute(new Uint32Array(indices), 1));\n\n        const hpSolidMaterial = new HighPrecisionLineMaterial(params);\n\n        const lineObject = wireFrame\n            ? new HPL.HighPrecisionWireFrameLine(hpLineGeometry, hpSolidMaterial)\n            : new HPL.HighPrecisionLine(hpLineGeometry, hpSolidMaterial);\n\n        lineObject.setupForRendering();\n\n        return lineObject;\n    }\n\n    /**\n     * Creates a group of [[HighPrecisionPoints]].\n     *\n     * @param pointPositions Array of 2D/3D positions.\n     * @param materialParameters Parameters used to configure the material used to render the\n     * created [[HighPrecisionPoints]].\n     */\n    export function createPoints(\n        pointPositions: ArrayLike<number>,\n        materialParameters?: PointsMaterialParameters | HighPrecisionPointMaterial\n    ): HPP.HighPrecisionPoints {\n        const indices: number[] = [];\n\n        // tslint:disable-next-line:prefer-for-of - pointPositions doesn't have iterable interface\n        for (let i = 0; i < pointPositions.length; i++) {\n            indices.push(indices.length / 3);\n        }\n\n        const hpPointsGeometry = new BufferGeometry();\n\n        const hpPointsMaterial = isHighPrecisionPointMaterial(materialParameters)\n            ? materialParameters\n            : new HighPrecisionPointMaterial(materialParameters);\n\n        const pointsObject = new HPP.HighPrecisionPoints(hpPointsGeometry, hpPointsMaterial);\n\n        setPositions(pointsObject, pointPositions);\n\n        pointsObject.setupForRendering();\n\n        return pointsObject;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Value } from \"@here/harp-datasource-protocol/index-decoder\";\n\n/**\n * Feature Modifier ids to choose which OmvFeatureModifer should be used in OmvDecoder.\n */\nexport enum FeatureModifierId {\n    /**\n     * Identifier to use the OmvTomTomFeatureModifier in the OmvDecoder.\n     */\n    tomTom\n}\n\n/**\n * Definition of a filter.\n */\nexport interface OmvFilterString {\n    /**  String value */\n    value: string;\n    /** Match condition */\n    match: OmvFilterString.StringMatch;\n}\n\n/**\n * Adding the match condition type and the matching function to the namespace of `OmvFilterString`.\n */\nexport namespace OmvFilterString {\n    /**\n     * Match condition.\n     */\n    export enum StringMatch {\n        /** Matches any. */\n        Any,\n        /** Exact match. */\n        Match,\n        /** Matches if a test string starts with a filter string. */\n        StartsWith,\n        /** Matches if a test string contains a filter string. */\n        Contains,\n        /** Matches if a test string ends with a filter string. */\n        EndsWith\n    }\n\n    /**\n     * Check for a string against a filter.\n     *\n     * @param str The string to check against a filter.\n     * @param filterString The filter containing the match condition.\n     * @returns `true` if the match condition is satisfied.\n     */\n    export function matchString(str: string, filterString: OmvFilterString): boolean {\n        switch (filterString.match) {\n            case OmvFilterString.StringMatch.Any:\n                return true;\n            case OmvFilterString.StringMatch.Match:\n                return str === filterString.value;\n            case OmvFilterString.StringMatch.StartsWith:\n                return filterString.value.startsWith(str);\n            case OmvFilterString.StringMatch.EndsWith:\n                return filterString.value.endsWith(str);\n            default:\n                return str.indexOf(filterString.value) >= 0;\n        }\n    }\n}\n\n/**\n * Definition of a filter for a feature attribute\n */\nexport interface OmvFilterFeatureAttribute {\n    key: string;\n    value: Value;\n}\n\nexport enum OmvGeometryType {\n    UNKNOWN = 0,\n    POINT = 1,\n    LINESTRING = 2,\n    POLYGON = 3\n}\n\n/**\n * Internal type of a layer filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvLayerFilterDescription {\n    name: OmvFilterString;\n    minLevel: number;\n    maxLevel: number;\n}\n\n/**\n * Internal type of a single filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFilterDescription {\n    layerName: OmvFilterString;\n    geometryTypes?: OmvGeometryType[];\n    classes?: OmvFilterString[];\n    minLevel: number;\n    maxLevel: number;\n    featureAttribute?: OmvFilterFeatureAttribute;\n}\n\n/**\n * Internal type of a complete [[OmvFeatureFilter]] description, should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFeatureFilterDescription {\n    processLayersDefault: boolean;\n    processPointsDefault: boolean;\n    processLinesDefault: boolean;\n    processPolygonsDefault: boolean;\n\n    layersToProcess: OmvLayerFilterDescription[];\n    layersToIgnore: OmvLayerFilterDescription[];\n    pointsToProcess: OmvFilterDescription[];\n    pointsToIgnore: OmvFilterDescription[];\n    linesToProcess: OmvFilterDescription[];\n    linesToIgnore: OmvFilterDescription[];\n    polygonsToProcess: OmvFilterDescription[];\n    polygonsToIgnore: OmvFilterDescription[];\n\n    // enabledKinds and disabledKinds\n    kindsToProcess: string[];\n    kindsToIgnore: string[];\n}\n\n/**\n * Internal interface for options passed from the [[OmvDataSource]] to the decoder.\n *\n * @hidden\n */\nexport interface OmvDecoderOptions {\n    /**\n     * If true, features that have no technique in the theme will be printed to the console (can be\n     * excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * Gather feature attributes from [[OmvData]]. Defaults to false.\n     */\n    gatherFeatureAttributes?: boolean;\n    createTileInfo?: boolean;\n    gatherRoadSegments?: boolean;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -2.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * If not set to `false` very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter which can be safely passed down to the web workers.\n     * It has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to\n     * guarantee the correctness).\n     */\n    filterDescription?: OmvFeatureFilterDescription | null;\n\n    /**\n     * Identifier used to choose OmvFeatureModifier, if undefined [[OmvGenericFeatureModifier]] is\n     * used.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    enableElevationOverlay?: boolean;\n}\n\n/**\n * Default OMV tile decoder service type.\n *\n * Used for requesting decoder services using [[WorkerServiceManager]].\n */\nexport const OMV_TILE_DECODER_SERVICE_TYPE = \"omv-tile-decoder\";\n\n/**\n * Default OMV tiler service type.\n *\n * Used for requesting tiler services using [[WorkerServiceManager]].\n */\nexport const OMV_TILER_SERVICE_TYPE = \"omv-tiler\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, Tile } from \"@here/harp-mapview\";\n\nexport class OmvTile extends Tile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `GeoCoordinates` like interface.\n */\nexport interface GeoCoordinatesLike {\n    /** The latitude in degrees. */\n    latitude: number;\n\n    /** The longitude in degrees. */\n    longitude: number;\n\n    /** The optional altitude in meters. */\n    altitude?: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[GeoCoordinatesLike]] data interface.\n */\nexport function isGeoCoordinatesLike(object: any): object is GeoCoordinatesLike {\n    return (\n        object &&\n        typeof object.latitude === \"number\" &&\n        typeof object.longitude === \"number\" &&\n        (typeof object.altitude === \"number\" || typeof object.altitude === \"undefined\")\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * An [[Array]] following the order longitude, latitude, altitude.\n */\nexport type GeoPointLike = [number, number, number?];\n\n/**\n * Type guard to assert that `object` conforms to [[GeoPointLike]] interface.\n */\nexport function isGeoPointLike(geoPoint: any): geoPoint is GeoPointLike {\n    if (Array.isArray(geoPoint)) {\n        const [longitude, latitude, altitude] = geoPoint;\n        return (\n            typeof longitude === \"number\" &&\n            typeof latitude === \"number\" &&\n            (altitude === undefined || typeof altitude === \"number\")\n        );\n    }\n    return false;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `LatLng` like interface.\n */\nexport interface LatLngLike {\n    /** The latitude in degrees. */\n    lat: number;\n\n    /** The longitude in degrees. */\n    lng: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[LatLngLike]] interface.\n */\nexport function isLatLngLike(object: any): object is LatLngLike {\n    return object && typeof object.lat === \"number\" && typeof object.lng === \"number\";\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass EquirectangularProjection extends Projection {\n    static geoToWorldScale: number = 1.0 / (2.0 * Math.PI);\n    static worldToGeoScale: number = (2.0 * Math.PI) / 1.0;\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        result.min.x = 0.0;\n        result.min.y = 0.0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale / 2;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (result === undefined) {\n            /*\n             * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n             * might be a concrete class which is not available at runtime.\n             * Consider the following example:\n             *\n             *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n             *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n             *\n             * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n             */\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x =\n            (THREE.Math.degToRad(geoPoint.longitude) + Math.PI) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.y =\n            (THREE.Math.degToRad(geoPoint.latitude) + Math.PI * 0.5) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            (worldPoint.y * EquirectangularProjection.worldToGeoScale) / this.unitScale -\n                Math.PI * 0.5,\n            (worldPoint.x * EquirectangularProjection.worldToGeoScale) / this.unitScale - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(\n            new GeoCoordinates(geoBox.center.latitude, geoBox.center.longitude, 0)\n        );\n        const { latitudeSpanInRadians, longitudeSpanInRadians, altitudeSpan } = geoBox;\n        const sizeX = longitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        const sizeY = latitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - sizeX * 0.5 * this.unitScale;\n            result.min.y = worldCenter.y - sizeY * 0.5 * this.unitScale;\n            result.max.x = worldCenter.x + sizeX * 0.5 * this.unitScale;\n            result.max.y = worldCenter.y + sizeY * 0.5 * this.unitScale;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = sizeX * 0.5 * this.unitScale;\n            result.extents.y = sizeY * 0.5 * this.unitScale;\n            result.extents.z = Math.max(Number.EPSILON, (altitudeSpan || 0) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to unit coordinates and vice\n * versa.\n */\nexport const normalizedEquirectangularProjection: Projection = new EquirectangularProjection(1);\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to world coordinates and vice\n * versa.\n */\nexport const equirectangularProjection: Projection = new EquirectangularProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\n/**\n *\n * https://en.wikipedia.org/wiki/Transverse_Mercator_projection\n * http://mathworld.wolfram.com/MercatorProjection.html\n *\n */\nclass TransverseMercatorProjection extends Projection {\n    /**\n     * Like in regular Mercator projection, there are two points on sphere\n     * with radius about 5 degrees, that is out of projected space.\n     *\n     *\n     * in regular Mercator these points are:\n     *     (90, any), (-90, any)\n     *\n     * and in transverse Mercator:\n     *     (0, 90), (0, -90)\n     *\n     * So, in transverse we need to compute distnce to poles, and clamp if\n     * radius is exceeded\n     */\n    static clampGeoPoint(geoPoint: GeoCoordinatesLike, unitScale: number) {\n        const lat = geoPoint.latitude;\n        const lon = geoPoint.longitude;\n\n        const r = TransverseMercatorUtils.POLE_RADIUS;\n        const rsq = TransverseMercatorUtils.POLE_RADIUS_SQ;\n\n        const nearestQuarter = Math.round(lon / 90);\n        const deltaLon = nearestQuarter * 90 - lon;\n        if (nearestQuarter % 2 === 0 || Math.abs(deltaLon) > r) {\n            return geoPoint;\n        }\n\n        const deltaLat = lat - 0;\n        const distanceToPoleSq = deltaLon * deltaLon + deltaLat * deltaLat;\n        if (distanceToPoleSq < rsq) {\n            const distanceToPole = Math.sqrt(distanceToPoleSq);\n            const scale = (r - distanceToPole) / distanceToPole;\n            // const quarter = ((nearestQuarter % 4) + 4) % 4;\n            // const dir = quarter === 1 ? -1 : quarter === 3 ? 1 : 0;\n            const dir = 1;\n            const offsetLon = deltaLon === 0 && deltaLat === 0 ? r * dir : deltaLon;\n            return new GeoCoordinates(lat + deltaLat * scale, lon + offsetLon * scale);\n        }\n\n        return geoPoint;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    private m_phi0: number = 0;\n    private m_lambda0: number = 0;\n\n    constructor(readonly unitScale: number) {\n        super(unitScale);\n    }\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh((worldPoint.x / this.unitScale - 0.5) * 2 * Math.PI);\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        const clamped = TransverseMercatorProjection.clampGeoPoint(geoPoint, this.unitScale);\n        const normalLon = clamped.longitude / 360 + 0.5;\n        const offset = normalLon === 1 ? 0 : Math.floor(normalLon);\n        const phi = MathUtils.degToRad(clamped.latitude);\n        const lambda = MathUtils.degToRad(clamped.longitude - offset * 360) - this.m_lambda0;\n\n        const B = Math.cos(phi) * Math.sin(lambda);\n        // result.x = 1/2 * Math.log((1 + B) / (1 - B));\n        result.x = Math.atanh(B);\n        result.y = Math.atan2(Math.tan(phi), Math.cos(lambda)) - this.m_phi0;\n\n        const outScale = 0.5 / Math.PI;\n        result.x = this.unitScale * (MathUtils.clamp(result.x * outScale + 0.5, 0, 1) + offset);\n        result.y = this.unitScale * MathUtils.clamp(result.y * outScale + 0.5, 0, 1);\n\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const tau = Math.PI * 2;\n        const nx = worldPoint.x / this.unitScale;\n        const ny = worldPoint.y / this.unitScale;\n        const offset = nx === 1 ? 0 : Math.floor(nx);\n        const x = tau * (nx - 0.5 - offset);\n        const y = tau * (ny - 0.5);\n        const z = worldPoint.z || 0;\n\n        const D = y + this.m_phi0;\n\n        const phi = Math.asin(Math.sin(D) / Math.cosh(x));\n        const lambda = this.m_lambda0 + Math.atan2(Math.sinh(x), Math.cos(D)) + offset * tau;\n\n        const geoPoint = GeoCoordinates.fromRadians(phi, lambda, z);\n        return geoPoint;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const { north, south, east, west } = geoBox;\n\n        const pointsToCheck = [\n            geoBox.center,\n            geoBox.northEast,\n            geoBox.southWest,\n            new GeoCoordinates(south, east),\n            new GeoCoordinates(north, west)\n        ];\n\n        const E = TransverseMercatorUtils.POLE_EDGE_DEG;\n\n        const containsWestCut = west < -90 && east > -90;\n        const containsEastCut = west < 90 && east > 90;\n        const containsCenterX = west < 0 && east > 0;\n        const containsCenterY = west < E && east > -E && north > 0 && south < 0;\n\n        if (containsWestCut) {\n            pointsToCheck.push(new GeoCoordinates(north, -90));\n            pointsToCheck.push(new GeoCoordinates(south, -90));\n        }\n\n        if (containsEastCut) {\n            pointsToCheck.push(new GeoCoordinates(north, 90));\n            pointsToCheck.push(new GeoCoordinates(south, 90));\n        }\n\n        if (containsCenterX) {\n            pointsToCheck.push(new GeoCoordinates(north, 0));\n            pointsToCheck.push(new GeoCoordinates(south, 0));\n        }\n\n        if (containsCenterY) {\n            pointsToCheck.push(new GeoCoordinates(0, west));\n            pointsToCheck.push(new GeoCoordinates(0, east));\n        }\n\n        TransverseMercatorUtils.alignLatitude(pointsToCheck, pointsToCheck[0]);\n\n        const projected = pointsToCheck.map(p => this.projectPoint(p));\n        const vx = projected.map(p => p.x);\n        const vy = projected.map(p => p.y);\n        const vz = projected.map(p => p.z);\n\n        const minX = Math.min(...vx);\n        const minY = Math.min(...vy);\n        const minZ = Math.min(...vz);\n        const maxX = Math.max(...vx);\n        const maxY = Math.max(...vy);\n        const maxZ = Math.max(...vz);\n\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = minX;\n            result.min.y = minY;\n            result.min.z = minZ;\n            result.max.x = maxX;\n            result.max.y = maxY;\n            result.max.z = maxZ;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (minX + maxX) / 2;\n            result.position.y = (minY + maxY) / 2;\n            result.position.z = (minZ + maxZ) / 2;\n            result.extents.x = (maxX - minX) / 2;\n            result.extents.y = (maxY - minY) / 2;\n            result.extents.z = (maxZ - minZ) / 2;\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /**\n     * There are 8 sub-regions on entire projection space\n     * where both longitude and latitude preserve direction.\n     * If bounding box hits more than one region, it should be splitted\n     * into sub-boxes by regions, (un)projected and then united again.\n     *\n     *\n     * directions in form [latitude / longitude]:\n     *    1 ┌─────────|─────────┐\n     *      │ dr / dl | dl / ul │\n     * 0.75 ----------|----------\n     *      │ ur / dr | ul / ur │\n     * 0.5  ----------|----------\n     *      │ ul / ur | ur / dr │\n     * 0.25 ----------|----------\n     *      │ dl / ul | dr / dl │\n     *      └─────────|─────────┘\n     *     0         0.5        1\n     *     @override\n     */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const s = this.unitScale;\n\n        const min = worldBox.min;\n        const max = worldBox.max;\n        const pointsToCheck = [\n            { x: (min.x + max.x) / 2, y: (min.y + max.y) / 2, z: 0 },\n            min,\n            max,\n            { x: min.x, y: max.y, z: 0 },\n            { x: max.x, y: min.y, z: 0 }\n        ];\n\n        const center = 0.5 * s;\n        const lowerQ = 0.25 * s;\n        const upperQ = 0.75 * s;\n\n        const containsCenterX = min.x < center && max.x > center;\n        const containsCenterY = min.y < center && max.y > center;\n        const containsLowerQY = min.y < lowerQ && max.y > lowerQ;\n        const containsUpperQY = min.y < upperQ && max.y > upperQ;\n\n        if (containsCenterY) {\n            pointsToCheck.push({ x: min.x, y: center, z: 0 });\n            pointsToCheck.push({ x: max.x, y: center, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: center, z: 0 });\n            }\n        }\n        if (containsLowerQY) {\n            pointsToCheck.push({ x: min.x, y: lowerQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: lowerQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: lowerQ, z: 0 });\n            }\n        }\n        if (containsUpperQY) {\n            pointsToCheck.push({ x: min.x, y: upperQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: upperQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: upperQ, z: 0 });\n            }\n        }\n\n        const geoPoints = pointsToCheck.map(p => this.unprojectPoint(p));\n        TransverseMercatorUtils.alignLongitude(geoPoints, geoPoints[0]);\n\n        const latitudes = geoPoints.map(g => g.latitude);\n        const longitudes = geoPoints.filter(g => Math.abs(g.latitude) < 90).map(g => g.longitude);\n        const altitudes = geoPoints.map(g => g.altitude || 0);\n\n        const minGeo = new GeoCoordinates(\n            Math.min(...latitudes),\n            Math.min(...longitudes),\n            Math.min(...altitudes)\n        );\n\n        const maxGeo = new GeoCoordinates(\n            Math.max(...latitudes),\n            Math.max(...longitudes),\n            Math.max(...altitudes)\n        );\n\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n}\n\nexport class TransverseMercatorUtils {\n    static POLE_EDGE: number = 1.4844222297453323;\n    static POLE_EDGE_DEG: number = MathUtils.radToDeg(TransverseMercatorUtils.POLE_EDGE);\n    static POLE_RADIUS: number = 90 - TransverseMercatorUtils.POLE_EDGE_DEG;\n    static POLE_RADIUS_SQ: number = Math.pow(TransverseMercatorUtils.POLE_RADIUS, 2);\n\n    /**\n     * There are two regions on projected space that have same geo coordinates,\n     * it's the entire lines   { x: [0..1], y: 0 } and { x: [0..1], y: 1 }\n     * they both have geo coordinates of   (0, [-90..+90])\n     * and should be aligned somehow to fall into first or second region\n     * to make proper bounding boxes, tile bounds, etc.\n     */\n    static alignLatitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const EPSILON = 1e-9;\n\n        for (const point of points) {\n            if (point.latitude === 0) {\n                point.latitude = referencePoint.latitude * EPSILON;\n            }\n        }\n    }\n\n    /**\n     * There are two regions on projected plane,\n     * { x: 0.5, y: [0..0.25] }    and    { x: 0.5, y: [0.75..1] }\n     * that represent longitude edge where -180 and +180 met.\n     * Points falling in this regions should be aligned to get proper boxes etc.\n     */\n    static alignLongitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const bad = referencePoint.longitude < 0 ? 180 : -180;\n        const good = referencePoint.longitude < 0 ? -180 : 180;\n\n        for (const point of points) {\n            if (point.longitude === bad) {\n                point.longitude = good;\n            }\n        }\n    }\n}\n\n/**\n * Transverse Mercator [[Projection]] used to convert geo coordinates to world coordinates\n * and vice versa.\n */\nexport const transverseMercatorProjection: Projection = new TransverseMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * `FlatTileBoundingBoxGenerator` generates bounding boxes in world and geo coordinates for a given\n * TilingScheme.\n */\nexport class FlatTileBoundingBoxGenerator {\n    private readonly m_tilingScheme: TilingScheme;\n    private readonly m_worldDimensions: Vector3Like;\n    private readonly m_worldBox: Box3Like;\n    /**\n     * Creates a new `FlatTileBoundingBoxGenerator` that can generate bounding boxes for the given\n     * TilingScheme.\n     *\n     * @param tilingScheme The [[TilingScheme]] used to compute bounding boxes.\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     */\n    constructor(\n        readonly tilingScheme: TilingScheme,\n        readonly minElevation: number = 0,\n        readonly maxElevation: number = 0\n    ) {\n        this.m_tilingScheme = tilingScheme;\n        this.m_worldBox = tilingScheme.projection.worldExtent(minElevation, maxElevation);\n        const { min, max } = this.m_worldBox;\n        this.m_worldDimensions = { x: max.x - min.x, y: max.y - min.y, z: max.z - min.z };\n    }\n\n    /**\n     * Returns the [[Projection]] of the [[TilingScheme]].\n     */\n    get projection(): Projection {\n        return this.m_tilingScheme.projection;\n    }\n\n    /**\n     * Returns the [[SubdivisionScheme]] of the [[TilingScheme]].\n     */\n    get subdivisionScheme(): SubdivisionScheme {\n        return this.m_tilingScheme.subdivisionScheme;\n    }\n\n    /**\n     * Returns the bounding box in world coordinates of the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const worldBounds = new THREE.Box3();\n     * generator.getWorldBox(geoBox, worldBounds);\n     * console.log(worldBounds.getCenter());\n     * ```\n     *\n     * @param tileKey The TileKey.\n     * @param result The optional object used to store the resulting bounding box in world\n     * coordinates.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        const level = tileKey.level;\n        const levelDimensionX = this.subdivisionScheme.getLevelDimensionX(level);\n        const levelDimensionY = this.subdivisionScheme.getLevelDimensionY(level);\n        const sizeX = this.m_worldDimensions.x / levelDimensionX;\n        const sizeY = this.m_worldDimensions.y / levelDimensionY;\n        const originX = this.m_worldBox.min.x + sizeX * tileKey.column;\n        const originY = this.m_worldBox.min.y + sizeY * tileKey.row;\n\n        if (!result) {\n            result = MathUtils.newEmptyBox3();\n        }\n\n        result.min.x = originX;\n        result.min.y = originY;\n        result.min.z = this.m_worldBox.min.z;\n        result.max.x = originX + sizeX;\n        result.max.y = originY + sizeY;\n        result.max.z = this.m_worldBox.max.z;\n        return result;\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const geoBox = generator.getGeoBox(worldBounds);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tileKey The [[TileKey]].\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        const worldBox = this.getWorldBox(tileKey);\n        return this.projection.unprojectBox(worldBox);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass HalfQuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(level: number): number {\n        return level === 0 ? 1 : 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return level !== 0 ? 1 << (level - 1) : 1;\n    }\n}\n\n/**\n * A [[SubdivisionScheme]] used to represent half quadtrees. This particular subdivision scheme is\n * used by the HERE tiling scheme.\n */\nexport const halfQuadTreeSubdivisionScheme: SubdivisionScheme = new HalfQuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"./TileKey\";\n\nexport class SubTiles implements Iterable<TileKey> {\n    constructor(public tileKey: TileKey, public sizeX: number, public sizeY: number) {}\n\n    [Symbol.iterator](): Iterator<TileKey> {\n        return this.sizeX === 2 && this.sizeY === 2\n            ? SubTiles.ZCurveIterator(this.tileKey)\n            : SubTiles.RowColumnIterator(this.tileKey, this.sizeX, this.sizeY);\n    }\n}\n\nexport namespace SubTiles {\n    export function* RowColumnIterator(\n        parentKey: TileKey,\n        sizeX: number,\n        sizeY: number\n    ): Iterator<TileKey> {\n        for (let y = 0; y < sizeY; y++) {\n            for (let x = 0; x < sizeX; x++) {\n                yield TileKey.fromRowColumnLevel(\n                    parentKey.row * sizeY + y,\n                    parentKey.column * sizeX + x,\n                    parentKey.level + 1\n                );\n            }\n        }\n    }\n\n    export function* ZCurveIterator(parentKey: TileKey): Iterator<TileKey> {\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < 4; i++) {\n            yield TileKey.fromRowColumnLevel(\n                (parentKey.row << 1) | (i >> 1),\n                (parentKey.column << 1) | (i & 1),\n                parentKey.level + 1\n            );\n        }\n        // tslint:enableno-bitwise\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\nexport class TileKeyUtils {\n    static geoCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        geoPoint: GeoCoordinatesLike,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const worldPoint = projection.projectPoint(geoPoint);\n\n        return this.worldCoordinatesToTileKey(tilingScheme, worldPoint, level);\n    }\n\n    static worldCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        worldPoint: Vector3Like,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const subdivisionScheme = tilingScheme.subdivisionScheme;\n\n        const cx = subdivisionScheme.getLevelDimensionX(level);\n        const cy = subdivisionScheme.getLevelDimensionY(level);\n\n        const { min, max } = projection.worldExtent(0, 0);\n        const worldSizeX = max.x - min.x;\n        const worldSizeY = max.y - min.y;\n\n        if (worldPoint.x < min.x || worldPoint.x > max.x) {\n            return null;\n        }\n\n        if (worldPoint.y < min.y || worldPoint.y > max.y) {\n            return null;\n        }\n\n        const column = Math.min(cx - 1, Math.floor((cx * (worldPoint.x - min.x)) / worldSizeX));\n        const row = Math.min(cy - 1, Math.floor((cy * (worldPoint.y - min.y)) / worldSizeY));\n\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    static geoRectangleToTileKeys(\n        tilingScheme: TilingScheme,\n        geoBox: GeoBox,\n        level: number\n    ): TileKey[] {\n        const wrap = (value: number, lower: number, upper: number) => {\n            if (value < lower) {\n                return upper - ((lower - value) % (upper - lower));\n            }\n\n            return lower + ((value - lower) % (upper - lower));\n        };\n\n        const clamp = (x: number, minVal: number, maxVal: number) => {\n            return Math.min(Math.max(x, minVal), maxVal);\n        };\n\n        // Clamp at the poles and wrap around the international date line.\n        const southWestLongitude = wrap(geoBox.southWest.longitudeInRadians, -Math.PI, Math.PI);\n        const southWestLatitude = clamp(\n            geoBox.southWest.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const northEastLongitude = wrap(geoBox.northEast.longitudeInRadians, -Math.PI, Math.PI);\n        const northEastLatitude = clamp(\n            geoBox.northEast.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const minTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(southWestLatitude, southWestLongitude),\n            level\n        );\n        const maxTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(northEastLatitude, northEastLongitude),\n            level\n        );\n        const columnCount = tilingScheme.subdivisionScheme.getLevelDimensionX(level);\n\n        if (!minTileKey || !maxTileKey) {\n            throw new Error(\"Invalid coordinates\");\n        }\n\n        const minColumn = minTileKey.column;\n        let maxColumn = maxTileKey.column;\n\n        // wrap around case\n        if (southWestLongitude > northEastLongitude) {\n            if (maxColumn !== minColumn) {\n                maxColumn += columnCount;\n            } else {\n                // do not duplicate\n                maxColumn += columnCount - 1;\n            }\n        }\n\n        const minRow = Math.min(minTileKey.row, maxTileKey.row);\n        const maxRow = Math.max(minTileKey.row, maxTileKey.row);\n\n        const keys = new Array<TileKey>();\n\n        for (let row = minRow; row <= maxRow; ++row) {\n            for (let column = minColumn; column <= maxColumn; ++column) {\n                keys.push(TileKey.fromRowColumnLevel(row, column % columnCount, level));\n            }\n        }\n\n        return keys;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { SubTiles } from \"./SubTiles\";\nimport { TileKey } from \"./TileKey\";\n\nexport class TileTreeTraverse {\n    private m_subdivisionScheme: SubdivisionScheme;\n\n    constructor(subdivisionScheme: SubdivisionScheme) {\n        this.m_subdivisionScheme = subdivisionScheme;\n    }\n\n    subTiles(tileKey: TileKey): Iterable<TileKey> {\n        const divX = this.m_subdivisionScheme.getSubdivisionX(tileKey.level);\n        const divY = this.m_subdivisionScheme.getSubdivisionY(tileKey.level);\n\n        return new SubTiles(tileKey, divX, divY);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class for the default console channel.\n */\n\nexport class ConsoleChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.error(message, ...optionalParams);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.debug(message, ...optionalParams);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.info(message, ...optionalParams);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.log(message, ...optionalParams);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.trace(message, ...optionalParams);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.warn(message, ...optionalParams);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\n\n/**\n * Logger class.\n */\nexport class Logger implements ILogger {\n    enabled: boolean = true;\n    level: LogLevel = LogLevel.Trace;\n\n    constructor(readonly name: string, private m_channel: IChannel, options?: LoggerOptions) {\n        if (options !== undefined) {\n            this.update(options);\n        }\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Error) {\n            this.m_channel.error(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Debug) {\n            this.m_channel.debug(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Info) {\n            this.m_channel.info(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Log) {\n            this.m_channel.log(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Trace) {\n            this.m_channel.trace(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Warn) {\n            this.m_channel.warn(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    update(options: LoggerOptions) {\n        this.enabled = options.enabled === undefined ? this.enabled : options.enabled;\n        this.level = options.level === undefined ? this.level : options.level;\n    }\n\n    private get prefix(): string {\n        return this.name + \":\";\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { LogLevel } from \"./ILogger\";\n\ndeclare let self: Worker;\n\nexport const WORKERCHANNEL_MSG_TYPE = \"worker-channel-message\";\n\n/**\n * The interface for the messages of the WorkerChannel.\n */\nexport interface IWorkerChannelMessage {\n    message: any[];\n    type: \"worker-channel-message\";\n    level: LogLevel;\n}\n\n/**\n * The class for the worker channel.\n */\nexport class WorkerChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Error\n        };\n        self.postMessage(workerMessage);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Debug\n        };\n        self.postMessage(workerMessage);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Info\n        };\n        self.postMessage(workerMessage);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Log\n        };\n        self.postMessage(workerMessage);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Trace\n        };\n        self.postMessage(workerMessage);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Warn\n        };\n        self.postMessage(workerMessage);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * The base shader to use for [[MapView]]'s composing passes, like [[MSAAMaterial]].\n */\n\nexport const CopyShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        opacity: { value: 1.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform float opacity;\n    uniform sampler2D tDiffuse;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        gl_FragColor = opacity * texel;\n    }`\n};\n\n/**\n * The material is used for composing.\n */\nexport class CopyMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `CopyMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            name: \"CopyMaterial\",\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: false,\n            blending: THREE.NoBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @hidden\n */\nexport type Value = null | boolean | number | string | object;\n\n/**\n * @hidden\n */\nexport interface ValueMap {\n    [name: string]: Value;\n}\n\n/**\n * @hidden\n */\nexport class Env {\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     */\n    lookup(_name: string): Value | undefined {\n        return undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment. (Here: empty object).\n     */\n    unmap(): ValueMap {\n        return {};\n    }\n}\n\n/**\n * Adds access to map specific environment properties.\n */\nexport class MapEnv extends Env {\n    constructor(readonly entries: ValueMap, private readonly parent?: Env) {\n        super();\n    }\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     * @override\n     */\n    lookup(name: string): Value | undefined {\n        if (this.entries.hasOwnProperty(name)) {\n            const value = this.entries[name];\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return this.parent ? this.parent.lookup(name) : undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment, takes care of the parent\n     * object.\n     * @override\n     */\n    unmap(): ValueMap {\n        const obj: any = this.parent ? this.parent.unmap() : {};\n        for (const key in this.entries) {\n            if (this.entries.hasOwnProperty(key)) {\n                obj[key] = this.entries[key];\n            }\n        }\n        return obj;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\nimport { InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\n\n/**\n * Available line caps types(`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n * Default is `\"Round\"`.\n */\nexport type LineCaps = \"Square\" | \"Round\" | \"None\" | \"TriangleOut\" | \"TriangleIn\";\n\n/**\n * The kind of geometry is used to\n *\n * a) Group objects together, allowing the group to be hidden or displayed.\n *\n * b) Assigning the objects a loading phase. If a [[PhasedTileGeometryManager]] is used, techniques\n *      without a `GeometryKind` may not be processed (at the desired phase).\n *\n * Any string can be used to specify the kind of the technique in a style in the theme file. Is is\n * suggested to specify multiple kinds for specific types of data. For a highway, the following list\n * of kinds is suggested:\n *\n *    [\"line\", \"road\", \"road:highway\"]\n *\n * If it is a tunnel for a highway:\n *\n *    [\"line\", \"road\", \"road:highway\", \"tunnel\", \"road:tunnel\", \"road:highway:tunnel\"]\n *\n * If specified in this way, specific types of data (here: highway roads) can be enabled and/or\n * disabled.\n */\nexport enum GeometryKind {\n    /**\n     * Used in the enabledKinds/disabledKinds filter to match any kind.\n     */\n    All = \"_all_\",\n\n    /**\n     * Background geometry.\n     */\n    Background = \"background\",\n\n    /**\n     * Terrain geometry.\n     */\n    Terrain = \"terrain\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Area = \"area\",\n\n    /**\n     * Default value for all line techniques.\n     */\n    Line = \"line\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Water = \"water\",\n\n    /**\n     * Political borders.\n     */\n    Border = \"border\",\n\n    /**\n     * Basis for all roads.\n     */\n    Road = \"road\",\n\n    /**\n     * Default value for the ExtrudedPolygonTechnique.\n     */\n    Building = \"building\",\n\n    /**\n     * Default value for the TextTechnique, LineMarkerTechnique and the PoiTechnique.\n     */\n    Label = \"label\",\n\n    /**\n     * Anything that may show up last.\n     */\n    Detail = \"detail\"\n}\n\n/**\n * Decorate property type with possible dynamic variants.\n */\nexport type DynamicProperty<T> = T | JsonExpr | InterpolatedPropertyDefinition<T>;\n\n/*\n * Description of length units inside a style. Supports literal values (interpreted as `m`), `m` and\n * `px`(i.e. `80`, `14px`, `0.6m`, etc.).\n */\nexport type StyleLength = string | number;\n\n/**\n * Description of colors inside a style. Supports hex values as well as CSS hex, rgb and hsl values\n * (i.e. `0xffffff`, `#f00fab`, `#aaa`, `rgb(255, 0 120)`, `hsl(360, 100%, 100%)`, etc.).\n */\nexport type StyleColor = string | number;\n\n/**\n * A set of [[GeometryKind]]s.\n */\nexport class GeometryKindSet extends Set {\n    /**\n     * Return `true` if the Set is a superset of the set 'subset'.\n     */\n    isSuperset(subset: Set<any>): boolean {\n        for (const elem of subset) {\n            if (!this.has(elem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the Set intersects Set 'set'.\n     */\n    hasIntersection(set: any) {\n        for (const elem of set) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return `true` if the Set either intersects Set 'set' (if set is a Set), of has element 'set'\n     * if set is not a Set.\n     */\n    hasOrIntersects(set: any) {\n        if (set instanceof Set) {\n            return this.hasIntersection(set);\n        }\n        return this.has(set);\n    }\n\n    /**\n     * Return `true` if this set and the array of elements share at least a single element.\n     */\n    hasOrIntersectsArray(subset: any[]) {\n        for (const elem of subset) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Common attributes or all [[Technique]]s.\n */\nexport interface BaseTechniqueParams {\n    /**\n     * The name used to identify materials created from this technique.\n     */\n    id?: string;\n\n    /**\n     * The render order of the objects created using this technique.\n     *\n     * If not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\n     * values according to style position in file.\n     */\n    renderOrder: number;\n\n    /**\n     *\n     */\n    renderOrderOffset?: number;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this technique creates.\n     */\n    transient?: boolean;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\n     * fading out (opacity decreases).\n     */\n    fadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\n     * opacity and stops fading out. An undefined value disables fading.\n     */\n    fadeFar?: DynamicProperty<number>;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n     * `false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.\n     */\n    enabled?: boolean;\n}\n\nexport enum TextureCoordinateType {\n    /**\n     * Texture coordinates are in tile space.\n     * SW of the tile will have (0,0) and NE will have (1,1).\n     */\n    TileSpace = \"tile-space\",\n    /**\n     * Texture coordinates are in equirectangular space.\n     * (u, v) = ( (longitude+180) / 360, (latitude+90) / 180).\n     */\n    EquirectangularSpace = \"equirectangular-space\"\n}\n\n/**\n * Standard technique parameters.\n */\nexport interface StandardTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.\n     */\n    wireframe?: boolean;\n    /**\n     * If `vertexColors` is `true`, every vertex has color information, which is interpolated\n     * between vertices.\n     * See https://threejs.org/docs/#api/en/materials/Material.vertexColors.\n     */\n    vertexColors?: boolean;\n    /**\n     * How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\n     * diffuse. Default is `1.0`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.\n     */\n    roughness?: DynamicProperty<number>;\n    /**\n     * How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\n     * metallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n     * `0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\n     * values are multiplied.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.\n     */\n    metalness?: DynamicProperty<number>;\n    /**\n     * The material will not be rendered if the opacity is lower than this value.\n     * See https://threejs.org/docs/#api/en/materials/Material.alphaTest.\n     */\n    alphaTest?: DynamicProperty<number>;\n    /**\n     * Skip rendering clobbered pixels.\n     * See https://threejs.org/docs/#api/en/materials/Material.depthTest.\n     */\n    depthTest?: boolean;\n    /**\n     * Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     * See https://threejs.org/docs/#api/en/materials/Material.transparent.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     * See https://threejs.org/docs/#api/en/materials/Material.opacity.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Emissive (light) color of the material, essentially a solid color unaffected by other\n     * lighting. Default is black.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.\n     * @format color-hex\n     */\n    emissive?: DynamicProperty<StyleColor>;\n    /**\n     * Intensity of the emissive light. Modulates the emissive color. Default is `1`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.\n     */\n    emissiveIntensity?: DynamicProperty<number>;\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\n     * the material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n     * `THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n     *  is `0.98`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.\n     */\n    refractionRatio?: DynamicProperty<number>;\n\n    /**\n     * Whether and how texture coordinates should be generated. No texture coordinates are\n     * generated if `undefined`.\n     * Should be set if any texture assigned (e.g. `map`, `normalMap`, ...).\n     */\n    textureCoordinateType?: TextureCoordinateType;\n\n    /*\n     * URL or texture buffer that should be used as color map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.map\n     */\n    map?: string | TextureBuffer;\n    mapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as normal map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap\n     */\n    normalMap?: string | TextureBuffer;\n    normalMapType?: number;\n    normalMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as displacement map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap\n     */\n    displacementMap?: string | TextureBuffer;\n    displacementMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as roughness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap\n     */\n    roughnessMap?: string | TextureBuffer;\n    roughnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as emissive map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap\n     */\n    emissiveMap?: string | TextureBuffer;\n    emissiveMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as bump map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap\n     */\n    bumpMap?: string | TextureBuffer;\n    bumpMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as metalness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap\n     */\n    metalnessMap?: string | TextureBuffer;\n    metalnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as alpha map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap\n     */\n    alphaMap?: string | TextureBuffer;\n    alphaMapProperties?: TextureProperties;\n}\n\n/**\n * Possible parameters of [[PointTechnique]].\n */\nexport interface PointTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * URL of a texture image to be loaded.\n     */\n    texture?: string;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Size of point in pixels.\n     */\n    size?: number;\n    /**\n     * Whether to enable picking on these points.\n     */\n    enablePicking?: boolean;\n}\n\n/**\n * Define the stacking option. Enum values for theme file are in \"kebab-case\".\n */\nexport enum PoiStackMode {\n    /**\n     * Show in a stack.\n     */\n    Show = \"show-in-stack\",\n    /**\n     * Do not show in a stack.\n     */\n    Hide = \"hide-in-stack\",\n    /**\n     * Show category parent in the stack.\n     */\n    ShowParent = \"show-parent\"\n}\n\n/**\n * Technique that describes icons with labels. Used in [[PoiTechnique]] and [[LineMarkerTechnique]]\n * (for road shields).\n */\nexport interface MarkerTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted)\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n     *  - `[\"get\", \"name\"]`\n     *\n     * See [[ExtendedTileInfo.getFeatureText]]\n     */\n    text?: string;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of marker, defaults to `0`. Markers with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n    /**\n     * Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `false`, text may overlap markers.\n     * @default `false`\n     */\n    textMayOverlap?: boolean;\n    /**\n     * If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\n     * property value from `textMayOverlap` will be used.\n     * @default `false`\n     */\n    iconMayOverlap?: boolean;\n    /**\n     * If `false`, text will not reserve screen space, other markers will be able to overlap.\n     * @default `true`\n     */\n    textReserveSpace?: boolean;\n    /**\n     * If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\n     * defined, the property value from `iconReserveSpace` will be used.\n     * @default `true`\n     */\n    iconReserveSpace?: boolean;\n    /**\n     * If `false`, text will not be rendered during animations. Defaults to `true`.\n     */\n    renderTextDuringMovements?: boolean;\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels with\n     * this flag set, the render order is undefined.\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n    /**\n     * If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n     * `false`.\n     */\n    textIsOptional?: boolean;\n    /**\n     * Should be displayed on map or not. Defaults to `true`.\n     */\n    showOnMap?: boolean;\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n    /**\n     * Minimal distance between markers in screen pixels.\n     */\n    minDistance?: number;\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Fading time for icons in seconds.\n     */\n    iconFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: DynamicProperty<number>;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    iconXOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    iconYOffset?: DynamicProperty<number>;\n    /**\n     * Scaling factor of icon.\n     */\n    iconScale?: number;\n    /**\n     * Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.\n     */\n    screenHeight?: DynamicProperty<number>;\n    /**\n     * Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.\n     */\n    screenWidth?: DynamicProperty<number>;\n    /**\n     * Name of the POI table which should be used for this POI.\n     */\n    poiTable?: string;\n    /**\n     * Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\n     * supercedes any value read from the field referenced in `poiNameField`.\n     */\n    poiName?: string;\n    /**\n     * Name of the field to evaluate to get the name of the POI options in the POI table.\n     */\n    poiNameField?: string;\n    /**\n     * Name of [[ImageTexture]] definition to use.\n     */\n    imageTexture?: string;\n    /**\n     * Field name to extract imageTexture content from.\n     */\n    imageTextureField?: string;\n    /**\n     * Prefix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePrefix?: string;\n    /**\n     * Postfix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePostfix?: string;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\nexport interface LineTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to true if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in pixels. WebGL implementations will normally render all lines with 1 pixel\n     * width, and ignore this value.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a geometry as a segment.\n */\nexport interface SegmentsTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of a line in meters.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a polygon.\n */\nexport interface PolygonalTechniqueParams {\n    /**\n     * Whether to use polygon offset. Default is false. This corresponds to the\n     * GL_POLYGON_OFFSET_FILL WebGL feature.\n     *\n     * PolygonOffset is used to raise the geometry towards the geometry (for depth calculation\n     * only). Default is false.\n     *\n     * See here: https://sites.google.com/site/threejstuts/home/polygon_offset\n     *\n     * To activate polygonOffset these values have to be set to pull the line \"forwards\":\n     *\n     * transparent: true\n     *\n     * polygonOffset: true\n     *\n     * polygonOffsetFactor : -1.0, (as an example, see link above)\n     *\n     * polygonOffsetUnits: -1 (as an example, see link above)\n     */\n    polygonOffset?: boolean;\n\n    /**\n     * Sets the polygon offset factor. Default is 0.\n     */\n    polygonOffsetFactor?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon offset units. Default is 0.\n     */\n    polygonOffsetUnits?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon outline color.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a basic extruded line.\n */\nexport interface BasicExtrudedLineTechniqueParams\n    extends BaseTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\n     * is \"Basic\".\n     *\n     * `\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"`: Elaborate shading, with metalness, and roughness.\n     *\n     * TODO: is this TechniqueParams or Style prop ?\n     */\n    shading?: \"basic\";\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: \"None\" | \"Circle\";\n}\n\n/**\n * Declares a a geometry as a standard extruded line.\n */\nexport interface StandardExtrudedLineTechniqueParams\n    extends StandardTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\n     * Default is `\"basic\"`.\n     *\n     * `\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"` : Elaborate shading, with metalness, and roughness.\n     */\n    shading: \"standard\";\n    /**\n     * Width of a line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: \"None\" | \"Circle\";\n}\n\n/**\n * Declares a a geometry as a solid line.\n */\nexport interface SolidLineTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Color of a line outline in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    outlineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    // TODO: Make pixel units default.\n    /**\n     * @deprecated Specify metrics units as part of the value instead.\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     */\n    metricUnit?: string;\n    /**\n     * Width of a line in `metricUnit` for different zoom levels.\n     */\n    lineWidth: DynamicProperty<StyleLength>;\n    /**\n     * Outline width of a line in `metricUnit`s for different zoom levels.\n     */\n    outlineWidth?: DynamicProperty<StyleLength>;\n    /**\n     * Clip the line outside the tile if `true`.\n     */\n    clipping?: boolean;\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n    /**\n     * Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n     * `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    secondaryColor?: DynamicProperty<StyleColor>;\n    /**\n     * Width of secondary line geometry in `metricUnit`s for different zoom levels.\n     */\n    secondaryWidth?: DynamicProperty<StyleLength>;\n    /**\n     * The render order of the secondary line geometry object created using this technique.\n     */\n    secondaryRenderOrder?: number;\n    /**\n     * Describes secondary line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`,\n     * `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    secondaryCaps?: LineCaps;\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n    /**\n     * Color of a line dashes in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    dashColor?: DynamicProperty<StyleColor>;\n    /**\n     * Length of a line in meters for different zoom levels.\n     */\n    dashSize?: DynamicProperty<StyleLength>;\n    /**\n     * Size of a gap between lines in meters for different zoom levels.\n     */\n    gapSize?: DynamicProperty<StyleLength>;\n}\n\n/**\n * Technique used to draw filled polygons.\n */\nexport interface FillTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth?: DynamicProperty<number>;\n}\n\n/**\n * Technique used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Renders the footprint lines if set to 'true'.\n     */\n    footprint?: boolean;\n    /**\n     * Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\n     * to modulate the amount of vertical lines rendered.\n     */\n    maxSlope?: number;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).\n     */\n    lineColorMix?: number;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n\n    /**\n     * Height above ground in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"get\", \"height\"]`.\n     */\n    height?: number;\n\n    /**\n     * Height of \"floor\" of extruded polygon in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`.\n     */\n    floorHeight?: number;\n\n    /**\n     * In some data sources, for example Tilezen, building extrusion information might be missing.\n     * This attribute allows to define a default height of an extruded polygon in the theme.\n     *\n     * @deprecated use [[height]]\n     */\n    defaultHeight?: number;\n\n    /**\n     * Default color used if feature doesn't provide color attribute\n     * and [[MapEnv]] did not return it too.\n     * @format color-hex\n     */\n    defaultColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * If `true`, the height of the extruded buildings will not be modified by the mercator\n     * projection distortion that happens around the poles.\n     *\n     * @default `false`\n     */\n    constantHeight?: boolean;\n\n    /**\n     * If `false`, wall geometry will not be added along the tile boundaries.\n     * @default `true`\n     */\n    boundaryWalls?: boolean;\n\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    animateExtrusion?: DynamicProperty<boolean>;\n\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    animateExtrusionDuration?: number;\n\n    /**\n     * Control rendering of depth prepass before the actual geometry.\n     *\n     * Depth prepass is a method to render translucent meshes, hence only the visible front faces of\n     * a mesh are actually rendered, removing artifacts caused by blending with internal faces of\n     * the mesh. This method is used for drawing translucent buildings over map background.\n     *\n     * By default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n     * `false` forcefully disables depth prepass.\n     */\n    enableDepthPrePass?: boolean;\n}\n\nexport interface ShaderTechniqueMaterialParameters {\n    [name: string]: any;\n}\n\n/**\n * Special technique for user-defined shaders. See\n * https://threejs.org/docs/#api/harp-materials/ShaderMaterial for details.\n */\nexport interface ShaderTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Parameters for shader. See `THREE.ShaderMaterialParameters`.\n     */\n    params: ShaderTechniqueMaterialParameters;\n\n    /**\n     * Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n     * \"mesh\"\n     */\n    primitive: \"point\" | \"line\" | \"segments\" | \"mesh\";\n}\n\n/**\n * Technique used to render a terrain geometry with a texture.\n * When using this technique, the datasource will produce texture coordinates in\n * local tile space (i.e. [0,0] at south-west and [1,1] at north-east tile corner).\n */\nexport interface TerrainTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Colors to be applied at different heights (as a results of a `displacementMap`).\n     */\n    heightBasedColors?: HeightBasedColors;\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the interpolation method used to\n     * generate the height-based gradient texture (defaults to `Discrete`).\n     */\n    heightGradientInterpolation?: \"Discrete\" | \"Linear\" | \"Cubic\";\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated\n     * gradient texture (defaults to `128`).\n     */\n    heightGradientWidth?: number;\n}\n\n/**\n * Render geometry as a text.\n */\nexport interface TextTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted);\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true;\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true;\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language;\n     *  - `[\"get\", \"name\"]`.\n     *\n     * See [[ExtendedTileInfo.getFeatureText]].\n     */\n    text?: string;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of text, defaults to `0`. Elements with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number;\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number;\n    /**\n     * Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n    /**\n     * If `true`, element will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: number;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: number;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\n/**\n * Buffer holding a texture.\n */\nexport interface TextureBuffer {\n    /**\n     * Buffer containing the (compressed) image or the raw texture data.\n     */\n    buffer: ArrayBuffer;\n\n    /**\n     * Mime type of the image or 'image/raw' in case of raw texture data.\n     */\n    type: string;\n\n    /**\n     * Properties for creating a three.js DataTexture\n     * (https://threejs.org/docs/#api/en/textures/DataTexture).\n     */\n    dataTextureProperties?: DataTextureProperties;\n}\n\n/**\n * Type guard to check if an object is an instance of `TextureBuffer`.\n */\nexport function isTextureBuffer(object: any): object is TextureBuffer {\n    return object && object.buffer && typeof object.type === \"string\";\n}\n\n/**\n * Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).\n */\nexport interface DataTextureProperties {\n    width: number;\n    height: number;\n\n    format?: PixelFormat;\n    type?: TextureDataType;\n}\n\n/**\n * Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).\n */\nexport interface TextureProperties {\n    /**\n     * Texture horizontal wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapS.\n     */\n    wrapS?: WrappingMode;\n\n    /**\n     * Texture vertical wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapT.\n     */\n    wrapT?: WrappingMode;\n\n    /**\n     * Texture magnification filter.\n     */\n    magFilter?: MagFilter;\n\n    /**\n     * Texture minification filter.\n     */\n    minFilter?: MinFilter;\n\n    /**\n     * Flip texture vertically.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.flipY.\n     */\n    flipY?: boolean;\n\n    /**\n     * Texture horizontal repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatU?: number;\n\n    /**\n     * Texture vertical repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatV?: number;\n}\n\n/**\n * Interface containing the definition of different colors to be used at different heights with the\n * [[TerrainTechnique]].\n */\nexport interface HeightBasedColors {\n    heightArray: number[];\n    colorArray: string[];\n}\n\nexport type PixelFormat =\n    | \"Alpha\"\n    | \"RGB\"\n    | \"RGBA\"\n    | \"Luminance\"\n    | \"LuminanceAlpha\"\n    | \"RGBE\"\n    | \"Depth\"\n    | \"DepthStencil\"\n    | \"Red\";\n\nexport type TextureDataType =\n    | \"UnsignedByte\"\n    | \"Byte\"\n    | \"Short\"\n    | \"UnsignedShort\"\n    | \"Int\"\n    | \"UnsignedInt\"\n    | \"Float\"\n    | \"HalfFloat\";\n\n/**\n * Available texture wrapping modes.\n */\nexport type WrappingMode = \"clamp\" | \"repeat\" | \"mirror\";\n\n/**\n * Available texture magnification filters.\n */\nexport type MagFilter = \"nearest\" | \"linear\";\n\n/**\n * Available texture minification filters.\n */\nexport type MinFilter =\n    | \"nearest\"\n    | \"nearestMipMapNearest\"\n    | \"nearestMipMapLinear\"\n    | \"linear\"\n    | \"linearMipMapNearest\"\n    | \"linearMipMapLinear\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Technique } from \"./Techniques\";\n\nexport enum AttrScope {\n    /**\n     * Attributes that affect generation of feature geometry and thus must be resolved at decoding\n     * time.\n     *\n     * They may have huge variancy as they are implemented as vertex attributes or embedded in\n     * generated meshes.\n     *\n     * These attributes are available only in decoding scope.\n     */\n    FeatureGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * These attributes affect generated geometry and  thus must be resolved at decoding time.\n     *\n     * They shouldn't have big variancy and evaluate to at least dozens of values as each\n     * combination of these attributes consitute new technique and material.\n     *\n     * These attributes are available in decoding and rendering scope.\n     */\n    TechniqueGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * Attributes that can be changed in resulting object/material from frame to frame. They are\n     * usually implemented as uniforms.\n     *\n     * These attributes may be available only at rendering scope.\n     */\n    TechniqueRendering\n}\n\n/**\n * Extract  property names from [[Technique]]-like interface (excluding `name`) as union of string\n * literals.\n *\n * TechniquePropName<Base\n *\n */\nexport type TechniquePropNames<T> = T extends { name: any } ? keyof Omit<T, \"name\"> : keyof T;\n\nexport type TechniquePropScopes<T> = {\n    [P in TechniquePropNames<T>]?: AttrScope;\n};\n\nexport interface TechniqueDescriptor<T> {\n    attrTransparencyColor?: string;\n    attrScopes: TechniquePropScopes<T>;\n}\n\ntype OneThatMatches<T, P> = T extends P ? T : never;\ntype TechniqueByName<K extends Technique[\"name\"]> = OneThatMatches<Technique, { name: K }>;\n\nexport type TechniqueDescriptorRegistry = {\n    [P in Technique[\"name\"]]?: TechniqueDescriptor<TechniqueByName<P>>;\n};\n\nexport function mergeTechniqueDescriptor<T>(\n    ...descriptors: Array<Partial<TechniqueDescriptor<T>>>\n): TechniqueDescriptor<T> {\n    const result: TechniqueDescriptor<T> = {\n        attrScopes: {}\n    };\n    for (const descriptor of descriptors) {\n        if (descriptor.attrTransparencyColor !== undefined) {\n            result.attrTransparencyColor = descriptor.attrTransparencyColor;\n        }\n        if (descriptor.attrScopes !== undefined) {\n            result.attrScopes = { ...result.attrScopes, ...descriptor.attrScopes };\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    equirectangularProjection,\n    mercatorProjection,\n    normalizedEquirectangularProjection,\n    OrientedBox3,\n    Projection,\n    sphereProjection,\n    Vector3Like,\n    webMercatorProjection\n} from \"@here/harp-geoutils\";\nimport { Technique } from \"./Techniques\";\nimport { TileInfo } from \"./TileInfo\";\n\n/**\n * This object has geometry data in the form of geometries buffers ready to be used by WebGL.\n * These geometries are not `three.js` objects. They are pure data stored as `ArrayBuffer`s and\n * metadata describing these buffers.\n */\nexport interface DecodedTile {\n    techniques: Technique[];\n    geometries: Geometry[];\n    pathGeometries?: PathGeometry[];\n    textPathGeometries?: TextPathGeometry[];\n    textGeometries?: TextGeometry[]; // ### deprecate\n    poiGeometries?: PoiGeometry[];\n    tileInfo?: TileInfo;\n    maxGeometryHeight?: number;\n    decodeTime?: number; // time used to decode (in ms)\n\n    /**\n     * The default bounding box in [[Tile]] is based on the geo box of the tile.\n     * For data-sources that have 3d data this is not sufficient so the data-source can provide a\n     * more accurate bounding box once the data is decoded.\n     */\n    boundingBox?: OrientedBox3;\n\n    /**\n     * Tile data Copyright holder identifiers.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * @see [[CopyrightInfo]]\n     */\n    copyrightHolderIds?: string[];\n}\n\n/**\n * This object keeps the path of the geometry. Space of the path depends on the\n * use case, so could be either world or local tile space.\n */\nexport interface PathGeometry {\n    path: Vector3Like[];\n}\n\n/**\n * Attributes corresponding to some decoded geometry. It may be either a map\n * of multiple attributes or just a number with the geometry's feature id.\n */\nexport type AttributeMap = {} | number;\n\n/**\n * This object keeps textual data together with metadata to place it on the map.\n */\nexport interface TextPathGeometry {\n    path: number[];\n    pathLengthSqr: number;\n    text: string;\n    technique: number;\n    objInfos?: AttributeMap;\n}\n\n/**\n * Returns an array with the data type specified as parameter.\n *\n * @param attr specifies which type of data is being stored in the array\n */\nexport function getArrayConstructor(attr: BufferElementType) {\n    switch (attr) {\n        case \"float\":\n            return Float32Array;\n        case \"uint8\":\n            return Uint8Array;\n        case \"uint16\":\n            return Uint16Array;\n        case \"uint32\":\n            return Uint32Array;\n        case \"int8\":\n            return Int8Array;\n        case \"int16\":\n            return Int16Array;\n        case \"int32\":\n            return Int32Array;\n    }\n}\n\n/**\n * Structured clone compliant WebGL interleaved buffer with its metadata attached.\n */\nexport interface InterleavedBufferAttribute {\n    buffer: ArrayBufferLike;\n    stride: number;\n    type: BufferElementType;\n    attributes: Array<{\n        name: string;\n        itemSize: number;\n        offset: number;\n    }>;\n}\n\n/**\n * Geometry types supported by [[Geometry]] objects.\n */\nexport enum GeometryType {\n    Unspecified = 0,\n    Point,\n    Line,\n    SolidLine,\n    Text,\n    TextPath,\n    ExtrudedLine,\n    Polygon,\n    ExtrudedPolygon,\n    Object3D,\n    Other = 1000\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object, consisting of buffers with\n * metadata for map features and objects for example roads, trees or parks.\n */\nexport interface Geometry {\n    type: GeometryType;\n    vertexAttributes: BufferAttribute[];\n    interleavedVertexAttributes?: InterleavedBufferAttribute[];\n    index?: BufferAttribute;\n    edgeIndex?: BufferAttribute;\n    groups: Group[];\n    uuid?: string;\n\n    /**\n     * Optional list of feature start indices. The indices point into the index attribute.\n     */\n    featureStarts?: number[];\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n}\n\n/**\n * The data stored in Buffers' elements can be of the following elementary types: float, signed or\n * unsigned integers (8-bit, 16-bit or 32-bit long).\n */\nexport type BufferElementType =\n    | \"float\"\n    | \"uint8\"\n    | \"uint16\"\n    | \"uint32\"\n    | \"int8\"\n    | \"int16\"\n    | \"int32\";\n\n/**\n * Structured clone compliant WebGL buffer and its metadata.\n */\nexport interface BufferAttribute {\n    name: string;\n    buffer: ArrayBufferLike;\n    type: BufferElementType;\n    itemCount: number;\n    normalized?: boolean;\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with text to be rendered.\n * It is composed of buffers with metadata for text objects.\n */\nexport interface TextGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with points of interest (POIs)\n * to be rendered. It is composed of buffers with metadata for POI objects.\n */\nexport interface PoiGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    /**\n     * Names of the image texture or the name of the POI as indices into the array `stringCatalog`.\n     */\n    imageTextures?: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant WebGL group object and its metadata.\n * Its purpose is to make working with groups of objects easier.\n */\nexport interface Group {\n    start: number;\n    count: number;\n    technique: number;\n\n    /**\n     * Offset added to [[Technique]]'s [[renderOrder]] when calculating final `renderOrder` of\n     * geometry object from given group.\n     */\n    renderOrderOffset?: number;\n    featureId?: number;\n\n    /**\n     * Contains tile offsets if its [[Geometry]] has been created.\n     */\n    createdOffsets?: number[];\n}\n\n/**\n * Returns the projection object specified in the parameter.\n *\n * @param projectionName string describing projection to be used\n */\nexport function getProjection(projectionName: string): Projection | never {\n    switch (projectionName) {\n        case \"mercator\":\n            return mercatorProjection;\n        case \"webMercator\":\n            return webMercatorProjection;\n        case \"sphere\":\n            return sphereProjection;\n        case \"normalizedEquirectangular\":\n            return normalizedEquirectangularProjection;\n        case \"equirectangular\":\n            return equirectangularProjection;\n        default:\n            throw new Error(`Unknown projection ${projectionName}`);\n    } // switch\n}\n\n/**\n * String with the projection's name.\n *\n * @param projection `Projection` object containing the name of the projection to retrieve\n */\nexport function getProjectionName(projection: Projection): string | never {\n    if (projection === mercatorProjection) {\n        return \"mercator\";\n    } else if (projection === webMercatorProjection) {\n        return \"webMercator\";\n    } else if (projection === sphereProjection) {\n        return \"sphere\";\n    } else if (projection === normalizedEquirectangularProjection) {\n        return \"normalizedEquirectangular\";\n    } else if (projection === equirectangularProjection) {\n        return \"equirectangular\";\n    }\n    throw new Error(\"Unknown projection\");\n}\n\n/**\n * @returns Feature id from the provided attribute map.\n */\nexport function getFeatureId(attributeMap: AttributeMap | undefined): number {\n    if (attributeMap === undefined) {\n        return 0;\n    }\n\n    if (typeof attributeMap === \"number\") {\n        return attributeMap;\n    }\n\n    if (attributeMap.hasOwnProperty(\"$id\")) {\n        return (attributeMap as any).$id as number;\n    }\n\n    return 0;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    ContainsExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    isJsonExpr,\n    JsonExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\nimport { ExprPool } from \"./ExprPool\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedProperty\";\nimport { interpolatedPropertyDefinitionToJsonExpr } from \"./InterpolatedPropertyDefs\";\nimport { AttrScope, mergeTechniqueDescriptor, TechniquePropNames } from \"./TechniqueDescriptor\";\nimport { IndexedTechnique, Technique, techniqueDescriptors } from \"./Techniques\";\nimport {\n    Definitions,\n    isActualSelectorDefinition,\n    isJsonExprReference,\n    LineStyle,\n    Style,\n    StyleDeclaration,\n    StyleSelector,\n    StyleSet\n} from \"./Theme\";\n\nconst logger = LoggerManager.instance.create(\"StyleSetEvaluator\");\n\nconst emptyTechniqueDescriptor = mergeTechniqueDescriptor<Technique>({});\n\ninterface StyleInternalParams {\n    /**\n     * Optimization: Lazy creation and storage of expression in a style object.\n     */\n    _whenExpr?: Expr;\n    _minZoomLevelExpr?: Expr;\n    _maxZoomLevelExpr?: Expr;\n\n    _staticAttributes?: Array<[string, Value]>;\n\n    /**\n     * These attributes are used to instantiate Technique variants.\n     *\n     * @see [[TechiqueDescriptor.techniquePropNames]]\n     */\n    _dynamicTechniqueAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes must be evaluated basing with feature env.\n     *\n     * They are not propagated to rendering scope.\n     *\n     * @see [[TechniqueAttrScope.Feature]]\n     */\n    _dynamicFeatureAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes are forwarded as serialized by decoder to main thread, so they are resolved\n     * directly in render loop.\n     *\n     * Will contain attributes from these lists\n     *  - interpolants from [[TechiqueDescriptor.techniquePropNames]]\n     *  - expressions [[TechniqueDescriptor.dynamicPropNames]] (Future)\n     */\n    _dynamicForwardedAttributes?: Array<[string, Expr]>;\n    _dynamicTechniques?: Map<string, IndexedTechnique>;\n\n    /**\n     * Optimization: Index into table in StyleSetEvaluator.\n     * @hidden\n     */\n    _staticTechnique?: IndexedTechnique;\n\n    /**\n     * Optimization: StyleSet index.\n     * @hidden\n     */\n    _styleSetIndex?: number;\n\n    /**\n     * Optimization: Requested $geometryType.\n     * @hidden\n     */\n    _geometryType?: string;\n}\n\ntype InternalStyle = Style & StyleSelector & StyleInternalParams;\n\n/**\n * [[StyleConditionClassifier]] searches for usages of `$layer` in `when` conditions\n * associated with styling rules.\n *\n * @hidden\n */\nclass StyleConditionClassifier implements ExprVisitor<Expr | undefined, Expr | undefined> {\n    private _style!: InternalStyle;\n\n    classify(style: InternalStyle) {\n        if (style._whenExpr) {\n            const savedStyle = this.switchStyle(style);\n            style._whenExpr = style._whenExpr.accept(this, undefined);\n            this._style = savedStyle;\n        }\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitContainsExpr(expr: ContainsExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitMatchExpr(expr: MatchExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCaseExpr(expr: CaseExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCallExpr(call: CallExpr, enclosingExpr: Expr | undefined): Expr | undefined {\n        if (call.op === \"all\") {\n            // processing of an `[\"all\", e1, e2, ... eN]` expression. In this case\n            // search for expressions matching comparison of `$layer` and string literals\n            // in the sub expressions.\n            const children = call.args\n                .map(childExpr => childExpr.accept(this, call))\n                .filter(childExpr => childExpr !== undefined) as Expr[];\n\n            return new CallExpr(call.op, children);\n        } else if (enclosingExpr) {\n            // `call` is a direct child expression of an `\"all\"` operator.\n            const matched = this.matchVarStringComparison(call);\n\n            if (matched) {\n                if (this._style.layer === undefined && matched.name === \"$layer\") {\n                    // found a subexpression `[\"==\", [\"get\", \"$layer\"], \"some layer name\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $layer in\n                    // [[StyleInternalParams]].\n\n                    this._style.layer = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                } else if (\n                    this._style._geometryType === undefined &&\n                    matched.name === \"$geometryType\"\n                ) {\n                    // found a subexpression `[\"==\", [\"get\", \"$geometryType\"], \"geometry\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $geometryType in\n                    // [[StyleInternalParams]].\n\n                    this._style._geometryType = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                }\n            }\n        }\n\n        return call;\n    }\n\n    /**\n     * Tests if the given `call` matches the structure [\"==\", [\"get\", name], value].\n     * If a match is found returns an object containing the `name` and the `value`;\n     *\n     * @param call The expression to match.\n     */\n    private matchVarStringComparison(call: CallExpr) {\n        if (call.op === \"==\") {\n            const left = call.args[0];\n            const right = call.args[1];\n\n            if (left instanceof VarExpr && right instanceof StringLiteralExpr) {\n                return { name: left.name, value: right.value };\n            }\n\n            if (right instanceof VarExpr && left instanceof StringLiteralExpr) {\n                return { name: right.name, value: left.value };\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the given `style` as current.\n     *\n     * @returns The previous `style`.\n     */\n    private switchStyle(style: InternalStyle) {\n        const saved = this._style;\n        this._style = style;\n        return saved;\n    }\n}\n\nclass OptimizedSubSetKey {\n    key: string;\n    layer: string | undefined;\n    geometryType: string | undefined;\n\n    cachedStyleSet?: InternalStyle[];\n\n    constructor(layer?: string | undefined, geometryType?: string | undefined) {\n        this.key = \"\";\n        this.set(layer, geometryType);\n    }\n\n    set(\n        layer: string | undefined,\n        geometryType: string | undefined,\n        env?: Env\n    ): OptimizedSubSetKey {\n        let keyUpdateNeeded: boolean = false;\n        if (layer === undefined) {\n            const envLayer = env !== undefined ? env.lookup(\"$layer\") : undefined;\n            layer = typeof envLayer === \"string\" ? envLayer : undefined;\n        }\n        if (this.layer !== layer) {\n            this.layer = layer;\n            keyUpdateNeeded = true;\n        }\n\n        if (geometryType === undefined) {\n            const envGeometryType = env !== undefined ? env.lookup(\"$geometryType\") : undefined;\n            geometryType = typeof envGeometryType === \"string\" ? envGeometryType : undefined;\n        }\n        if (this.geometryType !== geometryType) {\n            this.geometryType = geometryType;\n            keyUpdateNeeded = true;\n        }\n\n        if (keyUpdateNeeded) {\n            this.updateKey();\n        }\n        return this;\n    }\n\n    private updateKey() {\n        if (this.layer !== undefined) {\n            // tslint:disable-next-line:prefer-conditional-expression\n            if (this.geometryType !== undefined) {\n                this.key = `${this.layer}:${this.geometryType}`;\n            } else {\n                this.key = `${this.layer}:`;\n            }\n        } else {\n            if (this.geometryType !== undefined) {\n                this.key = `:${this.geometryType}`;\n            } else {\n                this.key = \"all\";\n            }\n        }\n        this.cachedStyleSet = undefined;\n    }\n}\n\n/**\n * Combine data from datasource and apply the rules from a specified theme to show it on the map.\n */\nexport class StyleSetEvaluator {\n    readonly styleSet: InternalStyle[];\n\n    private readonly m_techniques: IndexedTechnique[] = [];\n    private readonly m_exprPool = new ExprPool();\n    private readonly m_cachedResults = new Map<Expr, Value>();\n    private readonly m_styleConditionClassifier = new StyleConditionClassifier();\n    private readonly m_subStyleSetCache = new Map<string, InternalStyle[]>();\n    private readonly m_definitions?: Definitions;\n    private readonly m_definitionExprCache = new Map<string, Expr>();\n    private readonly m_tmpOptimizedSubSetKey: OptimizedSubSetKey = new OptimizedSubSetKey();\n    private readonly m_emptyEnv = new Env();\n    private m_layer: string | undefined;\n    private m_geometryType: string | undefined;\n    private m_zoomLevel: number | undefined;\n\n    constructor(styleSet: StyleSet, definitions?: Definitions) {\n        this.m_definitions = definitions;\n        this.styleSet = resolveReferences(styleSet, definitions);\n        computeDefaultRenderOrder(this.styleSet);\n        this.compileStyleSet();\n    }\n\n    /**\n     * Find all techniques that fit the current objects' environment.\n     * *The techniques in the resulting array may not be modified* since they are being reused for\n     * identical objects.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     * representation.\n     * @param layer The optional layer name used to filter techniques.\n     * @param geometryType The optional geometryType used to filter techniques.\n     */\n    getMatchingTechniques(\n        env: Env,\n        layer?: string | undefined,\n        geometryType?: string | undefined\n    ): IndexedTechnique[] {\n        const result: IndexedTechnique[] = [];\n        this.m_cachedResults.clear();\n\n        const optimizedSubSetKey = this.m_tmpOptimizedSubSetKey;\n        optimizedSubSetKey.set(layer, geometryType, env);\n\n        // get the requested $layer and $geometryType, if any.\n        this.m_layer = optimizedSubSetKey.layer;\n        this.m_geometryType = optimizedSubSetKey.geometryType;\n        this.m_zoomLevel = env.lookup(\"$zoom\") as number | undefined;\n\n        const searchedStyleSet = this.getOptimizedStyleSet(optimizedSubSetKey);\n\n        for (const currStyle of searchedStyleSet) {\n            if (this.processStyle(env, currStyle, result)) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to `layer`.\n     *\n     * @param layer name of layer\n     */\n    wantsLayer(layer: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, undefined)).length > 0\n        );\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to particular `[layer, geometryType]` pair.\n     *\n     * @param layer name of layer\n     * @param geometryType type of layer - `point`, `line` or `polygon`\n     */\n    wantsFeature(layer: string, geometryType?: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, geometryType))\n                .length > 0\n        );\n    }\n\n    /**\n     * Get the expression evaluation cache, for further feature processing.\n     *\n     * This object is valid until next `getMatchingTechniques` call.\n     */\n    get expressionEvaluatorCache() {\n        return this.m_cachedResults;\n    }\n\n    /**\n     * Reset array of techniques.\n     *\n     * Cleans technique array and indices, so it doesn't accumulate accross several decoding runs.\n     */\n    resetTechniques() {\n        for (const techinque of this.m_techniques) {\n            techinque._index = undefined!;\n        }\n        this.m_techniques.length = 0;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get techniques(): IndexedTechnique[] {\n        return this.m_techniques;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get decodedTechniques(): IndexedTechnique[] {\n        return this.m_techniques.map(makeDecodedTechnique);\n    }\n\n    private getOptimizedStyleSet(subSetKey: OptimizedSubSetKey): InternalStyle[] {\n        if (subSetKey.cachedStyleSet !== undefined) {\n            return subSetKey.cachedStyleSet;\n        }\n        let optimizedStyleSet = this.m_subStyleSetCache.get(subSetKey.key);\n        if (optimizedStyleSet !== undefined) {\n            subSetKey.cachedStyleSet = optimizedStyleSet;\n            return optimizedStyleSet;\n        }\n        optimizedStyleSet = this.createPreFilteredStyleSet(subSetKey);\n        this.m_subStyleSetCache.set(subSetKey.key, optimizedStyleSet);\n        subSetKey.cachedStyleSet = optimizedStyleSet;\n        return optimizedStyleSet;\n    }\n\n    private createPreFilteredStyleSet(subSetKey: OptimizedSubSetKey) {\n        const { layer, geometryType } = subSetKey;\n\n        return this.styleSet.filter(style => {\n            if (layer !== undefined && style.layer !== undefined && style.layer !== layer) {\n                return false;\n            }\n            if (\n                geometryType !== undefined &&\n                style._geometryType !== undefined &&\n                style._geometryType !== geometryType\n            ) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    /**\n     * Compile the `when` conditions found when traversting the styling rules.\n     */\n    private compileStyleSet() {\n        this.styleSet.forEach(style => this.compileStyle(style));\n\n        // Create optimized styleSets for each `layer` & `geometryType` tuple.\n        this.styleSet.forEach(style => {\n            this.getOptimizedStyleSet(\n                this.m_tmpOptimizedSubSetKey.set(style.layer, style._geometryType)\n            );\n        });\n    }\n\n    /**\n     * Compile the `when` conditions reachable from the given `style`.\n     *\n     * @param style The current style.\n     */\n    private compileStyle(style: InternalStyle) {\n        if (style.when !== undefined) {\n            try {\n                style._whenExpr = Array.isArray(style.when)\n                    ? Expr.fromJSON(style.when, this.m_definitions, this.m_definitionExprCache)\n                    : Expr.parse(style.when);\n\n                // search for usages of '$layer' and any other\n                // special symbol that can be used to speed up the evaluation\n                // of the `when` conditions associated to this `style`.\n                this.m_styleConditionClassifier.classify(style);\n\n                if (style._whenExpr !== undefined) {\n                    style._whenExpr = style._whenExpr.intern(this.m_exprPool);\n                }\n\n                if (isJsonExpr(style.minZoomLevel)) {\n                    style._minZoomLevelExpr = Expr.fromJSON(style.minZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n\n                if (isJsonExpr(style.maxZoomLevel)) {\n                    style._maxZoomLevelExpr = Expr.fromJSON(style.maxZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n            } catch (err) {\n                logger.log(\n                    \"failed to evaluate expression\",\n                    JSON.stringify(style.when),\n                    \"error\",\n                    String(err)\n                );\n            }\n        }\n    }\n\n    /**\n     * Process a style (and its sub-styles) hierarchically to look for the technique that fits the\n     * current objects' environment. The attributes of the styles are assembled to create a unique\n     * technique for every object.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     *            representation.\n     * @param style Current style (could also be top of stack).\n     * @param result The array of resulting techniques. There may be more than one technique per\n     *               object, resulting in multiple graphical objects for representation.\n     * @returns `true` if style has been found and processing is finished. `false` if not found, or\n     *          more than one technique should be applied.\n     */\n    private processStyle(env: Env, style: InternalStyle, result: Technique[]): boolean {\n        if (!this.checkZoomLevel(env, style)) {\n            return false;\n        }\n\n        if (\n            this.m_layer !== undefined &&\n            style.layer !== undefined &&\n            style.layer !== this.m_layer\n        ) {\n            return false;\n        }\n        if (\n            this.m_geometryType !== undefined &&\n            style._geometryType !== undefined &&\n            style._geometryType !== this.m_geometryType\n        ) {\n            return false;\n        }\n\n        if (style._whenExpr) {\n            try {\n                if (!style._whenExpr.evaluate(env, ExprScope.Condition, this.m_cachedResults)) {\n                    // Stop processing this styling rule. The `when` condition\n                    // associated with the current `style` evaluates to false so\n                    // no techinque defined by this style should be applied.\n                    return false;\n                }\n            } catch (error) {\n                logger.error(\n                    `failed to evaluate expression '${JSON.stringify(style.when)}': ${error}`\n                );\n                return false;\n            }\n        }\n\n        if (style.technique === undefined) {\n            return false;\n        }\n        // we found a technique!\n        if (style.technique !== \"none\") {\n            result.push(this.getTechniqueForStyleMatch(env, style));\n        }\n        // stop processing if \"final\" is set\n        return style.final === true;\n    }\n\n    private checkZoomLevel(env: Env, style: InternalStyle) {\n        if (style.minZoomLevel === undefined && style.maxZoomLevel === undefined) {\n            return true;\n        }\n\n        const zoomLevel = this.m_zoomLevel;\n        if (zoomLevel === undefined) {\n            return true;\n        }\n\n        if (style.minZoomLevel !== undefined) {\n            let minZoomLevel: Value = style.minZoomLevel;\n\n            if (style._minZoomLevelExpr) {\n                // the constraint is defined as expression, evaluate it and\n                // use its value\n                try {\n                    minZoomLevel = style._minZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._minZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof minZoomLevel === \"number\" && zoomLevel < minZoomLevel) {\n                return false;\n            }\n        }\n\n        if (style.maxZoomLevel !== undefined) {\n            let maxZoomLevel: Value = style.maxZoomLevel;\n\n            if (style._maxZoomLevelExpr) {\n                try {\n                    maxZoomLevel = style._maxZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._maxZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof maxZoomLevel === \"number\" && zoomLevel > maxZoomLevel) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private getTechniqueForStyleMatch(env: Env, style: InternalStyle) {\n        this.checkStyleDynamicAttributes(style);\n\n        let technique: IndexedTechnique | undefined;\n        if (style._dynamicTechniques !== undefined) {\n            const dynamicAttributes = this.evaluateTechniqueProperties(style, env);\n            const key = this.getDynamicTechniqueKey(style, dynamicAttributes);\n            technique = style._dynamicTechniques!.get(key);\n            if (technique === undefined) {\n                technique = this.createTechnique(style, key, dynamicAttributes);\n                style._dynamicTechniques!.set(key, technique);\n            }\n        } else {\n            technique = style._staticTechnique;\n            if (technique === undefined) {\n                style._staticTechnique = technique = this.createTechnique(\n                    style,\n                    `${style._styleSetIndex}`,\n                    []\n                ) as IndexedTechnique;\n            }\n        }\n\n        if (technique._index === undefined) {\n            technique._index = this.m_techniques.length;\n            this.m_techniques.push(technique);\n        }\n        return technique;\n    }\n\n    private getDynamicTechniqueKey(\n        style: InternalStyle,\n        dynamicAttributes: Array<[string, Value]>\n    ) {\n        const dynamicAttrKey = dynamicAttributes\n            .map(([_attrName, attrValue]) => {\n                if (attrValue === undefined) {\n                    return \"U\";\n                } else {\n                    return JSON.stringify(attrValue);\n                }\n            })\n            .join(\":\");\n        return `${style._styleSetIndex!}:${dynamicAttrKey}`;\n    }\n\n    private checkStyleDynamicAttributes(style: InternalStyle) {\n        if (style._dynamicTechniqueAttributes !== undefined || style.technique === \"none\") {\n            return;\n        }\n\n        style._dynamicTechniqueAttributes = [];\n        style._dynamicFeatureAttributes = [];\n        style._dynamicForwardedAttributes = [];\n        style._staticAttributes = [];\n\n        const dynamicFeatureAttributes = style._dynamicFeatureAttributes;\n        const dynamicTechniqueAttributes = style._dynamicTechniqueAttributes;\n        const dynamicForwardedAttributes = style._dynamicForwardedAttributes;\n        const targetStaticAttributes = style._staticAttributes;\n\n        const techniqueDescriptor =\n            techniqueDescriptors[style.technique] || emptyTechniqueDescriptor;\n\n        const processAttribute = (\n            attrName: TechniquePropNames<Technique>,\n            attrValue: Value | JsonExpr | undefined\n        ) => {\n            if (attrValue === undefined) {\n                return;\n            }\n\n            if (isJsonExpr(attrValue)) {\n                attrValue = Expr.fromJSON(\n                    attrValue,\n                    this.m_definitions,\n                    this.m_definitionExprCache\n                ).intern(this.m_exprPool);\n            } else if (isInterpolatedPropertyDefinition(attrValue)) {\n                // found a property using an object-like interpolation definition.\n                attrValue = Expr.fromJSON(\n                    interpolatedPropertyDefinitionToJsonExpr(attrValue)\n                ).intern(this.m_exprPool);\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                const deps = attrValue.dependencies();\n\n                if (!deps.zoom && deps.properties.size === 0) {\n                    // no data-dependencies detected.\n                    attrValue = attrValue.evaluate(this.m_emptyEnv);\n                }\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                let attrScope: AttrScope | undefined = (techniqueDescriptor.attrScopes as any)[\n                    attrName as any\n                ];\n\n                if (attrScope === undefined) {\n                    // Use [[AttrScope.TechniqueGeometry]] as default scope for the attribute.\n                    attrScope = AttrScope.TechniqueGeometry;\n                }\n\n                const deps = attrValue.dependencies();\n\n                switch (attrScope) {\n                    case AttrScope.FeatureGeometry:\n                        dynamicFeatureAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueGeometry:\n                        dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueRendering:\n                        if (deps.properties.size === 0) {\n                            dynamicForwardedAttributes.push([attrName, attrValue]);\n                        } else {\n                            dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        }\n                        break;\n                }\n            } else if (attrValue !== undefined && attrValue !== null) {\n                targetStaticAttributes.push([attrName, attrValue]);\n            }\n        };\n\n        processAttribute(\"renderOrder\", style.renderOrder);\n\n        // TODO: What the heck is that !?\n        processAttribute(\"label\", style.labelProperty);\n\n        // line & solid-line secondaryRenderOrder should be generic attr\n        // TODO: maybe just warn and force move it to `attr` ?\n        processAttribute(\"secondaryRenderOrder\", (style as LineStyle).secondaryRenderOrder);\n\n        if (style.attr !== undefined) {\n            for (const attrName in style.attr) {\n                if (!style.attr.hasOwnProperty(attrName)) {\n                    continue;\n                }\n                processAttribute(\n                    attrName as TechniquePropNames<Technique>,\n                    (style.attr as any)[attrName]\n                );\n            }\n        }\n\n        if (dynamicTechniqueAttributes.length > 0) {\n            style._dynamicTechniques = new Map();\n        }\n    }\n\n    private evaluateTechniqueProperties(style: InternalStyle, env: Env): Array<[string, Value]> {\n        if (style._dynamicTechniqueAttributes === undefined) {\n            return [];\n        }\n\n        const instantiationContext = { env };\n\n        return style._dynamicTechniqueAttributes.map(([attrName, attrExpr]) => {\n            try {\n                if (attrExpr.isDynamic()) {\n                    const reducedExpr = attrExpr.instantiate(instantiationContext);\n                    return [attrName, reducedExpr];\n                }\n\n                const evaluatedValue = attrExpr.evaluate(\n                    env,\n                    ExprScope.Value,\n                    this.m_cachedResults\n                );\n                return [attrName, evaluatedValue];\n            } catch (error) {\n                logger.error(`failed to evaluate expression '${attrExpr.toJSON()}': ${error}`);\n                return [attrName, null];\n            }\n        });\n    }\n\n    private createTechnique(\n        style: InternalStyle,\n        key: string,\n        dynamicAttrs: Array<[string, Value]>\n    ) {\n        const technique: any = {};\n        technique.name = style.technique;\n        if (style._staticAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._staticAttributes) {\n                if (attrValue !== null) {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n        for (const [attrName, attrValue] of dynamicAttrs) {\n            if (attrValue !== null) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicFeatureAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicFeatureAttributes) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicForwardedAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicForwardedAttributes) {\n                // tslint:disable-next-line: prefer-conditional-expression\n                if (Expr.isExpr(attrValue)) {\n                    technique[attrName] = attrValue.toJSON();\n                } else {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n\n        technique._index = this.m_techniques.length;\n        technique._styleSetIndex = style._styleSetIndex!;\n        technique._key = key;\n        this.m_techniques.push(technique as IndexedTechnique);\n        return technique as IndexedTechnique;\n    }\n}\n\nfunction computeDefaultRenderOrder(styleSet: InternalStyle[]) {\n    let techniqueRenderOrder = 0;\n    let styleSetIndex = 0;\n    for (const style of styleSet) {\n        style._styleSetIndex = styleSetIndex++;\n        if (style.technique !== undefined && style.renderOrder === undefined) {\n            style.renderOrder = techniqueRenderOrder++;\n        }\n    }\n}\n\nfunction resolveReferences(styleSet: StyleDeclaration[], definitions: Definitions | undefined) {\n    return styleSet.map(style => resolveStyleReferences(style, definitions));\n}\n\nfunction resolveStyleReferences(\n    style: StyleDeclaration,\n    definitions: Definitions | undefined\n): InternalStyle {\n    if (isJsonExpr(style)) {\n        if (!isJsonExprReference(style)) {\n            throw new Error(\"invalid expression in this context, only 'ref's are supported\");\n        }\n        // expand and instantiate references to style definitions.\n        const definitionName = style[1];\n        const def = definitions && definitions[definitionName];\n        if (!def) {\n            throw new Error(`invalid reference '${definitionName}' - not found`);\n        }\n        if (!isActualSelectorDefinition(def)) {\n            throw new Error(`invalid reference '${definitionName}' - expected style definition`);\n        }\n        // instantiate the style\n        return resolveStyleReferences(def, definitions);\n    }\n\n    return { ...style };\n}\n\n/**\n * Create transferable representation of dynamic technique.\n *\n * As for now, we remove all `Expr` as they are not supported on other side.\n */\nexport function makeDecodedTechnique(technique: IndexedTechnique): IndexedTechnique {\n    const result: Partial<IndexedTechnique> = {};\n    for (const attrName in technique) {\n        if (!technique.hasOwnProperty(attrName)) {\n            continue;\n        }\n        let attrValue: any = (technique as any)[attrName];\n        if (Expr.isExpr(attrValue)) {\n            attrValue = attrValue.toJSON();\n        }\n        (result as any)[attrName] = attrValue;\n    }\n    return (result as any) as IndexedTechnique;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst SdfShaderChunks = {\n    sdf_attributes: `\n        attribute vec4 position;\n        attribute vec4 uv;\n        attribute vec4 color;\n        attribute vec4 bgColor;\n        `,\n    sdf_varying: `\n        varying vec4 vColor;\n        varying float vWeight;\n        varying vec2 vUv;\n        varying float vRotation;\n        `,\n    sdf_varying_computation: `\n        #if BG_TEXT\n        vColor = bgColor;\n        vWeight = uv.w;\n        #else\n        vColor = color;\n        vWeight = uv.z;\n        #endif\n        vUv = vec2(uv.xy);\n        vRotation = position.w;\n        `,\n    sdf_frag_uniforms: `\n        uniform sampler2D sdfTexture;\n        uniform vec4 sdfParams;\n        `,\n    sdf_sampling_functions: `\n        float median(float r, float g, float b) {\n            return max(min(r, g), min(max(r, g), b));\n        }\n\n        float getDistance(vec2 uvOffset) {\n            vec3 sample = texture2D(sdfTexture, vUv.xy + uvOffset).rgb;\n            #if MSDF\n            return median(sample.r, sample.g, sample.b);\n            #else\n            return sample.r;\n            #endif\n        }\n\n        float getOpacity(vec2 uvOffset, float weight) {\n            vec2 uv = vUv + uvOffset;\n            vec2 rotatedUVs = abs(vec2(\n                cos(vRotation) * uv.x - sin(vRotation) * uv.y,\n                sin(vRotation) * uv.x + cos(vRotation) * uv.y));\n\n            float dx = dFdx(rotatedUVs.x) * sdfParams.x;\n            float dy = dFdy(rotatedUVs.y) * sdfParams.y;\n            float toPixels = sdfParams.w * inversesqrt( dx * dx + dy * dy );\n\n            float dist = getDistance(uvOffset) + min(weight, 0.5 - 1.0 / sdfParams.w) - 0.5;\n            return clamp(dist * toPixels + 0.5, 0.0, 1.0);\n        }\n        `\n};\nObject.assign(THREE.ShaderChunk, SdfShaderChunks);\n\nconst clearVertexSource: string = `\n    attribute vec2 position;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst clearFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    void main() {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }`;\n\nconst copyVertexSource: string = `\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vUv;\n\n    void main() {\n        vUv = vec3(uv.xy, position.z);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst copyFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    uniform float pageOffset;\n    uniform sampler2D page0;\n    uniform sampler2D page1;\n    uniform sampler2D page2;\n    uniform sampler2D page3;\n    uniform sampler2D page4;\n    uniform sampler2D page5;\n    uniform sampler2D page6;\n    uniform sampler2D page7;\n\n    varying vec3 vUv;\n\n    void main() {\n        vec4 sample = vec4(0.0);\n        if (vUv.z < pageOffset || vUv.z > (pageOffset + 7.0)) discard;\n        else if (vUv.z < pageOffset + 1.0) sample = texture2D(page0, vUv.xy);\n        else if (vUv.z < pageOffset + 2.0) sample = texture2D(page1, vUv.xy);\n        else if (vUv.z < pageOffset + 3.0) sample = texture2D(page2, vUv.xy);\n        else if (vUv.z < pageOffset + 4.0) sample = texture2D(page3, vUv.xy);\n        else if (vUv.z < pageOffset + 5.0) sample = texture2D(page4, vUv.xy);\n        else if (vUv.z < pageOffset + 6.0) sample = texture2D(page5, vUv.xy);\n        else if (vUv.z < pageOffset + 7.0) sample = texture2D(page6, vUv.xy);\n        else sample = texture2D(page7, vUv.xy);\n\n        gl_FragColor = sample;\n    }`;\n\nconst sdfTextVertexSource: string = `\n    #include <sdf_attributes>\n    #include <sdf_varying>\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        #include <sdf_varying_computation>\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n    }`;\n\nconst sdfTextFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    #include <sdf_varying>\n    #include <sdf_frag_uniforms>\n    #include <sdf_sampling_functions>\n\n    void main() {\n        vec4 color = vColor;\n        color.a *= getOpacity(vec2(0.0), vWeight);\n        if (color.a < 0.05) {\n            discard;\n        }\n        gl_FragColor = color;\n    }`;\n\n/**\n * @hidden\n * Material used for clearing glyphs from a [[GlyphTextureCache]].\n */\nexport class GlyphClearMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphClearMaterial`.\n     *\n     * @returns New `GlyphClearMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphClearMaterial\",\n            vertexShader: clearVertexSource,\n            fragmentShader: clearFragmentSource,\n            uniforms: {},\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material used for copying glyphs into a [[GlyphTextureCache]].\n */\nexport class GlyphCopyMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphCopyMaterial`.\n     *\n     * @returns New `GlyphCopyMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphCopyMaterial\",\n            vertexShader: copyVertexSource,\n            fragmentShader: copyFragmentSource,\n            uniforms: {\n                pageOffset: new THREE.Uniform(0.0),\n                page0: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page1: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page2: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page3: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page4: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page5: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page6: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page7: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE)\n            },\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material parameters passed on [[SdfTextMaterial]] creation.\n */\nexport interface SdfTextMaterialParameters {\n    texture: THREE.Texture;\n    textureSize: THREE.Vector2;\n    size: number;\n    distanceRange: number;\n    isMsdf: boolean;\n    isBackground: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * @hidden\n * Material designed to render transformable, high quality SDF text.\n */\nexport class SdfTextMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `SdfTextMaterial`.\n     *\n     * @param params Material parameters.\n     *\n     * @returns New `SdfTextMaterial`.\n     */\n    constructor(params: SdfTextMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SdfTextMaterial\",\n            vertexShader:\n                params.vertexSource !== undefined ? params.vertexSource : sdfTextVertexSource,\n            fragmentShader:\n                params.fragmentSource !== undefined ? params.fragmentSource : sdfTextFragmentSource,\n            uniforms: {\n                sdfTexture: new THREE.Uniform(params.texture),\n                sdfParams: new THREE.Uniform(\n                    new THREE.Vector4(\n                        params.textureSize.x,\n                        params.textureSize.y,\n                        params.size,\n                        params.distanceRange\n                    )\n                )\n            },\n            defines: {\n                MSDF: params.isMsdf ? 1.0 : 0.0,\n                BG_TEXT: params.isBackground ? 1.0 : 0.0\n            },\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.DoubleSide,\n            transparent: true\n        };\n        super(shaderParams);\n        this.extensions.derivatives = true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextLayoutStyle, TextRenderStyle } from \"./TextStyle\";\n\n/**\n * Object containing vertex buffer data generated by [[TextCanvas]].\n */\nexport class TextBufferObject {\n    /**\n     * Constructs a new `TextBufferObject`.\n     *\n     * @param glyphs Input glyphs.\n     * @param buffer Buffer containing the data generated by [[TextCanvas]].\n     * @param bounds Optional text bounds.\n     * @param characterBounds Optional character bounds.\n     * @param textRenderStyle [[TextRenderStyle]] applied by [[TextCanvas]].\n     * @param textLayoutStyle [[TextLayoutStyle]] applied by [[TextCanvas]].\n     *\n     * @returns New `TextBufferObject`.\n     */\n    constructor(\n        readonly glyphs: GlyphData[],\n        readonly buffer: Float32Array,\n        readonly bounds?: THREE.Box2,\n        readonly characterBounds?: THREE.Box2[],\n        readonly textRenderStyle?: TextRenderStyle,\n        readonly textLayoutStyle?: TextLayoutStyle\n    ) {}\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog } from \"../rendering/FontCatalog\";\nimport { SdfTextMaterial } from \"../rendering/TextMaterials\";\n\n/**\n * Material parameters passed on [[SdfTextMaterial]] creation when using the `\n * `createSdfTextMaterial` helper function.\n */\nexport interface SdfTextMaterialParameters {\n    fontCatalog: FontCatalog;\n    isBackground?: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Helper function designed to create [[SdfTextMaterials]] that can be rendered using\n * [[TextCanvas]].\n *\n * @param params Material parameters.\n *\n * @returns New `SdfTextMaterial`.\n */\nexport function createSdfTextMaterial(params: SdfTextMaterialParameters): SdfTextMaterial {\n    return new SdfTextMaterial({\n        texture: params.fontCatalog.texture,\n        textureSize: params.fontCatalog.textureSize,\n        size: params.fontCatalog.size,\n        distanceRange: params.fontCatalog.distanceRange,\n        isMsdf: params.fontCatalog.type === \"msdf\",\n        isBackground: params.isBackground === true,\n        vertexSource: params.vertexSource,\n        fragmentSource: params.fragmentSource\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    Light,\n    MagFilter,\n    MinFilter,\n    PixelFormat,\n    TextureDataType,\n    WrappingMode\n} from \"@here/harp-datasource-protocol\";\n\n/**\n * Returns `three.js` pixel format object basing on a [[PixelFormat]] specified.\n */\nexport function toPixelFormat(format: PixelFormat): THREE.PixelFormat {\n    switch (format) {\n        case \"Alpha\":\n            return THREE.AlphaFormat;\n        case \"RGB\":\n            return THREE.RGBFormat;\n        case \"RGBA\":\n            return THREE.RGBAFormat;\n        case \"Luminance\":\n            return THREE.LuminanceFormat;\n        case \"LuminanceAlpha\":\n            return THREE.LuminanceAlphaFormat;\n        case \"RGBE\":\n            return THREE.RGBEFormat;\n        case \"Depth\":\n            return THREE.DepthFormat;\n        case \"DepthStencil\":\n            return THREE.DepthStencilFormat;\n        case \"Red\":\n            return THREE.RedFormat;\n        default:\n            throw new Error(`invalid pixel format: ${format}`);\n    }\n}\n\n/**\n * Returns `three.js` texture data types based on a [[TextureDataType]] specified.\n */\nexport function toTextureDataType(dataType: TextureDataType): THREE.TextureDataType {\n    switch (dataType) {\n        case \"UnsignedByte\":\n            return THREE.UnsignedByteType;\n        case \"Byte\":\n            return THREE.ByteType;\n        case \"Short\":\n            return THREE.ShortType;\n        case \"UnsignedShort\":\n            return THREE.UnsignedShortType;\n        case \"Int\":\n            return THREE.IntType;\n        case \"UnsignedInt\":\n            return THREE.UnsignedIntType;\n        case \"Float\":\n            return THREE.FloatType;\n        case \"HalfFloat\":\n            return THREE.HalfFloatType;\n        default:\n            throw new Error(`invalid texture data type: ${dataType}`);\n    }\n}\n\n/**\n * Returns `three.js` wrapping mode object based on a [[WrappingMode]] specified.\n */\nexport function toWrappingMode(mode: WrappingMode): THREE.Wrapping {\n    switch (mode) {\n        case \"clamp\":\n            return THREE.ClampToEdgeWrapping;\n        case \"repeat\":\n            return THREE.RepeatWrapping;\n        case \"mirror\":\n            return THREE.MirroredRepeatWrapping;\n        default:\n            throw new Error(`invalid wrapping mode: ${mode}`);\n    }\n}\n\n/**\n * Returns `three.js` texture filter object based on a [[MagFilter]] or [[MinFilter]] specified.\n */\nexport function toTextureFilter(filter: MagFilter | MinFilter): THREE.TextureFilter {\n    switch (filter) {\n        case \"nearest\":\n            return THREE.NearestFilter;\n        case \"nearestMipMapNearest\":\n            return THREE.NearestMipMapNearestFilter;\n        case \"nearestMipMapLinear\":\n            return THREE.NearestMipMapLinearFilter;\n        case \"linear\":\n            return THREE.LinearFilter;\n        case \"linearMipMapNearest\":\n            return THREE.LinearMipMapNearestFilter;\n        case \"linearMipMapLinear\":\n            return THREE.LinearMipMapLinearFilter;\n        default:\n            throw new Error(`invalid texture filter: ${filter}`);\n    }\n}\n\n/**\n * Create a specific light for lightening the map.\n */\nexport function createLight(lightDescription: Light): THREE.Light {\n    switch (lightDescription.type) {\n        case \"ambient\": {\n            const light = new THREE.AmbientLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            return light;\n        }\n        case \"directional\": {\n            const light = new THREE.DirectionalLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            if (lightDescription.castShadow !== undefined) {\n                light.castShadow = lightDescription.castShadow;\n            }\n            light.position.set(\n                lightDescription.direction.x,\n                lightDescription.direction.y,\n                lightDescription.direction.z\n            );\n            light.position.normalize();\n            return light;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ExtrudedPolygonTechnique } from \"@here/harp-datasource-protocol\";\nimport { ColorUtils } from \"@here/harp-datasource-protocol/lib/ColorUtils\";\nimport { enforceBlending, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { evaluateBaseColorProperty } from \"./DecodedTileHelpers\";\n\n/**\n * Bitmask used for the depth pre-pass to prevent multiple fragments in the same screen position\n * from rendering color.\n */\nexport const DEPTH_PRE_PASS_STENCIL_MASK = 0x01;\n\n/**\n * Render order offset for the depth pre-pass to ensure that it's rendered first.\n */\nconst DEPTH_PRE_PASS_RENDER_ORDER_OFFSET = 1e-6;\n\n/**\n * Check if technique requires (and not disables) use of depth prepass.\n *\n * Depth prepass is enabled if correct opacity is specified (in range `(0,1)`) _and_ not explicitly\n * disabled by `enableDepthPrePass` option.\n *\n * @param technique [[BaseStandardTechnique]] instance to be checked\n */\nexport function isRenderDepthPrePassEnabled(technique: ExtrudedPolygonTechnique) {\n    // Depth pass explicitly disabled\n    if (technique.enableDepthPrePass === false) {\n        return false;\n    }\n    let transparent =\n        technique.opacity !== undefined && technique.opacity > 0.0 && technique.opacity < 1.0;\n    // If not opaque then check if transparency may be modified via alpha in base color.\n    // Otherwise we don't need to even test base color because opacity mixed with any base alpha,\n    // will always produce some transparency effect.\n    if (!transparent) {\n        // We do not support switching depth pass during alpha interpolation, ignore zoom level\n        // when calculating base color value.\n        const color = evaluateBaseColorProperty(technique);\n        if (color !== undefined) {\n            const alpha = ColorUtils.getAlphaFromHex(color);\n            transparent = alpha > 0.0 && alpha < 1.0;\n        }\n    }\n    return transparent;\n}\n\n/**\n * Creates material for depth prepass.\n *\n * Creates material that writes only to the z-buffer. Updates the original material instance, to\n * support depth prepass.\n *\n * @param baseMaterial The base material of mesh that is updated to work with depth prepass\n *     and then used. This parameter is a template for depth prepass material that is returned.\n * @returns depth prepass material, which is a clone of `baseMaterial` with the adapted settings.\n */\nexport function createDepthPrePassMaterial(baseMaterial: THREE.Material): THREE.Material {\n    baseMaterial.depthWrite = false;\n    baseMaterial.depthFunc = THREE.EqualDepth;\n    baseMaterial.colorWrite = true;\n    enforceBlending(baseMaterial);\n\n    const depthPassMaterial = baseMaterial.clone();\n    depthPassMaterial.depthWrite = true;\n    depthPassMaterial.depthTest = true;\n    depthPassMaterial.depthFunc = THREE.LessDepth;\n    depthPassMaterial.colorWrite = false;\n    depthPassMaterial.opacity = 1.0;\n    depthPassMaterial.blending = THREE.NoBlending;\n    return depthPassMaterial;\n}\n\n// tslint:disable:max-line-length\n/**\n * Clones a given mesh to render it in the depth prepass with another material. Both the original\n * and depth prepass meshes, when rendered in the correct order, create the proper depth prepass\n * effect. The original mesh material is slightly modified by [[createDepthPrePassMaterial]] to\n * support the depth prepass. This method is usable only if the material of this mesh has an\n * opacity value in the range `(0,1)`.\n *\n * The DepthPrePass object is created wis a slightly smaller `renderOrder` as the original mesh\n * to ensure that it's rendered first.\n *\n * @param mesh original mesh\n * @returns `Mesh` depth pre pass\n */\n// tslint:enable:max-line-length\nexport function createDepthPrePassMesh(mesh: THREE.Mesh): THREE.Mesh {\n    const originalGeometry = mesh.geometry;\n\n    if (!(originalGeometry instanceof THREE.BufferGeometry)) {\n        throw new Error(\"#createDepthPassMesh only BufferGeometry is supported\");\n    }\n    const positionAttribute = originalGeometry.getAttribute(\"position\");\n    if (!positionAttribute) {\n        throw new Error(\"#createDepthPassMesh position attribute not found\");\n    }\n\n    const depthPassGeometry = new THREE.BufferGeometry();\n    depthPassGeometry.setAttribute(\"position\", positionAttribute);\n    const uvAttribute = originalGeometry.getAttribute(\"uv\");\n    if (uvAttribute) {\n        depthPassGeometry.setAttribute(\"uv\", uvAttribute);\n    }\n    const normalAttribute = originalGeometry.getAttribute(\"normal\");\n    if (normalAttribute) {\n        depthPassGeometry.setAttribute(\"normal\", normalAttribute);\n    }\n    const extrusionAxisAttribute = originalGeometry.getAttribute(\"extrusionAxis\");\n    if (extrusionAxisAttribute) {\n        depthPassGeometry.setAttribute(\"extrusionAxis\", extrusionAxisAttribute);\n    }\n\n    if (originalGeometry.index) {\n        depthPassGeometry.setIndex(originalGeometry.index);\n    }\n\n    for (const group of originalGeometry.groups) {\n        const { start, count, materialIndex } = group;\n        depthPassGeometry.addGroup(start, count, materialIndex);\n    }\n\n    const depthPassMaterial =\n        mesh.material instanceof Array\n            ? mesh.material.map(createDepthPrePassMaterial)\n            : createDepthPrePassMaterial(mesh.material);\n\n    const depthPassMesh = new THREE.Mesh(depthPassGeometry, depthPassMaterial);\n    depthPassMesh.renderOrder = mesh.renderOrder - DEPTH_PRE_PASS_RENDER_ORDER_OFFSET;\n\n    return depthPassMesh;\n}\n\n/**\n * Sets up all the needed stencil logic needed for the depth pre-pass.\n *\n * This logic is in place to avoid z-fighting artifacts that can appear in geometries that have\n * coplanar triangles inside the same mesh.\n *\n * @param depthMesh Mesh created by `createDepthPrePassMesh`.\n * @param colorMesh Original mesh.\n */\nexport function setDepthPrePassStencil(depthMesh: THREE.Mesh, colorMesh: THREE.Mesh) {\n    // Set up depth mesh stencil logic.\n    // Set the depth pre-pass stencil bit for all processed fragments. We use\n    // `THREE.AlwaysStencilFunc` and not `THREE.NotEqualStencilFunc` to force all fragments to pass\n    // the stencil test and write the correct depth value.\n    const depthMaterial = depthMesh.material as MapMeshStandardMaterial;\n    depthMaterial.stencilWrite = true;\n    depthMaterial.stencilFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZPass = THREE.ReplaceStencilOp;\n    depthMaterial.stencilFunc = THREE.AlwaysStencilFunc;\n    depthMaterial.stencilRef = 0xff;\n    (depthMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n\n    // Set up color mesh stencil logic.\n    // Only write color for pixels with the depth pre-pass stencil bit set. Also, once a pixel is\n    // rendered, set the stencil bit to 0 to prevent subsequent pixels in the same clip position\n    // from rendering color again.\n    const colorMaterial = colorMesh.material as MapMeshStandardMaterial;\n    colorMaterial.stencilWrite = true;\n    colorMaterial.stencilFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZPass = THREE.ZeroStencilOp;\n    colorMaterial.stencilFunc = THREE.EqualStencilFunc;\n    colorMaterial.stencilRef = 0xff;\n    (colorMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    ExtendedTileInfo,\n    getPropertyValue,\n    LineTechnique,\n    SolidLineTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { Expr } from \"@here/harp-datasource-protocol/lib/Expr\";\nimport { assert, LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { PickObjectType, PickResult } from \"./PickHandler\";\nimport { RoadIntersectionData, Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"RoadPicker\");\n\nexport interface RoadPickResult extends PickResult {\n    distFromCenter: number;\n    positions: number[];\n}\n\nconst MAX_DISTANCE_ERROR = 0.01;\n\n/**\n * Optional flags in the style that can be used to optimize the evaluation.\n */\ninterface CustomLineTechnique extends LineTechnique {\n    isBackground?: boolean;\n}\n\n/**\n * The `RoadPicker` class manages picking of roads, which may not be pickable in THREE.js, since\n * their geometry is generated in the vertex shader.\n */\nexport class RoadPicker {\n    constructor(private m_mapView: MapView) {}\n    /**\n     * Registers a tile with the `RoadPicker`. This function extracts line data from the [[Tile]],\n     * but only if the tile has the necessary [[ExtendedTileInfo]] that allows for road features to\n     * be reconstructed.\n     *\n     * @param tile The tile to register.\n     */\n    registerTile(tile: Tile): RoadIntersectionData | undefined {\n        assert(tile.decodedTile !== undefined);\n        if (tile.decodedTile === undefined || tile.decodedTile.tileInfo === undefined) {\n            return undefined;\n        }\n        const extendedTileInfo: ExtendedTileInfo = tile.decodedTile.tileInfo as ExtendedTileInfo;\n        const lineFeatures = extendedTileInfo.lineGroup;\n\n        if (lineFeatures === undefined || lineFeatures.numFeatures === 0) {\n            // tileInfo not of expected type [[ExtendedTileInfo]]\n            return undefined;\n        }\n\n        const widths: RoadIntersectionData[\"widths\"] = [];\n        widths.length = lineFeatures.numFeatures;\n\n        const mapView = this.m_mapView;\n        for (let i = 0; i < lineFeatures.numFeatures; i++) {\n            const technique = extendedTileInfo.techniqueCatalog[\n                lineFeatures.techniqueIndex[i]\n            ] as SolidLineTechnique;\n\n            const isDynamic =\n                technique.metricUnit === \"Pixel\" ||\n                Expr.isExpr(technique.lineWidth) ||\n                typeof technique.lineWidth === \"string\";\n\n            widths[i] =\n                technique.lineWidth !== undefined\n                    ? isDynamic\n                        ? () => {\n                              const unitFactor =\n                                  technique.metricUnit === \"Pixel\" ? mapView.pixelToWorld : 1.0;\n                              return (\n                                  getPropertyValue(\n                                      technique.lineWidth,\n                                      mapView.zoomLevel,\n                                      mapView.pixelToWorld\n                                  ) *\n                                  unitFactor *\n                                  0.5\n                              );\n                          }\n                        : (technique.lineWidth as number)\n                    : 1.0;\n        }\n        const objInfos = extendedTileInfo.lineGroup.userData;\n\n        const roadIntersectionData = {\n            ids: lineFeatures.featureIds,\n            techniqueIndex: lineFeatures.techniqueIndex,\n            starts: lineFeatures.positionIndex,\n            widths,\n            positions: lineFeatures.positions,\n            techniques: extendedTileInfo.techniqueCatalog,\n            objInfos\n        };\n\n        return roadIntersectionData;\n    }\n\n    /**\n     * Tests the `pickPos` point for intersection with all roads on a tile.\n     *\n     * @param tile The tile to pick.\n     * @param eyePos The WorldPosition of eye or camera to compute distances.\n     * @param pickPos The WorldPosition of the picked point, on the plane.\n     * @param results The existing array of [[PickResult]]; new results should be appended.\n     */\n    intersectRoads(\n        tile: Tile,\n        eyePos: THREE.Vector3,\n        pickPos: THREE.Vector3,\n        results: PickResult[]\n    ): boolean {\n        if (tile.boundingBox.distanceToPoint(pickPos) > MAX_DISTANCE_ERROR) {\n            // outside of bounding box of tile\n            return false;\n        }\n\n        const roadIntersectionData = tile.roadIntersectionData;\n        if (roadIntersectionData === undefined) {\n            return false;\n        }\n\n        const ids = roadIntersectionData.ids;\n        const techniques = roadIntersectionData.techniques;\n        const techniqueIndices = roadIntersectionData.techniqueIndex;\n        const numFeatures = ids.length;\n        const positions = roadIntersectionData.positions;\n        const widths = roadIntersectionData.widths;\n        const px = pickPos.x - tile.center.x;\n        const py = pickPos.y - tile.center.y;\n        const pickDistance = pickPos.distanceTo(eyePos);\n\n        if (\n            widths.length !== ids.length ||\n            ids.length !== techniqueIndices.length ||\n            techniqueIndices.length !== roadIntersectionData.starts.length\n        ) {\n            logger.error(\n                \"The amount of widths, ids, techniqueIndices and starts has to be the same\"\n            );\n            return false;\n        }\n\n        for (let i = 0; i < numFeatures; i++) {\n            const technique = techniques[techniqueIndices[i]] as CustomLineTechnique;\n\n            // if the technique is marked as background or as transient, we ignore it for picking\n            if (/*technique.isBackground === true ||*/ technique.transient === true) {\n                continue;\n            }\n\n            const featureStart = roadIntersectionData.starts[i];\n            const featureEnd =\n                i < numFeatures - 1\n                    ? roadIntersectionData.starts[i + 1]\n                    : roadIntersectionData.positions.length;\n\n            let startX = positions[featureStart];\n            let startY = positions[featureStart + 1];\n\n            const widthEntry = widths[i];\n            const actualWidth = Math.max(\n                1,\n                typeof widthEntry === \"function\" ? widthEntry() : widthEntry\n            );\n            const lineWidthSqr = actualWidth * actualWidth;\n\n            let closestDistSqr = Number.MAX_VALUE;\n\n            for (let j = featureStart + 2; j < featureEnd; j += 2) {\n                const endX = positions[j];\n                const endY = positions[j + 1];\n\n                const distSqr = Math2D.distToSegmentSquared(px, py, startX, startY, endX, endY);\n                if (distSqr < lineWidthSqr) {\n                    if (distSqr < closestDistSqr) {\n                        closestDistSqr = distSqr;\n                    }\n                }\n\n                startX = endX;\n                startY = endY;\n            }\n\n            if (closestDistSqr < Number.MAX_VALUE) {\n                const roadPickResult: RoadPickResult = {\n                    type: PickObjectType.Line,\n                    point: pickPos,\n                    distance: pickDistance,\n                    distFromCenter: Math.sqrt(closestDistSqr),\n                    featureId: ids[i],\n                    positions: positions.slice(featureStart, featureEnd),\n                    technique\n                };\n                this.addUserData(roadPickResult, i, roadIntersectionData.objInfos);\n                results.push(roadPickResult);\n            }\n        }\n\n        return false;\n    }\n\n    private addUserData(\n        roadPickResult: RoadPickResult,\n        index: number,\n        objInfos?: Array<{} | undefined>\n    ) {\n        if (objInfos !== undefined && objInfos.length > 0) {\n            roadPickResult.userData = { ...objInfos[index] };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    HorizontalAlignment,\n    MeasurementParameters,\n    TextCanvas,\n    VerticalAlignment\n} from \"@here/harp-text-canvas\";\nimport { assert, Math2D, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { CollisionBox, DetailedCollisionBox, IBox, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { RenderState } from \"./RenderState\";\nimport { PoiInfo, poiIsRenderable, TextElement } from \"./TextElement\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * Minimum number of pixels per character. Used during estimation if there is enough screen space\n * available to render a text.\n */\nconst MIN_AVERAGE_CHAR_WIDTH = 5;\n\n/**\n * Functions related to text element placement.\n */\n\nconst tmpPosition = new THREE.Vector3(0, 0, 0);\nconst tmpCameraDir = new THREE.Vector3(0, 0, 0);\nconst COS_TEXT_ELEMENT_FALLOFF_ANGLE = 0.5877852522924731; // Math.cos(0.3 * Math.PI)\n\n/**\n * Checks whether the distance of the specified text element to the center of the given view is\n * lower than a maximum threshold.\n * @param textElement The textElement of which the view distance will be checked, with coordinates\n * in world space.\n * @param mapView The view that will be used as reference to calculate the distance.\n * @param maxViewDistance The maximum distance value.\n * @returns The text element view distance if it's lower than the maximum value, otherwise\n * `undefined`.\n */\nfunction checkViewDistance(\n    worldCenter: THREE.Vector3,\n    textElement: TextElement,\n    projectionType: ProjectionType,\n    camera: THREE.Camera,\n    maxViewDistance: number\n): number | undefined {\n    const textDistance = computeViewDistance(worldCenter, textElement);\n\n    if (projectionType !== ProjectionType.Spherical) {\n        return textDistance <= maxViewDistance ? textDistance : undefined;\n    }\n\n    // For sphere projection: Filter labels that are close to the horizon\n    tmpPosition.copy(textElement.position).normalize();\n    camera.getWorldPosition(tmpCameraDir).normalize();\n    const cosAlpha = tmpPosition.dot(tmpCameraDir);\n    const viewDistance =\n        cosAlpha > COS_TEXT_ELEMENT_FALLOFF_ANGLE && textDistance <= maxViewDistance\n            ? textDistance\n            : undefined;\n\n    return viewDistance;\n}\n\n/**\n * Computes the distance of the specified text element to the given position.\n * @param refPosition The world coordinates used a reference position to calculate the distance.\n * @param textElement The textElement of which the view distance will be checked. It must have\n * coordinates in world space.\n * @returns The text element view distance.\n * `undefined`.\n */\nexport function computeViewDistance(refPosition: THREE.Vector3, textElement: TextElement): number {\n    let viewDistance: number;\n\n    if (Array.isArray(textElement.points) && textElement.points.length > 1) {\n        const viewDistance0 = refPosition.distanceTo(textElement.points[0]);\n        const viewDistance1 = refPosition.distanceTo(\n            textElement.points[textElement.points.length - 1]\n        );\n\n        viewDistance = Math.min(viewDistance0, viewDistance1);\n    } else {\n        viewDistance = refPosition.distanceTo(textElement.points as THREE.Vector3);\n    }\n\n    return viewDistance;\n}\n\n/**\n * Computes the maximum view distance for text elements as a ratio of the given view's maximum far\n * plane distance.\n * @param viewState The view for which the maximum view distance will be calculated.\n * @param farDistanceLimitRatio The ratio to apply to the maximum far plane distance.\n * @returns Maximum view distance.\n */\nexport function getMaxViewDistance(viewState: ViewState, farDistanceLimitRatio: number): number {\n    return viewState.maxVisibilityDist * farDistanceLimitRatio;\n}\n\n/**\n * State of fading.\n */\nexport enum PrePlacementResult {\n    Ok = 0,\n    NotReady,\n    Invisible,\n    TooFar,\n    Duplicate,\n    Count\n}\n\n/**\n * Applies early rejection tests for a given text element meant to avoid trying to place labels\n * that are not visible, not ready, duplicates etc...\n * @param textElement The Text element to check.\n * @param viewState The view for which the text element will be placed.\n * @param viewCamera The view's camera.\n * @param m_poiManager To prepare pois for rendering.\n * @param projectionType The projection type currently used from geo to world space.\n * @param [maxViewDistance] If specified, text elements farther than this max distance will be\n * rejected.\n * @returns An object with the result code and the text element view distance\n * ( or `undefined` of the checks failed) as second.\n */\nexport function checkReadyForPlacement(\n    textElement: TextElement,\n    viewState: ViewState,\n    viewCamera: THREE.Camera,\n    poiManager: PoiManager,\n    projectionType: ProjectionType,\n    maxViewDistance?: number\n): { result: PrePlacementResult; viewDistance: number | undefined } {\n    let viewDistance: number | undefined;\n\n    if (!textElement.visible) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    // If a PoiTable is specified in the technique, the table is required to be\n    // loaded before the POI can be rendered.\n    if (!poiManager.updatePoiFromPoiTable(textElement)) {\n        // PoiTable has not been loaded, but is required to determine\n        // visibility.\n        return { result: PrePlacementResult.NotReady, viewDistance };\n    }\n\n    // Text element visibility and zoom level ranges must be checked after calling\n    // updatePoiFromPoiTable, since that function may change those values.\n    if (\n        !textElement.visible ||\n        !MathUtils.isClamped(\n            viewState.zoomLevel,\n            textElement.minZoomLevel,\n            textElement.maxZoomLevel\n        )\n    ) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    viewDistance =\n        maxViewDistance === undefined\n            ? computeViewDistance(viewState.worldCenter, textElement)\n            : checkViewDistance(\n                  viewState.worldCenter,\n                  textElement,\n                  projectionType,\n                  viewCamera,\n                  maxViewDistance\n              );\n\n    if (viewDistance === undefined) {\n        return { result: PrePlacementResult.TooFar, viewDistance };\n    }\n\n    return { result: PrePlacementResult.Ok, viewDistance };\n}\n\n/**\n * Computes the offset for a point text accordingly to text alignment (and icon, if any).\n * @param textElement The text element of which the offset will computed. It must be a point\n * label with [[layoutStyle]] and [[bounds]] already computed.\n * @param offset The offset result.\n */\nfunction computePointTextOffset(\n    textElement: TextElement,\n    offset: THREE.Vector2 = new THREE.Vector2()\n): THREE.Vector2 {\n    assert(textElement.type === TextElementType.PoiLabel);\n    assert(textElement.layoutStyle !== undefined);\n    assert(textElement.bounds !== undefined);\n\n    const hAlign = textElement.layoutStyle!.horizontalAlignment;\n    const vAlign = textElement.layoutStyle!.verticalAlignment;\n\n    switch (hAlign) {\n        case HorizontalAlignment.Right:\n            offset.x = -textElement.xOffset;\n            break;\n        default:\n            offset.x = textElement.xOffset;\n            break;\n    }\n\n    switch (vAlign) {\n        case VerticalAlignment.Below:\n            offset.y = -textElement.yOffset;\n            break;\n        case VerticalAlignment.Above:\n            offset.y = textElement.yOffset - textElement.bounds!.min.y;\n            break;\n        default:\n            offset.y = textElement.yOffset;\n            break;\n    }\n\n    if (textElement.poiInfo !== undefined && poiIsRenderable(textElement.poiInfo)) {\n        assert(textElement.poiInfo.computedWidth !== undefined);\n        assert(textElement.poiInfo.computedHeight !== undefined);\n\n        offset.x += textElement.poiInfo.computedWidth! * (0.5 + hAlign);\n        offset.y += textElement.poiInfo.computedHeight! * (0.5 + vAlign);\n    }\n    return offset;\n}\n\nconst tmpBox = new THREE.Box2();\nconst tmpBoxes: THREE.Box2[] = [];\nconst tmpMeasurementParams: MeasurementParameters = {};\nconst tmpCollisionBoxes: CollisionBox[] = [];\nconst tmpCollisionBox = new CollisionBox();\nconst tmpScreenPosition = new THREE.Vector2();\nconst tmpTextOffset = new THREE.Vector2();\nconst tmp2DBox = new Math2D.Box();\nconst pointLabelMargin = new THREE.Vector2(4, 2);\n\nexport enum PlacementResult {\n    Ok,\n    Rejected,\n    Invisible\n}\n\n/**\n * Places an icon on screen.\n * @param iconRenderState The icon state.\n * @param poiInfo Icon information necessary to compute its dimensions.\n * @param screenPosition Screen position of the icon.\n * @param scaleFactor Scaling factor to apply to the icon dimensions.\n * @param screenCollisions Used to check the icon visibility and collisions.\n * @param zoomLevel Current zoom level.\n * @returns `PlacementResult.Ok` if icon can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placeIcon(\n    iconRenderState: RenderState,\n    poiInfo: PoiInfo,\n    screenPosition: THREE.Vector2,\n    scaleFactor: number,\n    zoomLevel: number,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scaleFactor, zoomLevel, tmp2DBox);\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    const iconSpaceAvailable =\n        poiInfo.mayOverlap === true || !screenCollisions.isAllocated(tmp2DBox);\n\n    if (!iconSpaceAvailable) {\n        return iconRenderState.isVisible() ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Places a point label on a specified text canvas.\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible` or\n * `PlacementResult.Rejected`.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if path label can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placePointLabel(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    const label = labelState.element;\n\n    if (label.bounds === undefined) {\n        label.bounds = new THREE.Box2();\n        tmpMeasurementParams.outputCharacterBounds = undefined;\n        tmpMeasurementParams.path = undefined;\n        tmpMeasurementParams.pathOverflow = false;\n        tmpMeasurementParams.letterCaseArray = label.glyphCaseArray!;\n        textCanvas.measureText(label.glyphs!, label.bounds, tmpMeasurementParams);\n    }\n\n    screenPosition.add(computePointTextOffset(label, tmpTextOffset));\n    outScreenPosition.set(screenPosition.x, screenPosition.y, labelState.renderDistance);\n\n    // TODO: Make the margin configurable\n    tmpBox.copy(label.bounds!).expandByVector(pointLabelMargin);\n    tmpBox.min.multiplyScalar(scale);\n    tmpBox.max.multiplyScalar(scale);\n    tmpBox.translate(screenPosition);\n    tmp2DBox.set(\n        tmpBox.min.x,\n        tmpBox.min.y,\n        tmpBox.max.x - tmpBox.min.x,\n        tmpBox.max.y - tmpBox.min.y\n    );\n\n    // Check the text visibility.\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    if (isRejected || (!label.textMayOverlap && screenCollisions.isAllocated(tmp2DBox))) {\n        return labelState.visible ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n\n    // Don't allocate space for rejected text. When zooming, this allows placement of a\n    // lower priority text element that was displaced by a higher priority one (not\n    // present in the new zoom level) before an even lower priority one takes the space.\n    // Otherwise the lowest priority text will fade in and back out.\n    // TODO: Add a unit test for this scenario.\n    if (label.textReservesSpace) {\n        screenCollisions.allocate(tmp2DBox);\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Places a path label along a given path on a specified text canvas.\n * @param labelState The state of the path label to place.\n * @param textPath The text path along which the label will be placed.\n * @param screenPosition Position of the label in screen coordinates.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @returns `PlacementResult.Ok` if path label can be placed, `PlacementResult.Rejected` if there's\n * a collision or text doesn't fit into path, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placePathLabel(\n    labelState: TextElementState,\n    textPath: THREE.Path,\n    screenPosition: THREE.Vector2,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    // Recalculate the text bounds for this path label. If measurement fails, the whole\n    // label doesn't fit the path and should be discarded.\n    tmpMeasurementParams.path = textPath;\n    tmpMeasurementParams.outputCharacterBounds = tmpBoxes;\n    tmpMeasurementParams.letterCaseArray = labelState.element.glyphCaseArray!;\n\n    // TODO: HARP-7648. TextCanvas.measureText does the placement as in TextCanvas.addText but\n    // without storing the result. If the measurement succeeds, the placement work is done\n    // twice.\n    // This could be done in one step (e.g measureAndAddText). Collision test could be injected\n    // in the middle as a function.\n    if (!textCanvas.measureText(labelState.element.glyphs!, tmpBox, tmpMeasurementParams)) {\n        return PlacementResult.Rejected;\n    }\n\n    // Coarse collision check.\n    tmpCollisionBox.copy(tmpBox.translate(screenPosition));\n    if (!screenCollisions.isVisible(tmpCollisionBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    let checkGlyphCollision = false;\n    let candidateBoxes: IBox[] | undefined;\n    if (!labelState.element.textMayOverlap) {\n        candidateBoxes = screenCollisions.search(tmpCollisionBox);\n        checkGlyphCollision = candidateBoxes.length > 0;\n    }\n\n    const checkGlyphVisible = !screenCollisions.isFullyVisible(tmpCollisionBox);\n\n    // Perform per-character collision checks.\n    tmpCollisionBoxes.length = tmpBoxes.length;\n    for (let i = 0; i < tmpBoxes.length; ++i) {\n        const glyphBox = tmpBoxes[i].translate(screenPosition);\n        let collisionBox = tmpCollisionBoxes[i];\n        if (collisionBox === undefined) {\n            collisionBox = new CollisionBox(glyphBox);\n            tmpCollisionBoxes[i] = collisionBox;\n        } else {\n            collisionBox.copy(glyphBox);\n        }\n        if (checkGlyphVisible && !screenCollisions.isVisible(collisionBox)) {\n            return PlacementResult.Invisible;\n        }\n\n        if (\n            checkGlyphCollision &&\n            screenCollisions.intersectsDetails(collisionBox, candidateBoxes!)\n        ) {\n            return PlacementResult.Rejected;\n        }\n    }\n    // Allocate collision info if needed.\n    if (labelState.element.textReservesSpace) {\n        const collisionBox = new DetailedCollisionBox(tmpCollisionBox, tmpCollisionBoxes.slice());\n        tmpCollisionBoxes.length = 0;\n        screenCollisions.allocate(collisionBox);\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Check if a given path label is too small to be rendered.\n * @param textElement The text element to check.\n * @param screenProjector Used to project coordinates from world to screen space.\n * @param outScreenPoints Label path projected to screen space.\n * @returns `true` if label is too small, `false` otherwise.\n */\nexport function isPathLabelTooSmall(\n    textElement: TextElement,\n    screenProjector: ScreenProjector,\n    outScreenPoints: THREE.Vector2[]\n): boolean {\n    assert(textElement.type === TextElementType.PathLabel);\n\n    // Get the screen points that define the label's segments and create a path with\n    // them.\n    outScreenPoints.length = 0;\n    let anyPointVisible = false;\n\n    for (const pt of textElement.points as THREE.Vector3[]) {\n        // Skip invisible points at the beginning of the path.\n        const screenPoint = anyPointVisible\n            ? screenProjector.project(pt, tmpScreenPosition)\n            : screenProjector.projectOnScreen(pt, tmpScreenPosition);\n        if (screenPoint === undefined) {\n            continue;\n        }\n        anyPointVisible = true;\n\n        outScreenPoints.push(tmpScreenPosition.clone());\n    }\n\n    // TODO: (HARP-3515)\n    //      The rendering of a path label that contains just a single point that is not\n    //      visible is impossible, which is problematic with long paths.\n    //      Fix: Skip/clip the invisible points at beginning and end of the path to get\n    //      the visible part of the path.\n\n    // If not a single point is visible, skip the path\n    if (!anyPointVisible) {\n        return true;\n    }\n\n    // Check/guess if the screen box can hold a string of that length. It is important\n    // to guess that value without measuring the font first to save time.\n    const minScreenSpace = textElement.text.length * MIN_AVERAGE_CHAR_WIDTH;\n\n    tmpBox.setFromPoints(outScreenPoints);\n    const boxDiagonalSq = tmpBox.max.sub(tmpBox.min).lengthSq();\n\n    if (boxDiagonalSq < minScreenSpace * minScreenSpace) {\n        textElement.dbgPathTooSmall = true;\n        return true;\n    }\n\n    return false;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getPropertyValue, ImageTexture } from \"@here/harp-datasource-protocol\";\nimport { IconMaterial } from \"@here/harp-materials\";\nimport { MemoryUsage, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { ColorCache } from \"../ColorCache\";\nimport { ImageItem } from \"../image/Image\";\nimport { MapView } from \"../MapView\";\nimport { ScreenCollisions } from \"../ScreenCollisions\";\nimport { PoiInfo, TextElement } from \"../text/TextElement\";\nimport { BoxBuffer } from \"./BoxBuffer\";\nimport { IconTexture } from \"./Poi\";\n\nconst logger = LoggerManager.instance.create(\"PoiRenderer\");\n\nconst INVALID_RENDER_BATCH = -1;\n\nconst tempPos = new THREE.Vector3(0);\n\n/**\n * The `PoiRenderBufferBatch` contains the geometry and the material for all POIs that share the\n * same icon image ([[ImageTexture]]). If the image is the same, all the objects in this batch can\n * share the same material, which makes them renderable in the same draw call, whatever the number\n * of actual objects (WebGL limits apply!).\n *\n * There is a `PoiRenderBufferBatch` for every icon in a texture atlas, since the size of the icon\n * in the atlas as well as the texture coordinates are specified in the `PoiRenderBufferBatch`.\n */\nclass PoiRenderBufferBatch {\n    color: THREE.Color = ColorCache.instance.getColor(\"#000000\");\n\n    boxBuffer: BoxBuffer | undefined;\n\n    private m_material?: THREE.Material | THREE.Material[];\n\n    /**\n     * Create the `PoiRenderBufferBatch`.\n     *\n     * @param mapView The [[MapView]] instance.\n     * @param scene The three.js scene to add the POIs to.\n     * @param imageItem The icon that will have his material shared.\n     * @param renderOrder RenderOrder of the batch geometry's [[Mesh]].\n     */\n    constructor(\n        readonly mapView: MapView,\n        readonly scene: THREE.Scene,\n        readonly imageItem: ImageItem,\n        readonly renderOrder: number\n    ) {}\n\n    /**\n     * Initialize with the [[ImageTexture]]. Loads the image and sets up the icon size, the texture\n     * coordinates and material of the batch. Since image loading is done asynchronously, this\n     * batch cannot be rendered right away. MapView#update is being triggered if it loaded\n     * successfully.\n     */\n    init() {\n        if (this.boxBuffer === undefined) {\n            this.setup();\n        }\n    }\n\n    /**\n     * Clean the `PoiRenderBufferBatch`, remove all icon boxes. Called before starting a new frame.\n     */\n    reset(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.reset();\n    }\n\n    /**\n     * Update the geometry with all the added boxes during the frame.\n     */\n    update(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.updateBufferGeometry();\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the\n     * `PoiRenderBufferBatch`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBufferBatch`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        if (this.boxBuffer !== undefined) {\n            this.boxBuffer.updateMemoryUsage(info);\n        }\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     */\n    private setup() {\n        const bilinear = true;\n\n        // Texture images should be generated with premultiplied alpha\n        const premultipliedAlpha = true;\n\n        const iconTexture = new IconTexture(this.imageItem);\n        const texture = new THREE.Texture(\n            iconTexture.image.imageData as any,\n            THREE.UVMapping,\n            undefined,\n            undefined,\n            bilinear ? THREE.LinearFilter : THREE.NearestFilter,\n            bilinear ? THREE.LinearFilter : THREE.NearestFilter,\n            THREE.RGBAFormat\n        );\n        texture.needsUpdate = true;\n        texture.premultiplyAlpha = premultipliedAlpha;\n        texture.generateMipmaps = false; // not needed, always rendered in full size\n\n        this.m_material = new IconMaterial({\n            map: texture\n        });\n\n        this.boxBuffer = new BoxBuffer(this.m_material, this.renderOrder);\n\n        const mesh = this.boxBuffer.mesh;\n\n        mesh.frustumCulled = false;\n\n        this.scene.add(mesh);\n\n        this.mapView.update();\n    }\n}\n\n/**\n * Contains all [[PoiRenderBufferBatch]]es. Selects (and initializes) the correct batch for a POI.\n */\nclass PoiRenderBuffer {\n    readonly batches: PoiRenderBufferBatch[] = [];\n    private readonly m_batchMap: Map<string, Map<number, number>> = new Map();\n\n    /**\n     * Create the `PoiRenderBuffer`.\n     *\n     * @param mapView The [[MapView]] to be rendered to.\n     * @param textCanvas The [[TextCanvas]] to which scenes this `PoiRenderBuffer` adds geometry to.\n     * The actual scene a [[TextElement]] is added to is specified by the renderOrder of the\n     * [[TextElement]].\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {}\n\n    /**\n     * Register the POI and prepare the [[PoiRenderBufferBatch]] for the POI at first usage.\n     *\n     * @param poiInfo Describes the POI icon.\n     */\n    registerPoi(poiInfo: PoiInfo): number {\n        const { imageItem, imageTexture, imageTextureName } = poiInfo;\n\n        if (\n            imageItem === undefined ||\n            imageTextureName === undefined ||\n            imageTexture === undefined\n        ) {\n            // No image -> invisible -> ignore\n            return INVALID_RENDER_BATCH;\n        }\n\n        const renderOrder = poiInfo.renderOrder!;\n\n        // There is a batch for every ImageDefinition, which could be a texture atlas with many\n        // ImageTextures in it.\n        const batchKey = imageTexture.image;\n        let batchSet = this.m_batchMap.get(batchKey);\n        let mappedIndex: number | undefined;\n        let bufferBatch: PoiRenderBufferBatch;\n\n        if (batchSet === undefined) {\n            batchSet = new Map<number, number>();\n            this.m_batchMap.set(batchKey, batchSet);\n        }\n\n        mappedIndex = batchSet.get(renderOrder);\n        if (mappedIndex !== undefined) {\n            return mappedIndex;\n        }\n        mappedIndex = this.batches.length;\n\n        let layer = this.textCanvas.getLayer(renderOrder);\n        if (layer === undefined) {\n            this.textCanvas.addText(\"\", tempPos, { layer: renderOrder });\n            layer = this.textCanvas.getLayer(renderOrder);\n        }\n\n        bufferBatch = new PoiRenderBufferBatch(\n            this.mapView,\n            layer!.storage.scene,\n            imageItem,\n            renderOrder\n        );\n        bufferBatch.init();\n        batchSet.set(renderOrder, mappedIndex);\n        this.batches.push(bufferBatch);\n        return mappedIndex;\n    }\n\n    /**\n     * Render a POI image at the specified location.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenBox Box to render icon into in 2D coordinates.\n     * @param viewDistance Box's distance to camera.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    addPoi(poiInfo: PoiInfo, screenBox: Math2D.Box, viewDistance: number, opacity: number): number {\n        const poiRegistered =\n            poiInfo.poiRenderBatch !== undefined && poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH;\n        const batchIndex = poiRegistered ? poiInfo.poiRenderBatch! : this.registerPoi(poiInfo);\n        if (batchIndex === INVALID_RENDER_BATCH) {\n            return INVALID_RENDER_BATCH;\n        }\n        assert(batchIndex >= 0);\n        assert(batchIndex < this.batches.length);\n        assert(poiInfo.uvBox !== undefined);\n\n        if (this.batches[batchIndex].boxBuffer === undefined) {\n            this.batches[batchIndex].init();\n        }\n\n        this.batches[batchIndex].boxBuffer!.addBox(\n            screenBox,\n            poiInfo.uvBox!,\n            this.batches[batchIndex].color,\n            opacity,\n            viewDistance,\n            poiInfo.textElement\n        );\n\n        return batchIndex;\n    }\n\n    /**\n     * Retrieve the [[PoiRenderBufferBatch]] from the array at the specified index. May be invalid\n     * if the imageTexture could not be found\n     *\n     * @param index Index into batch array.\n     */\n    getBatch(index: number): PoiRenderBufferBatch | undefined {\n        if (index >= 0) {\n            assert(index < this.batches.length);\n            return this.batches[index];\n        }\n        // may be invalid if the imageTexture could not be found\n        return undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBufferBatch]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        for (const batch of this.batches) {\n            batch.reset();\n        }\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBufferBatch]]es. Called before rendering.\n     */\n    update(): void {\n        for (const batch of this.batches) {\n            batch.update();\n        }\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        for (const batch of this.batches) {\n            if (batch.boxBuffer === undefined) {\n                batch.init();\n            }\n            batch.boxBuffer!.pickBoxes(screenPosition, pickCallback, batch.imageItem.imageData);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderBuffer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        for (const batch of this.batches) {\n            if (batch.imageItem.imageData !== undefined) {\n                const imageBytes =\n                    batch.imageItem.imageData.width * batch.imageItem.imageData.height * 4;\n                info.heapSize += imageBytes;\n                info.gpuSize += imageBytes;\n            }\n            if (batch.boxBuffer !== undefined) {\n                batch.boxBuffer.updateMemoryUsage(info);\n            }\n        }\n    }\n}\n\n/**\n * Manage POI rendering. Uses a [[PoiRenderBuffer]] to actually create the geometry that is being\n * rendered.\n */\nexport class PoiRenderer {\n    /**\n     * Compute screen box for icon. It is required that `prepareRender` has been successfully called\n     * before `computeScreenBox` may be called.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D).\n     * @param scale Scale to apply to icon.\n     * @param zoomLevel Current zoom level.\n     * @param screenBox Box that will be used to store the result.\n     * @returns The computed screen box for the icon.\n     */\n    static computeIconScreenBox(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        scale: number,\n        zoomLevel: number,\n        /* out */ screenBox: Math2D.Box = new Math2D.Box()\n    ): Math2D.Box {\n        assert(poiInfo.poiRenderBatch !== undefined);\n        assert(poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH);\n\n        const width = poiInfo.computedWidth! * scale;\n        const height = poiInfo.computedHeight! * scale;\n        const technique = poiInfo.technique;\n        const iconXOffset = getPropertyValue(technique.iconXOffset, zoomLevel);\n        const iconYOffset = getPropertyValue(technique.iconYOffset, zoomLevel);\n\n        const centerX = screenPosition.x + (typeof iconXOffset === \"number\" ? iconXOffset : 0);\n        const centerY = screenPosition.y + (typeof iconYOffset === \"number\" ? iconYOffset : 0);\n\n        screenBox.x = centerX - width / 2;\n        screenBox.y = centerY - height / 2;\n        screenBox.w = width;\n        screenBox.h = height;\n\n        return screenBox;\n    }\n    // keep track of the missing textures, but only warn once\n    private static m_missingTextureName: Map<string, boolean> = new Map();\n\n    // the render buffer containing all batches, one batch per texture/material.\n    private m_renderBuffer: PoiRenderBuffer;\n\n    // temporary variable to save allocations\n    private m_tempScreenBox = new Math2D.Box();\n\n    /**\n     * Create the `PoiRenderer` for the specified [[MapView]].\n     *\n     * @param mapView The MapView to be rendered to.\n     * @param textCanvas The [[TextCanvas]] this `PoiRenderer` is associated to. POIs are added to\n     * the different layers of this [[TextCanvas]] based on renderOrder.\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {\n        this.m_renderBuffer = new PoiRenderBuffer(mapView, textCanvas);\n    }\n\n    /**\n     * Prepare the POI for rendering, and determine which `poiRenderBatch` should be used. If a\n     * `poiRenderBatch` is assigned, the POI is ready to be rendered.\n     *\n     * @param pointLabel TextElement with PoiInfo for rendering the POI icon.\n     * @param zoomLevel The current zoom level of [[MapView]]\n     *\n     * @returns `True` if the space is not already allocated by another object (text label or POI)\n     */\n    prepareRender(pointLabel: TextElement, zoomLevel: number): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined) {\n            return false;\n        }\n        if (poiInfo.poiRenderBatch === undefined) {\n            this.preparePoi(pointLabel, zoomLevel);\n        }\n        return poiInfo.poiRenderBatch !== undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBuffer]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        this.m_renderBuffer.reset();\n    }\n\n    /**\n     * Render the icon.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D):\n     * @param screenCollisions Object handling the collision checks for screen-aligned 2D boxes.\n     * @param viewDistance Box's distance to camera.\n     * @param scale Scaling factor to apply to text and icon.\n     * @param allocateScreenSpace If `true` screen space will be allocated for the icon.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    renderPoi(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        screenCollisions: ScreenCollisions,\n        viewDistance: number,\n        scale: number,\n        allocateScreenSpace: boolean,\n        opacity: number,\n        zoomLevel: number\n    ): void {\n        assert(poiInfo.poiRenderBatch !== undefined);\n\n        PoiRenderer.computeIconScreenBox(\n            poiInfo,\n            screenPosition,\n            scale,\n            zoomLevel,\n            this.m_tempScreenBox\n        );\n\n        if (allocateScreenSpace) {\n            screenCollisions.allocate(this.m_tempScreenBox);\n        }\n\n        this.m_renderBuffer.addPoi(poiInfo, this.m_tempScreenBox, viewDistance, opacity);\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBuffer]]es. Called before rendering.\n     */\n    update(): void {\n        this.m_renderBuffer.update();\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        this.m_renderBuffer.pickTextElements(screenPosition, pickCallback);\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderer`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_renderBuffer.updateMemoryUsage(info);\n    }\n\n    /**\n     * Register the POI at the [[PoiRenderBuffer]] which may require some setup, for example loading\n     * of the actual image.\n     */\n    private preparePoi(pointLabel: TextElement, zoomLevel: number): void {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined || !pointLabel.visible) {\n            return;\n        }\n\n        if (poiInfo.poiRenderBatch !== undefined || poiInfo.isValid === false) {\n            // Already set up, nothing to be done here.\n            return;\n        }\n\n        if (poiInfo.poiTableName !== undefined) {\n            if (this.mapView.poiManager.updatePoiFromPoiTable(pointLabel)) {\n                if (!pointLabel.visible) {\n                    // PoiTable set this POI to not visible.\n                    return;\n                }\n            } else {\n                // PoiTable has not been loaded, but is required to determine visibility.\n                return;\n            }\n        }\n\n        const imageTextureName = poiInfo.imageTextureName;\n\n        const imageTexture = this.mapView.poiManager.getImageTexture(imageTextureName);\n        if (imageTexture === undefined) {\n            // Warn about a missing texture, but only once.\n            if (PoiRenderer.m_missingTextureName.get(imageTextureName) === undefined) {\n                PoiRenderer.m_missingTextureName.set(imageTextureName, true);\n                logger.error(`preparePoi: No imageTexture with name '${imageTextureName}' found`);\n            }\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const imageDefinition = imageTexture.image;\n\n        let imageItem = this.mapView.imageCache.findImageByName(imageDefinition);\n        if (imageItem === undefined) {\n            logger.error(`init: No imageItem found with name '${imageDefinition}'`);\n            poiInfo.isValid = false;\n            return;\n        }\n\n        if (!imageItem.loaded) {\n            if (imageItem.loadingPromise !== undefined) {\n                // already being loaded, will be rendered once available\n                return;\n            }\n            const imageUrl = imageItem.url;\n            const loading = this.mapView.imageCache.loadImage(imageItem);\n            if (loading instanceof Promise) {\n                loading\n                    .then(loadedImageItem => {\n                        if (loadedImageItem === undefined) {\n                            logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`);\n                            return;\n                        }\n                        this.setupPoiInfo(poiInfo, imageTexture, loadedImageItem, zoomLevel);\n                    })\n                    .catch(error => {\n                        logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`, error);\n                        poiInfo.isValid = false;\n                    });\n                return;\n            } else {\n                imageItem = loading;\n            }\n        }\n\n        this.setupPoiInfo(poiInfo, imageTexture, imageItem, zoomLevel);\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     *\n     * @param poiInfo [[PoiInfo]] to initialize.\n     * @param imageTexture Shared [[ImageTexture]], defines used area in atlas.\n     * @param imageItem Shared [[ImageItem]], contains cached image for texture.\n     * @param zoomLevel The current zoom level of [[MapView]]\n     */\n    private setupPoiInfo(\n        poiInfo: PoiInfo,\n        imageTexture: ImageTexture,\n        imageItem: ImageItem,\n        zoomLevel: number\n    ) {\n        assert(poiInfo.uvBox === undefined);\n\n        if (imageItem === undefined || imageItem.imageData === undefined) {\n            logger.error(\"setupPoiInfo: No imageItem/imageData found\");\n            // invalid render batch number\n            poiInfo.poiRenderBatch = INVALID_RENDER_BATCH;\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const technique = poiInfo.technique;\n\n        const imageWidth = imageItem.imageData.width;\n        const imageHeight = imageItem.imageData.height;\n\n        const iconWidth = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const iconHeight = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n\n        let minS = 0;\n        let maxS = 1;\n        let minT = 0;\n        let maxT = 1;\n\n        let iconScaleH = technique.iconScale !== undefined ? technique.iconScale : 1;\n        let iconScaleV = technique.iconScale !== undefined ? technique.iconScale : 1;\n\n        const width = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const height = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n        const xOffset = imageTexture.xOffset !== undefined ? imageTexture.xOffset : 0;\n        const yOffset = imageTexture.yOffset !== undefined ? imageTexture.yOffset : 0;\n\n        minS = xOffset / imageWidth;\n        maxS = (xOffset + width) / imageWidth;\n\n        const flipY = true;\n        if (flipY) {\n            minT = (imageHeight - yOffset) / imageHeight;\n            maxT = (imageHeight - yOffset - height) / imageHeight;\n        } else {\n            minT = yOffset / imageHeight;\n            maxT = (yOffset + height) / imageHeight;\n        }\n\n        // minS += 0.5 / imageWidth;\n        // maxS += 0.5 / imageWidth;\n        // minT += 0.5 / imageHeight;\n        // maxT += 0.5 / imageHeight;\n\n        // By default, iconScaleV should be equal to iconScaleH, whatever is set in the style.\n        const screenWidth = getPropertyValue(technique.screenWidth, zoomLevel);\n        if (screenWidth !== undefined) {\n            iconScaleV = iconScaleH = screenWidth / iconWidth;\n        }\n\n        const screenHeight = getPropertyValue(technique.screenHeight, zoomLevel);\n        if (screenHeight !== undefined) {\n            iconScaleV = screenHeight / iconHeight;\n            if (screenWidth !== undefined) {\n                iconScaleH = iconScaleV;\n            }\n        }\n\n        // compute stored values in imageTexture\n        poiInfo.computedWidth = iconWidth * iconScaleH;\n        poiInfo.computedHeight = iconHeight * iconScaleV;\n        poiInfo.uvBox = {\n            s0: minS,\n            t0: maxT,\n            s1: maxS,\n            t1: minT\n        };\n        poiInfo.imageItem = imageItem;\n        poiInfo.imageTexture = imageTexture;\n        poiInfo.poiRenderBatch = this.m_renderBuffer.registerPoi(poiInfo);\n        poiInfo.isValid = true;\n\n        assert(poiInfo.poiRenderBatch !== undefined);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ImageItem } from \"../image/Image\";\n\nimport * as THREE from \"three\";\n\nexport type ExtendedMesh = THREE.Mesh & {\n    /**\n     * Distance of this object from the Tile's center.\n     */\n    displacement?: THREE.Vector3;\n};\n\n/**\n * This enum defines the possible origin points for an image.\n */\nexport enum ImageOrigin {\n    TopLeft,\n    BottomLeft\n}\n\n/**\n * Available rendering parameters for the POIs.\n */\nexport interface ImageOptions {\n    /**\n     * The point of origin of the texture as supported in [[ImageOrigin]].\n     */\n    origin?: ImageOrigin;\n\n    /**\n     * Missing Typedoc\n     */\n    width: number;\n\n    /**\n     * Missing Typedoc\n     */\n    height: number;\n\n    /**\n     * Missing Typedoc\n     */\n    xOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    yOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    flipH?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    flipV?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    opacity?: number;\n}\n\n/**\n * Defines a part (or all) of an image as a texture.\n */\nexport class IconTexture {\n    /**\n     * The constructor of an `IconTexture`.\n     *\n     * @param image An [[ImageItem]] instance.\n     * @param options The rendering parameters.\n     */\n    constructor(public image: ImageItem) {}\n}\n\n// export enum TextAlign {\n//     Center,\n//     Left,\n//     Right,\n\n//     // ??? expands lines to have same length.\n//     Justify\n// }\n\n// export interface LayoutOptions {\n//     paddingH?: number;\n//     paddingV: number;\n//     transFormCenterX?: number;\n//     transFormCenterY?: number;\n//     rotation?: number;\n//     /** Set to `true` to enlarge the box after rotation to include all rotated corners. */\n//     rotationEnlargesBox: boolean;\n// }\n\n// export interface TextOptions {\n//     bgColor?: THREE.Color;\n//     wrapWords?: boolean;\n//     maxNumLines?: number;\n//     maxWidth?: number;\n//     /** Replace with ellipsis if wider than maxWidth. */\n//     addEllipsis?: boolean;\n//     /** Handle right-to-left texts */\n//     isRightToLeft?: boolean;\n\n//     textAlignH?: AlignH; // = AlignH.Center;\n//     textAlignV?: AlignV; // = AlignV.Center;\n// }\n\n// export class IconLabel {\n//     constructor(text: string, options: LayoutOptions | TextOptions) {}\n\n//     /**\n//      * Setup a box with size and padding.\n//      *\n//      * @param box Target box to set up.\n//      */\n//     getBox(box: THREE.Box2) {}\n\n//     /**\n//      * Compute width and height from text and font.\n//      */\n//     computeBox() {}\n\n//     /**\n//      * Generate the glyphs and keep them in a buffer. Generates a fixed layout.\n//      */\n//     prepareRendering() {}\n// }\n\n// export enum AlignH {\n//     Center,\n//     Left,\n//     Right\n// }\n\n// export enum AlignV {\n//     Center,\n//     Top,\n//     Bottom\n// }\n\n// export enum AnchorTarget {\n//     /** Anchor point relative to Icon */\n//     Icon,\n//     /** Anchor point is transform center of icon */\n//     IconCenter,\n//     /** Anchor point relative to Icon including padding */\n//     IconBox,\n//     /** Anchor point relative to Label */\n//     Label,\n//     /** Anchor point relative to combination of Icon and Label */\n//     Box\n// }\n\n// export class AnchorPosition {\n//     targetH: AnchorTarget = AnchorTarget.Icon;\n//     targetV: AnchorTarget = AnchorTarget.Icon;\n//     alignH: AlignH = AlignH.Center;\n//     alignV: AlignV = AlignV.Center;\n// }\n\n// export enum IconPinMode {\n//     /** Pinned down, anchor point is the same at all angles. */\n//     PinDown,\n//     /**\n//      * Icon stands up. \"StreetLevel\"-style. The anchor point moves to the bottom of the icon when\n//      * the view direction gets parallel to the ground.\n//      */\n//     StandUp\n// }\n\n// export interface IconScaleOptions {\n//     depthScale?: boolean;\n//     minimumScale?: number;\n// }\n\n// export interface IconOptions {\n//     useScreenSpace?: boolean; // = true\n//     priority?: number;\n\n//     scaleOptions?: IconScaleOptions;\n\n//     /** Optional offset in screen space */\n//     screenOffsetX?: number;\n//     screenOffsetY?: number;\n\n//     /** Optional 3D height above terrain. */\n//     heightAboveGround?: number;\n// }\n\n// export class SimplePoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image ?: IconTexture,\n//         options ?: IconOptions\n//     ) { }\n// }\n\n// export class PoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image?: IconTexture,\n//         readonly label?: IconLabel,\n//         options?: IconOptions\n//     ) {}\n// }\n\n// export interface PoiOptions {\n//     featureId?: number;\n//     minZoomLevel?: number;\n// }\n\n// export class SimplePoi {\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(readonly icon: SimplePoiIcon, options?: PoiOptions) {\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n// }\n\n// export class Poi {\n//     /** store multiple icons, one for every LOD */\n//     private m_icons: PoiIcon[] = [];\n//     private m_lod = 0;\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(icon: PoiIcon, options?: PoiOptions) {\n//         this.m_icons.push(icon);\n\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n\n//     icon(): PoiIcon | undefined {\n//         return this.m_icons[this.m_lod];\n//     }\n\n//     /**\n//      * Select the level of detail that should be used.\n//      *\n//      * @param levelOfDetail Level of detail to render.\n//      */\n//     selectIcon(levelOfDetail: number) {}\n// }\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { debugContext } from \"./DebugContext\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\nconst logger = LoggerManager.instance.create(\"ScreenCollissions\");\n\nexport interface IBox {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\n\nexport class CollisionBox extends Math2D.Box implements IBox {\n    constructor(box?: Math2D.Box | THREE.Box2 | IBox) {\n        super();\n        if (box !== undefined) {\n            this.copy(box);\n        }\n    }\n\n    copy(box: Math2D.Box | THREE.Box2 | IBox): CollisionBox {\n        if (box instanceof Math2D.Box) {\n            this.set(box.x, box.y, box.w, box.h);\n        } else if (box instanceof THREE.Box2) {\n            this.set(box.min.x, box.min.y, box.max.x - box.min.x, box.max.y - box.min.y);\n        } else {\n            this.set(box.minX, box.minY, box.maxX - box.minX, box.maxY - box.minY);\n        }\n        return this;\n    }\n    get minX(): number {\n        return this.x;\n    }\n    set minX(minX: number) {\n        this.x = minX;\n    }\n    get maxX(): number {\n        return this.x + this.w;\n    }\n    set maxX(maxX: number) {\n        this.w = maxX - this.x;\n    }\n    get minY(): number {\n        return this.y;\n    }\n    set minY(minY: number) {\n        this.y = minY;\n    }\n    get maxY(): number {\n        return this.y + this.h;\n    }\n    set maxY(maxY: number) {\n        this.h = maxY - this.y;\n    }\n}\n\n/**\n * Collision box with additional boxes defining tighter bounds for the enclosed feature\n * (e.g.glyph bounds for text).\n */\nexport class DetailedCollisionBox extends CollisionBox {\n    constructor(box: Math2D.Box | THREE.Box2 | IBox, readonly detailBoxes: CollisionBox[]) {\n        super(box);\n    }\n}\n\nexport interface LineWithBound extends IBox {\n    line: THREE.Line3;\n}\n\nexport function isLineWithBound(box: IBox): box is LineWithBound {\n    return (box as LineWithBound).line !== undefined;\n}\n\nconst tmpCollisionBox = new CollisionBox();\n\n/**\n * @hidden\n */\nexport class ScreenCollisions {\n    /** The screen bounding box. */\n    readonly screenBounds = new Math2D.Box();\n\n    /** Tree of allocated bounds. */\n\n    private rtree = new RBush();\n\n    /**\n     * Constructs a new ScreenCollisions object.\n     */\n    constructor() {\n        //\n    }\n\n    /**\n     * Resets the list of allocated screen bounds.\n     */\n    reset() {\n        this.rtree.clear();\n    }\n\n    /**\n     * Updates the screen bounds that are used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     */\n    update(width: number, height: number) {\n        this.screenBounds.set(width / -2, height / -2, width, height);\n        this.reset();\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds The bounding box in NDC scaled coordinates (i.e. top left is -width/2,\n     * -height/2)\n     */\n    allocate(bounds: Math2D.Box | CollisionBox | DetailedCollisionBox): void {\n        const bbox = !(bounds instanceof CollisionBox) ? new CollisionBox(bounds) : bounds;\n        this.rtree.insert(bbox);\n    }\n\n    /**\n     * Inserts the given bounds into the rtree.\n     *\n     * @param bounds The bounding boxes (the bounding boxes must be in the space returned from the\n     * ScreenProjector.project method).\n     */\n    allocateIBoxes(bounds: IBox[]) {\n        this.rtree.load(bounds);\n    }\n\n    /**\n     * Search for all bounds in the tree intersecting with the given box.\n     * @param box The box used for the search.\n     * @returns An array of all IBoxes intersecting with the given box.\n     */\n    search(box: CollisionBox): IBox[] {\n        return this.rtree.search(box);\n    }\n\n    /**\n     * Checks if the given bounding box is already allocated.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isAllocated(bounds: Math2D.Box | CollisionBox): boolean {\n        const collisionBox = bounds instanceof CollisionBox ? bounds : tmpCollisionBox.copy(bounds);\n        const results = this.search(collisionBox);\n        return this.intersectsDetails(collisionBox, results);\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.intersects(bounds);\n    }\n\n    /**\n     * Checks if the given screen bounds is contained within the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isFullyVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.containsBox(bounds);\n    }\n\n    /**\n     * Test whether a given [[CollisionBox]] intersects with any of the details in the specified\n     * [[IBox]]es.\n     *\n     * @param testBox The box to test for intersection.\n     * @param boxes The candidate boxes the test box may intersect with. It's assumed that the\n     * global bounds of these boxes intersect with the given test box.\n     * @returns `true` if any intersection found.\n     */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        for (const box of boxes) {\n            if (box instanceof DetailedCollisionBox) {\n                for (const detailBox of box.detailBoxes) {\n                    if (detailBox.intersects(testBox)) {\n                        return true;\n                    }\n                }\n            } else if (isLineWithBound(box)) {\n                const boundedLine = box as LineWithBound;\n                if (this.intersectsLine(testBox, boundedLine)) {\n                    return true;\n                }\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Computes the intersection between the supplied CollisionBox and the LineWithBound.\n     * @note The [[CollisionBox]] is in Screen Bounds space, whereas the line must be\n     * in Screen Coordinate space\n     * @deprecated Because this is meant just for testing.\n     */\n    intersectsLine(bbox: CollisionBox, boundedLine: LineWithBound): boolean {\n        const line = boundedLine.line;\n\n        // Note, these aren't normalized, but it doesn't matter, we are just interested\n        // in the sign.\n        const lineXDiffTransformed = line.end.x - line.start.x;\n\n        // Sign of bottom left, bottom right, top left and top right corners.\n        let signBL: number;\n        let signBR: number;\n        let signTL: number;\n        let signTR: number;\n        if (lineXDiffTransformed !== 0) {\n            const lineYDiffTransformed = line.end.y - line.start.y;\n            const normalX = lineYDiffTransformed;\n            const normalY = -lineXDiffTransformed;\n            const D = line.start.y - (lineYDiffTransformed / lineXDiffTransformed) * line.start.x;\n\n            signBL = Math.sign(bbox.minX * normalX + (bbox.minY - D) * normalY);\n            signBR = Math.sign(bbox.maxX * normalX + (bbox.minY - D) * normalY);\n            signTL = Math.sign(bbox.minX * normalX + (bbox.maxY - D) * normalY);\n            signTR = Math.sign(bbox.maxX * normalX + (bbox.maxY - D) * normalY);\n        } else {\n            signBL = Math.sign(bbox.minX - line.start.x);\n            signBR = Math.sign(bbox.maxX - line.start.x);\n            signTL = Math.sign(bbox.minX - line.start.x);\n            signTR = Math.sign(bbox.maxX - line.start.x);\n        }\n        return signBL !== signBR || signBL !== signTL || signBL !== signTR;\n    }\n}\n\n/**\n * @hidden\n *\n * Shows requests for screen space during labelling in an HTML canvas, which should be sized like\n * the actual map canvas. It can be placed on top of the map canvas to show exactly which requests\n * for screen space were done.\n *\n * Also logs statistics.\n */\nexport class ScreenCollisionsDebug extends ScreenCollisions {\n    /** 2D rendering context. */\n    private m_renderContext: CanvasRenderingContext2D | null = null;\n    private m_renderingEnabled = false;\n    private m_numAllocations = 0;\n    private m_numSuccessfulTests = 0;\n    private m_numFailedTests = 0;\n    private m_numSuccessfulVisibilityTests = 0;\n    private m_numFailedVisibilityTests = 0;\n\n    /**\n     * Constructs a new ScreenCollisions object which renders its state to a 2D canvas.\n     */\n    constructor(debugCanvas: HTMLCanvasElement) {\n        super();\n\n        if (debugCanvas !== undefined && debugCanvas !== null) {\n            this.m_renderContext = debugCanvas.getContext(\"2d\");\n        }\n    }\n\n    /**\n     * Resets the list of allocated bounds and clears the debug canvas.\n     * @override\n     */\n    reset() {\n        super.reset();\n\n        this.m_numAllocations = 0;\n        this.m_numSuccessfulTests = 0;\n        this.m_numFailedTests = 0;\n        this.m_numSuccessfulVisibilityTests = 0;\n        this.m_numFailedVisibilityTests = 0;\n    }\n\n    /**\n     * Updates the screen bounds used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     * @override\n     */\n    update(width: number, height: number) {\n        if (this.m_renderingEnabled) {\n            logger.log(\n                // tslint:disable-next-line: max-line-length\n                `Allocations: ${this.m_numAllocations} Successful Tests: ${this.m_numSuccessfulTests} Failed Tests: ${this.m_numFailedTests}  Successful Visibility Tests: ${this.m_numSuccessfulVisibilityTests}  Failed Visibility Tests: ${this.m_numFailedVisibilityTests} `\n            );\n        }\n\n        super.update(width, height);\n\n        if (this.m_renderContext !== null) {\n            this.m_renderContext.canvas.width = width;\n            this.m_renderContext.canvas.height = height;\n        }\n\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_SCREEN_COLLISIONS\", true)\n        this.m_renderingEnabled = debugContext.getValue(\"DEBUG_SCREEN_COLLISIONS\");\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds the bounding box in world coordinates.\n     * @override\n     */\n    allocate(bounds: Math2D.Box | CollisionBox): void {\n        super.allocate(bounds);\n\n        this.m_numAllocations++;\n\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            this.m_renderContext.strokeStyle = \"#6666ff\";\n            this.m_renderContext.strokeRect(\n                bounds.x - this.screenBounds.x,\n                this.screenBounds.y + this.screenBounds.h - bounds.y - 1,\n                bounds.w,\n                -bounds.h\n            );\n        }\n    }\n\n    /** @override */\n    allocateIBoxes(boundsArray: IBox[]) {\n        for (const bounds of boundsArray) {\n            this.m_numAllocations++;\n\n            if (this.m_renderingEnabled && this.m_renderContext !== null) {\n                this.m_renderContext.strokeStyle = \"#aa2222\";\n                this.m_renderContext.strokeRect(\n                    bounds.minX - this.screenBounds.x,\n                    this.screenBounds.y + this.screenBounds.h - bounds.minY - 1,\n                    bounds.maxX - bounds.minX,\n                    -(bounds.maxY - bounds.minY)\n                );\n            }\n        }\n        super.allocateIBoxes(boundsArray);\n    }\n\n    /** @override */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        const collisionFound = super.intersectsDetails(testBox, boxes);\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            const offset = collisionFound ? 2 : 0;\n            this.m_renderContext.strokeStyle = collisionFound ? \"#FF0000\" : \"#00ff00\";\n            this.m_renderContext.strokeRect(\n                testBox.x - this.screenBounds.x - offset,\n                this.screenBounds.y + this.screenBounds.h - testBox.y - 1 + offset,\n                testBox.w + 2 * offset,\n                -testBox.h - 2 * offset\n            );\n        }\n\n        if (collisionFound) {\n            this.m_numFailedTests++;\n        } else {\n            this.m_numSuccessfulTests++;\n        }\n\n        return collisionFound;\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     * @override\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        const visible = super.isVisible(bounds);\n\n        if (visible) {\n            this.m_numSuccessfulVisibilityTests++;\n        } else {\n            this.m_numFailedVisibilityTests++;\n        }\n        return visible;\n    }\n}\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    ColorUtils,\n    getPropertyValue,\n    IndexedTechniqueParams,\n    LineMarkerTechnique,\n    PoiTechnique,\n    Technique,\n    TextStyleDefinition,\n    TextTechnique,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport {\n    DefaultTextStyle,\n    FontStyle,\n    FontUnit,\n    FontVariant,\n    HorizontalAlignment,\n    TextCanvas,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle,\n    VerticalAlignment,\n    WrappingMode\n} from \"@here/harp-text-canvas\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { ColorCache } from \"../ColorCache\";\nimport { evaluateColorProperty } from \"../DecodedTileHelpers\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { Tile } from \"../Tile\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\n\nconst logger = LoggerManager.instance.create(\"TextStyleCache\");\n\n/**\n * [[TextStyle]] id for the default value inside a [[TextRenderStyleCache]] or a\n * [[TextLayoutStyleCache]].\n */\nexport const DEFAULT_TEXT_STYLE_CACHE_ID = \"Default\";\n\n/**\n * Calculates the [[TextStyle]] id that identifies either a [[TextRenderStyle]] or a\n * [[TextLayoutStyle]] inside a [[TextRenderStyleCache]] or a [[TextLayoutStyleCache]],\n * respectively.\n *\n * @param technique Technique defining the [[TextStyle]].\n * @param zoomLevel Zoom level for which to interpret the technique.\n *\n * @returns [[TextStyle]] id.\n */\nexport function computeStyleCacheId(\n    datasourceName: string,\n    technique: Technique & Partial<IndexedTechniqueParams>,\n    zoomLevel: number\n): string {\n    return `${datasourceName}_${technique._key}_${zoomLevel}`;\n}\n\n/**\n * Cache storing [[MapView]]'s [[TextRenderStyle]]s.\n */\nexport class TextRenderStyleCache {\n    private m_map: Map<string, TextRenderStyle> = new Map();\n    constructor() {\n        this.m_map.set(\n            DEFAULT_TEXT_STYLE_CACHE_ID,\n            new TextRenderStyle({\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: 8\n                },\n                color: ColorCache.instance.getColor(\"#6d7477\"),\n                opacity: 1.0,\n                backgroundColor: ColorCache.instance.getColor(\"#f7fbfd\"),\n                backgroundOpacity: 0.5\n            })\n        );\n    }\n\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    get(id: string): TextRenderStyle | undefined {\n        return this.m_map.get(id);\n    }\n\n    set(id: string, value: TextRenderStyle): void {\n        this.m_map.set(id, value);\n    }\n\n    clear(): void {\n        this.m_map.clear();\n        this.m_map.set(\n            DEFAULT_TEXT_STYLE_CACHE_ID,\n            new TextRenderStyle({\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: 8\n                },\n                color: ColorCache.instance.getColor(\"#6d7477\"),\n                opacity: 1.0,\n                backgroundColor: ColorCache.instance.getColor(\"#f7fbfd\"),\n                backgroundOpacity: 0.5\n            })\n        );\n    }\n}\n\n/**\n * Cache storing [[MapView]]'s [[TextLayoutStyle]]s.\n */\nexport class TextLayoutStyleCache {\n    private m_map: Map<string, TextLayoutStyle> = new Map();\n    constructor() {\n        this.m_map.set(\n            DEFAULT_TEXT_STYLE_CACHE_ID,\n            new TextLayoutStyle({\n                verticalAlignment: VerticalAlignment.Center,\n                horizontalAlignment: HorizontalAlignment.Center\n            })\n        );\n    }\n\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    get(id: string): TextLayoutStyle | undefined {\n        return this.m_map.get(id);\n    }\n\n    set(id: string, value: TextLayoutStyle): void {\n        this.m_map.set(id, value);\n    }\n\n    clear(): void {\n        this.m_map.clear();\n        this.m_map.set(\n            DEFAULT_TEXT_STYLE_CACHE_ID,\n            new TextLayoutStyle({\n                verticalAlignment: VerticalAlignment.Center,\n                horizontalAlignment: HorizontalAlignment.Center\n            })\n        );\n    }\n}\n\nconst DEFAULT_STYLE_NAME = \"default\";\n\n/**\n * [[TextElementsRenderer]] representation of a [[Theme]]'s TextStyle.\n */\nexport interface TextElementStyle {\n    name: string;\n    fontCatalog: string;\n    renderParams: TextRenderParameters;\n    layoutParams: TextLayoutParameters;\n    textCanvas?: TextCanvas;\n    poiRenderer?: PoiRenderer;\n}\n\nexport class TextStyleCache {\n    private m_textRenderStyleCache = new TextRenderStyleCache();\n    private m_textLayoutStyleCache = new TextLayoutStyleCache();\n    /**\n     * Cache for named colors.\n     */\n    private m_colorMap: Map<string, THREE.Color> = new Map();\n\n    private m_textStyles: Map<string, TextElementStyle> = new Map();\n    private m_defaultStyle: TextElementStyle = {\n        name: DEFAULT_STYLE_NAME,\n        fontCatalog: \"\",\n        renderParams: this.m_textRenderStyleCache.get(DEFAULT_TEXT_STYLE_CACHE_ID)!.params,\n        layoutParams: this.m_textLayoutStyleCache.get(DEFAULT_TEXT_STYLE_CACHE_ID)!.params\n    };\n\n    constructor(private m_theme: Theme) {}\n\n    initializeDefaultTextElementStyle(defaultFontCatalogName: string) {\n        if (this.m_theme.textStyles === undefined) {\n            this.m_theme.textStyles = [];\n        }\n        const styles = this.m_theme.textStyles;\n\n        const themedDefaultStyle = styles.find(style => style.name === DEFAULT_STYLE_NAME);\n        if (themedDefaultStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                themedDefaultStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (this.m_theme.defaultTextStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                this.m_theme.defaultTextStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (styles.length > 0) {\n            this.m_defaultStyle = this.createTextElementStyle(styles[0], DEFAULT_STYLE_NAME);\n        }\n        this.m_defaultStyle.fontCatalog = defaultFontCatalogName;\n    }\n\n    initializeTextElementStyles(\n        defaultPoiRenderer: PoiRenderer,\n        defaultTextCanvas: TextCanvas,\n        textRenderers: TextCanvasRenderer[]\n    ) {\n        // Initialize default text style.\n        if (this.m_defaultStyle.fontCatalog !== undefined) {\n            const styledTextRenderer = textRenderers.find(\n                textRenderer => textRenderer.fontCatalog === this.m_defaultStyle.fontCatalog\n            );\n            this.m_defaultStyle.textCanvas =\n                styledTextRenderer !== undefined ? styledTextRenderer.textCanvas : undefined;\n            this.m_defaultStyle.poiRenderer =\n                styledTextRenderer !== undefined ? styledTextRenderer.poiRenderer : undefined;\n        }\n        if (this.m_defaultStyle.textCanvas === undefined) {\n            if (this.m_defaultStyle.fontCatalog !== undefined) {\n                logger.warn(\n                    `FontCatalog '${this.m_defaultStyle.fontCatalog}' set in TextStyle '${\n                        this.m_defaultStyle.name\n                    }' not found, using default fontCatalog(${\n                        defaultTextCanvas!.fontCatalog.name\n                    }).`\n                );\n            }\n            this.m_defaultStyle.textCanvas = defaultTextCanvas;\n            this.m_defaultStyle.poiRenderer = defaultPoiRenderer;\n        }\n\n        // Initialize theme text styles.\n        this.m_theme.textStyles!.forEach(element => {\n            this.m_textStyles.set(\n                element.name!,\n                this.createTextElementStyle(element, element.name!)\n            );\n        });\n        // tslint:disable-next-line:no-unused-variable\n        for (const [, style] of this.m_textStyles) {\n            if (style.textCanvas === undefined) {\n                if (style.fontCatalog !== undefined) {\n                    const styledTextRenderer = textRenderers.find(\n                        textRenderer => textRenderer.fontCatalog === style.fontCatalog\n                    );\n                    style.textCanvas =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.textCanvas\n                            : undefined;\n                    style.poiRenderer =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.poiRenderer\n                            : undefined;\n                }\n                if (style.textCanvas === undefined) {\n                    if (style.fontCatalog !== undefined) {\n                        logger.warn(\n                            `FontCatalog '${style.fontCatalog}' set in TextStyle '${\n                                style.name\n                            }' not found, using default fontCatalog(${\n                                defaultTextCanvas!.fontCatalog.name\n                            }).`\n                        );\n                    }\n                    style.textCanvas = defaultTextCanvas;\n                    style.poiRenderer = defaultPoiRenderer;\n                }\n            }\n        }\n    }\n\n    /**\n     * Retrieves a [[TextElementStyle]] for [[Theme]]'s [[TextStyle]] id.\n     */\n    getTextElementStyle(styleId?: string): TextElementStyle {\n        let result;\n        if (styleId === undefined) {\n            result = this.m_defaultStyle;\n        } else {\n            result = this.m_textStyles.get(styleId);\n            if (result === undefined) {\n                result = this.m_defaultStyle;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     *\n     * @param technique Label's technique.\n     * @param techniqueIdx Label's technique index.\n     */\n    getRenderStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextRenderStyle {\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const zoomLevel = mapView.zoomLevel;\n        const zoomLevelInt = Math.floor(zoomLevel);\n\n        const cacheId = computeStyleCacheId(dataSource.name, technique, zoomLevelInt);\n        let renderStyle = this.m_textRenderStyleCache.get(cacheId);\n        if (renderStyle === undefined) {\n            const defaultRenderParams = this.m_defaultStyle.renderParams;\n\n            // Sets opacity to 1.0 if default and technique attribute are undefined.\n            const defaultOpacity = getOptionValue(defaultRenderParams.opacity, 1.0);\n            // Interpolate opacity but only on discreet zoom levels (step interpolation).\n            let opacity = getPropertyValue(\n                getOptionValue(technique.opacity, defaultOpacity),\n                zoomLevelInt\n            );\n\n            // Store color (RGB) in cache and multiply opacity value with the color alpha channel.\n            if (technique.color !== undefined) {\n                let hexColor = evaluateColorProperty(technique.color, zoomLevelInt);\n                if (ColorUtils.hasAlphaInHex(hexColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexColor);\n                    opacity = opacity * alpha;\n                    hexColor = ColorUtils.removeAlphaFromHex(hexColor);\n                }\n                this.m_colorMap.set(cacheId, ColorCache.instance.getColor(hexColor));\n            }\n\n            // Sets background size to 0.0 if default and technique attribute is undefined.\n            const defaultBackgroundSize = getOptionValue(\n                defaultRenderParams.fontSize!.backgroundSize,\n                0\n            );\n            const backgroundSize = getPropertyValue(\n                getOptionValue(technique.backgroundSize, defaultBackgroundSize),\n                zoomLevelInt\n            );\n\n            const hasBackgroundDefined =\n                technique.backgroundColor !== undefined &&\n                technique.backgroundSize !== undefined &&\n                backgroundSize > 0;\n\n            // Sets background opacity to 1.0 if default and technique value is undefined while\n            // background size and color is specified, otherwise set value in default render\n            // params or 0.0 if neither set. Makes label opaque when backgroundColor and\n            // backgroundSize are set.\n            const defaultBackgroundOpacity = getOptionValue(\n                defaultRenderParams.backgroundOpacity,\n                0.0\n            );\n            let backgroundOpacity = getPropertyValue(\n                getOptionValue(\n                    technique.backgroundOpacity,\n                    hasBackgroundDefined ? 1.0 : defaultBackgroundOpacity\n                ),\n                zoomLevelInt\n            );\n\n            // Store background color (RGB) in cache and multiply backgroundOpacity by its alpha.\n            if (technique.backgroundColor !== undefined) {\n                let hexBgColor = evaluateColorProperty(technique.backgroundColor, zoomLevelInt);\n                if (ColorUtils.hasAlphaInHex(hexBgColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexBgColor);\n                    backgroundOpacity = backgroundOpacity * alpha;\n                    hexBgColor = ColorUtils.removeAlphaFromHex(hexBgColor);\n                }\n                this.m_colorMap.set(cacheId + \"_bg\", ColorCache.instance.getColor(hexBgColor));\n            }\n\n            const renderParams = {\n                fontName: getOptionValue(technique.fontName, defaultRenderParams.fontName),\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: getPropertyValue(\n                        getOptionValue(technique.size, defaultRenderParams.fontSize!.size),\n                        zoomLevelInt\n                    ),\n                    backgroundSize\n                },\n                fontStyle:\n                    technique.fontStyle === \"Regular\" ||\n                    technique.fontStyle === \"Bold\" ||\n                    technique.fontStyle === \"Italic\" ||\n                    technique.fontStyle === \"BoldItalic\"\n                        ? FontStyle[technique.fontStyle]\n                        : defaultRenderParams.fontStyle,\n                fontVariant:\n                    technique.fontVariant === \"Regular\" ||\n                    technique.fontVariant === \"AllCaps\" ||\n                    technique.fontVariant === \"SmallCaps\"\n                        ? FontVariant[technique.fontVariant]\n                        : defaultRenderParams.fontVariant,\n                rotation: getOptionValue(technique.rotation, defaultRenderParams.rotation),\n                color: getOptionValue(\n                    this.m_colorMap.get(cacheId),\n                    getOptionValue(defaultRenderParams.color, DefaultTextStyle.DEFAULT_COLOR)\n                ),\n                backgroundColor: getOptionValue(\n                    this.m_colorMap.get(cacheId + \"_bg\"),\n                    getOptionValue(\n                        defaultRenderParams.backgroundColor,\n                        DefaultTextStyle.DEFAULT_BACKGROUND_COLOR\n                    )\n                ),\n                opacity,\n                backgroundOpacity\n            };\n\n            const themeRenderParams = this.getTextElementStyle(technique.style).renderParams;\n            renderStyle = new TextRenderStyle({\n                ...themeRenderParams,\n                ...renderParams\n            });\n            this.m_textRenderStyleCache.set(cacheId, renderStyle);\n        }\n\n        return renderStyle;\n    }\n\n    /**\n     * Gets the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     *\n     * @param tile The [[Tile]] to process.\n     * @param technique Label's technique.\n     */\n    getLayoutStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextLayoutStyle {\n        const floorZoomLevel = Math.floor(tile.mapView.zoomLevel);\n        const cacheId = computeStyleCacheId(tile.dataSource.name, technique, floorZoomLevel);\n        let layoutStyle = this.m_textLayoutStyleCache.get(cacheId);\n\n        if (layoutStyle === undefined) {\n            const defaultLayoutParams = this.m_defaultStyle.layoutParams;\n\n            const hAlignment = getPropertyValue(technique.hAlignment, floorZoomLevel) as\n                | string\n                | undefined;\n            const vAlignment = getPropertyValue(technique.vAlignment, floorZoomLevel) as\n                | string\n                | undefined;\n            const wrapping = getPropertyValue(technique.wrappingMode, floorZoomLevel) as\n                | string\n                | undefined;\n\n            const horizontalAlignment: HorizontalAlignment | undefined =\n                hAlignment === \"Left\" || hAlignment === \"Center\" || hAlignment === \"Right\"\n                    ? HorizontalAlignment[hAlignment]\n                    : defaultLayoutParams.horizontalAlignment;\n\n            const verticalAlignment: VerticalAlignment | undefined =\n                vAlignment === \"Above\" || vAlignment === \"Center\" || vAlignment === \"Below\"\n                    ? VerticalAlignment[vAlignment]\n                    : defaultLayoutParams.verticalAlignment;\n\n            const layoutParams = {\n                tracking:\n                    getPropertyValue(technique.tracking, floorZoomLevel) ??\n                    defaultLayoutParams.tracking,\n                leading:\n                    getPropertyValue(technique.leading, floorZoomLevel) ??\n                    defaultLayoutParams.leading,\n                maxLines:\n                    getPropertyValue(technique.maxLines, floorZoomLevel) ??\n                    defaultLayoutParams.maxLines,\n                lineWidth:\n                    getPropertyValue(technique.lineWidth, floorZoomLevel) ??\n                    defaultLayoutParams.lineWidth,\n                canvasRotation:\n                    getPropertyValue(technique.canvasRotation, floorZoomLevel) ??\n                    defaultLayoutParams.canvasRotation,\n                lineRotation:\n                    getPropertyValue(technique.lineRotation, floorZoomLevel) ??\n                    defaultLayoutParams.lineRotation,\n                wrappingMode:\n                    wrapping === \"None\" || wrapping === \"Character\" || wrapping === \"Word\"\n                        ? WrappingMode[wrapping]\n                        : defaultLayoutParams.wrappingMode,\n                horizontalAlignment,\n                verticalAlignment\n            };\n\n            const themeLayoutParams = this.getTextElementStyle(technique.style);\n            layoutStyle = new TextLayoutStyle({\n                ...themeLayoutParams,\n                ...layoutParams\n            });\n            this.m_textLayoutStyleCache.set(cacheId, layoutStyle);\n        }\n\n        return layoutStyle;\n    }\n\n    private createTextElementStyle(\n        style: TextStyleDefinition,\n        styleName: string\n    ): TextElementStyle {\n        return {\n            name: styleName,\n            fontCatalog: getOptionValue(style.fontCatalogName, this.m_defaultStyle.fontCatalog),\n            renderParams: {\n                fontName: style.fontName,\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: style.backgroundSize || 8\n                },\n                fontStyle:\n                    style.fontStyle === \"Regular\" ||\n                    style.fontStyle === \"Bold\" ||\n                    style.fontStyle === \"Italic\" ||\n                    style.fontStyle === \"BoldItalic\"\n                        ? FontStyle[style.fontStyle]\n                        : undefined,\n                fontVariant:\n                    style.fontVariant === \"Regular\" ||\n                    style.fontVariant === \"AllCaps\" ||\n                    style.fontVariant === \"SmallCaps\"\n                        ? FontVariant[style.fontVariant]\n                        : undefined,\n                rotation: style.rotation,\n                color:\n                    style.color !== undefined\n                        ? ColorCache.instance.getColor(style.color)\n                        : undefined,\n                backgroundColor:\n                    style.backgroundColor !== undefined\n                        ? ColorCache.instance.getColor(style.backgroundColor)\n                        : undefined,\n                opacity: style.opacity,\n                backgroundOpacity: style.backgroundOpacity\n            },\n            layoutParams: {\n                tracking: style.tracking,\n                leading: style.leading,\n                maxLines: style.maxLines,\n                lineWidth: style.lineWidth,\n                canvasRotation: style.canvasRotation,\n                lineRotation: style.lineRotation,\n                wrappingMode:\n                    style.wrappingMode === \"None\" ||\n                    style.wrappingMode === \"Character\" ||\n                    style.wrappingMode === \"Word\"\n                        ? WrappingMode[style.wrappingMode]\n                        : WrappingMode.Word,\n                verticalAlignment:\n                    style.vAlignment === \"Above\" ||\n                    style.vAlignment === \"Center\" ||\n                    style.vAlignment === \"Below\"\n                        ? VerticalAlignment[style.vAlignment]\n                        : VerticalAlignment.Center,\n                horizontalAlignment:\n                    style.hAlignment === \"Left\" ||\n                    style.hAlignment === \"Center\" ||\n                    style.hAlignment === \"Right\"\n                        ? HorizontalAlignment[style.hAlignment]\n                        : HorizontalAlignment.Center\n            }\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3 } from \"three\";\n\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\n/**\n * The default value for camera movement throttling, in milliseconds.\n */\nconst DEFAULT_THROTTLING_TIMEOUT = 300;\n\n/**\n * The `CameraMovementDetector` class checks for changes in camera position and orientation, to\n * detect continuous movements without the animation mode activated in [[MapView]]. If the\n * interaction is not continuous enough, you can use a throttling timer to reduce the number of\n * callbacks.\n */\nexport class CameraMovementDetector {\n    private m_lastAttitude?: MapViewUtils.Attitude;\n    private m_lastCameraPos = new Vector3();\n    private m_newCameraPos = new Vector3();\n    private m_cameraMovedLastFrame: boolean | undefined;\n    private m_throttlingTimerId?: number = undefined;\n    private m_movementDetectorDeadline: number = 0;\n\n    /**\n     * Initializes the detector with timeout value and callbacks. [[MapView]] also provides\n     * events for client code to be notified when these cues occur.\n     *\n     * @param m_throttlingTimeout The delay, in milliseconds, between the last user interaction\n     * detected and the call to `m_movementFinishedFunc`; the default is `300`.\n     * @param m_movementStartedFunc Callback function, called when the user starts interacting.\n     * @param m_movementFinishedFunc Callback function, called when the user stops interacting.\n     */\n    constructor(\n        private m_throttlingTimeout: number | undefined,\n        private m_movementStartedFunc: (() => void) | undefined,\n        private m_movementFinishedFunc: (() => void) | undefined\n    ) {\n        if (this.m_throttlingTimeout === undefined) {\n            this.m_throttlingTimeout = DEFAULT_THROTTLING_TIMEOUT;\n        }\n    }\n\n    /**\n     * Checks if the camera has moved since the last time it was checked. The\n     * `m_movementStartedFunc` is called when a movement starts. If no movement\n     * is detected, a timer for `m_movementFinishedFunc` starts.\n     *\n     * @param mapView [[Mapview]]'s position and camera are checked for modifications.\n     */\n    checkCameraMoved(mapView: MapView, now: number): boolean {\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n\n        if (this.m_lastAttitude === undefined) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n            return false;\n        }\n        const cameraMoved =\n            !this.m_lastCameraPos.equals(newCameraPos) ||\n            newAttitude.yaw !== this.m_lastAttitude.yaw ||\n            newAttitude.pitch !== this.m_lastAttitude.pitch ||\n            newAttitude.roll !== this.m_lastAttitude.roll;\n\n        if (cameraMoved) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n        }\n\n        if (cameraMoved !== this.m_cameraMovedLastFrame) {\n            if (cameraMoved) {\n                this.movementStarted();\n            }\n            this.m_cameraMovedLastFrame = cameraMoved;\n        }\n        if (cameraMoved) {\n            // Start timer\n            this.m_movementDetectorDeadline = now + this.m_throttlingTimeout!;\n            this.startMovementFinishedTimer(now);\n        }\n\n        return this.m_cameraMovedLastFrame;\n    }\n\n    /**\n     * Reset the saved camera position. Next time checkCameraMoved is called, it will return\n     * `false`.\n     */\n    clear(mapView: MapView) {\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n        this.m_lastCameraPos.set(newCameraPos.x, newCameraPos.y, newCameraPos.z);\n\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        this.m_lastAttitude = newAttitude;\n    }\n\n    /**\n     * Force change of camera position. Next time checkCameraMoved is called, it will return `true`.\n     */\n    forceMoved() {\n        this.m_lastCameraPos.set(Number.NaN, Number.NaN, Number.NaN);\n    }\n\n    /**\n     * Returns `true` if the camera of this [[MapView]] is currently moving. In this case the\n     * `m_movementFinishedFunc` is waiting to be called after the throttling timer runs out.\n     */\n    get cameraIsMoving() {\n        return this.m_throttlingTimerId !== undefined;\n    }\n\n    /**\n     * Disposes resources and kills the throttling timer.\n     */\n    dispose() {\n        this.removeMovementFinishedTimer();\n        this.m_movementStartedFunc = undefined;\n        this.m_movementFinishedFunc = undefined;\n    }\n\n    /**\n     * Returns `true` if the camera has moved in the last frame.\n     */\n    get cameraMovedLastFrame(): boolean {\n        return this.m_cameraMovedLastFrame === true;\n    }\n\n    private movementStarted() {\n        if (this.m_movementStartedFunc !== undefined) {\n            this.m_movementStartedFunc();\n        }\n    }\n\n    private movementFinished() {\n        this.removeMovementFinishedTimer();\n        if (this.m_movementFinishedFunc !== undefined) {\n            this.m_movementFinishedFunc();\n        }\n    }\n\n    private startMovementFinishedTimer(now: number) {\n        if (this.m_throttlingTimerId === undefined) {\n            const remainingTime = Math.max(0, this.m_movementDetectorDeadline - now);\n            this.m_throttlingTimerId = setTimeout(this.onDeadlineTimer, remainingTime) as any;\n        }\n    }\n\n    private onDeadlineTimer = () => {\n        this.m_throttlingTimerId = undefined;\n        const now = performance.now();\n        if (now >= this.m_movementDetectorDeadline) {\n            this.movementFinished();\n        } else {\n            this.startMovementFinishedTimer(now);\n        }\n    };\n\n    private removeMovementFinishedTimer() {\n        if (this.m_throttlingTimerId !== undefined) {\n            clearTimeout(this.m_throttlingTimerId);\n            this.m_throttlingTimerId = undefined;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { EarthConstants, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst epsilon = 0.000001;\n\nexport interface ClipPlanesEvaluator {\n    /**\n     * Minimum elevation to be rendered, values beneath the sea level are negative.\n     */\n    minElevation: number;\n\n    /**\n     * Set maximum elevation to be rendered, values above sea level are positive.\n     */\n    maxElevation: number;\n\n    /**\n     * Compute near and far clipping planes distance.\n     *\n     * Evaluation method should be called on every frame  and camera clip planes updated.\n     * This is related to evaluator implementation and its input data, that may suddenly change\n     * such as camera position or angle, projection type or so.\n     * Some evaluators may not depend on all or even any of input objects, but to preserve\n     * compatibility with any evaluator type it is strongly recommended to update on every frame.\n     * @param mapView The [[MapView]] in use.\n     * @note Camera clipping planes aren't automatically updated via #evaluateClipPlanes()\n     * call, user should do it manually if needed.\n     */\n    evaluateClipPlanes(mapView: MapView): ViewRanges;\n}\n\n/**\n * Simplest camera clip planes evaluator, interpolates near/far planes based on ground distance.\n *\n * At general ground distance to camera along the surface normal is used as reference point for\n * planes evaluation, where near plane distance is set as fraction of this distance refereed as\n * [[nearMultiplier]]. Far plane equation has its own multiplier - [[nearFarMultiplier]],\n * which is applied to near plane and offset giving finally far plane distance.\n * This evaluator supports both planar and spherical projections, although it's behavior is\n * slightly different in each case. General algorithm sets near plane between camera and\n * ground level, while far plane is just calculated using scale and bias approach with far offset\n * and multiplier.\n * @deprecated Class contains the legacy (first and original) clip planes evaluation method, which\n * is widelly used in examples thus is still kept for backward compatibility and comparisons.\n */\nexport class InterpolatedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly farMin: number;\n\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n\n    constructor(\n        readonly nearMin: number = 0.1,\n        readonly nearMultiplier: number = 0.1,\n        readonly nearFarMultiplier = 50.0,\n        readonly farOffset = 200.0\n    ) {\n        assert(nearMin > 0);\n        assert(nearFarMultiplier >= 0);\n        assert(farOffset >= 0);\n        this.farMin = nearMin * nearFarMultiplier + farOffset;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    evaluateClipPlanes(mapView: MapView): ViewRanges {\n        const camera = mapView.camera;\n        const projection = mapView.projection;\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.farMin;\n        if (projection.type === ProjectionType.Spherical) {\n            // near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n            const r = EarthConstants.EQUATORIAL_RADIUS;\n            const d = camera.position.length();\n            const alpha = Math.asin(r / d);\n            // Extract X, Y, Z axes into tmp vectors array.\n            camera.matrixWorld.extractBasis(\n                this.m_tmpVectors[0],\n                this.m_tmpVectors[1],\n                this.m_tmpVectors[2]\n            );\n            // Setup quaternion based on X axis.\n            this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], alpha);\n            // Acquire forward vector based on Z axis reversed (keep it in tmpVectors[2]).\n            const fwd = this.m_tmpVectors[2].negate();\n            // Apply quaternion rotation to forward vector, store it in tmpVectors[1].\n            const fwdRot = this.m_tmpVectors[1].copy(fwd).applyQuaternion(this.m_tmpQuaternion);\n            // Store camera position tmpVectors[0] and reference it with p.\n            const p = this.m_tmpVectors[0].copy(camera.position);\n            p.addScaledVector(fwdRot, Math.sqrt(d * d - r * r));\n            farPlane = p.sub(camera.position).dot(fwd);\n            nearPlane = Math.max(\n                this.nearMin,\n                projection.groundDistance(camera.position) * this.nearMultiplier\n            );\n        } else if (projection.type === ProjectionType.Planar) {\n            const groundDistance = projection.groundDistance(camera.position);\n            nearPlane = Math.max(this.nearMin, groundDistance * this.nearMultiplier);\n            // Will be already clamped to minFar due to clamping above.\n            farPlane = nearPlane * this.nearFarMultiplier + this.farOffset;\n        } else {\n            assert(false, \"Unsupported projection type\");\n        }\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farPlane\n        };\n        return viewRanges;\n    }\n}\n\n/**\n * Abstract evaluator class that adds support for elevation constraints.\n *\n * Classes derived from this should implement algorithms that takes into account rendered\n * features height (elevations), such as ground plane is no more flat (or spherical), but\n * contains geometry that should be overlapped by frustum planes.\n */\nexport abstract class ElevationBasedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    private m_maxElevation: number;\n    private m_minElevation: number;\n\n    constructor(maxElevation: number, minElevation: number) {\n        assert(maxElevation >= minElevation);\n        this.m_minElevation = minElevation;\n        this.m_maxElevation = maxElevation;\n    }\n\n    abstract evaluateClipPlanes(mapView: MapView): ViewRanges;\n\n    /**\n     * Set maximum elevation above sea level to be rendered.\n     *\n     * @param elevation the elevation (altitude) value in world units (meters).\n     * @note If you set this exactly to the maximum rendered feature height (altitude above\n     * the sea, you may notice some flickering or even polygons disappearing related to rounding\n     * errors or depth buffer precision. In such cases increase [[nearFarMargin]] or add a little\n     * bit offset to your assumed maximum elevation.\n     * @note Reasonable values are in between (-DeadSeeDepression, MtEverestHeight>, both values\n     * are defined in [[EarthConstant]] as [[EarthConstant.MIN_ELEVATION]] and\n     * [[EarthConstant.MAX_ELEVATION]] respectively.\n     * @see minElevation for more information about precision and rounding errors.\n     */\n    set maxElevation(elevation: number) {\n        this.m_maxElevation = elevation;\n        // Min elevation should be at least equal or smaller to max elevation.\n        this.m_minElevation = Math.min(elevation, this.m_minElevation);\n    }\n\n    /**\n     * Get maximum elevation to be covered by camera frustum.\n     */\n    get maxElevation(): number {\n        return this.m_maxElevation;\n    }\n\n    /**\n     * Set minimum elevation to be rendered, values beneath the sea level are negative.\n     *\n     * @param elevation the minimum elevation (depression) in world units (meters).\n     * @note If you set this parameter to zero you may not see any features rendered if they are\n     * just below the sea level more than half of [[nearFarMargin]] assumed. Similarly if set to\n     * -100m and rendered features lays exactly in such depression, you may notice that problem.\n     * The errors usually come from projection precision loss and depth buffer nature (significant\n     * precision loss closer to far plane). Thus is such cases either increase the margin (if you\n     * are sure features are just at this elevation, or setup bigger offset for [[minElevation]].\n     * Reasonable values are between <-DeadSeaDepression, MtEverestHeight), where the first denotes\n     * lowest depression on the Earth defined as [[EarthConstants.MIN_ELEVATION]] and the second is\n     * the highest point our planet.\n     * @see https://developer.nvidia.com/content/depth-precision-visualized\n     */\n    set minElevation(elevation: number) {\n        this.m_minElevation = elevation;\n        // Max elevation should be at least equal or bigger than min elevation.\n        this.m_maxElevation = Math.max(elevation, this.m_maxElevation);\n    }\n\n    /**\n     * Get minimum elevation to be covered by camera frustum.\n     */\n    get minElevation(): number {\n        return this.m_minElevation;\n    }\n}\n\n/**\n * Top view, clip planes evaluator that computes view ranges based on ground distance and elevation.\n *\n * This evaluator supports both planar and spherical projections, although it behavior is\n * slightly different in each case. General algorithm sets near plane and far plane close\n * to ground level, but taking into account maximum and minimum elevation of features on the ground.\n *\n * @note This evaluator supports only cameras which are always looking down the ground surface\n * (top-down view) along surface normal and does not preserve correct clip planes when\n * modifying camera pitch (tilt) angle. In simple words it is suitable only for top view camera\n * settings.\n */\nexport class TopViewClipPlanesEvaluator extends ElevationBasedClipPlanesEvaluator {\n    /**\n     * Helper for reducing number of objects created at runtime.\n     */\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    /**\n     * Helper object for reducing performance impact.\n     */\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n    private m_minimumViewRange: ViewRanges;\n\n    /**\n     * Allows to setup near/far offsets (margins), rendered geometry elevation relative to sea\n     * level as also minimum near plane and maximum far plane distance constraints.\n     * It is strongly recommended to set some reasonable [[nearFarMargin]] (offset) between near\n     * and far planes to avoid flickering.\n     * @param maxElevation defines near plane offset from the ground in the surface normal\n     * direction, positive values allows to render elevated terrain features (mountains,\n     * buildings). Defaults to Burj Khalifa building height.\n     * @param minElevation defines far plane offset from the ground surface, negative values moves\n     * far plane below the ground level (use it to render depressions). Default zero - sea level.\n     * @param nearMin minimum allowable near plane distance from camera, must be bigger than zero.\n     * @param nearFarMarginRatio minimum distance between near and far plane, as a ratio of average\n     * near/far plane distance, it have to be significantly bigger than zero (especially if\n     * [[maxElevation]] and [[minElevation]] are equal), otherwise you may notice flickering when\n     * rendering, or even render empty scene if frustum planes are almost equal.\n     * @param farMaxRatio maximum ratio between ground and far plane distance, allows to limit\n     * viewing distance at overall. Have to be bigger than 1.0.\n     * @note Keep in mind that this evaluator does not evaluate terrain (or building) elevation\n     * automatically, to keep such features rendered (between frustum planes) use [[minElevation]],\n     * [[maxElevation]] constraints. You may change this parameters at any time, but it requires\n     * repeating [[evaluatePlanes]] step, if your camera is moving you need to evaluate planes\n     * anyway.\n     * @note You may treat [[minElevation]] and [[maxElevation]] parameters as the maximum and\n     * minimum renderable elevation respectively along the surface normal, when camera is\n     * constantly looking downwards (top-down view). If you need [[ClipPlanesEvaluator]] for\n     * cameras that support tilt or yaw please use [[TiltViewClipPlanesEvaluator]].\n     * @note [[nearFarMaxRatio]] does not limit far plane when spherical projection is in use,\n     * the algorithm used there estimates distance to point on tangent where line from camera\n     * touches the sphere horizon and there is no reason to clamp it.\n     */\n    constructor(\n        maxElevation: number = EarthConstants.MAX_BUILDING_HEIGHT,\n        minElevation: number = 0,\n        readonly nearMin: number = 1.0,\n        readonly nearFarMarginRatio: number = 0.05,\n        readonly farMaxRatio = 6.0\n    ) {\n        super(maxElevation, minElevation);\n        assert(nearMin > 0);\n        assert(nearFarMarginRatio > epsilon);\n        assert(farMaxRatio > 1.0);\n        const nearFarMargin = nearFarMarginRatio * nearMin;\n        this.m_minimumViewRange = {\n            near: nearMin,\n            far: nearMin + nearFarMargin,\n            minimum: this.nearMin,\n            maximum: Math.max(nearMin * farMaxRatio, nearMin + nearFarMargin)\n        };\n    }\n\n    /** @override */\n    evaluateClipPlanes(mapView: MapView): ViewRanges {\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            return this.evaluateDistanceSphericalProj(mapView);\n        } else if (mapView.projection.type === ProjectionType.Planar) {\n            return this.evaluateDistancePlanarProj(mapView);\n        }\n        assert(false, \"Unsupported projection type\");\n        return { ...this.minimumViewRange };\n    }\n\n    /**\n     * Get minimum view range that is possible to achieve with current evaluator settings.\n     * @note This value will not change after evaluator is constructed.\n     */\n    protected get minimumViewRange(): ViewRanges {\n        return this.m_minimumViewRange;\n    }\n\n    /**\n     * Calculate camera altitude (closest distance) to ground level in world units.\n     * @param camera\n     * @param projection\n     */\n    protected getCameraAltitude(camera: THREE.Camera, projection: Projection): number {\n        return projection.groundDistance(camera.position);\n    }\n\n    protected evaluateDistancePlanarProj(mapView: MapView): ViewRanges {\n        const { camera, projection } = mapView;\n        assert(projection.type !== ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // Calculate distance to closest point on the ground.\n        const groundDistance = this.getCameraAltitude(camera, projection);\n        const farMax = groundDistance * this.farMaxRatio;\n        // We could at least try to keep margins along the eye vector (center of the view) in\n        // tact with pitch angle changes, but this does not solve all tilt angle problems,\n        // rather use more sophisticated evaluator.\n        nearPlane = groundDistance - this.maxElevation;\n        farPlane = groundDistance - this.minElevation;\n\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.min(farPlane, farMax);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: Math.max(farMax, farPlane)\n        };\n        return viewRanges;\n    }\n\n    protected evaluateDistanceSphericalProj(mapView: MapView): ViewRanges {\n        const { camera, projection } = mapView;\n        assert(projection.type === ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // The near plane calculus is quite straight forward and works the same as for planar\n        // projections. We simply search for the closest point of the ground just above\n        // the camera, then we apply margin (elevation) to it along the sphere surface normal:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        nearPlane = cameraAltitude - this.maxElevation;\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        let d = camera.position.length();\n        d = d === 0 ? epsilon : d;\n        if (camera.type === \"PerspectiveCamera\") {\n            // This solution computes near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n\n            // The far plane distance calculus requires finding the sphere tangent line that is\n            // co-linear with (goes thru) camera position, such tangent creates right angle\n            // with sphere diameter where it touches its surface (point T). Given that sphere is\n            // always at world origin and camera orbits around it we have (see\n            // #getTangentBasedFarPlane):\n            // angle(OTC) = 90\n            // sin(OCT) = sin(alpha) = r / d\n            // alpha = asin(r / d)\n            const alpha = Math.asin(r / d);\n            // If alpha it bigger than half fov angle, our visibility limit is set by tangent\n            // line, otherwise we need to find top (or right) plane intersection with sphere,\n            // which is definitely closer than the tangent point mentioned above.\n            const cam = camera as THREE.PerspectiveCamera;\n            // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n            const aspect = cam.aspect > 1 ? cam.aspect : 1 / cam.aspect;\n            const halfFovAngle = THREE.Math.degToRad((cam.fov * aspect) / 2);\n\n            const farTangent = this.getTangentBasedFarPlane(cam, d, r, alpha);\n            farPlane =\n                halfFovAngle > alpha\n                    ? farTangent\n                    : this.getFovBasedFarPlane(cam, d, r, 2 * halfFovAngle, projection);\n        }\n        // Orthographic camera projection\n        else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n\n        // In extreme cases the largest depression assumed may be further than tangent\n        // based far plane distance, take it into account\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = cameraAltitude * this.farMaxRatio;\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.max(farPlane, farMin);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farMax\n        };\n        return viewRanges;\n    }\n\n    /**\n     * Calculate distance from a point to the tangent point of a sphere.\n     *\n     * Returns zero if point is below surface or only very slightly above surface of sphere.\n     * @param d Distance from point to center of sphere\n     * @param r Radius of sphere\n     */\n    protected getTangentDistance(d: number, r: number): number {\n        // There may be situations when maximum elevation still remains below sea level\n        // (elevation < 0) or it is negligible (elevation ~ epsilon)\n        if (d - r < epsilon) {\n            return 0;\n        }\n\n        // The distance to tangent point may be described as:\n        // t = sqrt(d^2 - r^2)\n        return Math.sqrt(d * d - r * r);\n    }\n\n    /**\n     * Calculate far plane depending on furthest visible distance from camera position.\n     *\n     * Furthest visible distance is assumed to be distance from camera to horizon\n     * plus distance from elevated geometry to horizon(so that high objects behind horizon\n     * remain visible).\n     * @param camera The camera of the mapview\n     * @param d Distance from camera to origin\n     * @param r Radius of earth\n     * @param alpha Angle between camera eye vector and tangent\n     */\n    protected getTangentBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        alpha: number\n    ): number {\n        // Find tangent point intersection distance\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,        E\n        //   ,           .           ,    . ' far + elev\n        //  ,            .   r + e   , '   /\n        // ,             .     ,  '    ,  /\n        // ,             . O '         , / te\n        // ,             | .           ,/\n        //  ,            |   .  r     ,/\n        //   ,           |      .    ,\n        //     ,         |        , '_____ far\n        //       ' -_, _ | _ ,  ' / T\n        //     near      |      /\n        //               |    / t\n        //             d |  /\n        //               |/\n        //               C\n        const t = this.getTangentDistance(d, r);\n\n        // Because we would like to see elevated geometry that may be visible beyond\n        // the tangent point on ground surface, we need to extend viewing distance along\n        // the tangent line by te (see graph above).\n        const te = this.getTangentDistance(r + this.maxElevation, r);\n\n        // Next step is to project CE vector(length t + te) onto camera eye (forward) vector\n        // to get maximum camera far plane distance.\n        //\n        // Knowing that:\n        // tangentVec.dot(cameraFwdVec) = cos(alpha) * len(tangentVec) * len(cameraFwdVec).\n        // where:\n        // ||cameraFwdVec|| == 1 ^ ||tangentVec|| == t + te\n        // Formula simplifies to:\n        const far = Math.cos(alpha) * (t + te);\n\n        return far;\n    }\n\n    protected getFovBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        fovAngle: number,\n        projection: Projection\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // Vector from camera to world center\n        const dVec = camera.position;\n        // Extract camera X, Y, Z orientation axes into tmp vectors array.\n        camera.matrixWorld.extractBasis(\n            this.m_tmpVectors[0],\n            this.m_tmpVectors[1],\n            this.m_tmpVectors[2]\n        );\n        // Setup quaternion (X axis based) for angle between frustum plane and camera eye.\n        this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], fovAngle / 2);\n        // Acquire camera (eye) forward vector from Z axis (keep it in tmpVectors[2]).\n        const cameraFwdVec = this.m_tmpVectors[2];\n        // Apply quaternion to forward vector, creating intersection vector, which is\n        // parallel to top or right frustum plane (depending on the aspect ratio).\n        const tVec = this.m_tmpVectors[1].copy(cameraFwdVec).applyQuaternion(this.m_tmpQuaternion);\n        // Calculate camera to origin vector projection onto frustum plane (top or right).\n        // This gives us the length of CTA segment:\n        const cta = dVec.dot(tVec);\n        // If it is negative, it means that the dVec and the tVec points in\n        // opposite directions - there is no intersection - or intersection could\n        // potentially be behind the intersection ray's origin (camera position).\n        if (cta < 0) {\n            // Intersection points are behind camera, camera looks in wrong direction.\n            const groundDistance = this.getCameraAltitude(camera, projection);\n            // Setup far plane to maximum distance.\n            return groundDistance * this.farMaxRatio;\n        }\n        // Knowing the length of |CTA| we just need to subtract the length of |T0TA|\n        // segment from it to get far plane distance.\n        // In order to calculate |T0TA| we firstly need to use use Pythagorean theorem to\n        // find length of |OTA| = a. Here we use the right triangle formed by O-C-TA points:\n        // |OC|^2 = |CTA|^2 + |OTA|^2, where |OTA| = a, |OC| = d, |CTA| = cta\n        // a^2 = d^2 - cta^2\n        const a2 = dVec.dot(dVec) - cta * cta;\n        // Note that if a is greater than sphere radius the ray misses the sphere and\n        // thus there is no intersection at all.\n        const r2 = r * r;\n        assert(a2 <= r2, \"Please use this evaluator only for top view camera poses.\");\n        // Now to find the length of |T0TA| == |T1TA| we use the second right triangle\n        // formed by O-T0-TA points. Of course we know that |T0TA| segment length is\n        // equal to |T1TA|, and |OT0| segment is simply sphere radius.\n        // In order to find |T0TA| length we again use Pythagorean theorem, which says:\n        // |OT0|^2 = |OTA|^2 + |T0TA|^2, where |OTO| = r, |OTA| = a\n        // |T0TA|^2 = r^2 - a^2\n        const tota = Math.sqrt(r2 - a2);\n        // Finally our far plane (intersection point) is defined as:\n        return cta - tota;\n    }\n\n    protected getOrthoBasedFarPlane(d: number, r: number): number {\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,     E\n        //   ,            .--------- ,-.'- far + elev\n        // | ,            .   r + e , `, |\n        // |,             .     , '     ,| te\n        // |,             . O '.........,|..\n        // |,             |        r    ,|  far\n        // | ,            |            , |\n        // |  ,           |           ,  | t\n        // |    ,         |        , '   |\n        // |      ' -_, _ | _ ,  '       |\n        // |    near      | \\/___________| near - elev\n        // |              |              |\n        // |            d |              |\n        // |              |              |\n        //                C\n        // The distance to tangent point may be described as:\n        const t = d;\n        // Tangent extension due to terrain elevation behind the horizon may be calculated\n        // based on the right triangle:\n        // (r+maxElev)^2 = r^2 + te^2\n        // te = sqrt((r+maxElev)^2 - r^2)\n        // although we may not calculate it if elevation is negligible:\n        const te =\n            this.maxElevation < epsilon\n                ? 0\n                : Math.sqrt(r + this.maxElevation) * (r + this.maxElevation) - r * r;\n        // Both near and far planes distances are directly applied to frustum, because tangents'\n        // lines are parallel to camera look at vector.\n        // Now far plane distance is constituted with:\n        return t + te;\n    }\n}\n\n/**\n * Evaluates camera clipping planes taking into account ground distance and camera angles.\n *\n * This evaluator provides support for camera with varying tilt (pitch) angle, the angle\n * between camera __look at__ vector and the ground surface normal.\n */\nexport class TiltViewClipPlanesEvaluator extends TopViewClipPlanesEvaluator {\n    /**\n     * Calculate the camera distance to the ground in direction of look at vector.\n     * This is not equivalent to camera altitude cause value will change according to look at\n     * direction. It simply measures the distance of intersection point between ray from\n     * camera and ground level, yet without taking into account terrain elevation nor buildings.\n     * @param camera\n     * @param projection\n     * @note Use with extreme care cause due to optimizations the internal temporary vectors\n     * are used (m_tmpVectors[0], m_tmpVectors[1]). Those should not be used in outlining\n     * function scope (caller).\n     */\n    protected getCameraLookAtDistance(camera: THREE.Camera, projection: Projection): number {\n        assert(projection.type !== ProjectionType.Spherical);\n        // Using simple trigonometry we may approximate the distance of camera eye vector\n        // intersection with theoretical ground, knowing camera altitude and tilt angle:\n        // cos(tiltAngle) = altitude / groundDistance\n        // groundDistance = altitude / cos(tiltAngle)\n        // where:\n        // cos(tiltAngle) = dot(lookAt, eyeInverse)\n        const lookAt: THREE.Vector3 = this.m_tmpVectors[0];\n        camera.getWorldDirection(lookAt).normalize();\n        const normal: THREE.Vector3 = this.m_tmpVectors[1];\n        projection.surfaceNormal(camera.position, normal);\n        normal.negate();\n        let cosTiltAngle = lookAt.dot(normal);\n        cosTiltAngle = cosTiltAngle === 0 ? epsilon : cosTiltAngle;\n        return this.getCameraAltitude(camera, projection) / cosTiltAngle;\n    }\n\n    /**\n     * Calculate the lengths of frustum planes intersection with the ground plane.\n     * This evaluates distances between eye vector (or eye plane in orthographic projection) and\n     * ground intersections of top and bottom frustum planes.\n     * @note This method assumes the world surface (ground) to be flat and\n     * works only with planar projections.\n     *\n     * @param mapView The [[MapView]] instance in use.\n     */\n    protected getFrustumGroundIntersectionDist(mapView: MapView): { top: number; bottom: number } {\n        assert(mapView.projection.type !== ProjectionType.Spherical);\n        const camera = mapView.camera;\n        const projection = mapView.projection;\n        // This algorithm computes the length of frustum planes before intersecting with a flat\n        // ground surface. Entire computation is split over two projections method and performed\n        // for top and bottom plane, with addition of terrain (ground) elevation which is taken\n        // into account.\n        // The following diagram may help explain the algorithm below.\n        //   🎥\n        //   C\n        //   |\\\n        //   |.\\ .\n        //   | . \\  . t\n        // z |  .  \\   .c2\n        //   |  c1.  \\e ___. max elev\n        //   |     .   \\      .\n        //___|a___D1.____\\E1_____.D2______ g\n        //   C1      .     \\ __. min elev\n        //            .      \\.E2\n        //          b  .    .\n        //              . .\n        //               .\n        // Where:\n        // - C gives the camera position.\n        // - z is the height of the camera above the ground.\n        // - z1 == z2 == z, for perspective camera all planes origin its the same\n        // - a is a right angle.\n        // - e is the look at vector of the camera.\n        // - t and b are the frustum planes of the camera (top and bottom respectively).\n        // - angle between c1 to c2 is the fov.\n        // - c1, c2 - vectors from camera to the ground along frustum planes.\n        // - angles between c1 and e or e and c2 splits fov on equal halves.\n        // - d1 and d2 are the intersection points of the frustum with the world/ground plane.\n        // - angle between z and e is the pitch of the camera.\n        // - angle between g and e is the tilt angle.\n        // - g is the ground/world surface\n        //\n        // The goal is to find distance for top/bottom planes intersections of frustum with ground\n        // plane.\n        // This are the distances from C->D1 and C->D2, and are described as\n        // c1 and c2. Then we may compensate/correct those distances with actual\n        // ground elevations, which is done by simply offsetting camera altitude, as it is\n        // opposite to elevating ground level.\n        const halfPiLimit = Math.PI / 2 - epsilon;\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        const target = MapViewUtils.rayCastWorldCoordinates(mapView, 0, 0);\n        if (target === null) {\n            throw new Error(\"MapView does not support a view pointing in the void.\");\n        }\n        const cameraTilt = MapViewUtils.extractSphericalCoordinatesFromLocation(\n            mapView,\n            camera,\n            projection.unprojectPoint(target)\n        ).tilt;\n        // Angle between z and c2\n        let topAngleRad: number;\n        // Angle between z and c1\n        let bottomAngleRad: number;\n        // Bottom plane origin altitude\n        let z1: number;\n        // Top plane origin altitude\n        let z2: number;\n        // For perspective projection:\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = (camera as any) as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.Math.degToRad((cam.fov * aspect) / 2);\n            topAngleRad = MathUtils.clamp(cameraTilt + halfFovAngle, -halfPiLimit, halfPiLimit);\n            bottomAngleRad = MathUtils.clamp(cameraTilt - halfFovAngle, -halfPiLimit, halfPiLimit);\n            z1 = z2 = cameraAltitude;\n        }\n        // For orthographic projection:\n        else {\n            const cam = (camera as any) as THREE.OrthographicCamera;\n            // For orthogonal camera projections we may simply ignore FOV and use 0 for FOV\n            // the top/bottom planes are simply parallel to the eye vector:\n            topAngleRad = bottomAngleRad = cameraTilt;\n            // Although the ray origin is not always the same (eye position) as for\n            // the perspective projections, thus we need to compensate for ortho-cube\n            // dimensions:\n            // sin(tilt) = zc2 / top\n            // sin(tilt) = zc1 / bottom\n            // zc2 = sin(tilt) * top\n            // zc1 = sin(tilt) * bottom\n            const sinBeta = Math.sin(cameraTilt);\n            z2 = cameraAltitude + sinBeta * cam.top;\n            z1 = cameraAltitude - sinBeta * cam.bottom;\n        }\n        // Distance along the top plane to the ground - c2\n        // cos(topAngle) = (z2 - minElev) / |c2|\n        // |c2| = (z2 - minElev) / cos(topAngle)\n        const topDist = (z2 - this.minElevation) / Math.cos(topAngleRad);\n        // Distance along the bottom plane to the ground - c1\n        // cos(bottomAngle) = (z - minElev) / |c1|\n        // |c1| = (z - minElev) / cos(bottomAngle)\n        const bottomDist = (z1 - this.maxElevation) / Math.cos(bottomAngleRad);\n\n        return {\n            top: Math.max(topDist, 0),\n            bottom: Math.max(bottomDist, 0)\n        };\n    }\n\n    /** @override */\n    protected evaluateDistancePlanarProj(mapView: MapView): ViewRanges {\n        assert(mapView.projection.type !== ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Generally near/far planes are set to keep top/bottom planes intersection distance.\n        // Then elevations margins are applied. Here margins (min/max elevations) are meant to\n        // be defined as distance along the ground normal vector thus during camera\n        // tilt they may affect near/far planes positions differently.\n        const planesDist = this.getFrustumGroundIntersectionDist(mapView);\n        const { camera, projection } = mapView;\n        // Project clipping plane distances for the top/bottom frustum planes (edges), but\n        // only if we deal with perspective camera type, this step is not required\n        // for orthographic projections, cause all clip planes are parallel to eye vector.\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = camera as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.Math.degToRad((cam.fov * aspect) / 2);\n            const cosHalfFov = Math.cos(halfFovAngle);\n            // cos(halfFov) = near / bottomDist\n            // near = cos(halfFov) * bottomDist\n            viewRanges.near = planesDist.bottom * cosHalfFov;\n            // cos(halfFov) = far / topDist\n            // far = cos(halfFov) * topDist\n            viewRanges.far = planesDist.top * cosHalfFov;\n        }\n        // Orthographic camera projection.\n        else {\n            viewRanges.near = planesDist.bottom;\n            viewRanges.far = planesDist.top;\n        }\n\n        // Clamp values to constraints.\n        const lookAtDist = this.getCameraLookAtDistance(camera, projection);\n        const farMax = lookAtDist * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = Math.min(viewRanges.far, farMax);\n\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    /** @override */\n    protected evaluateDistanceSphericalProj(mapView: MapView): ViewRanges {\n        const { camera, projection } = mapView;\n        assert(projection.type === ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Near plane calculus is pretty straightforward and does not depend on camera tilt:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        viewRanges.near = cameraAltitude - this.maxElevation;\n\n        // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n        const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n        const halfFovAngle = THREE.Math.degToRad((camera.fov * aspect) / 2);\n\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Now we need to account for camera tilt and frustum volume, so the longest\n            // frustum edge does not intersects with sphere, it takes the worst case\n            // scenario regardless of camera tilt, so may be improved little bit with more\n            // sophisticated algorithm.\n            viewRanges.near *= Math.cos(halfFovAngle);\n        }\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n        const cameraToOrigin = this.m_tmpVectors[0].copy(camera.position).negate();\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        const d = cameraToOrigin.length();\n        let farPlane: number;\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Step-wise calculate angle between camera eye vector and tangent\n\n            // Calculate angle between surface normal(below camera position) and tangent.\n            const alpha = Math.asin(r / d);\n\n            // Calculate angle between look at and surface normal(below camera position)\n            const cameraPitch = this.getCameraPitch(cameraToOrigin, camera);\n\n            // Calculate angle between camera eye vector and tangent.\n            const modifiedAlpha = Math.abs(alpha - cameraPitch);\n\n            // Use tangent based far plane if horizon is within field of view\n            const farTangent = this.getTangentBasedFarPlane(camera, d, r, modifiedAlpha);\n            farPlane =\n                halfFovAngle >= modifiedAlpha\n                    ? farTangent\n                    : this.getTiltedFovBasedFarPlane(d, r, halfFovAngle, cameraPitch);\n        } else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n        viewRanges.far = farPlane;\n\n        // Apply the constraints.\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = mapView.lookAtDistance * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = MathUtils.clamp(viewRanges.far, farMin, farMax);\n\n        // Apply margins.\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n\n        // Set minimum and maximum view range.\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    protected getTiltedFovBasedFarPlane(\n        d: number,\n        r: number,\n        halfFovAngle: number,\n        cameraPitch: number\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // compute length of t (distance to fov intersection with sphere)\n        // with law of cosines:\n        // r² = d² + t² - 2dt * cos(alpha)\n        // solved for t:\n        // t0 = d * cos(alpha) - sqrt(d²*cos²(alpha) - d² + r²)  <-- first intersection\n        // t1 = d * cos(alpha) + sqrt(d²*cos²(alpha) - d² + r²)  <-- second intersection\n        // Use first intersection:\n        const cosAlpha = Math.cos(cameraPitch + halfFovAngle);\n        const dSqr = d * d;\n        const t = d * cosAlpha - Math.sqrt(dSqr * cosAlpha * cosAlpha - dSqr + r * r);\n\n        assert(\n            !isNaN(t),\n            \"Field of view does not intersect sphere. Use tangent based far plane instead.\"\n        );\n\n        // project t onto camera fwd vector\n        const far = Math.cos(halfFovAngle) * t;\n\n        return far;\n    }\n\n    private getCameraPitch(cameraToOrigin: THREE.Vector3, camera: THREE.PerspectiveCamera) {\n        cameraToOrigin.normalize();\n        const lookAt = camera.getWorldDirection(this.m_tmpVectors[1]).normalize();\n        const cosAlpha1 = cameraToOrigin.dot(lookAt);\n        const cameraPitch = Math.acos(MathUtils.clamp(cosAlpha1, -1.0, 1.0));\n\n        return cameraPitch;\n    }\n}\n\n/**\n * Provides the most basic evaluation concept giving fixed values with some constraints.\n */\nexport class FixedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly minFar: number;\n    private m_nearPlane: number;\n    private m_farPlane: number;\n\n    constructor(readonly minNear: number = 1, readonly minFarOffset: number = 10) {\n        this.minFar = minNear + minFarOffset;\n        this.m_nearPlane = minNear;\n        this.m_farPlane = this.minFar;\n    }\n\n    get nearPlane(): number {\n        return this.m_nearPlane;\n    }\n\n    set nearPlane(fixedNear: number) {\n        this.invalidatePlanes(fixedNear, this.m_farPlane);\n    }\n\n    get farPlane(): number {\n        return this.m_farPlane;\n    }\n\n    set farPlane(fixedFar: number) {\n        this.invalidatePlanes(this.m_nearPlane, fixedFar);\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    evaluateClipPlanes(mapView: MapView): ViewRanges {\n        // We do not need to perform actual evaluation cause results are precomputed and\n        // kept stable until somebody changes the properties.\n        const viewRanges: ViewRanges = {\n            near: this.m_nearPlane,\n            far: this.m_farPlane,\n            minimum: this.minNear,\n            maximum: this.m_farPlane\n        };\n        return viewRanges;\n    }\n\n    private invalidatePlanes(near: number, far: number) {\n        // When clamping prefer to extend far plane at about minimum distance, giving\n        // near distance setup priority over far.\n        const nearDist: number = Math.max(this.minNear, near);\n        const farDist: number = Math.max(this.minFar, far, nearDist + this.minFarOffset);\n        this.m_nearPlane = nearDist;\n        this.m_farPlane = farDist;\n    }\n}\n\n/**\n * Factory function that creates default [[ClipPlanesEvaluator]] that calculates near plane based\n * on ground distance and camera orientation.\n *\n * Creates [[TiltViewClipPlanesEvaluator]].\n */\nexport const createDefaultClipPlanesEvaluator = () => new TiltViewClipPlanesEvaluator();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport { IPassManager } from \"./IPassManager\";\nexport {\n    IMapAntialiasSettings,\n    IMapRenderingManager,\n    MapRenderingManager\n} from \"./MapRenderingManager\";\nexport { IPass, Pass } from \"./Pass\";\nexport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyShader, MSAAMaterial } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * This enum represents the sampling level to apply to a [[MSAARenderPass]] instance. At level 0,\n * only one sample is performed, which is like disabling the MSAA pass.\n */\nexport enum MSAASampling {\n    \"Level_0\",\n    \"Level_1\",\n    \"Level_2\",\n    \"Level_3\",\n    \"Level_4\",\n    \"Level_5\"\n}\n\n/**\n * [[MapView]]'s MSAA implementation. MSAA stands for Multi Sampling Anti-Aliasing, and its concept\n * is to provide a rendering engine with additional color values for each pixel, so they can include\n * the missing bits between them on a screen. WebGL already comes with a native MSAA implementation\n * with four samples. Because of its native nature, it is more efficient and one may not want to use\n * MapView's MSAA implementation when these four samples are satisfying. However in some situations\n * they are not: on low devices, MSAA can impact the framerate and we may desire to reduce the\n * number of samples at runtime. On the other hand, when the interaction stops, the engine also\n * stops rendering the map, and because a map relies on many line-like patterns, aliasing can then\n * turn very noticeable. In such static renders, the number of samples could be dramatically\n * increased on a last frame to render.\n */\nexport class MSAARenderPass extends Pass {\n    /**\n     * The sampling level determines the number of samples that will be performed per frame.\n     * Renders will happen `2 ^ samplingLevel` time(s). `samplingLevel` stands between `0` and `5`.\n     * Therefore there can be between 1 and 32 samples.\n     *\n     * @default `SamplingLevel.Level_1`\n     */\n    samplingLevel: MSAASampling = MSAASampling.Level_1;\n\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new MSAAMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n\n    /**\n     * The constructor for `MSAARenderPass`. It builds an internal scene with a camera looking at a\n     * quad.\n     *\n     * @param m_scene The scene to render.\n     * @param m_camera The camera to render the scene through.\n     */\n    constructor() {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * The render function of `MSAARenderPass`. At each call of this method, and for each sample,\n     * the [[MapView]] camera provided in the `render` method is offset within the dimension of a\n     * pixel on screen. It then renders the whole scene with this offset to a local\n     * `WebGLRenderTarget` instance, via a `WebGLRenderer` instance. Finally the local camera\n     * created in the constructor shoots the quad and renders to the write buffer or to the frame\n     * buffer. The quad material's opacity is modified so the renders can accumulate in the\n     * targetted buffer.\n     *\n     * The number of samples can be modified at runtime through the enum [[SamplingLevel]].\n     *\n     * If there is no further pass, the [[Pass.renderToScreen]] flag can be set to `true` to\n     * output directly to the framebuffer.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_renderTarget = new THREE.WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat\n            });\n            this.m_renderTarget.texture.name = \"MSAARenderPass.sample\";\n        }\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n\n        const offsets = MSAARenderPass.OffsetVectors[this.samplingLevel];\n\n        const rendererClearColor = renderer.getClearColor();\n        const oldClearColor = rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n\n        // The method `camera.setViewOffset` will be called in the next loop. In order to maintain\n        // its usability externally (like for the triple view in mosaic demo) we must cache the\n        // previous values stored in `camera.view` and re-assign them at the end of the pass.\n\n        // 1. Create a default cache object, with default dimensions the size of our read buffer.\n        const oldView = {\n            enabled: camera.view !== null && camera.view.enabled,\n            fullWidth: readBuffer.width,\n            fullHeight: readBuffer.height,\n            x: 0,\n            y: 0,\n            width: readBuffer.width,\n            height: readBuffer.height\n        };\n\n        // 2. If `camera.view` has been enabled previously, then `setViewOffset` has been called\n        // externally: copy the existing `camera.view` values in the cache. Override the cache\n        // object with the values provided externally.\n        if (oldView.enabled && camera.view !== null) {\n            oldView.fullWidth = camera.view.fullWidth;\n            oldView.fullHeight = camera.view.fullHeight;\n            oldView.x = camera.view.offsetX;\n            oldView.y = camera.view.offsetY;\n            oldView.width = camera.view.width;\n            oldView.height = camera.view.height;\n        }\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        for (let i = 0; i < offsets.length; i++) {\n            // 4. Then for each sample, call `setViewOffset` with our object. This also updates the\n            // `camera.view` object in Three.js.\n            const offset = offsets[i];\n            camera.setViewOffset(\n                oldView.fullWidth,\n                oldView.fullHeight,\n                oldView.x + offset[0] / 16,\n                oldView.y + offset[1] / 16,\n                oldView.width,\n                oldView.height\n            );\n\n            // 5. Divide the opacity of the quad by the number of samples to accumulate on the\n            // target buffer, and reduce the impact of the offset on color to reduce banding. Then\n            // render.\n            const uniformCenteredDistribution = -0.5 + (i + 0.5) / offsets.length;\n            const sampleWeight = 1.0 / offsets.length + uniformCenteredDistribution / 32;\n\n            this.m_quadUniforms.opacity.value = sampleWeight;\n\n            renderer.setRenderTarget(this.m_renderTarget);\n            renderer.clear();\n            renderer.render(scene, camera);\n\n            // 6. Render the quad on top of the previous renders.\n\n            // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n            renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n            if (i === 0) {\n                renderer.setClearColor(0x000000);\n                renderer.clear();\n            }\n            renderer.render(this.m_quadScene, this.m_localCamera);\n            if (i === 0 && rendererClearColor !== undefined) {\n                renderer.setClearColor(oldClearColor);\n            }\n        }\n        renderer.setRenderTarget(oldRenderTarget);\n\n        // 7. Restore `camera.view` as set externally (or not).\n        if (camera.view !== null) {\n            camera.view.enabled = oldView.enabled;\n            camera.view.offsetX = oldView.x;\n            camera.view.offsetY = oldView.y;\n        }\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        if (this.m_renderTarget) {\n            this.m_renderTarget.setSize(width, height);\n        }\n    }\n\n    // tslint:disable:max-line-length\n    /**\n     * The list of offsets to apply to the camera, per sampling level, adapted from :\n     *\n     * @see https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\n     */\n    // tslint:enable:max-line-length\n    // tslint:disable-next-line:member-ordering\n    static readonly OffsetVectors: number[][][] = [\n        [[0, 0]],\n        [\n            [4, 4],\n            [-4, -4]\n        ],\n        [\n            [-2, -6],\n            [6, -2],\n            [-6, 2],\n            [2, 6]\n        ],\n        [\n            [1, -3],\n            [-1, 3],\n            [5, 1],\n            [-3, -5],\n            [-5, 5],\n            [-7, -1],\n            [3, 7],\n            [7, -7]\n        ],\n        [\n            [1, 1],\n            [-1, -3],\n            [-3, 2],\n            [4, -1],\n            [-5, -2],\n            [2, 5],\n            [5, 3],\n            [3, -5],\n            [-2, 6],\n            [0, -7],\n            [-4, -6],\n            [-6, 4],\n            [-8, 0],\n            [7, -4],\n            [6, 7],\n            [-7, -8]\n        ],\n        [\n            [-4, -7],\n            [-7, -5],\n            [-3, -5],\n            [-5, -4],\n            [-1, -4],\n            [-2, -2],\n            [-6, -1],\n            [-4, 0],\n            [-7, 1],\n            [-1, 2],\n            [-6, 3],\n            [-3, 3],\n            [-7, 6],\n            [-3, 6],\n            [-5, 7],\n            [-1, 7],\n            [5, -7],\n            [1, -6],\n            [6, -5],\n            [4, -4],\n            [2, -3],\n            [7, -2],\n            [1, -1],\n            [4, -1],\n            [2, 1],\n            [6, 2],\n            [0, 4],\n            [4, 4],\n            [2, 5],\n            [7, 5],\n            [5, 6],\n            [3, 7]\n        ]\n    ];\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { RequestController, WorkerServiceProtocol } from \"@here/harp-datasource-protocol\";\nimport {\n    getOptionValue,\n    IWorkerChannelMessage,\n    LoggerManager,\n    LogLevel,\n    WORKERCHANNEL_MSG_TYPE\n} from \"@here/harp-utils\";\n\nimport { WorkerLoader } from \"./workers/WorkerLoader\";\n\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"ConcurrentWorkerSet\");\n\nexport function isLoggingMessage(message: IWorkerChannelMessage): message is IWorkerChannelMessage {\n    return message && typeof message.level === \"number\" && message.type === WORKERCHANNEL_MSG_TYPE;\n}\n\ninterface ReadyPromise {\n    count: number;\n    promise?: Promise<void>;\n    resolve: () => void;\n    reject: (reason: any) => void;\n    error?: any;\n}\n\ninterface RequestEntry {\n    promise: Promise<any>;\n    resolver: (error?: Error, response?: object) => void;\n}\n\nexport interface ConcurrentWorkerSetOptions {\n    /**\n     * The URL of the script for each worker to start.\n     */\n    scriptUrl: string;\n\n    /**\n     * The number of Web Workers for processing data.\n     *\n     * Defaults to CLAMP(`navigator.hardwareConcurrency` - 1, 1, 4) or [[DEFAULT_WORKER_COUNT]].\n     */\n    workerCount?: number;\n\n    /**\n     * Timeout in milliseconds, in which each worker should set initial message.\n     *\n     * @default 10 seconds, see [[DEFAULT_WORKER_INITIALIZATION_TIMEOUT]]\n     */\n    workerConnectionTimeout?: number;\n}\n\n/**\n * Interface for an item in the started worker list queue.\n */\ninterface WorkerEntry {\n    worker: Worker;\n    listener: EventListener;\n}\n\n/**\n * Interface for an item in the request queue. Stores the data to be decoded along with an\n * [[AbortController]].\n */\ninterface WorkerRequestEntry {\n    message: WorkerServiceProtocol.RequestMessage;\n    buffers?: ArrayBuffer[] | undefined;\n    requestController?: RequestController;\n}\n\n/**\n * The default number of Web Workers to use if `navigator.hardwareConcurrency` is unavailable.\n */\nconst DEFAULT_WORKER_COUNT = 2;\n\n/**\n * The default timeout for first message from worker.\n *\n * @see [[WorkerLoader.startWorker]]\n */\nexport const DEFAULT_WORKER_INITIALIZATION_TIMEOUT = 10000;\n\n/**\n * A set of concurrent Web Workers. Acts as a Communication Peer for [[WorkerService]] instances\n * running in Web Workers.\n *\n * Starts and manages a certain number of web workers and provides a means to communicate\n * with them using various communication schemes, such as:\n *  - [[addEventListener]] : receive a unidirectional messages\n *  - [[broadcastMessage]] : send unidirectional broadcast message\n *  - [[invokeRequest]] : send a request that waits for a response, with load balancing\n *  - [[postMessage]] : send a unidirectional message, with load balancing\n *\n * The request queue holds all requests before they are stuffed into the event queue, allows for\n * easy (and early) cancelling of requests. The workers now only get a single new RequestMessage\n * when they return their previous result, or if they are idle. When they are idle, they are stored\n * in m_availableWorkers.\n */\nexport class ConcurrentWorkerSet {\n    private m_workerChannelLogger = LoggerManager.instance.create(\"WorkerChannel\");\n    private readonly m_eventListeners = new Map<string, (message: any) => void>();\n    private m_workers = new Array<Worker>();\n\n    // List of idle workers that can be given the next job. It is using a LIFO scheme to reduce\n    // memory consumption in idle workers.\n    private m_availableWorkers = new Array<Worker>();\n    private m_workerPromises = new Array<Promise<WorkerEntry | undefined>>();\n    private m_workerCount: number | undefined;\n\n    private readonly m_readyPromises = new Map<string, ReadyPromise>();\n    private readonly m_requests: Map<number, RequestEntry> = new Map();\n    private m_workerRequestQueue: WorkerRequestEntry[] = [];\n\n    private m_nextMessageId: number = 0;\n    private m_stopped: boolean = true;\n\n    private m_referenceCount: number = 0;\n\n    /**\n     * Creates a new `ConcurrentWorkerSet`.\n     *\n     * Creates as many Web Workers as specified in `options.workerCount`, from the script provided\n     * in `options.scriptUrl`. If `options.workerCount` is not specified, the value specified in\n     * `navigator.hardwareConcurrency` is used instead.\n     *\n     * The worker set is implicitly started when constructed.\n     */\n    constructor(private m_options: ConcurrentWorkerSetOptions) {\n        this.start();\n    }\n\n    /**\n     * Adds an external reference and increments the internal reference counter by one.\n     *\n     * To implement a reference-count based automatic resource cleanup, use this function with\n     * [[removeReference]].\n     */\n    addReference() {\n        this.m_referenceCount += 1;\n        if (this.m_referenceCount === 1 && this.m_stopped) {\n            this.start();\n        }\n    }\n\n    /**\n     * Decrements the internal reference counter by 1.\n     *\n     * When the internal reference counter reaches 0, this function calls [[dispose]] to clear the\n     * resources.\n     *\n     * Use with [[addReference]] to implement reference-count based automatic resource cleanup.\n     */\n    removeReference() {\n        this.m_referenceCount -= 1;\n        if (this.m_referenceCount === 0) {\n            this.destroy();\n        }\n    }\n\n    /**\n     * Starts workers.\n     *\n     * Use to start workers already stopped by [[stop]] or [[destroy]] calls.\n     *\n     * Note: The worker set is implicitly started on construction - no need to call [[start]] on\n     * fresh instance.\n     *\n     * @param options optional, new worker set options\n     */\n    start(options?: ConcurrentWorkerSetOptions) {\n        if (options !== undefined) {\n            this.m_options = options;\n        }\n        if (!this.m_stopped) {\n            throw new Error(\"ConcurrentWorker set already started\");\n        }\n\n        this.m_workerCount = getOptionValue(\n            this.m_options.workerCount,\n            typeof navigator !== \"undefined\" && navigator.hardwareConcurrency !== undefined\n                ? // We need to have at least one worker\n                  THREE.Math.clamp(navigator.hardwareConcurrency - 1, 1, 2)\n                : undefined,\n            DEFAULT_WORKER_COUNT\n        );\n\n        // Initialize the workers. The workers now have an ID to identify specific workers and\n        // handle their busy state.\n        const timeout = getOptionValue(\n            this.m_options.workerConnectionTimeout,\n            DEFAULT_WORKER_INITIALIZATION_TIMEOUT\n        );\n        for (let workerId = 0; workerId < this.m_workerCount; ++workerId) {\n            const workerPromise = WorkerLoader.startWorker(this.m_options.scriptUrl, timeout).then(\n                worker => {\n                    const listener = (evt: Event): void => {\n                        this.onWorkerMessage(workerId, evt as MessageEvent);\n                    };\n\n                    worker.addEventListener(\"message\", listener);\n                    this.m_workers.push(worker);\n                    this.m_availableWorkers.push(worker);\n                    return {\n                        worker,\n                        listener\n                    };\n                }\n            );\n            this.m_workerPromises.push(workerPromise);\n        }\n        this.m_stopped = false;\n    }\n\n    /**\n     * The number of workers started for this worker set. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.m_workerCount;\n    }\n\n    /**\n     * Stops workers.\n     *\n     * Waits for all pending requests to be finished and stops all workers.\n     *\n     * Use [[start]] to start this worker again.\n     *\n     * @returns `Promise` that resolves when all workers are destroyed.\n     */\n    async stop() {\n        this.m_stopped = true;\n\n        await this.waitForAllResponses().then(() => {\n            this.terminateWorkers();\n        });\n    }\n\n    /**\n     * Destroys all workers immediately.\n     *\n     * Resolves all pending request promises with a `worker destroyed` error.\n     *\n     * Use [[start]] to start this worker again.\n     */\n    destroy() {\n        this.m_stopped = true;\n\n        // respond with all pending request\n        this.m_requests.forEach(entry => {\n            entry.resolver(new Error(\"worker destroyed\"));\n        });\n        this.m_requests.clear();\n        this.m_workerRequestQueue = [];\n\n        this.terminateWorkers();\n\n        // clean other stuff\n        this.m_eventListeners.clear();\n    }\n\n    /**\n     * Waits for `service` to be initialized in all workers.\n     *\n     * Each service that starts in a worker sends an [[isInitializedMessage]] to confirm that\n     * it has started successfully. This method resolves when all workers in a set have\n     * `service` initialized.\n     *\n     * Promise is rejected if any of worker fails to start.\n     *\n     * @param serviceId The service identifier.\n     */\n    async connect(serviceId: string): Promise<void> {\n        this.ensureStarted();\n        await Promise.all(this.m_workerPromises);\n        return this.getReadyPromise(serviceId).promise as Promise<void>;\n    }\n\n    /**\n     * Registers an event listener for events that originated in a web worker, for a given\n     * `serviceId`. You can only set one event listener per `serviceId`.\n     *\n     * @param serviceId The service to listen to.\n     * @param callback The callback to invoke for matching events.\n     */\n    addEventListener(serviceId: string, callback: (message: any) => void) {\n        this.m_eventListeners.set(serviceId, callback);\n    }\n\n    /**\n     * Removes a previously set event listener for the given `serviceId`.\n     *\n     * @param serviceId The service from which to remove the event listeners.\n     */\n    removeEventListener(serviceId: string) {\n        this.m_eventListeners.delete(serviceId);\n    }\n\n    /**\n     * Invokes a request that expects a response from a random worker.\n     *\n     * Sends [[RequestMessage]] and resolves when a matching [[ResponseMessage]] is received from\n     * workers. Use this function when interfacing with \"RPC-like\" calls to services.\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     *\n     * @returns A `Promise` that resolves with a response from the service.\n     */\n    invokeRequest<Res>(\n        serviceId: string,\n        request: WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[],\n        requestController?: RequestController\n    ): Promise<Res> {\n        this.ensureStarted();\n\n        const messageId = this.m_nextMessageId++;\n        let resolver: ((error?: any, response?: any) => void) | undefined;\n\n        const promise = new Promise<Res>((resolve, reject) => {\n            resolver = (error?: Error, response?: Res) => {\n                this.m_requests.delete(messageId);\n\n                if (error !== undefined) {\n                    reject(error);\n                } else {\n                    resolve(response as Res);\n                }\n            };\n        });\n        this.m_requests.set(messageId, {\n            promise,\n            resolver: resolver!\n        });\n\n        const message: WorkerServiceProtocol.RequestMessage = {\n            service: serviceId,\n            type: WorkerServiceProtocol.ServiceMessageName.Request,\n            messageId,\n            request\n        };\n        this.postRequestMessage(message, transferList, requestController);\n        return promise;\n    }\n\n    /**\n     * Invokes a request that expects responses from all workers.\n     *\n     * Send [[RequestMessage]]  to all workers and resolves when all workers have sent a matching\n     * [[ResponseMessage]]. Use this function to wait on request that need to happen on all workers\n     * before proceeding (like synchronous worker service creation).\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     *\n     * @returns Array of `Promise`s that resolves with a response from each worker (unspecified\n     * order).\n     */\n    broadcastRequest<Res>(\n        serviceId: string,\n        request:\n            | WorkerServiceProtocol.WorkerServiceManagerRequest\n            | WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[]\n    ): Promise<Res[]> {\n        this.ensureStarted();\n\n        const promises = [];\n        for (const worker of this.m_workers) {\n            const messageId = this.m_nextMessageId++;\n\n            let resolver: ((error?: any, response?: any) => void) | undefined;\n            const promise = new Promise<Res>((resolve, reject) => {\n                resolver = (error: Error, response: Res) => {\n                    this.m_requests.delete(messageId);\n\n                    if (error !== undefined) {\n                        reject(error);\n                    } else {\n                        resolve(response as Res);\n                    }\n                };\n            });\n            promises.push(promise);\n\n            this.m_requests.set(messageId, {\n                promise,\n                resolver: resolver!\n            });\n\n            const message: WorkerServiceProtocol.RequestMessage = {\n                service: serviceId,\n                type: WorkerServiceProtocol.ServiceMessageName.Request,\n                messageId,\n                request\n            };\n            if (transferList !== undefined) {\n                worker.postMessage(message, transferList);\n            } else {\n                worker.postMessage(message);\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Posts a message to all workers.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the workers.\n     */\n    broadcastMessage(message: any, buffers?: ArrayBuffer[] | undefined) {\n        this.ensureStarted();\n\n        if (buffers !== undefined) {\n            this.m_workers.forEach(worker => worker.postMessage(message, buffers));\n        } else {\n            this.m_workers.forEach(worker => worker.postMessage(message));\n        }\n    }\n\n    /**\n     * The size of the request queue for debugging and profiling.\n     */\n    get requestQueueSize() {\n        return this.m_workerRequestQueue.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numWorkers() {\n        return this.m_workers.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numIdleWorkers() {\n        return this.m_availableWorkers.length;\n    }\n\n    /**\n     * Subclasses must call this function when a worker emits an event.\n     *\n     * @param event The event to dispatch.\n     */\n    protected eventHandler(event: any) {\n        if (typeof event.data.type !== \"string\") {\n            return; // not an event generated by us, ignore.\n        }\n\n        this.dispatchEvent(event.data.type, event);\n    }\n\n    /**\n     * Handles messages received from workers. This method is protected so that the message\n     * reception can be simulated through an extended class, to avoid relying on real workers.\n     *\n     * @param workerId The workerId of the web worker.\n     * @param event The event to dispatch.\n     */\n    private onWorkerMessage = (workerId: number, event: MessageEvent) => {\n        if (WorkerServiceProtocol.isResponseMessage(event.data)) {\n            const response = event.data;\n            if (response.messageId === null) {\n                logger.error(`[${this.m_options.scriptUrl}]: Bad ResponseMessage: no messageId`);\n                return;\n            }\n            const entry = this.m_requests.get(response.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad ResponseMessage: invalid messageId`\n                );\n                return;\n            }\n\n            if (workerId >= 0 && workerId < this.m_workers.length) {\n                const worker = this.m_workers[workerId];\n                this.m_availableWorkers.push(worker);\n                // Check if any new work has been put into the queue.\n                this.checkWorkerRequestQueue();\n            } else {\n                logger.error(`[${this.m_options.scriptUrl}]: onWorkerMessage: invalid workerId`);\n            }\n            if (response.errorMessage !== undefined) {\n                const error = new Error(response.errorMessage);\n                if (response.errorStack !== undefined) {\n                    error.stack = response.errorStack;\n                }\n                entry.resolver(error);\n            } else {\n                entry.resolver(undefined, response.response);\n            }\n        } else if (WorkerServiceProtocol.isInitializedMessage(event.data)) {\n            const readyPromise = this.getReadyPromise(event.data.service);\n            if (++readyPromise.count === this.m_workerPromises.length) {\n                readyPromise.resolve();\n            }\n        } else if (isLoggingMessage(event.data)) {\n            switch (event.data.level) {\n                case LogLevel.Trace:\n                    this.m_workerChannelLogger.trace(...event.data.message);\n                    break;\n                case LogLevel.Debug:\n                    this.m_workerChannelLogger.debug(...event.data.message);\n                    break;\n                case LogLevel.Log:\n                    this.m_workerChannelLogger.log(...event.data.message);\n                    break;\n                case LogLevel.Info:\n                    this.m_workerChannelLogger.info(...event.data.message);\n                    break;\n                case LogLevel.Warn:\n                    this.m_workerChannelLogger.warn(...event.data.message);\n                    break;\n                case LogLevel.Error:\n                    this.m_workerChannelLogger.error(...event.data.message);\n                    break;\n            }\n        } else {\n            this.eventHandler(event);\n        }\n    };\n\n    /**\n     * Posts a [[WorkerServiceProtocol.RequestMessage]] to an available worker. If no worker is\n     * available, the request is put into a queue.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the worker.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     */\n    private postRequestMessage(\n        message: WorkerServiceProtocol.RequestMessage,\n        buffers?: ArrayBuffer[] | undefined,\n        requestController?: RequestController\n    ) {\n        this.ensureStarted();\n        if (this.m_workers.length === 0) {\n            throw new Error(\"ConcurrentWorkerSet#postMessage: no workers started\");\n        }\n\n        // Check if the requestController has received the abort signal, in which case the request\n        // is ignored.\n        if (requestController !== undefined && requestController.signal.aborted) {\n            const entry = this.m_requests.get(message.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad RequestMessage: invalid messageId`\n                );\n                return;\n            }\n\n            const err = new Error(\"Aborted\");\n            err.name = \"AbortError\";\n\n            entry.resolver(err, undefined);\n            return;\n        }\n\n        if (this.m_availableWorkers.length > 0) {\n            const worker = this.m_availableWorkers.pop()!;\n\n            if (buffers !== undefined) {\n                worker.postMessage(message, buffers);\n            } else {\n                worker.postMessage(message);\n            }\n        } else {\n            // We need a priority to keep sorting stable, so we have to add a RequestController.\n            if (requestController === undefined) {\n                requestController = new RequestController(0);\n            }\n            if (requestController.priority === 0) {\n                // If the requests do not get a priority, they should keep their sorting order.\n                requestController.priority = -this.m_nextMessageId;\n            }\n            this.m_workerRequestQueue.unshift({\n                message,\n                buffers,\n                requestController\n            });\n        }\n    }\n\n    private ensureStarted() {\n        if (this.m_stopped) {\n            throw new Error(\"ConcurrentWorkerSet stopped\");\n        }\n    }\n\n    private async waitForAllResponses(): Promise<any> {\n        const promises = new Array<Promise<void>>();\n        this.m_requests.forEach(entry => {\n            promises.push(entry.promise);\n        });\n        await Promise.all(promises);\n    }\n\n    private dispatchEvent(id: string, message: any) {\n        const callback = this.m_eventListeners.get(id);\n        if (callback === undefined) {\n            return;\n        } // unknown event, ignore.\n        callback(message);\n    }\n\n    private terminateWorkers() {\n        // terminate all workers\n        this.m_workerPromises.forEach(workerPromise => {\n            workerPromise.then(workerEntry => {\n                if (workerEntry === undefined) {\n                    return;\n                }\n                workerEntry.worker.removeEventListener(\"message\", workerEntry.listener);\n                workerEntry.worker.terminate();\n            });\n        });\n        this.m_workers = [];\n        this.m_workerPromises = [];\n        this.m_availableWorkers = [];\n        this.m_readyPromises.clear();\n    }\n\n    private getReadyPromise(id: string): ReadyPromise {\n        const readyPromise = this.m_readyPromises.get(id);\n        if (readyPromise !== undefined) {\n            return readyPromise;\n        }\n\n        const newPromise: ReadyPromise = {\n            count: 0,\n            promise: undefined,\n            resolve: () => {\n                /* placeholder */\n            },\n            reject: (error: any) => {\n                newPromise.error = error;\n            },\n            error: undefined\n        };\n\n        newPromise.promise = new Promise<void>((resolve, reject) => {\n            const that = newPromise;\n\n            if (that.error !== undefined) {\n                reject(that.error);\n            } else if (that.count === this.m_workerPromises.length) {\n                resolve();\n            }\n\n            that.resolve = resolve;\n            that.reject = reject;\n        });\n\n        this.m_readyPromises.set(id, newPromise);\n        return newPromise;\n    }\n\n    /**\n     * Check the worker request queue, if there are any queued up decoding jobs and idle workers,\n     * they will be executed with postRequestMessage. The requests in the queue are sorted before\n     * the request with the highest priority is selected for processing.\n     */\n    private checkWorkerRequestQueue() {\n        if (this.m_workerRequestQueue.length === 0 || this.m_availableWorkers.length === 0) {\n            return;\n        }\n        this.m_workerRequestQueue.sort((a: WorkerRequestEntry, b: WorkerRequestEntry) => {\n            return a.requestController!.priority - b.requestController!.priority;\n        });\n\n        // Get the request with the highest priority and send it (again).\n        while (this.m_availableWorkers.length > 0 && this.m_workerRequestQueue.length > 0) {\n            const request = this.m_workerRequestQueue.pop()!;\n            this.postRequestMessage(request.message, request.buffers, request.requestController);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\n\nimport { getUrlOrigin, LoggerManager } from \"@here/harp-utils\";\nimport { isWorkerBootstrapRequest, WorkerBootstrapResponse } from \"./WorkerBootstrapDefs\";\n\nconst logger = LoggerManager.instance.create(\"WorkerLoader\");\n\n/**\n * Set of `Worker` loading and initialization helpers:\n *  - starting Worker from URL with fallback to XHR+blob [[WorkerLoader.startWorker]]\n *  - waiting for proper worker initialization, see [[WorkerLoader.waitWorkerInitialized]]\n */\nexport class WorkerLoader {\n    static directlyFallbackToBlobBasedLoading: boolean = false;\n    static sourceLoaderCache = new Map<string, Promise<string>>();\n    static dependencyUrlMapping: { [name: string]: string } = {};\n\n    /**\n     * Starts worker by first attempting load from `scriptUrl` using native `Worker` constructor.\n     * Then waits (using [[waitWorkerInitialized]]) for first message that indicates successful\n     * initialization.\n     * If `scriptUrl`'s origin is different than `baseUrl`, then in case of error falls back to\n     * [[startWorkerBlob]].\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     * By default, this method timeouts after 10 seconds (configurable using `timeout` argument).\n     *\n     * This method is needed as browsers in general forbid to load worker if it's not on 'same\n     * origin' regardless of Content-Security-Policy.\n     *\n     * For blob-based fallback work, one need to ensure that Content Security Policy (CSP) allows\n     * loading web worker code from `Blob`s. By default browsers, allow 'blob:' for workers, but\n     * this may change.\n     *\n     * Following snippet setups CSP, so workers can be started from blob urls:\n     *\n     *     <head>\n     *         <meta http-equiv=\"Content-Security-Policy\" content=\"child-src blob:\">\n     *     </head>\n     *\n     * Tested on:\n     *   * Chrome 67 / Linux, Window, OSX, Android\n     *   * Firefox 60 / Linux, Windows, OSX\n     *   * Edge 41 / Windows\n     *   * Safari 11 / OSX\n     *   * Samsung Internet 7.2\n     *\n     * See\n     *  * https://benohead.com/cross-domain-cross-browser-web-workers/\n     *  * MapBox\n     *    * https://stackoverflow.com/questions/21913673/execute-web-worker-from-different-origin\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/2658\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/559\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/6058\n     *\n     * Findings:\n     *\n     * * Chrome reports CSP by exception when constructing [[Worker]] instance.\n     * * Firefox reports CSP errors when loading in first event:\n     *   https://bugzilla.mozilla.org/show_bug.cgi?id=1241888\n     * * Firefox 62, Chrome 67 obeys `<meta http-equiv=\"Content-Security-Policy\">` with\n     *   `worker-src blob:` but doesn't obey `worker-src URL` when used\n     * * Chrome 67 doesn't obey CSP `worker-src URL` despite it's documented as supported\n     *   (https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src)\n     *\n     * @param scriptUrl web worker script URL\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     *    (default 10 seconds)\n     */\n    static startWorker(scriptUrl: string, timeout: number = 10000): Promise<Worker> {\n        if (scriptUrl.startsWith(\"blob:\")) {\n            return this.startWorkerImmediately(scriptUrl, timeout);\n        }\n\n        if (this.directlyFallbackToBlobBasedLoading) {\n            return this.startWorkerBlob(scriptUrl, timeout);\n        }\n        return this.startWorkerImmediately(scriptUrl, timeout).catch(error => {\n            if (typeof window !== \"undefined\") {\n                const pageUrl = window.location.href;\n                const fullScriptUrl = new URL(scriptUrl, pageUrl).href;\n                if (getUrlOrigin(fullScriptUrl) === getUrlOrigin(pageUrl)) {\n                    throw error;\n                }\n                logger.log(\n                    \"#startWorker: cross-origin worker construction failed, trying load with blob\"\n                );\n                this.directlyFallbackToBlobBasedLoading = true;\n                return WorkerLoader.startWorkerBlob(scriptUrl, timeout);\n            } else {\n                throw error;\n            }\n        });\n    }\n\n    /**\n     * Start worker, loading it immediately from `scriptUrl`. Waits (using\n     * [[waitWorkerInitialized]]) for successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerImmediately(scriptUrl: string, timeout: number): Promise<Worker> {\n        try {\n            const worker = new Worker(scriptUrl);\n            return this.waitWorkerInitialized(worker, timeout);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * Start worker \"via blob\" by first loading worker script code with [[fetch]], creating `Blob`\n     * and attempting to start worker from blob url. Waits (using [[waitWorkerInitialized]]) for\n     * successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerBlob(scriptUrl: string, timeout: number): Promise<Worker> {\n        return this.fetchScriptSourceToBlobUrl(scriptUrl).then(blobUrl => {\n            return this.startWorkerImmediately(blobUrl, timeout);\n        });\n    }\n\n    /**\n     * Fetch script source as `Blob` url.\n     *\n     * Reuses results, if there are many simultaneous requests.\n     *\n     * @param scriptUrl web worker script URL\n     * @return promise that resolves to url of a `Blob` with script source code\n     */\n    static fetchScriptSourceToBlobUrl(scriptUrl: string): Promise<string> {\n        let loadingPromise = this.sourceLoaderCache.get(scriptUrl);\n        if (loadingPromise !== undefined) {\n            return loadingPromise;\n        }\n        loadingPromise = fetch(scriptUrl)\n            .then(response => response.text())\n            .catch(error => {\n                throw new Error(\n                    `WorkerLoader#fetchScriptSourceToBlob: failed to load worker script: ${error}`\n                );\n            })\n            .then(scriptSource => {\n                this.sourceLoaderCache.delete(scriptUrl);\n                const blob = new Blob([scriptSource], { type: \"application/javascript\" });\n                return URL.createObjectURL(blob);\n            });\n        this.sourceLoaderCache.set(scriptUrl, loadingPromise);\n        return loadingPromise;\n    }\n\n    /**\n     * Waits for successful Web Worker start.\n     *\n     * Expects that worker script sends initial message.\n     *\n     * If first event is `message` then assumes that worker has been loaded sussesfully and promise\n     * resolves to `worker` object passed as argument.\n     *\n     * If first event is 'error', then it is assumed that worker failed to load and promise is\n     * rejected.\n     *\n     * (NOTE: The initial 'message' - if received - is immediately replayed using worker's\n     * `dispatchEvent`, so application code can also consume it as confirmation of successful\n     * worker initialization.\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     *\n     * @param worker [[Worker]] instance to be checked\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     * @returns `Promise` that resolves to `worker` on success\n     */\n    static waitWorkerInitialized(worker: Worker, timeout: number): Promise<Worker> {\n        return new Promise<Worker>((resolve, reject) => {\n            const firstMessageCallback = (event: MessageEvent) => {\n                const message = event.data;\n                if (isWorkerBootstrapRequest(message)) {\n                    const dependencies = message.dependencies;\n                    const resolvedDependencies: string[] = [];\n                    for (const dependency of dependencies) {\n                        const resolved = this.dependencyUrlMapping[dependency];\n                        if (!resolved) {\n                            cleanup();\n                            reject(\n                                new Error(\n                                    `#waitWorkerInitialized: Unable to resolve '${dependency}'` +\n                                        ` as needed by worker script.`\n                                )\n                            );\n                            return;\n                        }\n                        resolvedDependencies.push(resolved);\n                    }\n                    const response: WorkerBootstrapResponse = {\n                        type: \"worker-bootstrap-response\",\n                        resolvedDependencies\n                    };\n                    worker.postMessage(response);\n                    return;\n                }\n\n                cleanup();\n                resolve(worker);\n\n                // We've just consumed first message from worker before client has any chance to\n                // even call `addEventListener` on it, so here after resolve, we wait next tick and\n                // replay message so user has chance to intercept it in its own handler.\n                setTimeout(() => {\n                    worker.dispatchEvent(event);\n                }, 0);\n            };\n            const errorCallback = (error: ErrorEvent) => {\n                cleanup();\n                // Error events do not carry any useful information on tested browsers, so we assume\n                // that any error before 'firstMessageCallback' as failed Worker initialization.\n                let message = \"Error during worker initialization\";\n                if (error.message) {\n                    message = message + `: ${error.message}`;\n                }\n                if (typeof error.filename === \"string\" && typeof error.lineno === \"number\") {\n                    message = message + ` in ${error.filename}:${error.lineno}`;\n                }\n                reject(new Error(message));\n            };\n            const cleanup = () => {\n                clearTimeout(timerId);\n                worker.removeEventListener(\"message\", firstMessageCallback);\n                worker.removeEventListener(\"error\", errorCallback);\n            };\n\n            worker.addEventListener(\"error\", errorCallback);\n            worker.addEventListener(\"message\", firstMessageCallback);\n            const timerId = setTimeout(() => {\n                cleanup();\n                reject(new Error(\"Timeout exceeded when waiting for first message from worker.\"));\n            }, timeout);\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    Definitions,\n    getProjectionName,\n    ITileDecoder,\n    OptionsMap,\n    RequestController,\n    StyleSet,\n    TileInfo,\n    WorkerDecoderProtocol,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey } from \"@here/harp-geoutils\";\n\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next decoder worker-service. Used to ensure uniqueness of service ids of decoders\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Decoder based on [[ConcurrentWorkerSet]].\n *\n * Decodes tiles using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends decode requests,\n * - configuration.\n */\nexport class WorkerBasedDecoder implements ITileDecoder {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedDecoder`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param decoderServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly decoderServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.decoderServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tile decoder services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TileDecoderService]]s in all workers to serve decode requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.decoderServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Get [[Tile]] from tile decoder service in worker.\n     *\n     * Invokes [[DecodeTileRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    decodeTile(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<DecodedTile> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.DecodeTileRequest = {\n            type: WorkerDecoderProtocol.Requests.DecodeTileRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Get [[TileInfo]] from tile decoder service in worker.\n     *\n     * Invokes [[TileInfoRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    getTileInfo(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<TileInfo | undefined> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.TileInfoRequest = {\n            type: WorkerDecoderProtocol.Requests.TileInfoRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Configure tile decoder service in workers.\n     *\n     * Broadcasts [[ConfigurationMessage]] to all [[TileDecoderService]]s running in worker pool.\n     *\n     * @param styleSet  new [[StyleSet]], undefined means no change\n     * @param languages new list of languages\n     * @param options   new options, undefined options are not changed\n     */\n    configure(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ): void {\n        const message: WorkerDecoderProtocol.ConfigurationMessage = {\n            service: this.serviceId,\n            type: WorkerDecoderProtocol.DecoderMessageName.Configuration,\n            styleSet,\n            definitions,\n            options,\n            languages\n        };\n\n        this.workerSet.broadcastMessage(message);\n    }\n\n    /**\n     * The number of workers started for this decoder. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.workerSet.workerCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TilingScheme } from \"@here/harp-geoutils\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\n\n/**\n * Status of the elevation range calculation.\n */\nexport enum CalculationStatus {\n    // Calculated approximately. A more precise result may be available later.\n    PendingApproximate,\n    // Calculation completed. The result is final, won't improve upon retrying.\n    FinalPrecise\n}\n\n/**\n * Elevation range with an optional calculation status.\n */\nexport interface ElevationRange {\n    minElevation: number;\n    maxElevation: number;\n    calculationStatus?: CalculationStatus;\n}\n\n/**\n * Source for elevation ranges per tile. The returned elevation ranges will be used in the visible\n * tile computation to calculate proper bounding boxes.\n */\nexport interface ElevationRangeSource {\n    /**\n     * Compute the elevation range for a given [[TileKey]].\n     * @param tileKey The tile for which the elevation range should be computed.\n     */\n    getElevationRange(tileKey: TileKey): ElevationRange;\n\n    /**\n     * The tiling scheme of this [[ElevationRangeSource]]. [[MapView]] will only apply the elevation\n     * ranges returned by [[getElevationRange]] that have the same [[TilingScheme]].\n     */\n    getTilingScheme(): TilingScheme;\n\n    /**\n     * Connects to the underlying data.\n     */\n    connect(): Promise<void>;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapView } from \"../MapView\";\nimport { Tile } from \"../Tile\";\nimport { SimpleTileGeometryLoader, TileGeometryLoader } from \"./TileGeometryLoader\";\n\ntype TileUpdateCallback = (tile: Tile) => void;\n\n/**\n * Manages the content (the geometries) of a tile. Derived classes allow different strategies that\n * control the sequence in which the geometries of the tile are being loaded.\n */\nexport interface TileGeometryManager {\n    /**\n     * The set of geometry kinds that is enabled. Their geometry will be created after decoding.\n     */\n    enabledGeometryKinds: GeometryKindSet;\n\n    /**\n     * The set of geometry kinds that is disabled. Their geometry will not be created after\n     * decoding.\n     */\n    disabledGeometryKinds: GeometryKindSet;\n\n    /**\n     * The set of geometry kinds that is hidden. Their geometry may be created, but it is hidden\n     * until the method `hideKind` with an argument of `addOrRemoveToHiddenSet:false` is called.\n     */\n    hiddenGeometryKinds: GeometryKindSet;\n\n    /**\n     * If set to `true`, the filters of enabled/disabledGeometryKinds are applied, otherwise they\n     * are ignored.\n     */\n    enableFilterByKind: boolean;\n\n    /**\n     * Initialize the [[Tile]] with the TileGeometryManager.\n     */\n    initTile(tile: Tile): void;\n\n    /**\n     * Process the [[Tile]]s for rendering. May alter the content of the tile per frame.\n     */\n    updateTiles(tiles: Tile[]): void;\n\n    /**\n     * Clear the enabled, disabled and hidden sets.\n     */\n    clear(): void;\n\n    /**\n     * Enable a [[GeometryKind]] by adding it to the enabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the enabled set.\n     * @param {boolean} addOrRemoveToEnabledSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    enableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToEnabledSet: boolean\n    ): void;\n\n    /**\n     * Disable a [[GeometryKind]] by adding it to the disabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the disabled set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    disableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToDisabledSet: boolean\n    ): void;\n\n    /**\n     * Hide a [[GeometryKind]] by adding it to the hidden set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the hidden set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to hide the kind(s), `false` to show\n     *      it again.\n     */\n    hideKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToHiddenSet: boolean\n    ): void;\n\n    /**\n     * Return all [[GeometryKind]]s that are contained in the tiles.\n     *\n     * @param {IterableIterator<Tile>} tiles The\n     * @returns {GeometryKindSet}\n     */\n    getAvailableKinds(tiles: IterableIterator<Tile>): GeometryKindSet;\n\n    /**\n     * Sets a callback that will be called for every updated tile on [[updateTiles]].\n     *\n     * @param {TileUpdateCallback} callback The callback that will be called after a tile has been\n     * updated, passing the updated tile as argument. If `undefined`, a previously set callback will\n     * be cleared.\n     */\n    setTileUpdateCallback(callback?: TileUpdateCallback): void;\n}\n\n/**\n * Base class for all [[TileGeometryManager]]s. Handles visibility as well as enabling/disabling of\n * kinds of geometry [[GeometryKind]].\n */\nexport abstract class TileGeometryManagerBase implements TileGeometryManager {\n    get enabledGeometryKinds(): GeometryKindSet {\n        return this.enabledKinds;\n    }\n\n    set enabledGeometryKinds(kinds: GeometryKindSet) {\n        this.enabledKinds = kinds;\n    }\n\n    get disabledGeometryKinds(): GeometryKindSet {\n        return this.disabledKinds;\n    }\n\n    set disabledGeometryKinds(kinds: GeometryKindSet) {\n        this.disabledKinds = kinds;\n    }\n\n    get hiddenGeometryKinds(): GeometryKindSet {\n        return this.hiddenKinds;\n    }\n\n    set hiddenGeometryKinds(kinds: GeometryKindSet) {\n        this.hiddenKinds = kinds;\n        this.incrementVisibilityCounter();\n    }\n\n    protected get visibilityCounter(): number {\n        return this.m_visibilityCounter;\n    }\n\n    enableFilterByKind: boolean = true;\n\n    protected enabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected disabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected hiddenKinds: GeometryKindSet = new GeometryKindSet();\n\n    protected m_tileUpdateCallback: TileUpdateCallback | undefined;\n\n    /**\n     * Optimization for evaluation in `update()` method. Only if a kind is hidden/unhidden, the\n     * visibility of the kinds is applied to their geometries.\n     */\n    private m_visibilityCounter: number = 1;\n\n    /**\n     * Creates an instance of `TileGeometryManagerBase` with a reference to the [[MapView]].\n     */\n    constructor(protected mapView: MapView) {}\n\n    abstract initTile(tile: Tile): void;\n\n    abstract updateTiles(tiles: Tile[]): void;\n\n    clear(): void {\n        this.enabledKinds.clear();\n        this.disabledKinds.clear();\n        this.hiddenKinds.clear();\n    }\n\n    enableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToEnabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.enabledKinds, kind, addOrRemoveToEnabledSet);\n    }\n\n    disableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToDisabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.disabledKinds, kind, addOrRemoveToDisabledSet);\n    }\n\n    hideKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToHiddenSet: boolean = true\n    ): void {\n        let visibilityHasChanged = false;\n        if (Array.isArray(kind)) {\n            for (const oneKind of kind as GeometryKind[]) {\n                visibilityHasChanged =\n                    visibilityHasChanged ||\n                    this.addRemove(this.hiddenKinds, oneKind, addOrRemoveToHiddenSet);\n            }\n        } else if (kind instanceof Set) {\n            const kindSet = kind as GeometryKindSet;\n            for (const oneKind of kindSet) {\n                visibilityHasChanged =\n                    visibilityHasChanged ||\n                    this.addRemove(this.hiddenKinds, oneKind, addOrRemoveToHiddenSet);\n            }\n        } else if (kind !== undefined) {\n            visibilityHasChanged =\n                visibilityHasChanged ||\n                this.addRemove(this.hiddenKinds, kind, addOrRemoveToHiddenSet);\n        }\n\n        // Will be evaluated in the next update()\n        if (visibilityHasChanged) {\n            this.incrementVisibilityCounter();\n        }\n    }\n\n    getAvailableKinds(tiles: IterableIterator<Tile>): GeometryKindSet {\n        const visibleKinds: GeometryKindSet = new GeometryKindSet();\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader as TileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                const tileKinds = geometryLoader.availableGeometryKinds;\n                if (tileKinds !== undefined) {\n                    for (const kind of tileKinds) {\n                        visibleKinds.add(kind);\n                    }\n                }\n            }\n        }\n        return visibleKinds;\n    }\n\n    /**\n     * Apply the visibility status taken from the `hiddenKinds` to all geometries in the specified\n     * tiles.\n     *\n     * @param {Tile[]} tiles List of [[Tiles]] to process the visibility status of.\n     */\n    updateTileObjectVisibility(tiles: Tile[]): boolean {\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            if (tile.objects.length === 0 || tile.visibilityCounter === this.visibilityCounter) {\n                continue;\n            }\n            tile.visibilityCounter = this.visibilityCounter;\n\n            for (const object of tile.objects) {\n                const geometryKind: GeometryKind[] | undefined =\n                    object.userData !== undefined ? object.userData.kind : undefined;\n                if (geometryKind !== undefined) {\n                    const nowVisible = !geometryKind.some(kind => this.hiddenKinds.has(kind));\n                    needUpdate = needUpdate || object.visible !== nowVisible;\n                    object.visible = nowVisible;\n                }\n            }\n        }\n        return needUpdate;\n    }\n\n    setTileUpdateCallback(callback?: TileUpdateCallback): void {\n        this.m_tileUpdateCallback = callback;\n    }\n\n    protected incrementVisibilityCounter(): number {\n        return ++this.m_visibilityCounter;\n    }\n\n    /**\n     * Add or remove a kind|array of kinds|set of kinds from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private enableDisableKinds(\n        set: GeometryKindSet,\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addToSet: boolean\n    ): void {\n        if (Array.isArray(kind)) {\n            for (const oneKind of kind as GeometryKind[]) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind instanceof Set) {\n            const kindSet = kind as GeometryKindSet;\n            for (const oneKind of kindSet) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind !== undefined) {\n            this.addRemove(set, kind, addToSet);\n        }\n    }\n\n    /**\n     * Add or remove a single kind from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private addRemove(kindsSet: GeometryKindSet, kind: GeometryKind, addToSet: boolean): boolean {\n        if (addToSet) {\n            if (!kindsSet.has(kind)) {\n                kindsSet.add(kind);\n                return true;\n            }\n        } else {\n            if (kindsSet.has(kind)) {\n                kindsSet.delete(kind);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * Implements the simplest for of [[TileGeometryManager]]. Uses a [[SimpleTileGeometryLoader]] to\n * load the geometries of the [[Tile]].\n */\nexport class SimpleTileGeometryManager extends TileGeometryManagerBase {\n    /**\n     * Creates an instance of `SimpleTileGeometryManager` with a reference to the [[MapView]].\n     */\n    constructor(mapView: MapView) {\n        super(mapView);\n    }\n\n    /** @override */\n    initTile(tile: Tile): void {\n        if (tile.dataSource.useGeometryLoader) {\n            tile.tileGeometryLoader = new SimpleTileGeometryLoader(tile);\n        }\n    }\n\n    /** @override */\n    updateTiles(tiles: Tile[]): void {\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader as TileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                geometryLoader.update(\n                    this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                    this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                );\n                if (this.m_tileUpdateCallback) {\n                    this.m_tileUpdateCallback(tile);\n                }\n            }\n        }\n\n        // If the visibility status of the kinds changed since the last update, the new visibility\n        // status is applied (again).\n        if (this.updateTileObjectVisibility(tiles)) {\n            this.mapView.update();\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\nimport { ImageCache } from \"./ImageCache\";\n\n/**\n * Cache images wrapped into [[ImageItem]]s for a [[MapView]]. An image may have multiple names in\n * a theme, the `MapViewImageCache` will take care of that. Registering multiple images with the\n * same name is invalid.\n *\n * The `MapViewImageCache` uses a global [[ImageCache]] to actually store (and generate) the\n * image data.\n */\nexport class MapViewImageCache {\n    private m_name2Url: Map<string, string> = new Map();\n    private m_url2Name: Map<string, string[]> = new Map();\n\n    /**\n     * The constructor for `MapViewImageCache`.\n     *\n     * @param mapView a [[MapView]] instance.\n     */\n    constructor(public mapView: MapView) {}\n\n    /**\n     * Register an existing image by name.\n     *\n     * @param name Name of the image from [[Theme]].\n     * @param url URL of image.\n     * @param image Optional [[ImageData]] of image.\n     */\n    registerImage(\n        name: string | undefined,\n        url: string,\n        image: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        if (name !== undefined) {\n            if (this.hasName(name)) {\n                throw new Error(\"duplicate name in cache\");\n            }\n\n            const oldNames = this.m_url2Name.get(url);\n            if (oldNames !== undefined) {\n                if (oldNames.indexOf(name) < 0) {\n                    oldNames.push(name);\n                }\n            } else {\n                this.m_url2Name.set(url, [name]);\n            }\n            this.m_name2Url.set(name, url);\n        }\n\n        const imageItem = ImageCache.instance.findImage(url);\n        if (imageItem === undefined) {\n            return ImageCache.instance.registerImage(this.mapView, url, image);\n        }\n        return imageItem;\n    }\n\n    /**\n     * Add an image and optionally start loading it. Once done, the [[ImageData]] or [[ImageBitmap]]\n     * will be stored in the [[ImageItem]].\n     *\n     * @param name Name of image from [[Theme]].\n     * @param url URL of image.\n     * @param startLoading Optional. Pass `true` to start loading the image in the background.\n     */\n    addImage(\n        name: string,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> {\n        const imageItem = this.registerImage(name, url, undefined);\n        if (startLoading === true) {\n            return ImageCache.instance.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] by its name.\n     *\n     * @param name Name of image.\n     */\n    findImageByName(name: string): ImageItem | undefined {\n        const url = this.m_name2Url.get(name);\n        if (url === undefined) {\n            return undefined;\n        }\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Find [[ImageItem]] by URL.\n     *\n     * @param url Url of image.\n     */\n    findImageByUrl(url: string): ImageItem | undefined {\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Load an [[ImageItem]]. Returns a promise or a loaded [[ImageItem]].\n     *\n     * @param imageItem ImageItem to load.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        return ImageCache.instance.loadImage(imageItem);\n    }\n\n    /**\n     * Remove all [[ImageItem]]s from the cache. Also removes all [[ImageItem]]s that belong to this\n     * [[MapView]] from the global [[ImageCache]].\n     */\n    clear() {\n        ImageCache.instance.clear(this.mapView);\n        this.m_name2Url = new Map();\n        this.m_url2Name = new Map();\n    }\n\n    /**\n     * Returns number of image names stored in the cache.\n     */\n    get numberOfNames(): number {\n        return this.m_name2Url.size;\n    }\n\n    /**\n     * Returns number of image URLs in the cache.\n     */\n    get numberOfUrls(): number {\n        return this.m_url2Name.size;\n    }\n\n    /**\n     * Return `true` if an image with the given name is known.\n     *\n     * @param name Name of the image.\n     */\n    hasName(name: string): boolean {\n        return this.m_name2Url.get(name) !== undefined;\n    }\n\n    /**\n     * Return `true` if an image with the given URL is known.\n     * @param url URL of image.\n     */\n    hasUrl(url: string): boolean {\n        return this.m_url2Name.get(url) !== undefined;\n    }\n\n    /**\n     * Return the names under which an image with the given URL is saved.\n     */\n    findNames(url: string): string[] | undefined {\n        return this.m_url2Name.get(url);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\n\nconst logger = LoggerManager.instance.create(\"ImageCache\");\n\n// override declaration of createImageBitmap, add optional options parameter that\n// was removed in typings for TypeScript 3.1\ndeclare function createImageBitmap(\n    image: ImageBitmapSource,\n    sx: number,\n    sy: number,\n    sw: number,\n    sh: number,\n    options?: any\n): Promise<ImageBitmap>;\n\n/**\n * Combines an [[ImageItem]] with a list of [[MapViews]] that reference it.\n */\nclass ImageCacheItem {\n    /**\n     * The list of [[MapView]]s referencing the [[ImageItem]].\n     */\n    mapViews: MapView[] = [];\n\n    /**\n     * Instantiates `ImageCacheItem`.\n     *\n     * @param imageItem The [[ImageItem]] referenced by the associated [[MapView]]s instances.\n     * @param mapView An optional first [[MapView]] referencing the [[ImageItem]].\n     */\n    constructor(public imageItem: ImageItem, mapView?: MapView) {\n        if (mapView !== undefined) {\n            this.mapViews.push(mapView);\n        }\n    }\n}\n\n/**\n * `ImageCache` is a singleton, so it can be used with multiple MapViews on a single page. This\n * allows to have an image loaded only once for multiple views. THREE is doing something similar,\n * but does not allow to share images that have been loaded from a canvas (which we may need to do\n * if we use SVG images for textures).\n *\n * One application that makes our own cache necessary is the generation of our own textures from\n * data that is not an URL.\n *\n * The `ImageCache` can be improved by adding satistics for memory footprint as well.\n */\nexport class ImageCache {\n    /**\n     * Returns the singleton `instance` of the `ImageCache`.\n     */\n    static get instance(): ImageCache {\n        if (ImageCache.m_instance === undefined) {\n            ImageCache.m_instance = new ImageCache();\n        }\n        return ImageCache.m_instance;\n    }\n\n    /**\n     * Dispose the singleton object. Not normally implemented for singletons, but good for\n     * debugging.\n     */\n    static dispose(): void {\n        ImageCache.m_instance = undefined;\n    }\n\n    private static m_instance: ImageCache | undefined;\n\n    private m_images: Map<string, ImageCacheItem> = new Map();\n\n    /**\n     * Add an image definition to the global cache. Useful when the image data is already loaded.\n     *\n     * @param mapView Specifiy which [[MapView]] requests the image.\n     * @param url URL of image.\n     * @param imageData Optional [ImageData]] containing the image content.\n     */\n    registerImage(\n        mapView: MapView,\n        url: string,\n        imageData: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        let imageCacheItem = this.findImageCacheItem(url);\n        if (imageCacheItem !== undefined) {\n            if (mapView !== undefined && imageCacheItem.mapViews.indexOf(mapView) < 0) {\n                imageCacheItem.mapViews.push(mapView);\n            }\n            return imageCacheItem.imageItem;\n        }\n\n        imageCacheItem = this.findImageCacheItem(url);\n        if (imageCacheItem !== undefined) {\n            if (mapView !== undefined && imageCacheItem.mapViews.indexOf(mapView) < 0) {\n                imageCacheItem.mapViews.push(mapView);\n            }\n            return imageCacheItem.imageItem;\n        }\n\n        const mapViews: MapView[] = [];\n        if (mapView !== undefined) {\n            mapViews.push(mapView);\n        }\n\n        imageCacheItem = {\n            imageItem: {\n                url,\n                imageData,\n                loaded: false\n            },\n            mapViews\n        };\n\n        this.m_images.set(url, imageCacheItem);\n\n        return imageCacheItem.imageItem;\n    }\n\n    /**\n     * Add an image definition, and optionally start loading the content.\n     *\n     * @param mapView [[MapView]] requesting the image.\n     * @param url URL of image.\n     * @param startLoading Optional flag. If `true` the image will be loaded in the background.\n     */\n    addImage(\n        mapView: MapView,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> | undefined {\n        const imageItem = this.registerImage(mapView, url, undefined);\n        if (imageItem !== undefined && startLoading === true) {\n            return this.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] for the specified URL.\n     *\n     * @param url URL of image.\n     * @returns `ImageItem` for the URL if the URL is registered, `undefined` otherwise.\n     */\n    findImage(url: string): ImageItem | undefined {\n        const imageItem = this.m_images.get(url);\n        if (imageItem !== undefined) {\n            return imageItem.imageItem;\n        }\n        return undefined;\n    }\n\n    /**\n     * Clear all [[ImageItem]]s belonging to a [[MapView]]. May remove cached items if no\n     * [[MapView]] are registered anymore.\n     *\n     * @param mapView MapView to remove all [[ImageItem]]s from.\n     */\n    clear(mapView: MapView) {\n        const itemsToRemove: string[] = [];\n\n        this.m_images.forEach(imageItem => {\n            const mapViewIndex = imageItem.mapViews.indexOf(mapView);\n            if (mapViewIndex >= 0) {\n                imageItem.mapViews.splice(mapViewIndex, 1);\n            }\n            if (imageItem.mapViews.length === 0) {\n                itemsToRemove.push(imageItem.imageItem.url);\n            }\n        });\n\n        for (const keyToDelete of itemsToRemove) {\n            this.m_images.delete(keyToDelete);\n        }\n    }\n\n    /**\n     * Clear all [[ImageItem]]s from all [[MapView]]s.\n     */\n    clearAll() {\n        this.m_images = new Map();\n    }\n\n    /**\n     * Returns the number of all cached [[ImageItem]]s.\n     */\n    get size(): number {\n        return this.m_images.size;\n    }\n\n    /**\n     * Load an [[ImageItem]]. If the loading process is already running, it returns the current\n     * promise.\n     *\n     * @param imageItem `ImageItem` containing the URL to load image from.\n     * @returns An [[ImageItem]] if the image has already been loaded, a promise otherwise.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        if (imageItem.imageData !== undefined) {\n            return imageItem;\n        }\n\n        if (imageItem.loadingPromise !== undefined) {\n            return imageItem.loadingPromise;\n        }\n\n        const imageLoader = new THREE.ImageLoader();\n\n        imageItem.loadingPromise = new Promise(resolve => {\n            logger.debug(`Loading image: ${imageItem.url}`);\n            imageLoader.load(\n                imageItem.url,\n                image => {\n                    logger.debug(`... finished loading image: ${imageItem.url}`);\n                    this.renderImage(imageItem, image)\n                        .then(() => {\n                            imageItem.loadingPromise = undefined;\n                            resolve(imageItem);\n                        })\n                        .catch(ex => {\n                            logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                            resolve(undefined);\n                        });\n                },\n                // Loading events no longer supported\n                undefined,\n                errorEvent => {\n                    logger.error(`... loading image failed: ${imageItem.url} : ${errorEvent}`);\n\n                    imageItem.loadingPromise = undefined;\n                    resolve(undefined);\n                }\n            );\n        });\n        return imageItem.loadingPromise;\n    }\n\n    /**\n     * Find the cached [[ImageItem]] by URL.\n     *\n     * @param url URL of image.\n     */\n    private findImageCacheItem(url: string): ImageCacheItem | undefined {\n        return this.m_images.get(url);\n    }\n\n    /**\n     * Render the `ImageItem` by using `createImageBitmap()` or by rendering the image into a\n     * [[HTMLCanvasElement]].\n     *\n     * @param imageItem [[ImageItem]] to assign image data to.\n     * @param image [[HTMLImageElement]] to\n     */\n    private renderImage(\n        imageItem: ImageItem,\n        image: HTMLImageElement\n    ): Promise<ImageData | ImageBitmap | undefined> {\n        return new Promise((resolve, reject) => {\n            // use createImageBitmap if it is available. It should be available in webworkers as\n            // well\n            if (typeof createImageBitmap === \"function\") {\n                const options: ImageBitmapOptions = {\n                    premultiplyAlpha: \"default\",\n                    imageOrientation: \"flipY\"\n                };\n\n                logger.debug(`Creating bitmap image: ${imageItem.url}`);\n                createImageBitmap(image, 0, 0, image.width, image.height, options)\n                    .then(imageBitmap => {\n                        logger.debug(`... finished creating bitmap image: ${imageItem.url}`);\n\n                        imageItem.loadingPromise = undefined;\n                        imageItem.imageData = imageBitmap;\n                        imageItem.loaded = true;\n                        resolve(imageBitmap);\n                    })\n                    .catch(ex => {\n                        logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                        resolve(undefined);\n                    });\n            } else {\n                try {\n                    if (typeof document === \"undefined\") {\n                        logger.error(\"Error: document is not available, cannot generate image\");\n                        reject(\n                            new Error(\n                                \"ImageCache#renderImage: document is not available, cannot \" +\n                                    \"render image to create texture\"\n                            )\n                        );\n                    }\n\n                    // TODO: Extract the rendering to the canvas part and make it configurable for\n                    // the client, so it does not rely on the `document`.\n\n                    // use the image, e.g. draw part of it on a canvas\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = image.width;\n                    canvas.height = image.height;\n\n                    const context = canvas.getContext(\"2d\");\n                    if (context !== null) {\n                        logger.debug(\n                            // tslint:disable-next-line: max-line-length\n                            `... finished creating bitmap image in canvas: ${imageItem.url} ${image}`\n                        );\n                        context.drawImage(\n                            image,\n                            0,\n                            0,\n                            image.width,\n                            image.height,\n                            0,\n                            0,\n                            canvas.width,\n                            canvas.height\n                        );\n                        const imageData = context.getImageData(0, 0, image.width, image.height);\n                        imageItem.imageData = imageData;\n                        imageItem.loaded = true;\n                        resolve(imageData);\n                    } else {\n                        logger.error(`renderImage: no context found`);\n                        reject(new Error(`ImageCache#renderImage: no context found`));\n                    }\n                } catch (ex) {\n                    logger.error(`renderImage failed: ${ex}`);\n                    imageItem.imageData = undefined;\n                    imageItem.loaded = true;\n                    reject(new Error(`ImageCache#renderImage failed: ${ex}`));\n                }\n            }\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\n/**\n * Manages the fog display in [[MapView]].\n */\nexport class MapViewFog {\n    private m_enabled: boolean = true;\n    private m_fog: THREE.Fog = new THREE.Fog(0x000000); // Default color asked by DefinitelyTyped.\n    private m_fogIsDefined: boolean = false;\n    private m_cachedTheme: Theme = { styles: {} };\n\n    /**\n     * Constructs a `MapViewFog` instance.\n     *\n     * @param m_scene The scene used in [[MapView]] that contains the map objects.\n     */\n    constructor(private m_scene: THREE.Scene) {}\n\n    /**\n     * Allows for disabling the fog, even if it is defined in the theme. Use this property for\n     * custom views like the demo app's debug camera. However, if the theme does not define a\n     * fog, enabling this property here has no effect.\n     *\n     * @param value A boolean that specifies whether the fog should be enabled or disabled.\n     */\n    set enabled(enableFog: boolean) {\n        this.m_enabled = enableFog;\n        if (enableFog && this.m_fogIsDefined && this.m_scene.fog === null) {\n            this.add();\n        } else if (!enableFog && this.m_scene.fog !== null) {\n            this.remove();\n        }\n    }\n\n    /**\n     * Returns the current fog status, enabled or disabled.\n     */\n    get enabled(): boolean {\n        return this.m_enabled;\n    }\n\n    /**\n     * Sets the fog depending on the [[Theme]] instance provided. This function is called when a\n     * theme is loaded. Fog is added only if the theme contains a fog definition with a:\n     * - `color` property, used to set the fog color.\n     * - `startRatio` property, used to set the start distance of the fog as a ratio of the far\n     * clipping plane distance.\n     *\n     * @param theme A [[Theme]] instance.\n     */\n    reset(theme: Theme) {\n        this.m_cachedTheme = theme;\n        if (\n            theme !== undefined &&\n            theme.fog !== undefined &&\n            theme.fog.color !== undefined &&\n            theme.fog.startRatio !== undefined\n        ) {\n            this.m_fogIsDefined = true;\n            this.m_fog.color.set(theme.fog.color);\n            if (this.m_enabled && this.m_scene.fog === null) {\n                this.add();\n            }\n        } else {\n            this.m_fogIsDefined = false;\n            if (this.m_scene.fog !== null) {\n                this.remove();\n            }\n        }\n    }\n\n    /**\n     * Updates the fog at runtime, depending on the camera.\n     *\n     * @param camera An instance of a `THREE.Camera` with a `far` property.\n     */\n    update(mapView: MapView, viewDistance?: number) {\n        if (\n            this.m_scene.fog !== null &&\n            this.m_cachedTheme !== undefined &&\n            this.m_cachedTheme.fog &&\n            this.m_cachedTheme.fog.startRatio !== undefined &&\n            (mapView.camera.far !== undefined || viewDistance !== undefined)\n        ) {\n            // If maximum visibility range is available use it instead of camera.far distance,\n            // this makes fog independent from dynamic camera planes and keeps consistent\n            // distance based \"melting\" (fog) effect during a tilt.\n            const viewRange = viewDistance !== undefined ? viewDistance : mapView.camera.far;\n            // TODO: We may move below constants to theme Fog definition\n            // Density of the fog when viewing straight along the horizon line.\n            const horizontalDensity = 1.0;\n            // Theoretical density of the fog when viewing straight from top to down.\n            const verticalDensity = 0.0;\n            // The fraction of the maximum viewing distance along the eye vector\n            // to start applying the fog.\n            const startRatio = this.m_cachedTheme.fog.startRatio;\n            // The fraction of maximum viewing range at which fog fully covers geometry.\n            const endRatio = 1.0;\n            assert(startRatio <= endRatio);\n            const target = MapViewUtils.rayCastWorldCoordinates(mapView, 0, 0);\n            if (target === null) {\n                throw new Error(\"MapView does not support a view pointing in the void.\");\n            }\n            const t = Math.abs(\n                Math.cos(\n                    MapViewUtils.extractSphericalCoordinatesFromLocation(\n                        mapView,\n                        mapView.camera,\n                        mapView.projection.unprojectPoint(target)\n                    ).tilt\n                )\n            );\n            const density = MathUtils.smoothStep(horizontalDensity, verticalDensity, t);\n            this.m_fog.near = MathUtils.lerp(viewRange * startRatio, viewRange, 1.0 - density);\n            this.m_fog.far = MathUtils.lerp(viewRange * endRatio, viewRange, density);\n            this.m_fog.near = Math.min(this.m_fog.near, mapView.camera.far);\n            this.m_fog.far = Math.min(this.m_fog.far, mapView.camera.far);\n        }\n    }\n\n    /**\n     * Handles fog addition.\n     */\n    private add() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = this.m_fog;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(true);\n    }\n\n    /**\n     * Handles fog removal.\n     */\n    private remove() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = null;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(false);\n    }\n\n    /**\n     * ThreeJS lets users manage the `RawShaderMaterial` themselves, so they need to be modified\n     * explicitly.\n     *\n     * @see https://github.com/mrdoob/three.js/blob/dev/src/renderers/webgl/WebGLProgram.js#L298\n     */\n    private setFogInRawShaderMaterials(enableFog: boolean) {\n        this.m_scene.traverse(object => {\n            if (!(object instanceof THREE.Mesh)) {\n                return;\n            }\n            if (!(object.material instanceof THREE.Material)) {\n                return;\n            }\n            // HighPrecisionLineMaterial does not support fog\n            if (object.material instanceof HighPrecisionLineMaterial) {\n                return;\n            }\n            // We may skip redundant updates.\n            if (object.material.fog === enableFog) {\n                return;\n            }\n            object.material.fog = enableFog;\n            // Fog properties can't be easily changed at runtime (once the material\n            // is rendered at least once) and thus requires building of new shader\n            // program - force material update.\n            object.material.needsUpdate = true;\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    composeTechniqueTextureName,\n    DecodedTile,\n    getFeatureId,\n    getPropertyValue,\n    ImageTexture,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    LineMarkerTechnique,\n    PoiGeometry,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert, assertExists, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"../MapView\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile } from \"../Tile\";\nimport { PoiTable } from \"./PoiTableManager\";\n\nconst logger = LoggerManager.instance.create(\"PoiManager\");\n\n/**\n * Interface for the [[ImageTexture]]s that are defined in the atlas.\n */\ninterface ImageTextureDef {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    pixelRatio?: number;\n}\n\n/**\n * POI manager class, responsible for loading the [[PoiGeometry]] objects from the [[DecodedTile]],\n * and preparing them for rendering. Also loads and manages the texture atlases for the icons.\n */\nexport class PoiManager {\n    // Keep track of the missing POI table names, but only warn once.\n    private static m_missingPoiTableName: Map<string, boolean> = new Map();\n    private static m_missingPoiName: Map<string, boolean> = new Map();\n\n    /**\n     * Warn about a missing POI table name, but only once.\n     * @param poiTableName POI mapping table name.\n     * @param poiTable POI table instance.\n     */\n    private static notifyMissingPoiTable(\n        poiTableName: string,\n        poiTable: PoiTable | undefined\n    ): void {\n        if (poiTableName === undefined) {\n            poiTableName = \"undefined\";\n        }\n        if (PoiManager.m_missingPoiTableName.get(poiTableName) === undefined) {\n            PoiManager.m_missingPoiTableName.set(poiTableName, true);\n            if (poiTable !== undefined && !poiTable.loadedOk) {\n                logger.error(`updatePoiFromPoiTable: Could not load POI table '${poiTableName}'!`);\n            } else {\n                logger.error(\n                    `updatePoiFromPoiTable: No POI table with name '${poiTableName}' found!`\n                );\n            }\n        }\n    }\n\n    /**\n     * Warn about a missing POI name, but only once.\n     * @param poiName name of POI.\n     * @param poiTableName POI mapping table name.\n     */\n    private static notifyMissingPoi(poiName: string, poiTableName: string): void {\n        if (poiName === undefined) {\n            poiName = \"undefined\";\n        }\n        const key: string = `${poiTableName}[${poiName}]`;\n        if (PoiManager.m_missingPoiName.get(key) === undefined) {\n            PoiManager.m_missingPoiName.set(key, true);\n            logger.warn(\n                `updatePoiFromPoiTable: ` +\n                    `Cannot find POI info for '${poiName}' in table '${poiTableName}'.`\n            );\n        }\n    }\n\n    private m_imageTextures: Map<string, ImageTexture> = new Map();\n    private m_poiShieldGroups: Map<string, number> = new Map();\n\n    /**\n     * The constructor of the `PoiManager`.\n     *\n     * @param mapView The [[MapView]] instance that should display the POIs.\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Add all POIs from a decoded tile and store them as [[TextElement]]s in the [[Tile]].\n     *\n     * Also handles LineMarkers, which is a recurring marker along a line (road).\n     *\n     * @param tile Tile to add POIs to.\n     * @param decodedTile DecodedTile containing the raw [[PoiGeometry]] objects describing the\n     *  POIs.\n     */\n    addPois(tile: Tile, decodedTile: DecodedTile): void {\n        const poiGeometries = assertExists(decodedTile.poiGeometries);\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        for (const poiGeometry of poiGeometries) {\n            assert(poiGeometry.technique !== undefined);\n            const techniqueIndex = assertExists(poiGeometry.technique);\n            const technique = decodedTile.techniques[techniqueIndex];\n\n            if (\n                technique.enabled === false ||\n                (!isLineMarkerTechnique(technique) && !isPoiTechnique(technique))\n            ) {\n                continue;\n            }\n\n            // The POI may be in the data, and there may be a Technique, but the technique may\n            // specify to not show it.\n            if (technique.showOnMap === false) {\n                continue;\n            }\n\n            const positions = new THREE.BufferAttribute(\n                new Float32Array(poiGeometry.positions.buffer),\n                poiGeometry.positions.itemCount\n            );\n\n            if (isLineMarkerTechnique(technique) && positions.count > 0) {\n                this.addLineMarker(tile, poiGeometry, technique, positions, worldOffsetX);\n            } else if (isPoiTechnique(technique)) {\n                this.addPoi(tile, poiGeometry, technique, positions, worldOffsetX);\n            }\n        }\n    }\n\n    /**\n     * Load the texture atlas that defines the segments of the texture that should be used for\n     * specific icons. Creates an [[ImageTexture]] for every element in the atlas, such that it can\n     * be addressed in the theme file.\n     *\n     * @param imageName Name of the image from the theme (NOT the url!).\n     * @param atlas URL of the JSON file defining the texture atlas.\n     */\n    addTextureAtlas(imageName: string, atlas: string) {\n        fetch(atlas)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\n                        `addTextureAtlas: Cannot load textureAtlas: ${response.statusText}`\n                    );\n                }\n\n                return response.json();\n            })\n            .then((jsonAtlas: any | undefined) => {\n                if (jsonAtlas === undefined) {\n                    logger.info(`addTextureAtlas: TextureAtlas empty: ${atlas}`);\n                    return;\n                }\n\n                try {\n                    logger.debug(\n                        `addTextureAtlas: Loading textureAtlas '${atlas}' for image '${imageName}'`\n                    );\n                    for (const textureName of Object.getOwnPropertyNames(jsonAtlas)) {\n                        const imageTextureDef = jsonAtlas[textureName] as ImageTextureDef;\n\n                        const imageTexture: ImageTexture = {\n                            name: textureName,\n                            image: imageName,\n                            xOffset: imageTextureDef.x,\n                            yOffset: imageTextureDef.y,\n                            width: imageTextureDef.width,\n                            height: imageTextureDef.height\n                        };\n\n                        this.addImageTexture(imageTexture);\n                    }\n                } catch (ex) {\n                    logger.error(\n                        `addTextureAtlas: Failed to load textureAtlas ` + `'${atlas}' : ${ex}`\n                    );\n                }\n                this.mapView.update();\n            })\n\n            .catch((reason: any) => {\n                logger.error(`addTextureAtlas: Failed to load textureAtlas '${atlas}' : ${reason}`);\n            });\n    }\n\n    /**\n     * Add an [[ImageTexture]] such that it is available as a named entity for techniques in theme\n     * files.\n     *\n     * @param imageTexture [[ImageTexture]] that should be available for POIs.\n     */\n    addImageTexture(imageTexture: ImageTexture) {\n        if (imageTexture.name === undefined) {\n            logger.error(\"addImageTexture: Name required\", imageTexture);\n            return;\n        }\n        if (this.m_imageTextures.get(imageTexture.name) !== undefined) {\n            logger.warn(\n                `addImageTexture: Name already used: ${imageTexture.name}` + ` (overriding it)`\n            );\n        }\n\n        this.m_imageTextures.set(imageTexture.name, imageTexture);\n    }\n\n    /**\n     * Return the [[ImageTexture]] registered under the specified name.\n     *\n     * @param name Name of the [[ImageTexture]].\n     */\n    getImageTexture(name: string): ImageTexture | undefined {\n        return this.m_imageTextures.get(name);\n    }\n\n    /**\n     * Update the [[TextElement]] with the information taken from the [[PoiTable]] which is\n     * referenced in the [[PoiInfo]] of the pointLabel.\n     *\n     * If the requested [[PoiTable]] is not available yet, the function returns `false`.\n     * If the [[PoiTable]] is not defined, or if the references POI has no entry in\n     * the [[PoiTable]], no action is taken, and the function returns `false`.\n     *\n     * If the [[PoiTable]] has been processed, it returns `true`, indicating that this function\n     * doesn't have to be called again.\n     *\n     * @param pointLabel The [[TextElement]] to update.\n     *\n     * @returns `true` if the [[PoiTable]] has been processed, and the function does not have to be\n     *          called again.\n     */\n    updatePoiFromPoiTable(pointLabel: TextElement): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        // PoiTable requires poiName to be defined otherwise mapping via PoiTable is\n        // not possible, such as table key is not defined.\n        if (\n            poiInfo === undefined ||\n            poiInfo.poiTableName === undefined ||\n            poiInfo.poiName === undefined\n        ) {\n            return true;\n        }\n\n        // Try to acquire PoiTable\n        const poiTableName = poiInfo.poiTableName;\n        const poiTable = this.mapView.poiTableManager.getPoiTable(poiTableName);\n\n        // Check if PoiTable is found, but its still loading.\n        if (poiTable !== undefined && poiTable.isLoading) {\n            // The PoiTable is still loading, we have to try again.\n            return false;\n        }\n\n        // Remove poiTableName to mark this POI as processed.\n        poiInfo.poiTableName = undefined;\n\n        // PoiTable not found or can not be loaded.\n        if (poiTable === undefined || !poiTable.loadedOk) {\n            PoiManager.notifyMissingPoiTable(poiTableName, poiTable);\n            return true;\n        }\n\n        // Try to acquire PoiTableEntry.\n        const poiName = poiInfo.poiName;\n        const poiTableEntry = poiTable.getEntry(poiName);\n        if (poiTableEntry === undefined) {\n            PoiManager.notifyMissingPoi(poiName, poiTableName);\n            return true;\n        }\n\n        if (poiTableEntry.iconName !== undefined && poiTableEntry.iconName.length > 0) {\n            poiInfo.imageTextureName = composeTechniqueTextureName(\n                poiTableEntry.iconName,\n                poiInfo.technique\n            );\n        }\n\n        pointLabel.visible =\n            poiTableEntry.visible !== undefined ? poiTableEntry.visible : pointLabel.visible;\n        pointLabel.priority =\n            poiTableEntry.priority !== undefined ? poiTableEntry.priority : pointLabel.priority;\n        poiInfo.iconMinZoomLevel =\n            poiTableEntry.iconMinLevel !== undefined\n                ? poiTableEntry.iconMinLevel\n                : poiInfo.iconMinZoomLevel;\n        poiInfo.iconMaxZoomLevel =\n            poiTableEntry.iconMaxLevel !== undefined\n                ? poiTableEntry.iconMaxLevel\n                : poiInfo.iconMaxZoomLevel;\n        poiInfo.textMinZoomLevel =\n            poiTableEntry.textMinLevel !== undefined\n                ? poiTableEntry.textMinLevel\n                : poiInfo.textMinZoomLevel;\n        poiInfo.textMaxZoomLevel =\n            poiTableEntry.textMaxLevel !== undefined\n                ? poiTableEntry.textMaxLevel\n                : poiInfo.textMaxZoomLevel;\n\n        pointLabel.updateMinMaxZoomLevelsFromPoiInfo();\n\n        return true;\n    }\n\n    /**\n     * Clear internal state. Applicable when switching themes.\n     */\n    clear() {\n        this.m_imageTextures.clear();\n        this.m_poiShieldGroups.clear();\n    }\n\n    /**\n     * Add the LineMarker as a POI with a series of positions. Make sure that the LineMarkers\n     * having the same visual all get their `shieldGroupIndex` set appropriately, so it can be taken\n     * care of later that not too many of them are rendered (obey `minDistance` attribute).\n     */\n    private addLineMarker(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: LineMarkerTechnique,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        let imageTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(technique.imageTexture, technique)\n                : undefined;\n\n        let text: string = \"\";\n        let userData: AttributeMap | undefined;\n        let featureId: number | undefined;\n\n        if (poiGeometry.stringCatalog !== undefined) {\n            assert(poiGeometry.texts.length > 0);\n            text = poiGeometry.stringCatalog[poiGeometry.texts[0]] || \"\";\n            if (poiGeometry.objInfos !== undefined) {\n                userData = poiGeometry.objInfos[0];\n                featureId = getFeatureId(userData);\n            }\n\n            if (poiGeometry.imageTextures !== undefined) {\n                assert(poiGeometry.imageTextures.length > 0);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[0]];\n            }\n        }\n\n        // let the combined image texture name (name of image in atlas, not the URL) and\n        // text of the shield be the group key, at worst scenario it may be:\n        // \"undefined-\"\n        const groupKey = String(imageTextureName) + \"-\" + text;\n        let shieldGroupIndex = this.m_poiShieldGroups.get(groupKey);\n        if (shieldGroupIndex === undefined) {\n            shieldGroupIndex = this.m_poiShieldGroups.size;\n            this.m_poiShieldGroups.set(groupKey, shieldGroupIndex);\n        }\n\n        // Debugging help to identify the group of a shield :\n        // text = groupKey + \": \" + text;\n\n        const positionArray: THREE.Vector3[] = [];\n        for (let i = 0; i < positions.count; i += 3) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n            positionArray.push(new THREE.Vector3(x, y, z));\n        }\n        const textElement = this.checkCreateTextElement(\n            tile,\n            text,\n            technique,\n            imageTextureName,\n            undefined, // TBD for road shields\n            undefined,\n            shieldGroupIndex,\n            featureId,\n            positionArray,\n            undefined,\n            undefined,\n            userData\n        );\n\n        // If the poi icon is rendered, the label that shows text should also be rendered.\n        // The distance rule of the icon should apply, not the one for text (only) labels.\n        textElement.ignoreDistance = false;\n        tile.addTextElement(textElement);\n    }\n\n    /**\n     * Create and add POI [[TextElement]]s to tile with a series of positions.\n     */\n    private addPoi(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: PoiTechnique,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        if (poiGeometry.stringCatalog === undefined) {\n            return;\n        }\n\n        const techniqueTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(technique.imageTexture, technique)\n                : undefined;\n\n        const poiTechnique = technique as PoiTechnique;\n        const poiTableName = poiTechnique.poiTable;\n        let poiName = poiTechnique.poiName;\n\n        for (let i = 0; i < positions.count; ++i) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n\n            assert(poiGeometry.texts.length > i);\n            let imageTextureName = techniqueTextureName;\n            const text: string = poiGeometry.stringCatalog[poiGeometry.texts[i]] || \"\";\n            const userData =\n                poiGeometry.objInfos !== undefined ? poiGeometry.objInfos[i] : undefined;\n            const featureId = getFeatureId(userData);\n            if (poiGeometry.imageTextures !== undefined && poiGeometry.imageTextures[i] >= 0) {\n                assert(poiGeometry.imageTextures.length > i);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[i]];\n            }\n            if (poiTableName !== undefined) {\n                // The POI name to be used is taken from the data, since it will\n                // specify the name of the texture to use.\n\n                // The POI name in the technique may override the POI name from the\n                // data.\n                poiName =\n                    poiTechnique.poiName === undefined ? imageTextureName : poiTechnique.poiName;\n\n                imageTextureName = undefined;\n            }\n\n            const textElement = this.checkCreateTextElement(\n                tile,\n                text,\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                0,\n                featureId,\n                x,\n                y,\n                z,\n                userData\n            );\n\n            tile.addTextElement(textElement);\n        }\n    }\n\n    /**\n     * Create the [[TextElement]] for a POI. Even if the POI has no text, it is required that there\n     * is a [[TextElement]], since POIs are hooked onto [[TextElement]]s for sorting.(Sorted by\n     * priority attribute).\n     */\n    private checkCreateTextElement(\n        tile: Tile,\n        text: string,\n        technique: PoiTechnique | LineMarkerTechnique,\n        imageTextureName: string | undefined,\n        poiTableName: string | undefined,\n        poiName: string | undefined,\n        shieldGroupIndex: number,\n        featureId: number | undefined,\n        x: number | THREE.Vector3[],\n        y: number | undefined,\n        z: number | undefined,\n        userData?: {}\n    ): TextElement {\n        const textElementsRenderer = this.mapView.textElementsRenderer;\n        const priority = technique.priority !== undefined ? technique.priority : 0;\n        const positions = Array.isArray(x) ? (x as THREE.Vector3[]) : new THREE.Vector3(x, y, z);\n\n        // The current zoomlevel of mapview. Since this method is called for all tiles in the\n        // VisibleTileSet we can be sure that the current zoomlevel matches the zoomlevel where\n        // the tile should be shown.\n        const displayZoomLevel = this.mapView.zoomLevel;\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, displayZoomLevel)\n                : technique.fadeNear;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, displayZoomLevel)\n                : technique.fadeFar;\n        const xOffset = getPropertyValue(technique.xOffset, displayZoomLevel);\n        const yOffset = getPropertyValue(technique.yOffset, displayZoomLevel);\n\n        const textElement: TextElement = new TextElement(\n            ContextualArabicConverter.instance.convert(text),\n            positions,\n            textElementsRenderer.styleCache.getRenderStyle(tile, technique),\n            textElementsRenderer.styleCache.getLayoutStyle(tile, technique),\n            getPropertyValue(priority, displayZoomLevel),\n            xOffset !== undefined ? xOffset : 0.0,\n            yOffset !== undefined ? yOffset : 0.0,\n            featureId,\n            technique.style,\n            fadeNear,\n            fadeFar,\n            tile.offset\n        );\n\n        textElement.mayOverlap = technique.textMayOverlap === true;\n        textElement.reserveSpace = technique.textReserveSpace !== false;\n        textElement.alwaysOnTop = technique.alwaysOnTop === true;\n        textElement.userData = userData;\n\n        // imageTextureName may be undefined if a poiTable is used.\n        if (imageTextureName === undefined && poiTableName !== undefined) {\n            imageTextureName = \"\";\n        } else if (imageTextureName !== undefined && poiTableName !== undefined) {\n            logger.warn(\n                \"Possible duplicate POI icon definition via imageTextureName and poiTable!\"\n            );\n        }\n\n        if (imageTextureName !== undefined) {\n            const textIsOptional = technique.textIsOptional === true;\n            const iconIsOptional = technique.iconIsOptional !== false;\n            const renderTextDuringMovements = !(technique.renderTextDuringMovements === false);\n            const iconMayOverlap =\n                technique.iconMayOverlap === undefined\n                    ? textElement.textMayOverlap\n                    : technique.iconMayOverlap === true;\n            const iconReserveSpace =\n                technique.iconReserveSpace === undefined\n                    ? textElement.textReservesSpace\n                    : technique.iconReserveSpace !== false;\n\n            textElement.poiInfo = {\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                shieldGroupIndex,\n                textElement,\n                textIsOptional,\n                iconIsOptional,\n                renderTextDuringMovements,\n                mayOverlap: iconMayOverlap,\n                reserveSpace: iconReserveSpace,\n                featureId,\n                iconMinZoomLevel: technique.iconMinZoomLevel,\n                iconMaxZoomLevel: technique.iconMaxZoomLevel,\n                textMinZoomLevel: technique.textMinZoomLevel,\n                textMaxZoomLevel: technique.textMaxZoomLevel\n            };\n            textElement.updateMinMaxZoomLevelsFromPoiInfo();\n        } else {\n            // Select the smaller/larger one of the two min/max values, because the TextElement\n            // is a container for both.\n            if (textElement.minZoomLevel === undefined) {\n                textElement.minZoomLevel = technique.textMinZoomLevel;\n            }\n\n            if (textElement.maxZoomLevel === undefined) {\n                textElement.maxZoomLevel = technique.textMaxZoomLevel;\n            }\n        }\n\n        textElement.distanceScale =\n            technique.distanceScale !== undefined\n                ? technique.distanceScale\n                : DEFAULT_TEXT_DISTANCE_SCALE;\n\n        return textElement;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    PoiStackMode,\n    PoiTableDef,\n    PoiTableEntryDef,\n    PoiTableRef,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { MapView } from \"../MapView\";\n\nconst logger = LoggerManager.instance.create(\"PoiTable\");\n\n/**\n * Class to store and maintain individual POI information for the [[PoiTable]].\n */\nclass PoiTableEntry implements PoiTableEntryDef {\n    /**\n     * Verify that the JSON description of the POI table entry is valid.\n     *\n     * @param jsonEntry JSON description of the POI table entry.\n     *\n     * @returns `true` if the `jsonEntry` is valid.\n     */\n    static verifyJSON(jsonEntry: PoiTableEntryDef): boolean {\n        let isOK =\n            typeof jsonEntry.name === \"string\" &&\n            jsonEntry.name.length > 0 &&\n            (jsonEntry.altNames === undefined || Array.isArray(jsonEntry.altNames)) &&\n            (jsonEntry.stackMode === undefined ||\n                jsonEntry.stackMode === \"yes\" ||\n                jsonEntry.stackMode === \"no\" ||\n                jsonEntry.stackMode === \"parent\") &&\n            (jsonEntry.visible === undefined || typeof jsonEntry.visible === \"boolean\") &&\n            (jsonEntry.priority === undefined || typeof jsonEntry.priority === \"number\") &&\n            (jsonEntry.iconMinLevel === undefined || typeof jsonEntry.iconMinLevel === \"number\") &&\n            (jsonEntry.iconMaxLevel === undefined || typeof jsonEntry.iconMaxLevel === \"number\") &&\n            (jsonEntry.textMinLevel === undefined || typeof jsonEntry.textMinLevel === \"number\") &&\n            (jsonEntry.textMaxLevel === undefined || typeof jsonEntry.textMaxLevel === \"number\");\n\n        if (isOK && jsonEntry.altNames !== undefined) {\n            const altNames = jsonEntry.altNames as string[];\n            for (const str in altNames) {\n                if (typeof str !== \"string\") {\n                    isOK = false;\n                    break;\n                }\n            }\n        }\n\n        return isOK;\n    }\n\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: PoiStackMode;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n\n    /**\n     * Setup the [[PoiTableEntry]] from the JSON description. It is assumed that the jsonEntry has\n     * been verified with [[PoiTableEntry#verifyJSON]].\n     *\n     * @param jsonEntry JSON description of the POI table entry. Expected to have been verified with\n     *          [[PoiTableEntry#verifyJSON]].\n     */\n    setup(jsonEntry: PoiTableEntryDef) {\n        this.name = jsonEntry.name;\n        this.altNames = jsonEntry.altNames;\n        this.iconName = jsonEntry.iconName;\n        this.visible = jsonEntry.visible;\n        this.priority = jsonEntry.priority;\n        this.iconMinLevel = jsonEntry.iconMinLevel;\n        this.iconMaxLevel = jsonEntry.iconMaxLevel;\n        this.textMinLevel = jsonEntry.textMinLevel;\n        this.textMaxLevel = jsonEntry.textMaxLevel;\n\n        switch (jsonEntry.stackMode) {\n            case \"yes\":\n                this.stackMode = PoiStackMode.Show;\n                break;\n            case \"no\":\n                this.stackMode = PoiStackMode.Hide;\n                break;\n            case \"parent\":\n                this.stackMode = PoiStackMode.ShowParent;\n                break;\n            default:\n        }\n    }\n}\n\n/**\n * The `PoiTable` stores individual information for each POI type. If a [[TextElement]] has a\n * reference to a PoiTable (if TextElement.poiInfo.poiTableName is set), information for the\n * TextElement and its icon are read from the PoiTable.\n *\n * The key to look up the POI is taken from the data, in case of OSM data with TileZen data, the\n * `poiNameField` is set to `kind`, which makes the content of the field `kind` in the data the key\n * to look up the POIs in the [[PoiTable]].\n *\n * On the side of the [[PoiTable]], the key to look up the PoiTableEntry is either the property\n * \"name\" of the [[PoiTableEntry]] (which should be unique), or the alternative list of names\n * `altNames`, where each value should also be unique. If the property `useAltNamesForKey` is set to\n * `true`, the `altNames` will be used.\n */\nexport class PoiTable {\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    private readonly poiList: PoiTableEntry[] = new Array();\n    /**\n     * Dictionary to look up for [[PoiTableEntry]] quickly. The dictionary is either created for\n     * the `name` property of the [[PoiTableEntry]], which will identify POI, or for all of\n     * alternative the names defined in `altNames` of [[PoiTableEntry]] JSON object.\n     * Value assigned to key it is the index to [[poiList]] array which contain actual\n     * [[PoiTabelEntry]] objects.\n     */\n    private readonly poiDict: Map<string, number> = new Map();\n    private m_isLoading = false;\n    private m_loadedOk: boolean | undefined = undefined;\n\n    /**\n     * Creates an instance of PoiTable.\n     *\n     * @param {string} name Name of the `PoiTable`. Must be unique.\n     * @param {boolean} useAltNamesForKey Pass `true` to use the contents of the property `altNames`\n     *          to find a [[PoiTableEntry]] in the table.\n     */\n    constructor(readonly name: string, readonly useAltNamesForKey: boolean) {}\n\n    /**\n     * Returns `true` if the table is currently being loaded, `false` otherwise.\n     *\n     * @readonly\n     */\n    get isLoading(): boolean {\n        return this.m_isLoading;\n    }\n\n    /**\n     * Returns `true` if the table has been loaded correctly, `false` otherwise.\n     *\n     * @readonly\n     */\n    get loadedOk(): boolean {\n        return this.m_loadedOk === true;\n    }\n\n    /**\n     * Gets [[PoiTableEntry]] for poi name specified.\n     *\n     * @param poiName poi name or one of its alternative names if [[useAltNamesForKey]] is\n     * set to `true`.\n     * @returns [[PoiTableEntry]] object or undefined if name was not found in dictionary.\n     */\n    getEntry(poiName: string): PoiTableEntry | undefined {\n        const entryIdx: number | undefined = this.poiDict.get(poiName);\n        if (entryIdx !== undefined) {\n            if (entryIdx < this.poiList.length) {\n                return this.poiList[entryIdx];\n            } else {\n                throw new Error(\"Poi table entry index out of stored list!\");\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Start to load the PoiTable from the specified URL. Can only be called once per table.\n     *\n     * @param {string} poiTableUrl URL that points to the JSON file.\n     *\n     * @returns {Promise<boolean>} Promise is being resolved once the JSON file has been fetched and\n     *          the `PoiTable` has been set up.\n     */\n    async load(poiTableUrl: string): Promise<boolean> {\n        if (this.m_loadedOk !== undefined) {\n            // Only load once.\n            return true;\n        }\n\n        this.m_loadedOk = false;\n\n        const response = await fetch(poiTableUrl);\n\n        if (!response.ok) {\n            throw new Error(\n                `load: Cannot load POI table at ${poiTableUrl}:` + ` ${response.statusText}`\n            );\n        }\n\n        const jsonPoiTable = (await response.json()) as PoiTableDef;\n        if (jsonPoiTable === undefined) {\n            logger.info(`load: TextureAtlas empty: ${poiTableUrl}`);\n            return true;\n        }\n\n        this.startLoading();\n\n        try {\n            logger.debug(`load: Loading POI table '${poiTableUrl}' for table '${this.name}'`);\n\n            if (jsonPoiTable.poiList !== undefined && Array.isArray(jsonPoiTable.poiList)) {\n                for (const tableEntry of jsonPoiTable.poiList) {\n                    if (PoiTableEntry.verifyJSON(tableEntry)) {\n                        const newPoiEntry = new PoiTableEntry();\n                        newPoiEntry.setup(tableEntry);\n                        const entryIdx = this.poiList.push(newPoiEntry) - 1;\n\n                        if (!this.useAltNamesForKey) {\n                            // Use actual name of entry as the key\n                            if (newPoiEntry.name === undefined) {\n                                logger.warn(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `. No name set in entry: ${tableEntry}.`\n                                );\n                            } else {\n                                this.poiDict.set(newPoiEntry.name, entryIdx);\n                            }\n                        } else {\n                            if (\n                                newPoiEntry.altNames !== undefined &&\n                                newPoiEntry.altNames.length > 0\n                            ) {\n                                // Use the list of alternative names as keys.\n                                for (const altName of newPoiEntry.altNames) {\n                                    this.poiDict.set(altName, entryIdx);\n                                }\n                            } else {\n                                logger.warn(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `No alternative names set in entry: ${JSON.stringify(\n                                            tableEntry\n                                        )}.`\n                                );\n                            }\n                        }\n                    } else {\n                        logger.warn(\n                            `load: Invalid entry in POI table '${poiTableUrl}' : ${JSON.stringify(\n                                tableEntry\n                            )}`\n                        );\n                    }\n                }\n            }\n            this.m_loadedOk = true;\n            this.finishedLoading();\n        } catch (ex) {\n            logger.error(`load: Failed to load POI table ` + `'${poiTableUrl}' : ${ex}`);\n            this.m_loadedOk = false;\n            this.finishedLoading();\n            return false;\n        }\n        return true;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishedLoading() {\n        this.m_isLoading = false;\n    }\n}\n\n/**\n * The `PoiTableManager` manages the list of [[PoiTables]] that can be defined in the [[Theme]]\n * file.\n */\nexport class PoiTableManager {\n    private m_isLoading = false;\n    private m_poiTables: Map<string, PoiTable> = new Map();\n\n    /**\n     * Creates an instance of PoiTableManager.\n     * @param {MapView} mapView Owning [[MapView]].\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Load the [[PoiTable]]s that are stored in the [[MapView]]s [[Theme]]. Note that duplicate\n     * names of [[PoiTable]]s in the [[Theme]] will lead to inaccessible [[PoiTable]]s.\n     *\n     * @param {Theme} theme [[Theme]] containing all [[PoiTable]]s to load.\n     *\n     * @returns {Promise<void>} Resolved once all the [[PoiTable]]s in the [[Theme]] have been\n     *          loaded.\n     */\n    async loadPoiTables(theme: Theme): Promise<void> {\n        const finished = new Promise<void>(resolve => {\n            this.clear();\n\n            // Add the POI tables defined in the theme.\n            if (theme.poiTables !== undefined) {\n                this.startLoading();\n\n                // Gather promises to signal the success of having loaded them all\n                const loadPromises: Array<Promise<boolean>> = new Array();\n\n                theme.poiTables.forEach((poiTableRef: PoiTableRef) => {\n                    if (\n                        poiTableRef !== undefined &&\n                        poiTableRef.name !== undefined &&\n                        typeof poiTableRef.name === \"string\"\n                    ) {\n                        const poiTable = new PoiTable(\n                            poiTableRef.name,\n                            poiTableRef.useAltNamesForKey !== false\n                        );\n                        if (poiTableRef.url !== undefined && typeof poiTableRef.url === \"string\") {\n                            this.addTable(poiTable);\n                            loadPromises.push(poiTable.load(poiTableRef.url));\n                        } else {\n                            logger.error(`POI table definition has no valid url: ${poiTableRef}`);\n                        }\n                    } else {\n                        logger.error(`POI table definition has no valid name: ${poiTableRef}`);\n                    }\n                });\n\n                if (loadPromises.length > 0) {\n                    Promise.all(loadPromises).finally(() => {\n                        this.finishLoading();\n                        resolve();\n                    });\n                } else {\n                    this.finishLoading();\n                    resolve();\n                }\n            } else {\n                this.finishLoading();\n                resolve();\n            }\n        });\n\n        return finished;\n    }\n\n    /**\n     * Clear the list of [[PoiTable]]s.\n     */\n    clear() {\n        this.m_poiTables = new Map();\n    }\n\n    /**\n     * Return the map of [[PoiTable]]s.\n     */\n    get poiTables(): Map<string, PoiTable> {\n        return this.m_poiTables;\n    }\n\n    /**\n     * Manually add a [[PoiTable]]. Normally, the [[PoiTables]]s are specified in the [[Theme]].\n     * Ensure that the name is unique.\n     */\n    addTable(poiTable: PoiTable) {\n        this.m_poiTables.set(poiTable.name, poiTable);\n    }\n\n    /**\n     * Retrieve a [[PoiTable]] by name.\n     *\n     * @param {(string | undefined)} poiTableName Name of the [[PoiTable]].\n     *\n     * @returns {(PoiTable | undefined)} The found [[poiTable]] if it could be found, `undefined`\n     *          otherwise.\n     */\n    getPoiTable(poiTableName: string | undefined): PoiTable | undefined {\n        return poiTableName === undefined ? undefined : this.m_poiTables.get(poiTableName);\n    }\n\n    /**\n     * Return `true` if the [[PoiTable]]s have finished loading.\n     *\n     * @readonly\n     */\n    get finishedLoading(): boolean {\n        return !this.m_isLoading;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishLoading() {\n        this.m_isLoading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { Definitions, StyleSet, Theme } from \"@here/harp-datasource-protocol\";\nimport { MapEnv, StyleSetEvaluator } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    GeoCoordinates,\n    MathUtils,\n    MercatorConstants,\n    polarTilingScheme,\n    TileKey,\n    TilingScheme,\n    TransverseMercatorUtils\n} from \"@here/harp-geoutils\";\n\nimport { DataSource } from \"./DataSource\";\nimport { createMaterial } from \"./DecodedTileHelpers\";\nimport { Tile } from \"./Tile\";\n\nexport interface PolarTileDataSourceOptions {\n    /**\n     * Name of [[TileDataSource]], must be unique.\n     */\n    name?: string;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    styleSetName?: string;\n\n    /**\n     * Optional minimum zoom level (storage level) for [[Tile]]s. Default is 1.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Optional maximum zoom level (storage level) for [[Tile]]s. Default is 20.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -1.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * Optional level offset of regular tiles from reference datasource to align tiles to.\n     * Default is -1.\n     */\n    geometryLevelOffset?: number;\n\n    /**\n     * Enable debug display for generated tiles.\n     * Default is false.\n     */\n    debugTiles?: boolean;\n}\n\n/**\n * [[DataSource]] providing geometry for poles\n */\nexport class PolarTileDataSource extends DataSource {\n    private m_tilingScheme: TilingScheme = polarTilingScheme;\n    private m_maxLatitude = MathUtils.radToDeg(MercatorConstants.MAXIMUM_LATITUDE);\n    private m_geometryLevelOffset: number;\n    private m_debugTiles: boolean;\n\n    private m_styleSetEvaluator?: StyleSetEvaluator;\n    private m_northPoleMaterial?: THREE.Material;\n    private m_southPoleMaterial?: THREE.Material;\n\n    constructor({\n        name = \"polar\",\n        styleSetName,\n        minZoomLevel,\n        maxZoomLevel,\n        storageLevelOffset = -2,\n        geometryLevelOffset = -1,\n        debugTiles = false\n    }: PolarTileDataSourceOptions) {\n        super(name, styleSetName, minZoomLevel, maxZoomLevel, storageLevelOffset);\n\n        this.m_geometryLevelOffset = geometryLevelOffset;\n        this.m_debugTiles = debugTiles;\n        this.cacheable = false;\n    }\n\n    /** @override */\n    dispose() {\n        if (this.m_northPoleMaterial) {\n            this.m_northPoleMaterial.dispose();\n            delete this.m_northPoleMaterial;\n        }\n        if (this.m_southPoleMaterial) {\n            this.m_southPoleMaterial.dispose();\n            delete this.m_southPoleMaterial;\n        }\n        if (this.m_styleSetEvaluator) {\n            delete this.m_styleSetEvaluator;\n        }\n    }\n\n    createMaterial(kind: string, styleSetEvaluator: StyleSetEvaluator): THREE.Material | undefined {\n        const env = new MapEnv({\n            $geometryType: \"polygon\",\n            $layer: \"earth\",\n            kind\n        });\n\n        const techniques = styleSetEvaluator.getMatchingTechniques(env);\n\n        return techniques.length !== 0\n            ? createMaterial({ technique: techniques[0], level: 1 })\n            : undefined;\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.dispose();\n\n        if (styleSet !== undefined) {\n            this.m_styleSetEvaluator = new StyleSetEvaluator(styleSet, definitions);\n\n            this.m_northPoleMaterial = this.createMaterial(\"north_pole\", this.m_styleSetEvaluator);\n            this.m_southPoleMaterial = this.createMaterial(\"south_pole\", this.m_styleSetEvaluator);\n        }\n\n        this.mapView.markTilesDirty(this);\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            (this.styleSetName !== undefined && theme.styles && theme.styles[this.styleSetName]) ||\n            [];\n\n        this.setStyleSet(styleSet, theme.definitions, languages);\n    }\n\n    /** @override */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel !== tileKey.level || tileKey.level < 1) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel <= tileKey.level) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile {\n        const tile = new Tile(this, tileKey);\n\n        this.createTileGeometry(tile);\n\n        return tile;\n    }\n\n    get geometryLevelOffset(): number {\n        return this.m_geometryLevelOffset;\n    }\n\n    set geometryLevelOffset(geometryLevelOffset: number) {\n        this.m_geometryLevelOffset = geometryLevelOffset;\n    }\n\n    private intersectEdge(latitude: number, a: GeoCoordinates, b: GeoCoordinates): GeoCoordinates {\n        const latA = a.latitude;\n        const latB = b.latitude;\n\n        let lonA = a.longitude;\n        let lonB = b.longitude;\n\n        if (Math.abs(latA) === 90) {\n            lonA = lonB;\n        }\n        if (Math.abs(latB) === 90) {\n            lonB = lonA;\n        }\n        const deltaLat = latB - latA;\n        const deltaLon = lonB - lonA;\n        const scale = (latitude - latA) / deltaLat;\n\n        return new GeoCoordinates(latitude, lonA + deltaLon * scale, 0);\n    }\n\n    private createTileGeometry(tile: Tile): void {\n        const { north, south } = tile.geoBox;\n\n        const isNorthPole = north > 0 && south >= 0;\n        const material = isNorthPole ? this.m_northPoleMaterial : this.m_southPoleMaterial;\n        if (material === undefined) {\n            tile.forceHasGeometry(true);\n            return;\n        }\n\n        const srcProjection = this.m_tilingScheme.projection;\n        const dstProjection = this.projection;\n\n        const maxLat = this.m_maxLatitude;\n        const poleLat = isNorthPole ? maxLat : -maxLat;\n\n        const box = this.m_tilingScheme.boundingBoxGenerator.getWorldBox(tile.tileKey);\n\n        const pBL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.min.y, 0));\n        const pBR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.min.y, 0));\n        const pTR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.max.y, 0));\n        const pTL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.max.y, 0));\n\n        let points: GeoCoordinates[];\n        let needsGeometryCut = false;\n\n        // special case where tile contains half of the hemisphere\n        if (tile.tileKey.level === 1) {\n            const isLeftHalf = box.min.x === 0;\n\n            const poleX = isLeftHalf ? box.max.x : box.min.x;\n            const poleY = (box.max.y + box.min.y) / 2;\n            const pPole = srcProjection.unprojectPoint(new THREE.Vector3(poleX, poleY, 0));\n\n            // coordinates are not used, needed for right position\n            const pXX = isLeftHalf ? pBL : pBR;\n\n            points = isNorthPole\n                ? isLeftHalf\n                    ? [pPole, pTR, pXX, pBR]\n                    : [pPole, pBL, pXX, pTL]\n                : isLeftHalf\n                ? [pPole, pBR, pXX, pTR]\n                : [pPole, pTL, pXX, pBL];\n\n            needsGeometryCut = true;\n        } else {\n            // ccw for north, cw for south\n            points = isNorthPole ? [pBL, pBR, pTR, pTL] : [pBL, pTL, pTR, pBR];\n\n            const lats = points.map(p => p.latitude);\n            const lmax = Math.max(...lats);\n            const lmin = Math.min(...lats);\n\n            const isAllPointsOut = isNorthPole ? lmax < poleLat : lmin > poleLat;\n            if (isAllPointsOut) {\n                return;\n            }\n\n            const isSomePointsOut = isNorthPole ? lmin < poleLat : lmax > poleLat;\n            needsGeometryCut = isSomePointsOut;\n\n            if (needsGeometryCut) {\n                const nearest = lats.indexOf(isNorthPole ? lmax : lmin);\n                if (nearest !== 0) {\n                    for (let i = 0; i < nearest; i++) {\n                        points.push(points.shift() as GeoCoordinates);\n                    }\n                }\n            }\n        }\n\n        if (needsGeometryCut) {\n            const centerX = (box.min.x + box.max.x) / 2;\n            const centerY = (box.min.y + box.max.y) / 2;\n            const center = srcProjection.unprojectPoint(new THREE.Vector3(centerX, centerY, 0));\n\n            TransverseMercatorUtils.alignLongitude(points, center);\n\n            // points aligned as follows:\n            // a - nearest to the pole, always in\n            // b - next to nearest\n            // c - farthes from the pole, always out\n            // d - prev from nearest\n            const a = points[0];\n            const b = points[1];\n            const c = points[2];\n            const d = points[3];\n\n            const inPointB = Math.abs(b.latitude) >= maxLat;\n            const inPointD = Math.abs(d.latitude) >= maxLat;\n\n            const cutStart = inPointB\n                ? this.intersectEdge(poleLat, b, c)\n                : this.intersectEdge(poleLat, a, b);\n\n            const cutEnd = inPointD\n                ? this.intersectEdge(poleLat, d, c)\n                : this.intersectEdge(poleLat, a, d);\n\n            points.splice(inPointB ? 2 : 1, 4, cutStart);\n\n            const level = tile.tileKey.level - this.storageLevelOffset + this.m_geometryLevelOffset;\n            // tslint:disable-next-line:no-bitwise\n            const subdivisions = 1 << Math.max(0, level);\n            const step = 360 / subdivisions;\n\n            const cutIndexStart = Math.floor((cutStart.longitude + 180) / step);\n            const cutIndexEnd = Math.ceil((cutEnd.longitude + 180) / step);\n\n            for (let i = cutIndexStart + 1; i < cutIndexEnd; i++) {\n                points.push(new GeoCoordinates(poleLat, i * step - 180, 0));\n            }\n\n            points.push(cutEnd);\n            if (inPointD) {\n                points.push(d);\n            }\n        }\n\n        const g = new THREE.Geometry();\n\n        for (const point of points) {\n            const projected = dstProjection.projectPoint(point, new THREE.Vector3());\n            g.vertices.push(projected.sub(tile.center));\n        }\n\n        for (let i = 1; i < points.length - 1; i++) {\n            g.faces.push(isNorthPole ? new THREE.Face3(0, i, i + 1) : new THREE.Face3(0, i + 1, i));\n        }\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.fromGeometry(g);\n        g.dispose();\n\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.userData = {\n            dataSource: this.name,\n            tileKey: tile.tileKey\n        };\n\n        if (this.m_debugTiles) {\n            const color = Math.round(Math.abs(Math.sin(11 * tile.tileKey.mortonCode())) * 0xffffff);\n            mesh.material = new THREE.MeshBasicMaterial({ color, transparent: true, opacity: 0.5 });\n\n            tile.objects.push(\n                new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color, wireframe: true }))\n            );\n        }\n\n        tile.objects.push(mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky } from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { CubeTexture, CubeTextureLoader, Texture } from \"three\";\n\nconst logger = LoggerManager.instance.create(\"SkyCubemapTexture\");\n\n/**\n * Number of faces that form a [[SkyCubemapTexture]].\n */\nexport const SKY_CUBEMAP_FACE_COUNT = 6;\n\n/**\n * Maps the faceId to the expected position in the threejs faces array.\n */\nexport enum SkyCubemapFaceId {\n    \"positiveX\",\n    \"negativeX\",\n    \"positiveY\",\n    \"negativeY\",\n    \"positiveZ\",\n    \"negativeZ\"\n}\n\n/**\n * Class that handles loading all 6 faces of a [[CubeTexture]], to be used with [[SkyBackground]].\n */\nexport class SkyCubemapTexture {\n    private m_skybox: CubeTexture;\n\n    /**\n     * Constructs a new `SkyCubemapTexture`.\n     *\n     * @param sky Initial [[CubemapSky]] configuration.\n     */\n    constructor(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        this.m_skybox =\n            faces !== undefined ? new CubeTextureLoader().load(faces) : new CubeTexture();\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skybox.dispose();\n    }\n\n    /**\n     * `SkyCubemapTexture`'s texture resource.\n     */\n    get texture(): Texture {\n        return this.m_skybox;\n    }\n\n    /**\n     * Updates the `SkyCubemapTexture` with new parameters.\n     *\n     * @param params New [[CubemapSky]] configuration.\n     */\n    updateTexture(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        if (faces === undefined) {\n            return;\n        }\n        this.m_skybox = new CubeTextureLoader().load(faces);\n    }\n\n    private createCubemapFaceArray(sky: CubemapSky): string[] | undefined {\n        const faces: Array<string | undefined> = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined\n        ];\n        for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n            const face: string | undefined = (sky as any)[SkyCubemapFaceId[i]];\n            if (face === undefined) {\n                logger.error(`Face \"${SkyCubemapFaceId[i]}\" was not defined.`);\n                return;\n            }\n            faces[i] = face;\n        }\n\n        return faces as string[];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"@here/harp-datasource-protocol\";\nimport {\n    Definitions,\n    isActualSelectorDefinition,\n    isBoxedDefinition,\n    isJsonExprReference,\n    isLiteralDefinition,\n    ResolvedStyleDeclaration,\n    ResolvedStyleSet,\n    StyleDeclaration,\n    StyleSet,\n    Theme\n} from \"@here/harp-datasource-protocol/lib/Theme\";\nimport {\n    cloneDeep,\n    composeUriResolvers,\n    ContextLogger,\n    getAppBaseUrl,\n    getOptionValue,\n    IContextLogger,\n    ISimpleChannel,\n    RelativeUriResolver,\n    resolveReferenceUri,\n    UriResolver\n} from \"@here/harp-utils\";\nimport { SKY_CUBEMAP_FACE_COUNT, SkyCubemapFaceId } from \"./SkyCubemapTexture\";\n\nimport \"@here/harp-fetch\";\n\nexport const DEFAULT_MAX_THEME_INTHERITANCE_DEPTH = 4;\n\n/**\n * Options to customize [[Theme]] loading process.\n *\n * @see [[ThemeLoader.load]]\n */\nexport interface ThemeLoadOptions {\n    /**\n     * Whether to resolve `ref` expressions in `definition` and `styles` elements.\n     *\n     * @default `false`, as datasources resolve definitions in [[StyleSetEvaluator]].\n     */\n    resolveDefinitions?: boolean;\n\n    /**\n     * An `AbortSignal` object instance; allows you to communicate with a loading process\n     * (including fetch requests) request and abort it if desired via an `AbortController`.\n     *\n     * Modeled after Web APIs `fetch`s `init.signal`.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n     */\n    signal?: AbortSignal;\n\n    /**\n     * Maximum recursion depth when resolving base themes through [[[Theme]]s `extends` property.\n     *\n     * @default [[DEFAULT_MAX_THEME_INTHERITANCE_DEPTH]]\n     */\n    maxInheritanceDepth?: number;\n\n    /**\n     * Custom logging channel on which diagnostics and warnings will be reported.\n     *\n     * If not specified, [[ThemeLoader.load]] will log to `console`.\n     */\n    logger?: ISimpleChannel;\n\n    /**\n     * Resolve asset `URI`s referenced in `Theme` assets using this resolver.\n     */\n    uriResolver?: UriResolver;\n}\n\n/**\n * Loads and validates a theme from URL objects.\n */\nexport class ThemeLoader {\n    /**\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a\n     * JSON-encoded theme.\n     *\n     * By default, resolves following features of theme:\n     *\n     *  -  `extends` - loads and merges all inherited themes (see [[resolveBaseTheme]])\n     *  -  `ref` - resolves all `ref` instances to their values defined in `definitions` section\n     *     of theme (see [[resolveThemeReferences]])\n     *\n     * Relative URIs of reference resources are resolved to full URL using the document's base URL\n     * (see [[resolveUrls]]).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with by\n     * providing [[UriResolver]] using [[ThemeLoadOptions.uriResolver]] option.\n     *\n     * @param theme [[Theme]] instance or theme URL to the theme.\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    static async load(theme: string | Theme, options?: ThemeLoadOptions): Promise<Theme> {\n        options = options || {};\n        if (typeof theme === \"string\") {\n            const uriResolver = options.uriResolver;\n            const themeUrl = uriResolver !== undefined ? uriResolver.resolveUri(theme) : theme;\n\n            const response = await fetch(themeUrl, { signal: options.signal });\n            if (!response.ok) {\n                throw new Error(`ThemeLoader#load: cannot load theme: ${response.statusText}`);\n            }\n            theme = (await response.json()) as Theme;\n            theme.url = resolveReferenceUri(getAppBaseUrl(), themeUrl);\n            theme = this.resolveUrls(theme, uriResolver);\n        } else if (theme.url === undefined) {\n            // assume that theme url is same as baseUrl\n            theme.url = getAppBaseUrl();\n            theme = this.resolveUrls(theme, options.uriResolver);\n        }\n\n        if (theme === null || theme === undefined) {\n            throw new Error(\"ThemeLoader#load: loaded resource is not valid JSON\");\n        }\n        theme = theme as Theme;\n\n        ThemeLoader.checkTechniqueSupport(theme);\n\n        const resolveDefinitions = getOptionValue<boolean>(options.resolveDefinitions, false);\n        theme = await ThemeLoader.resolveBaseThemes(theme, options);\n        if (resolveDefinitions) {\n            const contextLoader = new ContextLogger(\n                options.logger || console,\n                `when processing Theme ${theme.url}:`\n            );\n            ThemeLoader.resolveThemeReferences(theme, contextLoader);\n        }\n        return theme;\n    }\n\n    /**\n     * Checks if `theme` instance is completely loaded, meaning that `extends` property is resolved.\n     *\n     * @param theme\n     */\n    static isThemeLoaded(theme: Theme): boolean {\n        return theme.extends === undefined;\n    }\n\n    /**\n     * @deprecated Please use `ThemeLoader.load`\n     *\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a JSON-encoded\n     * theme.\n     *\n     * @param themeUrl The URL to the theme.\n     *\n     */\n    static async loadAsync(themeUrl: string): Promise<Theme> {\n        return ThemeLoader.load(themeUrl);\n    }\n\n    /**\n     * Resolves all [[Theme]]'s relatives URLs to full URL using the [[Theme]]'s URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * This method mutates original `theme` instance.\n     *\n     * @param theme The [[Theme]] to resolve.\n     */\n    static resolveUrls(theme: Theme, uriResolver?: UriResolver): Theme {\n        // Ensure that all resources referenced in theme by relative URIs are in fact relative to\n        // theme.\n        if (theme.url === undefined) {\n            return theme;\n        }\n\n        const childUrlResolver = composeUriResolvers(\n            uriResolver,\n            new RelativeUriResolver(theme.url)\n        );\n\n        if (theme.extends) {\n            theme.extends = (Array.isArray(theme.extends) ? theme.extends : [theme.extends]).map(\n                baseTheme => {\n                    if (typeof baseTheme === \"string\") {\n                        return childUrlResolver.resolveUri(baseTheme);\n                    } else {\n                        if (baseTheme.url !== undefined) {\n                            return baseTheme;\n                        } else {\n                            baseTheme.url = theme.url;\n                            return this.resolveUrls(baseTheme, uriResolver);\n                        }\n                    }\n                }\n            );\n        }\n\n        if (theme.sky && theme.sky.type === \"cubemap\") {\n            for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n                const faceUrl: string | undefined = (theme.sky as any)[SkyCubemapFaceId[i]];\n                if (faceUrl !== undefined) {\n                    (theme.sky as any)[SkyCubemapFaceId[i]] = childUrlResolver.resolveUri(faceUrl);\n                }\n            }\n        }\n        if (theme.images) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                image.url = childUrlResolver.resolveUri(image.url);\n\n                if (image.atlas !== undefined) {\n                    image.atlas = childUrlResolver.resolveUri(image.atlas);\n                }\n            }\n        }\n        if (theme.fontCatalogs) {\n            for (const font of theme.fontCatalogs) {\n                font.url = childUrlResolver.resolveUri(font.url);\n            }\n        }\n        if (theme.poiTables) {\n            for (const poiTable of theme.poiTables) {\n                poiTable.url = childUrlResolver.resolveUri(poiTable.url);\n            }\n        }\n\n        if (theme.styles) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                const styleSet = theme.styles[styleSetName] as ResolvedStyleDeclaration[];\n                for (const style of styleSet) {\n                    if (!style.attr) {\n                        continue;\n                    }\n                    [\"map\", \"normalMap\", \"displacementMap\", \"roughnessMap\"].forEach(\n                        texturePropertyName => {\n                            const textureProperty = (style.attr! as any)[texturePropertyName];\n                            if (textureProperty && typeof textureProperty === \"string\") {\n                                (style.attr! as any)[\n                                    texturePropertyName\n                                ] = childUrlResolver.resolveUri(textureProperty);\n                            }\n                        }\n                    );\n                }\n            }\n        }\n        return theme;\n    }\n\n    static checkTechniqueSupport(theme: Theme) {\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                for (const style of theme.styles[styleSetName]) {\n                    switch ((style as any).technique) {\n                        // TODO: Re-enable this once \"dashed-line\" is deprecated.\n                        /* case \"dashed-line\":\n                            console.warn(\n                                `Using deprecated \"dashed-line\" technique.\n                                Use \"solid-line\" technique instead`\n                            ); */\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Expand all `ref` expressions in [[Theme]] basing on `definitions`.\n     *\n     * This method mutates original `theme` instance.\n     */\n    static resolveThemeReferences(theme: Theme, contextLogger: IContextLogger): Theme {\n        if (theme.definitions !== undefined) {\n            contextLogger.pushAttr(\"definitions\");\n            /**\n             * First, try to resolve all internal references in definitions, so if we may save few\n             * CPU cycles if some definition is used many times in actual style sets.\n             */\n            for (const definitionName in theme.definitions) {\n                if (!theme.definitions.hasOwnProperty(definitionName)) {\n                    continue;\n                }\n\n                const def = theme.definitions[definitionName];\n                if (isActualSelectorDefinition(def)) {\n                    contextLogger.pushAttr(definitionName);\n                    const resolvedDef = ThemeLoader.resolveStyle(\n                        def,\n                        theme.definitions,\n                        contextLogger\n                    );\n                    contextLogger.pop();\n                    if (resolvedDef === undefined) {\n                        contextLogger.pushAttr(definitionName);\n                        contextLogger.warn(\"skipping invalid style in definition\");\n                        contextLogger.pop();\n                        delete theme.definitions[definitionName];\n                    } else {\n                        theme.definitions[definitionName] = resolvedDef;\n                    }\n                }\n            }\n            contextLogger.pop();\n        }\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                contextLogger.pushAttr(\"styles\");\n                contextLogger.pushAttr(styleSetName);\n\n                theme.styles[styleSetName] = ThemeLoader.resolveStyleSet(\n                    theme.styles[styleSetName],\n                    theme.definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n                contextLogger.pop();\n            }\n        }\n        return theme;\n    }\n\n    /**\n     * Expand all `ref` in [[StyleSet]] basing on `definitions`.\n     */\n    static resolveStyleSet(\n        styleSet: StyleSet,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleSet {\n        const result: ResolvedStyleSet = [];\n\n        for (let index = 0; index < styleSet.length; ++index) {\n            const currentStyle = styleSet[index];\n            contextLogger.pushIndex(index);\n            const resolvedStyle = ThemeLoader.resolveStyle(\n                currentStyle,\n                definitions,\n                contextLogger\n            );\n            if (resolvedStyle !== undefined) {\n                result.push(resolvedStyle);\n            } else {\n                contextLogger.warn(\"invalid style, ignored\");\n            }\n            contextLogger.pop();\n        }\n        return result;\n    }\n\n    /**\n     * Expand all `ref` in [[Style]] instance basing on `definitions`.\n     */\n    static resolveStyle(\n        style: StyleDeclaration,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleDeclaration | undefined {\n        if (isJsonExprReference(style)) {\n            // expand and instantiate references to style definitions.\n\n            const def = definitions && definitions[style[1]];\n\n            if (!def) {\n                contextLogger.warn(`invalid reference '${style[1]}' - not found`);\n                return undefined;\n            }\n            if (!isActualSelectorDefinition(def)) {\n                contextLogger.warn(`invalid reference '${style[1]}' - expected style definition`);\n                return undefined;\n            }\n\n            // instantiate the style\n            style = cloneDeep(def);\n        }\n        style = style as ResolvedStyleDeclaration;\n\n        if (Array.isArray(style.when)) {\n            contextLogger.pushAttr(\"when\");\n            const resolvedWhen = this.resolveExpressionReferences(\n                style.when,\n                definitions,\n                contextLogger\n            );\n            contextLogger.pop();\n            if (resolvedWhen === undefined) {\n                return undefined;\n            }\n            style.when = resolvedWhen;\n        }\n\n        if (style.attr !== undefined) {\n            const attr = style.attr as any;\n\n            contextLogger.pushAttr(\"attr\");\n            for (const prop in attr) {\n                if (!attr.hasOwnProperty(prop)) {\n                    continue;\n                }\n\n                const value = attr[prop];\n\n                if (!Array.isArray(value)) {\n                    continue; // nothing to do\n                }\n\n                contextLogger.pushAttr(prop);\n                const resolvedValue = this.resolveExpressionReferences(\n                    value,\n                    definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n\n                if (resolvedValue !== undefined) {\n                    attr[prop] = resolvedValue;\n                } else {\n                    delete attr[prop];\n                }\n            }\n            contextLogger.pop();\n        }\n        return style;\n    }\n\n    /**\n     * Resolve `[ref, ...]` in expressions.\n     *\n     * Returns `undefined` some reference was invalid (missing or wrong type).\n     */\n    static resolveExpressionReferences<T>(\n        value: T,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): T | undefined {\n        let failed = false;\n        function resolveInternal(node: any) {\n            if (isJsonExprReference(node)) {\n                const defName = node[1];\n                const def = definitions && definitions[defName];\n                if (def === undefined) {\n                    contextLogger.warn(`invalid reference '${defName}' - not found`);\n                    failed = true;\n                    return undefined;\n                }\n                if (isLiteralDefinition(def) || isJsonExpr(def)) {\n                    return def;\n                }\n                if (isBoxedDefinition(def)) {\n                    return def.value;\n                }\n                contextLogger.warn(`invalid reference '${defName}' - expected value definition`);\n                failed = true;\n                return undefined;\n            } else if (Array.isArray(node)) {\n                const result = [...node];\n                for (let i = 1; i < result.length; ++i) {\n                    result[i] = resolveInternal(result[i]);\n                }\n                return result;\n            } else {\n                return node;\n            }\n        }\n        const r = resolveInternal(value);\n        if (failed) {\n            return undefined;\n        }\n        return r;\n    }\n\n    /**\n     * Realize `extends` clause by merging `theme` with its base [[Theme]].\n     *\n     * @param theme [Theme] object\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    static async resolveBaseThemes(theme: Theme, options?: ThemeLoadOptions): Promise<Theme> {\n        options = options || {};\n        if (theme.extends === undefined) {\n            return theme;\n        }\n\n        const maxInheritanceDepth = getOptionValue(\n            options.maxInheritanceDepth,\n            DEFAULT_MAX_THEME_INTHERITANCE_DEPTH\n        );\n        if (maxInheritanceDepth <= 0) {\n            throw new Error(`maxInheritanceDepth reached when attempting to load base theme`);\n        }\n\n        const baseThemes = !Array.isArray(theme.extends) ? [theme.extends] : theme.extends;\n        delete theme.extends;\n        let baseThemesMerged: Theme = {};\n        for (const baseTheme of baseThemes) {\n            const actualBaseTheme = await ThemeLoader.load(baseTheme, {\n                ...options,\n                resolveDefinitions: false,\n                maxInheritanceDepth: maxInheritanceDepth - 1\n            });\n\n            baseThemesMerged = ThemeLoader.mergeThemes(actualBaseTheme, baseThemesMerged);\n        }\n        return ThemeLoader.mergeThemes(theme, baseThemesMerged);\n    }\n\n    static mergeThemes(theme: Theme, baseTheme: Theme): Theme {\n        const definitions = { ...baseTheme.definitions, ...theme.definitions };\n        const styles = { ...baseTheme.styles, ...theme.styles };\n        return { ...baseTheme, ...theme, definitions, styles };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport {\n    GeoCoordinates,\n    Projection,\n    TileKey,\n    TileKeyUtils,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { ClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection, TileKeyEntry } from \"./FrustumIntersection\";\nimport { TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { Tile } from \"./Tile\";\nimport { MapViewUtils, TileOffsetUtils } from \"./Utils\";\n\n/**\n * Way the memory consumption of a tile is computed. Either in number of tiles, or in MegaBytes. If\n * it is in MB, an estimation is used.\n */\nexport enum ResourceComputationType {\n    EstimationInMb = 0,\n    NumberOfTiles\n}\n\n/**\n * Limited set of [[MapViewOptions]] used for [[VisibleTileSet]].\n */\nexport interface VisibleTileSetOptions {\n    /**\n     * The projection of the view.\n     */\n    projection: Projection;\n\n    /**\n     * User-defined camera clipping planes evaluator.\n     */\n    clipPlanesEvaluator: ClipPlanesEvaluator;\n\n    /**\n     * Limit of tiles that can be visible per datasource.\n     */\n    maxVisibleDataSourceTiles: number;\n\n    /**\n     * In addition to the simple frustum culling also do additional checks with [[MapTileCuller]].\n     */\n    extendedFrustumCulling: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    tileCacheSize: number;\n\n    /**\n     * Missing Typedoc\n     */\n    resourceComputationType: ResourceComputationType;\n\n    /**\n     * Number of levels to go up when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceUp: number;\n\n    /**\n     * Number of levels to go down when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceDown: number;\n}\n\nconst MB_FACTOR = 1.0 / (1024.0 * 1024.0);\n\ntype TileCacheId = string;\n\n/**\n * Wrapper for LRU cache that encapsulates tiles caching for any [[DataSource]] used.\n *\n * Provides LRU based caching mechanism where each tile is identified by its tile key\n * (morton code) and data source name.\n * Tiles are kept in the cache based on last recently used policy, cached tile may be evicted\n * only when cache reaches full saturation and tile is no longer visible.\n * @note Currently cached entries (tiles) are identified by unique tile code (morton code) and\n * data source name, thus it is required that each [[DataSource]] used should have unique\n * name, but implementation could be improved to omit this limitation.\n */\nclass DataSourceCache {\n    /**\n     * Creates unique tile key for caching based on morton code, tile offset and its data source.\n     *\n     * @param mortonCode The tile morton code.\n     * @param offset The tile offset.\n     * @param dataSource The [[DataSource]] from which tile was loaded.\n     */\n    static getKey(mortonCode: number, offset: number, dataSource: DataSource): TileCacheId {\n        return `${dataSource.name}_${mortonCode}_${offset}`;\n    }\n\n    /**\n     * Create unique tile identifier for caching, based on tile object passed in.\n     *\n     * @param tile The tile for which key is generated.\n     */\n    static getKeyForTile(tile: Tile): TileCacheId {\n        return DataSourceCache.getKey(tile.tileKey.mortonCode(), tile.offset, tile.dataSource);\n    }\n\n    private readonly m_tileCache: LRUCache<TileCacheId, Tile>;\n    private readonly m_disposedTiles: Tile[] = [];\n    private m_resourceComputationType: ResourceComputationType;\n\n    constructor(\n        cacheSize: number,\n        rct: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache = new LRUCache<string, Tile>(cacheSize, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n        this.m_tileCache.evictionCallback = (_, tile) => {\n            if (tile.tileLoader !== undefined) {\n                // Cancel downloads as early as possible.\n                tile.tileLoader.cancel();\n            }\n            this.m_disposedTiles.push(tile);\n        };\n        this.m_tileCache.canEvict = (_, tile) => {\n            // Tiles can be evicted that weren't requested in the last frame.\n            return !tile.isVisible;\n        };\n    }\n\n    /**\n     * Get information how cached tiles affects cache space available.\n     *\n     * The way how cache evaluates the __resources size__ have a big influence on entire\n     * caching mechanism, if [[resourceComputationType]] is set to:\n     * [[ResourceComputationType.EstimationInMb]] then each tiles contributes to cache size\n     * differently depending on the memory consumed, on other side\n     * [[ResourceComputationType.NumberOfTiles]] says each tile occupies single slot in cache,\n     * so its real memory consumed does not matter affect caching behavior. Of course in\n     * the second scenario cache may grow significantly in terms of memory usage and thus it\n     * is out of control.\n     *\n     * @return [[ResourceComputationType]] enum that describes if resources are counted by\n     * space occupied in memory or just by number of them.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Get the cache capacity measured as number if megabytes or number of entries.\n     *\n     * The total cached tiles size determines cache saturation, if it reaches the capacity value\n     * then the resources becomes evicted (released) starting from the oldest (the latest used).\n     *\n     * @see size.\n     * @see resourceComputationType.\n     */\n    get capacity(): number {\n        return this.m_tileCache.capacity;\n    }\n\n    /**\n     * Get total cache size described as number of megabytes consumed or number of tiles stored.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     */\n    get size(): number {\n        return this.m_tileCache.size;\n    }\n\n    /**\n     * Set cache capacity and the algorithm used for cache size calculation.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     * @param size The new capacity declared in megabytes or number of entires.\n     * @param rct The enum value that determines how size and capacity are evaluated.\n     */\n    setCapacity(size: number, rct: ResourceComputationType) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache.setCapacityAndMeasure(size, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n    }\n\n    /**\n     * Get tile cached or __undefined__ if tile is not yet in cache.\n     *\n     * @param mortonCode En unique tile morton code.\n     * @param offset Tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     */\n    get(mortonCode: number, offset: number, dataSource: DataSource): Tile | undefined {\n        return this.m_tileCache.get(DataSourceCache.getKey(mortonCode, offset, dataSource));\n    }\n\n    /**\n     * Add new tile to the cache.\n     *\n     * @param mortonCode En unique tile code (morton code).\n     * @param offset The tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     * @param tile The tile reference.\n     */\n    set(mortonCode: number, offset: number, dataSource: DataSource, tile: Tile) {\n        this.m_tileCache.set(DataSourceCache.getKey(mortonCode, offset, dataSource), tile);\n    }\n\n    /**\n     * Delete tile from cache.\n     *\n     * @note This method will not call eviction callback.\n     * @param tile The tile reference to be removed from cache.\n     */\n    delete(tile: Tile) {\n        const tileKey = DataSourceCache.getKeyForTile(tile);\n        this.deleteByKey(tileKey);\n    }\n\n    /**\n     * Delete tile using its unique identifier.\n     *\n     * @note Tile identifier its constructed using information about tile code (morton code) and its\n     * [[DataSource]].\n     * @note This is explicit removal thus eviction callback will not be processed.\n     * @see DataSourceCache.getKey.\n     * @param tileKey The unique tile identifier.\n     */\n    deleteByKey(tileKey: TileCacheId) {\n        this.m_tileCache.delete(tileKey);\n    }\n\n    /**\n     * Dispose all tiles releasing their internal data.\n     */\n    disposeTiles() {\n        this.m_disposedTiles.forEach(tile => {\n            tile.dispose();\n        });\n\n        this.m_disposedTiles.length = 0;\n    }\n\n    /**\n     * Shrink cache to its allowed capacity.\n     *\n     * This method should be called each time after operations are performed on the cache entries,\n     * in order to keep cache size consistent. It informs caching mechanism to invalidate memory\n     * consumed by its entries and check if cache is overgrown, is such case some tiles will be\n     * evicted.\n     */\n    shrinkToCapacity() {\n        this.m_tileCache.shrinkToCapacity();\n    }\n\n    /**\n     * Evict all cached tiles implicitly even without checking if still in use.\n     */\n    evictAll() {\n        this.m_tileCache.evictAll();\n    }\n\n    /**\n     * Evict selected tiles implicitly.\n     *\n     * @param selector The callback used to determine if tile should be evicted.\n     */\n    evictSelected(selector: (tile: Tile, key: TileCacheId) => boolean) {\n        this.m_tileCache.evictSelected(selector);\n    }\n\n    /**\n     * Call functor (callback) on each tile store in cache.\n     *\n     * Optionally you may specify from which [[DataSource]] tiles should be processed.\n     * This limits the tiles visited to a sub-set originating from single [[DataSource]].\n     * @param callback The function to be called for each visited tile.\n     * @param inDataSource The optional [[DataSource]] to which tiles should belong.\n     */\n    forEach(callback: (tile: Tile, key: TileCacheId) => void, inDataSource?: DataSource): void {\n        this.m_tileCache.forEach((entry: Tile, key: TileCacheId) => {\n            if (inDataSource === undefined || entry.dataSource === inDataSource) {\n                callback(entry, key);\n            }\n        });\n    }\n}\n\n/**\n * List of visible tiles for a [[DataSource]].\n */\nexport interface DataSourceTileList {\n    /**\n     * The datasource that was producing the tiles.\n     */\n    dataSource: DataSource;\n\n    /**\n     * The current [[MapView]] zoom level.\n     */\n    zoomLevel: number;\n\n    /**\n     * The storage level of the visibleTiles.\n     * Note: renderedTiles might contain tiles from different levels.\n     */\n    storageLevel: number;\n\n    /**\n     * True if all [[visibleTiles]] are loaded.\n     */\n    allVisibleTileLoaded: boolean;\n\n    /**\n     * The number of tiles which are still loading.\n     */\n    numTilesLoading: number;\n\n    /**\n     * List of tiles we want to render (i.e. the tiles computed from the zoom level and view\n     * frustum). However some might not be renderable yet (e.g. loading). See [[renderedTiles]] for\n     * the actual list of tiles that the user will see.\n     */\n    visibleTiles: Tile[];\n\n    /**\n     * Map of tiles that will be rendered, key is the the combination of tile key and offset, see\n     * [[getKeyForTileKeyAndOffset]]. This includes tiles that are not in the [[visibleTiles]]\n     * list but that are used as fallbacks b/c they are still in the cache.\n     */\n    renderedTiles: Map<number, Tile>;\n}\n\n/**\n * Manages visible [[Tile]]s for [[MapView]].\n *\n * Responsible for election of rendered tiles:\n *  - quad-tree traversal\n *  - frustum culling\n *  - sorting tiles by relevance (visible area) to prioritize load\n *  - limiting number of visible tiles\n *  - caching tiles\n *  - searching cache to replace visible but yet empty tiles with already loaded siblings in nearby\n *    zoom levels\n */\nexport class VisibleTileSet {\n    dataSourceTileList: DataSourceTileList[] = [];\n    allVisibleTilesLoaded: boolean = false;\n    options: VisibleTileSetOptions;\n\n    private readonly m_projectionMatrixOverride = new THREE.Matrix4();\n    private m_dataSourceCache: DataSourceCache;\n    private m_viewRange: ViewRanges = { near: 0.1, far: Infinity, minimum: 0.1, maximum: Infinity };\n\n    private m_resourceComputationType: ResourceComputationType =\n        ResourceComputationType.EstimationInMb;\n\n    constructor(\n        private readonly m_frustumIntersection: FrustumIntersection,\n        private readonly m_tileGeometryManager: TileGeometryManager,\n        options: VisibleTileSetOptions\n    ) {\n        this.options = options;\n        this.m_resourceComputationType =\n            options.resourceComputationType === undefined\n                ? ResourceComputationType.EstimationInMb\n                : options.resourceComputationType;\n        this.m_dataSourceCache = new DataSourceCache(\n            this.options.tileCacheSize,\n            this.m_resourceComputationType\n        );\n    }\n\n    /**\n     * Returns cache size.\n     */\n    getDataSourceCacheSize(): number {\n        return this.options.tileCacheSize;\n    }\n\n    /**\n     * Sets cache size.\n     *\n     * @param size cache size\n     * @param computationType Optional value specifying the way a [[Tile]]s cache usage is computed,\n     *      either based on size in MB (mega bytes) or in number of tiles. Defaults to\n     *      `ResourceComputationType.EstimationInMb`.\n     */\n    setDataSourceCacheSize(\n        size: number,\n        computationType: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ): void {\n        this.options.tileCacheSize = size;\n        // This effectively invalidates DataSourceCache\n        this.resourceComputationType = computationType;\n    }\n\n    /**\n     * Retrieves maximum number of visible tiles.\n     */\n    getNumberOfVisibleTiles() {\n        return this.options.maxVisibleDataSourceTiles;\n    }\n\n    /**\n     * Sets maximum number of visible tiles.\n     *\n     * @param size size of visible tiles array\n     */\n    setNumberOfVisibleTiles(size: number) {\n        this.options.maxVisibleDataSourceTiles = size;\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Sets the way tile cache is managing its elements.\n     *\n     * Cache may be either keeping number of elements stored or the memory consumed by them.\n     *\n     * @param computationType Type of algorith used in cache for checking full saturation,\n     * may be counting number of elements or memory consumed by them.\n     */\n    set resourceComputationType(computationType: ResourceComputationType) {\n        this.m_resourceComputationType = computationType;\n        this.m_dataSourceCache.setCapacity(this.options.tileCacheSize, computationType);\n    }\n\n    /**\n     * Evaluate frustum near/far clip planes and visibility ranges.\n     */\n    updateClipPlanes(maxElevation?: number, minElevation?: number): ViewRanges {\n        if (maxElevation !== undefined) {\n            this.options.clipPlanesEvaluator.maxElevation = maxElevation;\n        }\n        if (minElevation !== undefined) {\n            this.options.clipPlanesEvaluator.minElevation = minElevation;\n        }\n        this.m_viewRange = this.options.clipPlanesEvaluator.evaluateClipPlanes(\n            this.m_frustumIntersection.mapView\n        );\n        return this.m_viewRange;\n    }\n\n    /**\n     * Calculates a new set of visible tiles.\n     * @param storageLevel The camera storage level, see [[MapView.storageLevel]].\n     * @param zoomLevel The camera zoom level.\n     * @param dataSources The data sources for which the visible tiles will be calculated.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @returns view ranges and their status since last update (changed or not).\n     */\n    updateRenderList(\n        storageLevel: number,\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource?: ElevationRangeSource\n    ): { viewRanges: ViewRanges; viewRangesChanged: boolean } {\n        let allVisibleTilesLoaded: boolean = true;\n\n        const visibleTileKeysResult = this.getVisibleTileKeysForDataSources(\n            zoomLevel,\n            dataSources,\n            elevationRangeSource\n        );\n        this.dataSourceTileList = [];\n        for (const { dataSource, visibleTileKeys } of visibleTileKeysResult.tileKeys) {\n            // Sort by distance to camera, now the tiles that are further away are at the end\n            // of the list.\n            //\n            // Sort is unstable if distance is equal, which happens a lot when looking top-down.\n            // Unstable sorting makes label placement unstable at tile borders, leading to\n            // flickering.\n            visibleTileKeys.sort((a: TileKeyEntry, b: TileKeyEntry) => {\n                const distanceDiff = a.distance - b.distance;\n\n                // Take care or numerical precision issues\n                const minDiff = (a.distance + b.distance) * 0.000001;\n\n                return Math.abs(distanceDiff) < minDiff\n                    ? a.tileKey.mortonCode() - b.tileKey.mortonCode()\n                    : distanceDiff;\n            });\n\n            const actuallyVisibleTiles: Tile[] = [];\n            let allDataSourceTilesLoaded = true;\n            let numTilesLoading = 0;\n            // Create actual tiles only for the allowed number of visible tiles\n            const displayZoomLevel = dataSource.getDisplayZoomLevel(zoomLevel);\n            for (\n                let i = 0;\n                i < visibleTileKeys.length &&\n                actuallyVisibleTiles.length < this.options.maxVisibleDataSourceTiles;\n                i++\n            ) {\n                const tileEntry = visibleTileKeys[i];\n\n                const tile = this.getTile(dataSource, tileEntry.tileKey, tileEntry.offset);\n                if (tile === undefined) {\n                    continue;\n                }\n\n                tile.prepareTileInfo();\n\n                allDataSourceTilesLoaded = allDataSourceTilesLoaded && tile.allGeometryLoaded;\n                if (!tile.allGeometryLoaded) {\n                    numTilesLoading++;\n                } else {\n                    tile.numFramesVisible++;\n\n                    if (tile.frameNumVisible < 0) {\n                        // Store the fist frame the tile became visible.\n                        tile.frameNumVisible = dataSource.mapView.frameNumber;\n                    }\n                }\n                // Update the visible area of the tile. This is used for those tiles that are\n                // currently loaded and are waiting to be decoded to sort the jobs by area.\n                tile.visibleArea = tileEntry.area;\n                tile.minElevation = tileEntry.minElevation;\n                tile.maxElevation = tileEntry.maxElevation;\n\n                actuallyVisibleTiles.push(tile);\n            }\n\n            this.m_tileGeometryManager.updateTiles(actuallyVisibleTiles);\n\n            this.dataSourceTileList.push({\n                dataSource,\n                storageLevel,\n                zoomLevel: displayZoomLevel,\n                allVisibleTileLoaded: allDataSourceTilesLoaded,\n                numTilesLoading,\n                visibleTiles: actuallyVisibleTiles,\n                renderedTiles: new Map<number, Tile>()\n            });\n            allVisibleTilesLoaded = allVisibleTilesLoaded && allDataSourceTilesLoaded;\n        }\n\n        this.allVisibleTilesLoaded =\n            allVisibleTilesLoaded && visibleTileKeysResult.allBoundingBoxesFinal;\n\n        this.fillMissingTilesFromCache();\n\n        this.forEachCachedTile(tile => {\n            // Remove all tiles that are still being loaded, but are no longer visible. They have to\n            // be reloaded when they become visible again. Hopefully, they are still in the browser\n            // cache by then.\n            if (!tile.isVisible && tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                // The internal TileLoader is cancelled automatically when the Tile is disposed.\n                this.disposeTile(tile);\n            }\n        });\n\n        this.m_dataSourceCache.shrinkToCapacity();\n\n        let minElevation: number | undefined;\n        let maxElevation: number | undefined;\n        this.dataSourceTileList.forEach(renderListEntry => {\n            // Calculate min/max elevation from every data source tiles,\n            // data sources without elevationRangeSource will contribute to\n            // values with zero levels for both elevations.\n            const tiles = renderListEntry.renderedTiles;\n            tiles.forEach(tile => {\n                minElevation = MathUtils.min2(minElevation, tile.minElevation);\n                maxElevation = MathUtils.max2(\n                    maxElevation,\n                    tile.maxElevation + tile.maxGeometryHeight\n                );\n            });\n        });\n\n        if (minElevation === undefined) {\n            minElevation = 0;\n        }\n        if (maxElevation === undefined) {\n            maxElevation = 0;\n        }\n        // If clip planes evaluator depends on the tiles elevation re-calculate\n        // frustum planes and update the camera near/far plane distances.\n        let viewRangesChanged: boolean = false;\n        const oldViewRanges = this.m_viewRange;\n        const newViewRanges = this.updateClipPlanes(maxElevation, minElevation);\n        viewRangesChanged = viewRangesEqual(newViewRanges, oldViewRanges) === false;\n\n        return {\n            viewRanges: newViewRanges,\n            viewRangesChanged\n        };\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset, creating it if\n     * necessary.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if it was found or created, undefined otherwise.\n     */\n    getTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        const cacheOnly = false;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the cache.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found in cache, undefined otherwise.\n     */\n    getCachedTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        assert(dataSource.cacheable);\n        const cacheOnly = true;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTile(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        return dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(tileKey, offset)\n        );\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source and location from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param geoPoint The geolocation included within the tile.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTileAtLocation(\n        dataSource: DataSource,\n        geoPoint: GeoCoordinates,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        const tilingScheme = dataSource.getTilingScheme();\n        const visibleLevel = dataSourceVisibleTileList.zoomLevel;\n        const visibleTileKey = tilingScheme.getTileKey(geoPoint, visibleLevel);\n\n        if (!visibleTileKey) {\n            return undefined;\n        }\n\n        let tile = dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(visibleTileKey, offset)\n        );\n\n        if (tile !== undefined) {\n            return tile;\n        }\n\n        const { searchLevelsUp, searchLevelsDown } = this.getCacheSearchLevels(\n            dataSource,\n            visibleLevel\n        );\n\n        let parentTileKey = visibleTileKey;\n        for (let levelOffset = 1; levelOffset <= searchLevelsUp; ++levelOffset) {\n            parentTileKey = parentTileKey.parent();\n\n            tile = dataSourceVisibleTileList.renderedTiles.get(\n                TileOffsetUtils.getKeyForTileKeyAndOffset(parentTileKey, offset)\n            );\n            if (tile !== undefined) {\n                return tile;\n            }\n        }\n\n        const worldPoint = tilingScheme.projection.projectPoint(geoPoint);\n\n        for (let levelOffset = 1; levelOffset <= searchLevelsDown; ++levelOffset) {\n            const childLevel = visibleLevel + levelOffset;\n            const childTileKey = TileKeyUtils.worldCoordinatesToTileKey(\n                tilingScheme,\n                worldPoint,\n                childLevel\n            );\n            if (childTileKey) {\n                tile = dataSourceVisibleTileList.renderedTiles.get(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset)\n                );\n\n                if (tile !== undefined) {\n                    return tile;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Removes all internal bookkeeping entries and cache related to specified datasource.\n     *\n     * Called by [[MapView]] when [[DataSource]] has been removed from [[MapView]].\n     */\n    removeDataSource(dataSource: DataSource) {\n        this.clearTileCache(dataSource);\n        this.dataSourceTileList = this.dataSourceTileList.filter(\n            tileList => tileList.dataSource !== dataSource\n        );\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSource?: DataSource) {\n        if (dataSource !== undefined) {\n            this.m_dataSourceCache.evictSelected((tile: Tile, _) => {\n                return tile.dataSource === dataSource;\n            });\n        } else {\n            this.m_dataSourceCache.evictAll();\n        }\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     *     If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        if (dataSource === undefined) {\n            this.dataSourceTileList.forEach(renderListEntry => {\n                this.markDataSourceTilesDirty(renderListEntry);\n            });\n        } else {\n            const renderListEntry = this.dataSourceTileList.find(e => e.dataSource === dataSource);\n            if (renderListEntry === undefined) {\n                return;\n            }\n            this.markDataSourceTilesDirty(renderListEntry);\n        }\n    }\n\n    /**\n     * Dispose tiles that are marked for removal by [[LRUCache]] algorithm.\n     */\n    disposePendingTiles() {\n        this.m_dataSourceCache.disposeTiles();\n    }\n\n    /**\n     * Process callback function [[fun]] with each visible tile in set.\n     *\n     * @param fun The callback function to be called.\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void): void {\n        for (const listEntry of this.dataSourceTileList) {\n            listEntry.renderedTiles.forEach(fun);\n        }\n    }\n\n    /**\n     * Process callback function [[fun]] with each tile in the cache.\n     *\n     * Optional [[dataSource]] parameter limits processing to the tiles that belongs to\n     * DataSource passed in.\n     *\n     * @param fun The callback function to be called.\n     * @param dataSource The optional DataSource reference for tiles selection.\n     */\n    forEachCachedTile(fun: (tile: Tile) => void, dataSource?: DataSource): void {\n        this.m_dataSourceCache.forEach((tile, _) => fun(tile), dataSource);\n    }\n\n    /**\n     * Dispose a `Tile` from cache, 'dispose()' is also called on the tile to free its resources.\n     */\n    disposeTile(tile: Tile): void {\n        // TODO: Consider using evict here!\n        this.m_dataSourceCache.delete(tile);\n        tile.dispose();\n    }\n\n    private getCacheSearchLevels(\n        dataSource: DataSource,\n        visibleLevel: number\n    ): { searchLevelsUp: number; searchLevelsDown: number } {\n        const searchLevelsUp = Math.min(\n            this.options.quadTreeSearchDistanceUp,\n            Math.max(0, visibleLevel - dataSource.minZoomLevel)\n        );\n        const searchLevelsDown = Math.min(\n            this.options.quadTreeSearchDistanceDown,\n            Math.max(0, dataSource.maxZoomLevel - visibleLevel)\n        );\n\n        return { searchLevelsUp, searchLevelsDown };\n    }\n\n    /**\n     * Search cache to replace visible but yet empty tiles with already loaded siblings in nearby\n     * zoom levels.\n     *\n     * Useful, when zooming in/out and when \"newly elected\" tiles are not yet loaded. Prevents\n     * flickering by rendering already loaded tiles from upper/higher zoom levels.\n     */\n    private fillMissingTilesFromCache() {\n        this.dataSourceTileList.forEach(renderListEntry => {\n            const dataSource = renderListEntry.dataSource;\n            const displayZoomLevel = renderListEntry.zoomLevel;\n            const renderedTiles = renderListEntry.renderedTiles;\n\n            // Direction in quad tree to search: up -> shallower levels, down -> deeper levels.\n            enum SearchDirection {\n                NONE,\n                UP,\n                DOWN,\n                BOTH\n            }\n            let defaultSearchDirection = SearchDirection.NONE;\n\n            const { searchLevelsUp, searchLevelsDown } = this.getCacheSearchLevels(\n                dataSource,\n                displayZoomLevel\n            );\n\n            defaultSearchDirection =\n                searchLevelsDown > 0 && searchLevelsUp > 0\n                    ? SearchDirection.BOTH\n                    : searchLevelsDown > 0\n                    ? SearchDirection.DOWN\n                    : searchLevelsUp > 0\n                    ? SearchDirection.UP\n                    : SearchDirection.NONE;\n\n            const incompleteTiles: Map<number, SearchDirection> = new Map();\n\n            renderListEntry.visibleTiles.forEach(tile => {\n                const tileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    tile.tileKey,\n                    tile.offset\n                );\n                tile.levelOffset = 0;\n                if (tile.hasGeometry || defaultSearchDirection === SearchDirection.NONE) {\n                    renderedTiles.set(tileCode, tile);\n                } else {\n                    // if dataSource supports cache and it was existing before this render\n                    // then enable searching for loaded tiles in cache\n                    incompleteTiles.set(tileCode, defaultSearchDirection);\n                }\n            });\n\n            if (incompleteTiles.size === 0) {\n                // short circuit, nothing to be done\n                return;\n            }\n\n            // Minor optimization for the fallback search, only check parent tiles once, otherwise\n            // the recursive algorithm checks all parent tiles multiple times, the key is the code\n            // of the tile that is checked and the value is whether a parent was found or not.\n            const checkedTiles = new Map<number, boolean>();\n            // Iterate over incomplete (not loaded tiles) and find their parents or children that\n            // are in cache that can be rendered temporarily until tile is loaded. Note, we favour\n            // falling back to parent tiles rather than children.\n            for (const [tileKeyCode, searchDirection] of incompleteTiles) {\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.UP\n                ) {\n                    if (\n                        this.findUp(\n                            tileKeyCode,\n                            displayZoomLevel,\n                            renderedTiles,\n                            checkedTiles,\n                            dataSource\n                        )\n                    ) {\n                        // Continue to next entry so we don't search down.\n                        continue;\n                    }\n                }\n\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.DOWN\n                ) {\n                    this.findDown(tileKeyCode, displayZoomLevel, renderedTiles, dataSource);\n                }\n            }\n        });\n    }\n\n    private findDown(\n        tileKeyCode: number,\n        displayZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        dataSource: DataSource\n    ) {\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(\n            tileKeyCode\n        );\n        const tileKey = TileKey.fromMortonCode(mortonCode);\n\n        const tilingScheme = dataSource.getTilingScheme();\n        for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n            const childTileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset);\n            const childTile = this.m_dataSourceCache.get(\n                childTileKey.mortonCode(),\n                offset,\n                dataSource\n            );\n\n            const nextLevelDiff = Math.abs(childTileKey.level - displayZoomLevel);\n            if (childTile !== undefined && childTile.hasGeometry) {\n                // childTile has geometry, so can be reused as fallback\n                renderedTiles.set(childTileCode, childTile);\n                childTile.levelOffset = nextLevelDiff;\n                continue;\n            }\n\n            // Recurse down until the max distance is reached.\n            if (nextLevelDiff < this.options.quadTreeSearchDistanceDown) {\n                this.findDown(childTileCode, displayZoomLevel, renderedTiles, dataSource);\n            }\n        }\n    }\n\n    /**\n     * Returns true if a tile was found in the cache which is a parent\n     * @param tileKeyCode Morton code of the current tile that should be searched for.\n     * @param displayZoomLevel The current zoom level of tiles that are to be displayed.\n     * @param renderedTiles The list of tiles that are shown to the user.\n     * @param checkedTiles Used to map a given code to a boolean which tells us if an ancestor is\n     * displayed or not.\n     * @param dataSource The provider of tiles.\n     * @returns Whether a parent tile exists.\n     */\n    private findUp(\n        tileKeyCode: number,\n        displayZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        checkedTiles: Map<number, boolean>,\n        dataSource: DataSource\n    ): boolean {\n        const parentCode = TileOffsetUtils.getParentKeyFromKey(tileKeyCode);\n        // Check if another sibling has already added the parent.\n        if (renderedTiles.get(parentCode) !== undefined) {\n            return true;\n        }\n        const exists = checkedTiles.get(parentCode)!;\n        if (exists !== undefined) {\n            return exists;\n        }\n\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(parentCode);\n        const parentTile = this.m_dataSourceCache.get(mortonCode, offset, dataSource);\n        const parentTileKey = parentTile ? parentTile.tileKey : TileKey.fromMortonCode(mortonCode);\n        const nextLevelDiff = Math.abs(displayZoomLevel - parentTileKey.level);\n        if (parentTile !== undefined && parentTile.hasGeometry) {\n            checkedTiles.set(parentCode, true);\n            // parentTile has geometry, so can be reused as fallback\n            renderedTiles.set(parentCode, parentTile);\n\n            // We want to have parent tiles as -ve, hence the minus.\n            parentTile.levelOffset = -nextLevelDiff;\n\n            return true;\n        } else {\n            checkedTiles.set(parentCode, false);\n        }\n\n        // Recurse up until the max distance is reached or we go to the parent of all parents.\n        if (nextLevelDiff < this.options.quadTreeSearchDistanceUp && parentTileKey.level !== 0) {\n            const foundUp = this.findUp(\n                parentCode,\n                displayZoomLevel,\n                renderedTiles,\n                checkedTiles,\n                dataSource\n            );\n            // If there was a tile upstream found, then add it to the list, so we can\n            // early skip checkedTiles.\n            checkedTiles.set(parentCode, foundUp);\n            if (foundUp) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private getTileImpl(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number,\n        cacheOnly: boolean\n    ): Tile | undefined {\n        function updateTile(tileToUpdate?: Tile) {\n            if (tileToUpdate === undefined) {\n                return;\n            }\n            // Keep the tile from being removed from the cache.\n            tileToUpdate.frameNumLastRequested = dataSource.mapView.frameNumber;\n        }\n\n        if (!dataSource.cacheable && !cacheOnly) {\n            const resultTile = dataSource.getTile(tileKey);\n            updateTile(resultTile);\n            return resultTile;\n        }\n\n        const tileCache = this.m_dataSourceCache;\n        let tile = tileCache.get(tileKey.mortonCode(), offset, dataSource);\n\n        if (tile !== undefined && tile.offset === offset) {\n            updateTile(tile);\n            return tile;\n        }\n\n        if (cacheOnly) {\n            return undefined;\n        }\n\n        tile = dataSource.getTile(tileKey);\n        // TODO: Update all tile information including area, min/max elevation from TileKeyEntry\n        if (tile !== undefined) {\n            tile.offset = offset;\n            updateTile(tile);\n            tileCache.set(tileKey.mortonCode(), offset, dataSource, tile);\n            this.m_tileGeometryManager.initTile(tile);\n        }\n        return tile;\n    }\n\n    private markDataSourceTilesDirty(renderListEntry: DataSourceTileList) {\n        const dataSourceCache = this.m_dataSourceCache;\n        const retainedTiles: Set<TileCacheId> = new Set();\n\n        function markTileDirty(tile: Tile, tileGeometryManager: TileGeometryManager) {\n            const tileKey = DataSourceCache.getKeyForTile(tile);\n            if (!retainedTiles.has(tileKey)) {\n                retainedTiles.add(tileKey);\n                if (tile.tileGeometryLoader !== undefined) {\n                    tile.tileGeometryLoader.reset();\n                }\n\n                // Prevent label rendering issues when the style set is changing. Prevent Text\n                // element rendering that depends on cleaned font catalog data.\n                tile.clearTextElements();\n\n                tile.load();\n            }\n        }\n\n        renderListEntry.visibleTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n        renderListEntry.renderedTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n\n        dataSourceCache.forEach((tile, key) => {\n            if (!retainedTiles.has(key)) {\n                dataSourceCache.deleteByKey(key);\n                tile.dispose();\n            }\n        }, renderListEntry.dataSource);\n    }\n\n    // Computes the visible tile keys for each supplied data source.\n    private getVisibleTileKeysForDataSources(\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource: ElevationRangeSource | undefined\n    ): {\n        tileKeys: Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>;\n        allBoundingBoxesFinal: boolean;\n    } {\n        const tileKeys = Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>();\n        let allBoundingBoxesFinal: boolean = true;\n\n        if (dataSources.length === 0) {\n            return { tileKeys, allBoundingBoxesFinal };\n        }\n\n        const dataSourceBuckets = new Map<TilingScheme, DataSource[]>();\n        dataSources.forEach(dataSource => {\n            const tilingScheme = dataSource.getTilingScheme();\n            const bucket = dataSourceBuckets.get(tilingScheme);\n            if (bucket === undefined) {\n                dataSourceBuckets.set(tilingScheme, [dataSource]);\n            } else {\n                bucket.push(dataSource);\n            }\n        });\n\n        // If elevation is to be taken into account create extended frustum:\n        // (near ~0, far: maxVisibilityRange) that allows to consider tiles that\n        // are far below ground plane and high enough to intersect the frustum.\n        if (elevationRangeSource !== undefined) {\n            const fp = MapViewUtils.getCameraFrustumPlanes(this.m_frustumIntersection.camera);\n            fp.near = this.m_viewRange.minimum;\n            fp.far = this.m_viewRange.maximum;\n            this.m_projectionMatrixOverride.makePerspective(\n                fp.left,\n                fp.right,\n                fp.bottom,\n                fp.top,\n                fp.near,\n                fp.far\n            );\n            this.m_frustumIntersection.updateFrustum(this.m_projectionMatrixOverride);\n        } else {\n            this.m_frustumIntersection.updateFrustum();\n        }\n\n        // For each bucket of data sources with same tiling scheme, calculate frustum intersection\n        // once using the maximum display level.\n        for (const [tilingScheme, bucket] of dataSourceBuckets) {\n            const zoomLevels = bucket.map(dataSource => dataSource.getDisplayZoomLevel(zoomLevel));\n            const result = this.m_frustumIntersection.compute(\n                tilingScheme,\n                elevationRangeSource,\n                zoomLevels,\n                bucket\n            );\n\n            allBoundingBoxesFinal = allBoundingBoxesFinal && result.calculationFinal;\n\n            for (const dataSource of bucket) {\n                // For each data source check what tiles from the intersection should be rendered\n                // at this zoom level.\n                const visibleTileKeys: TileKeyEntry[] = [];\n                const displayZoomLevel = dataSource.getDisplayZoomLevel(zoomLevel);\n                for (const tileKeyEntry of result.tileKeyEntries.get(displayZoomLevel)!.values()) {\n                    if (dataSource.canGetTile(displayZoomLevel, tileKeyEntry.tileKey)) {\n                        visibleTileKeys.push(tileKeyEntry);\n                    }\n                }\n                tileKeys.push({ dataSource, visibleTileKeys });\n            }\n        }\n\n        return { tileKeys, allBoundingBoxesFinal };\n    }\n}\n\nfunction viewRangesEqual(a: ViewRanges, b: ViewRanges) {\n    return (\n        a.far === b.far && a.maximum === b.maximum && a.minimum === b.minimum && a.near === b.near\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITiler } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedTiler } from \"./WorkerBasedTiler\";\n\n/**\n * Default concurrent tiler helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedTiler]]s for data sources.\n */\nexport class ConcurrentTilerFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and tilers.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount: number = 1;\n\n    /**\n     * Returns a [[WorkerBasedTiler]] instance.\n     *\n     * @param tilerServiceType The name of the tiler service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTiler(tilerServiceType: string, scriptUrl?: string, workerCount?: number): ITiler {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedTiler(workerSet, tilerServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeoJson,\n    ITiler,\n    WorkerServiceProtocol,\n    WorkerTilerProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next tiler worker-service. Used to ensure uniqueness of service ids of tilers\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Tiler based on [[ConcurrentWorkerSet]].\n *\n * Tiles payloads using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends tile requests,\n * - configuration.\n */\nexport class WorkerBasedTiler implements ITiler {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedTiler`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param tilerServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly tilerServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.tilerServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tiler services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TilerService]]s in all workers to serve tiling requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.tilerServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Register index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    registerIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.RegisterIndexRequest = {\n            type: WorkerTilerProtocol.Requests.RegisterIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Update index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    updateIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.UpdateIndexRequest = {\n            type: WorkerTilerProtocol.Requests.UpdateIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Retrieves a tile for a previously registered index.\n     *\n     * @param indexId Index identifier.\n     * @param tileKey The [[TileKey]] that identifies the tile.\n     */\n    getTile(indexId: string, tileKey: TileKey): Promise<{}> {\n        const tileKeyCode = tileKey.mortonCode();\n        const message: WorkerTilerProtocol.TileRequest = {\n            type: WorkerTilerProtocol.Requests.TileRequest,\n            index: indexId,\n            tileKey: tileKeyCode\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"@here/harp-geoutils\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\nimport { CopyrightProvider } from \"./CopyrightProvider\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface AreaCopyrightInfo {\n    /**\n     * Minimum zoom level for the specified copyright label.\n     */\n    minLevel?: number;\n\n    /**\n     * Maximum zoom level for the specified copyright label.\n     */\n    maxLevel?: number;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     */\n    label: string;\n\n    /**\n     * Verbose copyright text of the label to display by mouse over label or info menu entry.\n     */\n    alt?: string;\n\n    /**\n     * The bounding boxes define areas where specific copyrights are valid. A bounding box is\n     * defined by bottom (latitude), left (longitude) and top (latitude), right (longitude).\n     *\n     * The default copyright has no boxes element and covers all other areas.\n     */\n    boxes?: Array<[number, number, number, number]>;\n}\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface CopyrightCoverageResponse {\n    [scheme: string]: AreaCopyrightInfo[];\n}\n\n/**\n * Base class to provide copyrights based on copyright coverage information, defined by geographical\n * bounding boxes and relevant zoom level ranges.\n */\nexport abstract class CopyrightCoverageProvider implements CopyrightProvider {\n    /** Logger instance. */\n    protected readonly logger = LoggerManager.instance.create(\"CopyrightCoverageProvider\");\n\n    private m_cachedTreePromise: Promise<any> | undefined;\n\n    /** Asynchronously retrieves copyright coverage data. */\n    abstract async getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]>;\n\n    /** @inheritdoc */\n    getTree(): Promise<any> {\n        if (this.m_cachedTreePromise !== undefined) {\n            return this.m_cachedTreePromise;\n        }\n\n        this.m_cachedTreePromise = this.getCopyrightCoverageData()\n            .then(coverageInfo => this.initRBush(coverageInfo))\n            .catch(error => {\n                this.logger.error(error);\n                return new RBush();\n            });\n\n        return this.m_cachedTreePromise;\n    }\n\n    /** @inheritdoc */\n    async getCopyrights(geoBox: GeoBox, level: number): Promise<CopyrightInfo[]> {\n        const tree = await this.getTree();\n\n        const result: CopyrightInfo[] = [];\n\n        const matchingEntries: AreaCopyrightInfo[] = tree.search({\n            minX: geoBox.west,\n            minY: geoBox.south,\n            maxX: geoBox.east,\n            maxY: geoBox.north\n        });\n\n        for (const entry of matchingEntries) {\n            const minLevel = getOptionValue(entry.minLevel, 0);\n            const maxLevel = getOptionValue(entry.maxLevel, Infinity);\n\n            if (level >= minLevel && level <= maxLevel) {\n                if (result.find(item => item.id === entry.label) === undefined) {\n                    result.push({ id: entry.label });\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Initializes RBush.\n     *\n     * @param entries Entries for tree.\n     * @returns RBush instance.\n     */\n    initRBush(entries: AreaCopyrightInfo[]): any {\n        const tree = new RBush();\n\n        if (!entries) {\n            this.logger.warn(\"No copyright coverage data provided\");\n            return tree;\n        }\n\n        for (const entry of entries) {\n            const { minLevel, maxLevel, label, alt } = entry;\n\n            if (!entry.boxes) {\n                tree.insert({\n                    minX: -180,\n                    minY: -90,\n                    maxX: 180,\n                    maxY: 180,\n                    minLevel,\n                    maxLevel,\n                    label,\n                    alt\n                });\n            } else {\n                for (const box of entry.boxes) {\n                    const [minY, minX, maxY, maxX] = box;\n                    tree.insert({\n                        minX,\n                        minY,\n                        maxX,\n                        maxY,\n                        minLevel,\n                        maxLevel,\n                        label,\n                        alt\n                    });\n                }\n            }\n        }\n\n        return tree;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./src/TransferManager\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType } from \"@here/harp-datasource-protocol\";\nimport { reconstructLineWidth } from \"@here/harp-lines\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"TileGeometry\");\n\n/**\n * Interface to access lines. Allows read access for some important attributes.\n */\nexport interface ILineAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Get the width. May have to be reconstructed from triangulated line mesh.\n     */\n    width: number | undefined;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isLineAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isLineAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    /**\n     * Get vertices from the object.\n     */\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `ILineAccessor`.\n *\n * @param arg `true` if `arg` is `ILineAccessor`.\n */\nexport function isLineAccessor(arg: any): arg is ILineAccessor {\n    /**\n     * Get vertices from the object.\n     *\n     * @param mode Specifies which part of the vertices should be returned.\n     */\n\n    return typeof arg.isLineAccessor === \"function\" && arg.isLineAccessor() === true;\n}\n\n/**\n * Accessor for unspecified 3D objects, like landmarks.\n */\nexport interface IObject3dAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isObject3dAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isObject3dAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `IObject3dAccessor`.\n *\n * @param arg `true` if `arg` is `IObject3dAccessor`.\n */\nexport function isObject3dAccessor(arg: any): arg is IObject3dAccessor {\n    return typeof arg.isObject3dAccessor === \"function\" && arg.isObject3dAccessor() === true;\n}\n\n/**\n * Basic interface for geometry accessors.\n */\nexport interface IGeometryAccessor {\n    /**\n     * Get the number of primitives (vertices of triangles).\n     *\n     * @returns Number of primitives.\n     */\n    getCount(): number;\n\n    /**\n     * Set range of primitives in this object related to one or more buffers.\n     *\n     * @param start Start index in buffers.\n     * @param end End index in buffers (+1).\n     */\n    setRange(start: number, end: number): void;\n}\n\n/**\n * Geometry accessor for both indexed and nonindexed `BufferedGeometry`.\n */\nexport abstract class BufferedGeometryAccessorBase implements IGeometryAccessor {\n    protected start: number = -1;\n    protected end: number = -1;\n    protected startCapSize: number = 0;\n    protected endCapSize: number = 0;\n    protected position: THREE.BufferAttribute;\n    protected itemSize: number;\n\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        assert(!!object);\n\n        if (bufferGeometry.type !== \"BufferGeometry\") {\n            logger.error(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong \" + \"type\"\n            );\n        }\n        assert(\n            bufferGeometry.type === \"BufferGeometry\",\n            \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong type\"\n        );\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        this.position = this.bufferGeometry.getAttribute(\"position\") as THREE.BufferAttribute;\n        this.itemSize = this.position.itemSize;\n\n        if (!this.position) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry has no position \" +\n                    \"attribute\"\n            );\n        }\n\n        if (this.position.array.constructor !== Float32Array) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry.position: \" +\n                    \"unsupported ArrayBuffer\"\n            );\n        }\n    }\n\n    /**\n     * Get the number of accessible geometries in this buffer.\n     *\n     * @returns Number of primitives in this geometry.\n     */\n    getCount(): number {\n        return this.position.count;\n    }\n\n    /**\n     * Get `renderOrder` of object.\n     *\n     * @returns `renderOrder` of the object.\n     */\n    get renderOrder(): number {\n        return this.object.renderOrder;\n    }\n\n    setRange(start: number, end: number, startCapSize: number = 0, endCapSize: number = 0) {\n        assert(start >= 0);\n        assert(end >= 0);\n        assert(start <= end);\n        this.start = start;\n        this.end = end;\n        this.startCapSize = startCapSize;\n        this.endCapSize = endCapSize;\n    }\n\n    /**\n     * Get one or more colors from materials.\n     */\n    get color(): THREE.Color | undefined | Array<THREE.Color | undefined> {\n        /**\n         * TODO: Get color(s) from vertex colors\n         */\n        const getColor = (material: THREE.Material) => {\n            const meshMaterial = material as THREE.MeshBasicMaterial;\n            if (\n                meshMaterial.type === \"MeshBasicMaterial\" ||\n                meshMaterial.type === \"MeshStandardMaterial\"\n            ) {\n                return meshMaterial.color;\n            } else if (meshMaterial.type === \"RawShaderMaterial\") {\n                const rawShaderMaterial = material as THREE.RawShaderMaterial;\n\n                if (rawShaderMaterial.name === \"SolidLineMaterial\") {\n                    return rawShaderMaterial.uniforms.diffuse.value as THREE.Color;\n                }\n\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown shader material name\",\n                    rawShaderMaterial.name\n                );\n            } else {\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown material type\",\n                    meshMaterial.type\n                );\n            }\n\n            return undefined;\n        };\n\n        if (Array.isArray(this.object.material)) {\n            const results = new Array<THREE.Color | undefined>();\n            const materials = this.object.material as THREE.Material[];\n\n            for (const material of materials) {\n                results.push(getColor(material));\n            }\n\n            return results;\n        } else {\n            return getColor(this.object.material);\n        }\n    }\n}\n\n/**\n * Abstract base class of an accessor for nonindexed geometry.\n */\nexport abstract class BufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    /**\n     * Create an object of type `BufferedGeometryAccessor`\n     *\n     * @param object - mesh object\n     * @param geometryType - type of geometry to be used\n     * @param bufferGeometry - which buffer geometry to use\n     * @param stride - geometry stride length\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        protected stride: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const positionsArray = this.position.array as number[];\n\n        const start = this.start * this.itemSize;\n        const end = this.end * this.itemSize;\n\n        for (let i = start; i < end; i++) {\n            positionsArray[i] = 0;\n        }\n\n        this.position.needsUpdate = true;\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        return (this.position.array as Float32Array).subarray(\n            start * this.itemSize,\n            end * this.itemSize\n        );\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            this.position !== undefined &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.position.count &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for nonindexed line geometry.\n */\nexport class BufferedGeometryLineAccessor extends BufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    get width(): number | undefined {\n        //TODO: There is no implementation of such a line, yet...\n        assert(this.checkSetUp(), \"RoBufferedGeometryLineAccessor not setup\");\n        return undefined;\n    }\n}\n\n/**\n * Accessor for nonindexed unspecified (`Object3D`) geometry.\n */\nexport class BufferedGeometryObject3dAccessor extends BufferedGeometryAccessor\n    implements IObject3dAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 1);\n    }\n\n    isObject3dAccessor(): boolean {\n        return true;\n    }\n\n    /** @override */\n    getVertices(): Float32Array | undefined {\n        return super.getVertices();\n    }\n}\n\n/**\n * Abstract base class of indexed geometry.\n */\nexport abstract class IndexedBufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    indices: number[];\n\n    /**\n     * Creates an abstract class `IndexedBufferedGeometryAccessor`.\n     *\n     * @param object - mesh to be used\n     * @param geometryType - type of geometry\n     * @param bufferGeometry - geometry used\n     * @param start\n     * @param end\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        // tslint:disable-next-line:no-unused-variable\n        start?: number,\n        // tslint:disable-next-line:no-unused-variable\n        end?: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n\n        this.indices =\n            this.bufferGeometry.index !== null\n                ? (this.bufferGeometry.index.array as number[])\n                : ((undefined as any) as number[]);\n\n        if (!this.indices) {\n            logger.warn(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has no \" + \"index\"\n            );\n            assert(!!this.indices);\n        } else {\n            if (!(this.indices instanceof Uint32Array)) {\n                logger.warn(\n                    \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry index \" +\n                        \"has wrong type\"\n                );\n                assert(this.indices instanceof Uint32Array);\n            }\n        }\n    }\n\n    /**\n     * Returns number of primitives, which is not known in this base class, so we return the number\n     * of indices.\n     *\n     * @returns The number of indices in the geometry.\n     * @override\n     */\n    getCount(): number {\n        return this.indices.length;\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            !!this.indices &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.indices.length &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for lines in an indexed geometry.\n */\nexport class IndexedBufferedGeometryLineAccessor extends IndexedBufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    /**\n     * Reconstructs line width from triangulated geometry.\n     *\n     * @returns Line width.\n     */\n    get width(): number | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        if (this.geometryType === GeometryType.ExtrudedLine) {\n            const start = this.start + this.startCapSize;\n            const positionArray = this.position.array as Float32Array;\n            return reconstructLineWidth(positionArray, start);\n        }\n\n        return undefined;\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        for (let i = start; i < end; i++) {\n            this.indices[i] = 0;\n        }\n\n        if (this.bufferGeometry.index !== null) {\n            this.bufferGeometry.index.needsUpdate = true;\n        }\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const itemSize = this.itemSize;\n\n        const start = this.start;\n        const end = this.end;\n\n        const result = new Float32Array((end - start) * itemSize);\n        const positionArray = this.position.array;\n\n        if (itemSize === 2) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n            }\n        }\n        if (itemSize === 3) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n                result[j + 2] = positionArray[index * itemSize + 2];\n            }\n        } else {\n            for (let i = start, j = 0; i < end; i++, j++) {\n                const index = this.indices[i];\n                for (let k = 0; k < itemSize; k++) {\n                    result[j * itemSize + k] = positionArray[index * itemSize + k];\n                }\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst UNIT_Z = new THREE.Vector3(0, 0, 1);\nconst POINTS = [0, 1, 2, 1, 3, 2];\nconst BEVEL_POINTS = [0, 1, 3, 3, 1, 2, 0, 3, 4, 5, 4, 3];\n\nconst SECTORS_IN_CIRCLE = 8;\nconst STEP = Math.PI / SECTORS_IN_CIRCLE;\n\n/**\n * Adds a half-circle geometry to original line\n *\n * @param x The line end X (used as circle center X)\n * @param y The line end Y (used as circle center Y)\n * @param lineAngle The cap incline angle\n * @param radius The cap (circle) radius\n * @param vertices The input vertex buffer (cap vertices are added there)\n * @param indices The input index buffer (cap indices are is added there)\n */\nfunction addCircle(\n    x: number,\n    y: number,\n    lineAngle: number,\n    radius: number,\n    vertices: number[],\n    indices: number[]\n) {\n    const baseVertex = vertices.length / 3;\n\n    // Add cap center to vertices directly (it doesn't need rotation)\n    vertices.push(x, y, 0);\n\n    for (let i = 0; i < SECTORS_IN_CIRCLE + 1; ++i) {\n        const angle = STEP * i + Math.PI / 2 + lineAngle; // Start angle is -90deg\n        vertices.push(x + radius * Math.cos(angle), y + radius * Math.sin(angle), 0);\n\n        indices.push(\n            baseVertex,\n            baseVertex + i + 1,\n            baseVertex + ((i + 1) % (SECTORS_IN_CIRCLE + 1)) + 1\n        );\n    }\n}\n\n/**\n * Returns the number of points in circle used for caps.\n *\n * @param lineWidth Width of line.\n */\n// tslint:disable-next-line:no-unused-variable\nexport function numCirclePoints(lineWidth: number): number {\n    return SECTORS_IN_CIRCLE + 1;\n}\n\n/**\n * Create a triangle mesh from the given polyline.\n *\n * @param points Sequence of (x,y,z) coordinates.\n * @param width The width of the extruded line.\n * @param vertices The output vertex buffer.\n * @param indices The output index buffer.\n * @param startWithCircle `true` if the line should start will a circle.\n * @param endWithCircle `true` if the line should end with a circle.\n */\nexport function triangulateLine(\n    points: ArrayLike<number>,\n    width: number,\n    vertices: number[],\n    indices: number[],\n    startWithCircle = true,\n    endWithCircle = startWithCircle\n) {\n    if (points.length < 3) {\n        return;\n    }\n\n    // This vector is used for computing cap angle\n    const angleVec = new THREE.Vector2();\n\n    if (startWithCircle) {\n        // Define lineAngle as (direction - origin) vector angle to X axis\n        const lineAngle =\n            points.length !== 3\n                ? angleVec.set(points[3] - points[0], points[4] - points[1]).angle()\n                : 0;\n\n        addCircle(points[0], points[1], lineAngle, width, vertices, indices);\n    }\n\n    const baseVertex = vertices.length / 3;\n\n    // bt = Bitangent (i.e. extrusion vector)\n    const prevBt = new THREE.Vector3();\n    const p = new THREE.Vector3(); // current point\n    const n = new THREE.Vector3(); // next point\n    const bt = new THREE.Vector3();\n    const averageBt = new THREE.Vector3();\n    const p0 = new THREE.Vector3();\n    const p1 = new THREE.Vector3();\n    const p2 = new THREE.Vector3();\n    const p3 = new THREE.Vector3();\n\n    const N = points.length / 3;\n\n    let vertexOffset = 0;\n    for (let i = 0; i < N; ++i) {\n        let useBevel = false;\n        p.set(points[i * 3], points[i * 3 + 1], points[i * 3 + 2]);\n\n        if (i + 1 < N) {\n            n.set(points[(i + 1) * 3], points[(i + 1) * 3 + 1], points[(i + 1) * 3 + 2]);\n\n            bt.copy(n)\n                .sub(p)\n                .normalize()\n                .cross(UNIT_Z);\n\n            averageBt.copy(bt);\n\n            if (i > 0) {\n                averageBt.add(prevBt).multiplyScalar(1.0 - 0.5 * bt.dot(prevBt));\n\n                useBevel = prevBt.angleTo(bt) > Math.PI / 2;\n\n                if (useBevel) {\n                    const inclineWidth = width / Math.cos(bt.angleTo(prevBt) / 2);\n\n                    p0.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(-inclineWidth)\n                        .add(p);\n\n                    p1.copy(prevBt)\n                        .multiplyScalar(width)\n                        .add(p);\n\n                    // p2 is used for \"miter\" connections\n                    p2.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(inclineWidth)\n                        .add(p);\n\n                    p3.copy(bt)\n                        .multiplyScalar(width)\n                        .add(p);\n                }\n            }\n\n            if (useBevel) {\n                vertices.push(\n                    p0.x,\n                    p0.y,\n                    p0.z,\n                    p1.x,\n                    p1.y,\n                    p1.z,\n                    p2.x,\n                    p2.y,\n                    p2.z,\n                    p3.x,\n                    p3.y,\n                    p3.z\n                );\n            } else {\n                p0.copy(averageBt)\n                    .multiplyScalar(-width)\n                    .add(p);\n\n                p1.copy(averageBt)\n                    .multiplyScalar(width)\n                    .add(p);\n\n                vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n            }\n\n            prevBt.copy(bt);\n        } else {\n            p0.copy(prevBt)\n                .multiplyScalar(-width)\n                .add(p);\n\n            p1.copy(prevBt)\n                .multiplyScalar(width)\n                .add(p);\n\n            vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n        }\n\n        if (i !== N - 1) {\n            (useBevel ? BEVEL_POINTS : POINTS).forEach(o =>\n                indices.push(baseVertex + vertexOffset + o)\n            );\n            vertexOffset += useBevel ? 4 : 2;\n        }\n    }\n\n    if (endWithCircle) {\n        const lineAngle =\n            points.length !== 2\n                ? angleVec\n                      .set(\n                          points[(N - 3) * 3] - points[(N - 2) * 3],\n                          points[(N - 3) * 3 + 1] - points[(N - 2) * 3 + 1]\n                      )\n                      .angle()\n                : Math.PI;\n\n        addCircle(\n            points[(N - 2) * 3],\n            points[(N - 2) * 3 + 1],\n            lineAngle,\n            width,\n            vertices,\n            indices\n        );\n    }\n}\n\n/**\n * Reconstruct the original points of a line from the vertices of the triangulated line.\n *\n * @param inBuffer Buffer with vertices.\n * @param startOffset Start index, will differ from `0` if the line has caps.\n * @returns Buffer containing the original points of the triangulated line.\n */\nexport function reconstructLine(inBuffer: Float32Array, startOffset: number): Float32Array {\n    const outBuffer = new Float32Array(inBuffer.length / 2);\n\n    for (let i = startOffset * 3, i2 = i * 2; i < outBuffer.length; i += 3, i2 += 6) {\n        outBuffer[i] = inBuffer[i2] + (inBuffer[i2 + 3] - inBuffer[i2]) * 0.5;\n        outBuffer[i + 1] = inBuffer[i2 + 1] + (inBuffer[i2 + 3 + 1] - inBuffer[i2 + 1]) * 0.5;\n        outBuffer[i + 2] = inBuffer[i2 + 2] + (inBuffer[i2 + 3 + 2] - inBuffer[i2 + 2]) * 0.5;\n    }\n    return outBuffer;\n}\n\n/**\n * Extract the line width from a triangulated line.\n *\n * @param inBuffer Array of vertex elements of a triangulated line.\n * @param startIndex Start index, will differ from `0` if the line has caps.\n */\nexport function reconstructLineWidth(inBuffer: Float32Array, startIndex: number): number {\n    const xd = inBuffer[startIndex * 2 + 3] - inBuffer[startIndex * 2];\n    const yd = inBuffer[startIndex * 2 + 3 + 1] - inBuffer[startIndex * 2 + 1];\n    const zd = inBuffer[startIndex * 2 + 3 + 2] - inBuffer[startIndex * 2 + 2];\n\n    return Math.sqrt(xd * xd + yd * yd + zd * zd) * 0.5;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\n\nimport * as THREE from \"three\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Declare interface for `HighPrecisionObject` which describes additional functionality to render\n * high-precision vertices.\n */\nexport interface HighPrecisionObject extends THREE.Object3D {\n    /**\n     * Allow direct access to [[BufferGeometry]] without cast.\n     */\n    bufferGeometry: THREE.BufferGeometry;\n\n    /**\n     * Allow direct access to [[ShaderMaterial]] without cast.\n     */\n    shaderMaterial: THREE.ShaderMaterial;\n\n    /**\n     * Inversed World Matrix.\n     */\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Sets up attributes for position (one attribute for major 32 bits position \"halve\", and one\n     * attribute for lower 32 bits).\n     */\n    setPositions(positions: number[] | THREE.Vector3[]): void;\n\n    /**\n     * Prepare the objects \"`onBeforeRender()`\" callback to generate proper high-precision camera\n     * position.\n     */\n    setupForRendering(): void;\n}\n\n/**\n * Class used to render high-precision wireframe lines.\n */\nexport class HighPrecisionWireFrameLine extends THREE.Line implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionWireFrameLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n\n/**\n * Class used to render high-precision lines.\n */\nexport class HighPrecisionLine extends THREE.Mesh implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport \"@here/harp-fetch\";\n\nimport {\n    DecodedTile,\n    ITileDecoder,\n    RequestController,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, TileLoaderState } from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { DataProvider } from \"./DataProvider\";\n\nconst logger = LoggerManager.instance.create(\"TileLoader\");\n\n/**\n * The [[TileLoader]] manages the different states of loading and decoding for a [[Tile]]. Used by\n * the [[TileDataSource]].\n *\n * A TileLoader supports loading for multiple tiles, this is required for the wrap around, where\n * it is possible to see the same tile multiple times.\n */\nexport class TileLoader {\n    /**\n     * Current state of `TileLoader`.\n     */\n    state: TileLoaderState = TileLoaderState.Initialized;\n\n    /**\n     * Error object if loading or decoding failed.\n     */\n    error?: Error;\n\n    /**\n     * The binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    payload?: ArrayBufferLike | {};\n\n    /**\n     * The result of decoding the `payload`: The [[DecodedTile]].\n     */\n    decodedTile?: DecodedTile;\n\n    /**\n     * The abort controller notifying the [[DataProvider]] to cancel loading.\n     */\n    protected loadAbortController = new AbortController();\n\n    /**\n     * The  notifying the [[ITileDecoder]] to cancel decoding.\n     */\n    protected requestController?: RequestController;\n\n    /**\n     * The promise which is resolved when loading and decoding have finished.\n     */\n    protected donePromise?: Promise<TileLoaderState>;\n\n    /**\n     * The internal function that is called when loading and decoding have finished successfully.\n     */\n    protected resolveDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * The internal function that is called when loading and decoding failed.\n     */\n    protected rejectedDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * This is a form of reference counting for the result. We keep a track of this because when\n     * cancelling, it is important to know if we can actually cancel, or if there is another Tile\n     * that needs the result.\n     */\n    private countRequests: number = 0;\n\n    /**\n     * Set up loading of a single [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] the tile belongs to.\n     * @param tileKey The quadtree address of a [[Tile]].\n     * @param dataProvider The [[DataProvider]] that retrieves the binary tile data.\n     * @param tileDecoder The [[ITileDecoder]] that decodes the binary tile to a [[DecodeTile]].\n     * @param priority The priority given to the loading job. Highest number will be served first.\n     */\n    constructor(\n        protected dataSource: DataSource,\n        protected tileKey: TileKey,\n        protected dataProvider: DataProvider,\n        protected tileDecoder: ITileDecoder,\n        public priority: number\n    ) {}\n\n    /**\n     * Start loading and/or proceed through the various states of loading of this tile.\n     *\n     * @returns A promise which resolves the [[TileLoaderState]].\n     */\n    loadAndDecode(): Promise<TileLoaderState> {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n            case TileLoaderState.Loaded:\n            case TileLoaderState.Decoding:\n                // tile is already loading\n                this.countRequests++;\n                return this.donePromise!;\n\n            case TileLoaderState.Ready:\n            case TileLoaderState.Failed:\n            case TileLoaderState.Initialized:\n            case TileLoaderState.Canceled:\n                // restart loading\n                this.countRequests++;\n                this.startLoading();\n                return this.donePromise!;\n        }\n    }\n\n    /**\n     * Return the current state in form of a promise. Caller can then wait for the promise to be\n     * resolved.\n     *\n     * @returns A promise which resolves the current [[TileLoaderState]].\n     */\n    waitSettled(): Promise<TileLoaderState> {\n        if (!this.donePromise) {\n            return Promise.resolve(this.state);\n        }\n        return this.donePromise;\n    }\n\n    /**\n     * Cancel loading of the [[Tile]] if there is only a single request remaining. Cancellation\n     * token is notified, an internal state is cleaned up.\n     *\n     * Otherwise this just reduces the count of requests by one.\n     */\n    cancel() {\n        if (--this.countRequests !== 0) {\n            return;\n        }\n        switch (this.state) {\n            case TileLoaderState.Loading:\n                this.loadAbortController.abort();\n                this.loadAbortController = new AbortController();\n                break;\n\n            case TileLoaderState.Decoding:\n                if (this.requestController) {\n                    this.requestController.abort();\n                    this.requestController = undefined;\n                }\n                break;\n        }\n\n        this.onDone(TileLoaderState.Canceled);\n    }\n\n    /**\n     * Return `true` if [[Tile]] is still loading, `false` otherwise.\n     */\n    get isFinished(): boolean {\n        return (\n            this.state === TileLoaderState.Ready ||\n            this.state === TileLoaderState.Canceled ||\n            this.state === TileLoaderState.Failed\n        );\n    }\n\n    /**\n     * Update the priority of this [[Tile]]'s priority. Is effective to sort the decoding requests\n     * in the request queue (used during heavy load).\n     */\n    updatePriority(priority: number): void {\n        this.priority = priority;\n        if (this.requestController !== undefined) {\n            this.requestController.priority = priority;\n        }\n    }\n\n    /**\n     * Start loading. Only call if loading did not start yet.\n     */\n    protected startLoading() {\n        const myLoadCancellationToken = this.loadAbortController.signal;\n        this.dataProvider\n            .getTile(this.tileKey, myLoadCancellationToken)\n            .then(payload => {\n                if (myLoadCancellationToken.aborted) {\n                    // safety belt if getTile doesn't really support cancellation tokens\n                    const err = new Error(\"Aborted\");\n                    err.name = \"AbortError\";\n                    throw err;\n                }\n                this.onLoaded(payload);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    return;\n                }\n                this.onError(error);\n            });\n\n        if (this.donePromise === undefined) {\n            this.donePromise = new Promise<TileLoaderState>((resolve, reject) => {\n                this.resolveDonePromise = resolve;\n                this.rejectedDonePromise = reject;\n            });\n        }\n        this.state = TileLoaderState.Loading;\n    }\n\n    /**\n     * Called when binary data has been loaded. The loading state is now progressing to decoding.\n     *\n     * @param payload Binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    protected onLoaded(payload: ArrayBufferLike | {}) {\n        this.state = TileLoaderState.Loaded;\n        this.payload = payload;\n\n        if ((payload as ArrayBufferLike).byteLength !== undefined) {\n            if ((payload as ArrayBufferLike).byteLength === 0) {\n                this.onDone(TileLoaderState.Ready);\n                return;\n            }\n        }\n        // Object is empty\n        if ((payload as {}) === {}) {\n            this.onDone(TileLoaderState.Ready);\n            return;\n        }\n\n        // TBD: we might suspend decode if tile is not visible ... ?\n        this.startDecodeTile();\n    }\n\n    /**\n     * Start decoding the payload.\n     */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .decodeTile(payload, this.tileKey, dataSource.projection, requestController)\n            .then(decodedTile => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n\n                this.onDecoded(decodedTile);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n\n    /**\n     * Called when the decoding is finished, and the [[DecodedTile]] has been created.\n     *\n     * @param decodedTile The [[DecodedTile]].\n     */\n    protected onDecoded(decodedTile: DecodedTile) {\n        this.decodedTile = decodedTile;\n        this.onDone(TileLoaderState.Ready);\n    }\n\n    /**\n     * Cancel the decoding process.\n     */\n    protected cancelDecoding() {\n        if (this.requestController !== undefined) {\n            // we should cancel any decodes already in progress!\n            this.requestController.abort();\n            this.requestController = undefined;\n        }\n    }\n\n    /**\n     * Called when loading and decoding has finished successfully. Resolves loading promise if the\n     * state is Ready, otherwise it rejects the promise with the supplied state.\n     *\n     * @param doneState The latest state of loading.\n     */\n    protected onDone(doneState: TileLoaderState) {\n        if (this.resolveDonePromise && doneState === TileLoaderState.Ready) {\n            this.resolveDonePromise(doneState);\n        } else if (this.rejectedDonePromise) {\n            this.rejectedDonePromise(doneState);\n        }\n        this.resolveDonePromise = undefined;\n        this.rejectedDonePromise = undefined;\n        this.donePromise = undefined;\n        this.state = doneState;\n    }\n\n    /**\n     * Called when loading or decoding has finished with an error.\n     *\n     * @param error Error object describing the failing.\n     */\n    protected onError(error: Error) {\n        if (this.state === TileLoaderState.Canceled) {\n            // If we're canceled, we should simply ignore any state transitions and errors from\n            // underlying load/decode ops.\n            return;\n        }\n        const dataSource = this.dataSource;\n        logger.error(\n            `[${dataSource.name}]: failed to load tile ${this.tileKey.mortonCode()}`,\n            error\n        );\n\n        this.error = error;\n\n        this.onDone(TileLoaderState.Failed);\n    }\n}\n\n/**\n * Subclass of [[TileLoader]] which is used by [[TileDataSource]] to load the [[TileInfo]] meta\n * data, not the tile data itself.\n */\nexport class TileInfoLoader extends TileLoader {\n    tileInfo?: TileInfo;\n\n    /** @override */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileInfoLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .getTileInfo(payload, this.tileKey, dataSource.projection, requestController)\n            .then(tileInfo => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.tileInfo = tileInfo;\n\n                this.onDone(TileLoaderState.Ready);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { DataProvider } from \"@here/harp-mapview-decoder\";\nimport { TransferManager } from \"@here/harp-transfer-manager\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"OmvRestClient\");\n\n// tslint:disable:max-line-length\nexport enum APIFormat {\n    /**\n     * Use the REST API format of HERE Vector Tiles Server component version 1.\n     *\n     * Usage:\n     *\n     *     <OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>/omv\n     *\n     * If [[OmvRestClientParams.authenticationToken]] is provided, it will be added as HTTP header:\n     *\n     *     Authorization: Bearer $authenticationToken\n     *\n     * Format definition:\n     * `//http|s://<base-url>/{API version}/{layers}/{projection}/{z}/{x}/{y}/{format}`\n     *\n     * Default authentication method used: [[AuthenticationTypeBearer]].\n     */\n    HereV1,\n\n    /**\n     * Use the REST API format of Mapbox Vector Tile API v4.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/v4/{map_id}/{z}/{x}/{y}{@2x}.{format}?[style]&access_token={access_token}`\n     *\n     * Sample URL:\n     * `http://a.tiles.mapbox.com/v4/mapbox.mapbox-streets-v7/14/4823/6160.mvt?access_token=your-mapbox-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    MapboxV4,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in MVT format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.mvt?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZMVT,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in JSON format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.json?access_token=your-xyz-api-key`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZJson,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/herebase.02/<zoom>/<X>/<Y>/omv?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/herebase.02/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/herebase.02/14/2649/6338/omv?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZOMV,\n\n    /**\n     * Use the REST API format of Tomtoms Vector Tile API v1.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.pbf?key=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `<http|https>://<baseURL>/map/<versionNumber>/tile/<layer>/<style>/<zoom>/<X>/<Y>.<format>?key=<apiKey>[&view=<view>][&language=<language>]`\n     *\n     * Sample URL:\n     * `http://api.tomtom.com/map/1/tile/basic/main/0/0/0.pbf?key=<apiKey>`\n     *\n     * Default authentication method used: [[AuthenticationTypeTomTomV1]].\n     */\n    TomtomV1,\n\n    /**\n     * Use the REST API format of XYZ Space Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/hub/spaces/<space-id>/tile/web/<zoom>_<X>_<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/hub/spaces/{spaceId}/tile/web/{z}_{x}_{y}.mvt?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/hub/spaces/your-space-id/tile/web/{z}_{x}_{y}.mvt?access_token=your-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZSpace\n}\n// tslint:enable:max-line-length\n\n/**\n * Authentication token/code provider used by [[OmvRestClient]] before each call to currently valid\n * authentication code/token.\n */\nexport type AuthenticationCodeProvider = () => Promise<string>;\n\nexport enum AuthenticationMethod {\n    QueryString,\n    AuthorizationHeader\n}\n\nexport interface AuthenticationMethodInfo {\n    method: AuthenticationMethod;\n    name?: string;\n}\n\n/**\n * Authentication method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeBearer: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.AuthorizationHeader,\n    name: \"Bearer\"\n};\n\n/**\n * TomTomV1 API compatible authorization method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeTomTomV1: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"key\"\n};\n\nexport const AuthenticationTypeAccessToken: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"access_token\"\n};\n\nexport interface OmvRestClientParameters {\n    /**\n     * `URL` pattern used to fetch tile files.\n     *\n     * `URL` with special keywords replaced to retrieve specific tile:\n     *  - `{z}` - zoom level of tile, @see [[TileKey.level]]\n     *  - `{x}` - horizontal coordinate of tile (column number), @see [[TileKey.column]]\n     *  - `{y}` - vertical coordinate of Tile (row number), @see [[TileKey.row]]\n     *\n     * Examples of `url` patterns:\n     * ```\n     *   https://my-base-url.com/vector-tiles/{z}/{x}/{y}.mvt\n     *   https://xyz.api.here.com/tiles/herebase.02/{z}/{x}/{y}/omv\n     *   https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\n     * ```\n     *\n     * Note: To add authentication headers and/or query params, use [[authMethod]], [[urlParams]]\n     * properties or embed token directly in `url`.\n     *\n     * Complete examples:\n     * ```\n     * // XYZ OSM with authentication using query param\n     * {\n     *     url: \"https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\",\n     *     urlParams: {\n     *           access_token: accessToken\n     *     },\n     * }\n     * // HERE Vector Tile with authentication using bearer token retrieved by callback\n     * {\n     *     url: \"https://vector.hereapi.com/v2/vectortiles/base/mc/{z}/{x}/{y}/omv\",\n     *     authenticationMethod: AuthenticationTypeBearer,\n     *     authenticationCode: () => getBearerToken()\n     * }\n     * ```\n     */\n    url?: string;\n\n    /**\n     * The base URL of the REST Tile Service.\n     * @see [[APIFormat]] for the definition of `baseUrl`.\n     */\n    baseUrl?: string;\n\n    /**\n     * Authentication code used for the different APIs.\n     *\n     * When [[AuthenticationCodeProvider]] is is used as value, the provider is called before each\n     * to get currently valid authentication code/token.\n     *\n     * @see [[APIFormat]] for the query parameter this is used with.\n     */\n    authenticationCode?: string | AuthenticationCodeProvider;\n\n    /**\n     * Specifies [[AuthMethod]] to be used when requesting tiles.\n     *\n     * Defaults for each [[APIFormat]] are documented with each format type.\n     */\n    authenticationMethod?: AuthenticationMethodInfo;\n\n    /**\n     * The REST API format to use for the tile path generation, will default to the HERE Vector Tile\n     * API.\n     */\n    apiFormat?: APIFormat;\n\n    /**\n     * Tiling scheme is used in some of the APIs, not implemented yet.\n     */\n    tilingScheme?: TilingScheme;\n\n    /**\n     * Transfer Manager to use; creates an own instance if none passed.\n     */\n    downloadManager?: TransferManager;\n\n    /**\n     * Function to retrieve the Bearer Token\n     *\n     * @deprecated Please use [[authenticationCode]].\n     */\n    getBearerToken?: () => Promise<string>;\n\n    /**\n     * Array of query parameters to be appended at the end of the url.\n     * It is empty by default.\n     */\n    urlParams?: { [key: string]: string };\n}\n\n/**\n * REST client supporting getting protobuf OMV Tile from REST-based servers.\n */\nexport class OmvRestClient implements DataProvider {\n    private readonly downloadManager: TransferManager;\n    private readonly urlParams: { [key: string]: string };\n\n    constructor(readonly params: OmvRestClientParameters) {\n        this.downloadManager =\n            params.downloadManager === undefined\n                ? TransferManager.instance()\n                : params.downloadManager;\n        this.urlParams = params.urlParams === undefined ? {} : params.urlParams;\n    }\n\n    /** Overriding abstract method, in this case doing nothing. */\n    async connect(): Promise<void> {\n        // not needed\n    }\n\n    /** Overriding abstract method, in this case always returning `true`. */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * Asynchronously fetches a tile from this restful server.\n     *\n     * **Note:** If the tile doesn't exist, a successful response with a `404` status code is\n     * returned.\n     *\n     * @example\n     * ```typescript\n     * const response = layer.getTile(tileKey);\n     * if (!response.ok) {\n     *     // a network error happened\n     *     console.error(\"Unable to download tile\", response.statusText);\n     *     return;\n     * }\n     * if (response.status === 404) {\n     *     // 404 -, no data exists at the given tile. Do nothing.\n     *     return;\n     * }\n     *\n     * // the response is ok and contains data, access it e.g. as arrayBuffer:\n     * const payload = await response.arrayBuffer();\n     * ```\n     *\n     * @param tileKey The tile key of the tile.\n     * @param tileRequestInit Optional request options to be passed to fetch when downloading a\n     * tile.\n     * @returns A `Promise` of the HTTP response that contains the payload of the requested tile.\n     */\n    async getTile(\n        tileKey: TileKey,\n        abortSignal?: AbortSignal | undefined\n    ): Promise<ArrayBufferLike | {}> {\n        const init: RequestInit = { signal: abortSignal };\n\n        let tileUrl = this.dataUrl(tileKey);\n\n        const authenticationCode = await this.getActualAuthenticationCode();\n\n        tileUrl = this.applyAuthCode(tileUrl, init, authenticationCode);\n        tileUrl = this.addQueryParams(tileUrl, this.urlParams);\n\n        if (this.params.apiFormat === APIFormat.XYZJson) {\n            return this.downloadManager.downloadJson(tileUrl, init);\n        }\n\n        return this.downloadManager.downloadArrayBuffer(tileUrl, init);\n    }\n\n    /**\n     * Get actual authentication code/token for this request according to configuration.\n     */\n    private async getActualAuthenticationCode() {\n        if (typeof this.params.authenticationCode === \"string\") {\n            return this.params.authenticationCode;\n        } else if (this.params.authenticationCode !== undefined) {\n            return this.params.authenticationCode();\n        } else if (this.params.getBearerToken !== undefined) {\n            return this.params.getBearerToken();\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Get default authnentication method basing on apiFormat and other params.\n     */\n    private getDefaultAuthMethod() {\n        if (this.params.getBearerToken !== undefined) {\n            return AuthenticationTypeBearer;\n        }\n\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n                return AuthenticationTypeBearer;\n            case APIFormat.MapboxV4:\n            case APIFormat.XYZOMV:\n            case APIFormat.XYZMVT:\n            case APIFormat.XYZSpace:\n            case APIFormat.XYZJson:\n                return AuthenticationTypeAccessToken;\n            case APIFormat.TomtomV1:\n                return AuthenticationTypeTomTomV1;\n            default:\n                logger.warn(\n                    `#getDefaultAuthMethod: Not supported API format: ${this.params.apiFormat}`\n                );\n                return undefined;\n        }\n    }\n\n    /**\n     * Apply athentication code/token using configured (or default) authentication method.\n     *\n     * @param url\n     * @param init request extra data\n     * @param authenticationCode authentication/token to be applied\n     * @return new url to be used\n     */\n    private applyAuthCode(url: string, init: RequestInit, authenticationCode: string | undefined) {\n        if (authenticationCode === undefined) {\n            return url;\n        }\n        const authMethod = this.params.authenticationMethod || this.getDefaultAuthMethod();\n        if (authMethod === undefined) {\n            return url;\n        }\n\n        if (authMethod.method === AuthenticationMethod.AuthorizationHeader) {\n            if (init.headers === undefined) {\n                init.headers = new Headers();\n            }\n            const authType = authMethod.name || \"Bearer\";\n            (init.headers as Headers).append(\"Authorization\", `${authType} ${authenticationCode}`);\n        } else if (authMethod.method === AuthenticationMethod.QueryString) {\n            const attrName: string = authMethod.name || \"access_token\";\n            const authParams: { [key: string]: string } = {};\n            authParams[attrName] = authenticationCode;\n            url = this.addQueryParams(url, authParams);\n        }\n        return url;\n    }\n\n    /**\n     * Get actual tile URL depending on configured API format.\n     */\n    private dataUrl(tileKey: TileKey): string {\n        if (this.params.url !== undefined) {\n            return this.params.url\n                .replace(\"{x}\", String(tileKey.column))\n                .replace(\"{y}\", String(tileKey.row))\n                .replace(\"{z}\", String(tileKey.level));\n        }\n        let path = [`/${tileKey.level}`, tileKey.column, tileKey.row].join(\n            this.params.apiFormat === APIFormat.XYZSpace ? \"_\" : \"/\"\n        );\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n            case APIFormat.XYZOMV:\n                path += \"/omv\";\n                break;\n            case APIFormat.MapboxV4:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZMVT:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZJson:\n                path += \".json\";\n                break;\n            case APIFormat.XYZSpace:\n                path += \".mvt\";\n                break;\n            case APIFormat.TomtomV1:\n                path += \".pbf\";\n                break;\n            default:\n                logger.warn(`Not supported API format: ${this.params.apiFormat}`);\n                break;\n        }\n\n        return this.params.baseUrl + path;\n    }\n\n    private addQueryParams(url: string, queryParams: { [key: string]: string }): string {\n        let queryString = \"\";\n        let concatinator = url.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n        Object.getOwnPropertyNames(queryParams).forEach(property => {\n            const prop = property as keyof typeof queryParams;\n            queryString += concatinator + prop + \"=\" + queryParams[prop];\n            if (concatinator === \"?\") {\n                concatinator = \"&\";\n            }\n        });\n        return url + queryString;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// tslint:disable-next-line:no-implicit-dependencies\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { GeoCoordinates } from \"@here/harp-geoutils\";\nimport { MapView, MapViewEventNames } from \"@here/harp-mapview\";\nimport { APIFormat, OmvDataSource } from \"@here/harp-omv-datasource\";\nimport { accessToken } from \"../../@here/harp-examples/config\";\n\n// tslint:disable-next-line:no-var-requires\nconst theme = require(\"../resources/theme.json\");\n\nimport \"../css/index.css\";\n\nconst s3Base = \"https://www.harp.gl/docs/\";\n\n//Update initial links to s3 base\ndocument.querySelector<HTMLAnchorElement>(\".examples-link\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#examples-nav\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav-mobile\")!.href = s3Base + \"master/doc/\";\n\n//Update year\n(document.getElementById(\"year\") as HTMLDivElement).innerText = `${new Date().getFullYear()}`;\n\nconst releases = [\n    {\n        date: \"latest\",\n        hash: \"master\",\n        version: \"latest-dev\"\n    }\n];\nconst dropdown = document.querySelector(\"select[name=versions]\") as HTMLSelectElement;\n\nfetch(\"./releases.json\")\n    .then(res => res.json())\n    .then(res => {\n        releases.push(...res);\n        releases.forEach(release => {\n            const option = document.createElement(\"option\");\n            option.innerText = release.version;\n            dropdown.appendChild(option);\n        });\n\n        dropdown.onchange = () => {\n            const selected = dropdown.querySelector<HTMLOptionElement>(\"option:checked\")!;\n            const release = releases.find(x => x.version === selected.innerText);\n            if (!release) {\n                return;\n            }\n            const hash = release.hash;\n            const version = release.version;\n\n            //Update examples button and link\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.href =\n                s3Base + hash + \"/examples/\";\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.innerText =\n                \"Examples\" + (hash !== \"master\" ? ` (${version})` : \"\");\n\n            //Update docs button and link\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + hash + \"/doc/\";\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.innerText =\n                \"Documentation\" + (hash !== \"master\" ? ` (${version})` : \"\");\n        };\n    })\n    .catch(() => {\n        //In case network request to build information fails, add master link\n        const option = document.createElement(\"option\");\n        option.innerText = \"master\";\n        dropdown.appendChild(option);\n    });\n\nfunction main() {\n    const canvas = document.getElementById(\"map\") as HTMLCanvasElement;\n    const map = new MapView({\n        canvas,\n        decoderUrl: \"decoder.bundle.js\",\n        theme: (theme as unknown) as Theme,\n        maxVisibleDataSourceTiles: 40,\n        enableMixedLod: false,\n        tileCacheSize: 100\n    });\n    map.animatedExtrusionHandler.enabled = false;\n\n    const omvDataSource = new OmvDataSource({\n        baseUrl: \"https://xyz.api.here.com/tiles/herebase.02\",\n        apiFormat: APIFormat.XYZOMV,\n        styleSetName: \"tilezen\",\n        authenticationCode: accessToken\n    });\n    map.addDataSource(omvDataSource);\n\n    map.resize(window.innerWidth, 500);\n    window.addEventListener(\"resize\", () => map.resize(window.innerWidth, 500));\n\n    const options = { tilt: 34.3, distance: 1400 };\n    const Boston = new GeoCoordinates(42.361145, -71.057083);\n    let azimuth = 135;\n    map.lookAt(Boston, options.distance, options.tilt, azimuth);\n\n    map.addEventListener(MapViewEventNames.FrameComplete, () => {\n        canvas.style.opacity = \"1\";\n\n        map.addEventListener(MapViewEventNames.Render, () =>\n            map.lookAt(Boston, options.distance, options.tilt, (azimuth += 0.1))\n        );\n        setTimeout(() => {\n            map.beginAnimation();\n        }, 0.5);\n    });\n}\n\nmain();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass IdentityProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        result.min.x = -Math.PI;\n        result.min.y = -Math.PI * 0.5;\n        result.min.z = minAltitude;\n        result.max.x = Math.PI;\n        result.max.y = Math.PI * 0.5;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = THREE.Math.degToRad(geoPoint.longitude);\n        result.y = THREE.Math.degToRad(geoPoint.latitude);\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(worldPoint.y, worldPoint.x, worldPoint.z);\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        const min = this.projectPoint(\n            new GeoCoordinates(geoBox.south, geoBox.west, geoBox.minAltitude)\n        );\n        const max = this.projectPoint(\n            new GeoCoordinates(geoBox.north, geoBox.east, geoBox.maxAltitude)\n        );\n        if (isBox3Like(result)) {\n            result.min.x = min.x;\n            result.min.y = min.y;\n            result.min.z = min.z;\n            result.max.x = max.x;\n            result.max.y = max.y;\n            result.max.z = max.z;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (min.x + max.x) * 0.5;\n            result.position.y = (min.y + max.y) * 0.5;\n            result.position.z = (min.z + max.z) * 0.5;\n            result.extents.x = (max.x - min.x) * 0.5;\n            result.extents.y = (max.y - min.y) * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (max.z - min.z) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Identity [[Projection]] used to convert geo coordinates to unit coordinates and vice versa.\n */\nexport const identityProjection: Projection = new IdentityProjection(1);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { mercatorProjection, webMercatorProjection } from \"./MercatorProjection\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\n/**\n * Transforms the given vector using the provided basis.\n */\nfunction apply(\n    xAxis: Vector3Like,\n    yAxis: Vector3Like,\n    zAxis: Vector3Like,\n    v: Vector3Like\n): Vector3Like {\n    const x = xAxis.x * v.x + yAxis.x * v.y + zAxis.x * v.z;\n    const y = xAxis.y * v.x + yAxis.y * v.y + zAxis.y * v.z;\n    const z = xAxis.z * v.x + yAxis.z * v.y + zAxis.z * v.z;\n    v.x = x;\n    v.y = y;\n    v.z = z;\n    return v;\n}\n\n/**\n * Returns the quadrants for the given longitude. The quadrant is defined as:\n *  - quadrant(+Math.PI * -1.0) = 0\n *  - quadrant(+Math.PI * -0.5) = 1\n *  - quadrant(+Math.PI *  0.0) = 2\n *  - quadrant(+Math.PI *  0.5) = 3\n *  - quadrant(+Math.PI *  1.0) = 4\n *\n * @param longitude The longitude in radians.\n */\nfunction getLongitudeQuadrant(longitude: number) {\n    const oneOverPI = 1 / Math.PI;\n    const quadrantIndex = Math.floor(2 * (longitude * oneOverPI + 1));\n    return THREE.Math.clamp(quadrantIndex, 0, 4);\n}\n\nfunction lengthOfVector3(worldPoint: Vector3Like): number {\n    const d = Math.sqrt(\n        worldPoint.x * worldPoint.x + worldPoint.y * worldPoint.y + worldPoint.z * worldPoint.z\n    );\n    return d;\n}\n\n/**\n * Creates a Box3 enclosing the geobox.\n *\n * @param geoBox Ghe given geobox\n * @param worldBox The resulting axis aligned bounding box.\n */\nfunction makeBox3<Bounds extends Box3Like>(\n    geoBox: GeoBox,\n    worldBox: Bounds,\n    unitScale: number\n): Bounds {\n    const halfEquatorialRadius = (unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n\n    const minLongitude = THREE.Math.degToRad(geoBox.west);\n    const maxLongitude = THREE.Math.degToRad(geoBox.east);\n\n    const minLongitudeQuadrant = getLongitudeQuadrant(minLongitude);\n    const maxLongitudeQuadrant = getLongitudeQuadrant(maxLongitude);\n\n    let xMin = Math.cos(minLongitude);\n    let xMax = xMin;\n    let yMin = Math.sin(minLongitude);\n    let yMax = yMin;\n\n    for (\n        let quadrantIndex = minLongitudeQuadrant + 1;\n        quadrantIndex <= maxLongitudeQuadrant;\n        quadrantIndex++\n    ) {\n        // tslint:disable-next-line: no-bitwise\n        const x = ((quadrantIndex + 1) & 1) * ((quadrantIndex & 2) - 1);\n        xMin = Math.min(x, xMin);\n        xMax = Math.max(x, xMax);\n\n        // tslint:disable-next-line: no-bitwise\n        const y = (quadrantIndex & 1) * ((quadrantIndex & 2) - 1);\n        yMin = Math.min(y, yMin);\n        yMax = Math.max(y, yMax);\n    }\n\n    const cosMaxLongitude = Math.cos(maxLongitude);\n    xMin = Math.min(cosMaxLongitude, xMin);\n    xMax = Math.max(cosMaxLongitude, xMax);\n\n    const sinMaxLongitude = Math.sin(maxLongitude);\n    yMin = Math.min(sinMaxLongitude, yMin);\n    yMax = Math.max(sinMaxLongitude, yMax);\n\n    const xCenter = (xMax + xMin) * halfEquatorialRadius;\n    const xExtent = (xMax - xMin) * halfEquatorialRadius;\n\n    const yCenter = (yMax + yMin) * halfEquatorialRadius;\n    const yExtent = (yMax - yMin) * halfEquatorialRadius;\n\n    // Calculate Z boundaries.\n    const minLatitude = THREE.Math.degToRad(geoBox.south);\n    const maxLatutide = THREE.Math.degToRad(geoBox.north);\n\n    const zMax = Math.sin(maxLatutide);\n    const zMin = Math.sin(minLatitude);\n\n    const zCenter = (zMax + zMin) * halfEquatorialRadius;\n    const zExtent = (zMax - zMin) * halfEquatorialRadius;\n\n    worldBox.min.x = xCenter - xExtent;\n    worldBox.min.y = yCenter - yExtent;\n    worldBox.min.z = zCenter - zExtent;\n    worldBox.max.x = xCenter + xExtent;\n    worldBox.max.y = yCenter + yExtent;\n    worldBox.max.z = zCenter + zExtent;\n\n    return worldBox;\n}\n\n/**\n * Computes the spherical projection of the given geo coordinates.\n *\n * @param geoPoint The geo coordinates.\n * @param worldpoint The resulting world coordinates.\n */\nfunction project<WorldCoordinates extends Vector3Like>(\n    geoPoint: GeoCoordinatesLike,\n    worldpoint: WorldCoordinates,\n    unitScale: number\n): typeof worldpoint {\n    const radius = unitScale + (geoPoint.altitude || 0);\n    const latitude = THREE.Math.degToRad(geoPoint.latitude);\n    const longitude = THREE.Math.degToRad(geoPoint.longitude);\n    const cosLatitude = Math.cos(latitude);\n    worldpoint.x = radius * cosLatitude * Math.cos(longitude);\n    worldpoint.y = radius * cosLatitude * Math.sin(longitude);\n    worldpoint.z = radius * Math.sin(latitude);\n    return worldpoint;\n}\n\nclass SphereProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Spherical;\n\n    /** @override */\n    worldExtent<Bounds extends Box3Like>(\n        _minElevation: number,\n        maxElevation: number,\n        result: Bounds = MathUtils.newEmptyBox3() as Bounds\n    ): Bounds {\n        const radius = this.unitScale + maxElevation;\n        result.min.x = -radius;\n        result.min.y = -radius;\n        result.min.z = -radius;\n        result.max.x = radius;\n        result.max.y = radius;\n        result.max.z = radius;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result: WorldCoordinates = MathUtils.newVector3(0, 0, 0) as WorldCoordinates\n    ): WorldCoordinates {\n        return project(geoPoint, result, this.unitScale);\n    }\n\n    /** @override */\n    unprojectPoint(point: Vector3Like): GeoCoordinates {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y;\n        const parallelRadius = Math.sqrt(parallelRadiusSq);\n        const v = point.z / parallelRadius;\n\n        if (isNaN(v)) {\n            return GeoCoordinates.fromRadians(0, 0, -this.unitScale);\n        }\n\n        const radius = Math.sqrt(parallelRadiusSq + point.z * point.z);\n\n        return GeoCoordinates.fromRadians(\n            Math.atan(v),\n            Math.atan2(point.y, point.x),\n            radius - this.unitScale\n        );\n    }\n\n    /** @override */\n    unprojectAltitude(point: Vector3Like): number {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y + point.z * point.z;\n        return Math.sqrt(parallelRadiusSq) - EarthConstants.EQUATORIAL_RADIUS;\n    }\n\n    /** @override */\n    projectBox<Bounds extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: Bounds = MathUtils.newEmptyBox3() as Bounds\n    ): Bounds {\n        if (isBox3Like(result)) {\n            return makeBox3(geoBox, result, this.unitScale);\n        } else if (isOrientedBox3Like(result)) {\n            if (geoBox.longitudeSpan >= 90) {\n                const bounds = makeBox3(geoBox, MathUtils.newEmptyBox3(), this.unitScale);\n                MathUtils.newVector3(1, 0, 0, result.xAxis);\n                MathUtils.newVector3(0, 1, 0, result.yAxis);\n                MathUtils.newVector3(0, 0, 1, result.zAxis);\n                result.position.x = (bounds.max.x + bounds.min.x) * 0.5;\n                result.position.y = (bounds.max.y + bounds.min.y) * 0.5;\n                result.position.z = (bounds.max.z + bounds.min.z) * 0.5;\n                result.extents.x = (bounds.max.x - bounds.min.x) * 0.5;\n                result.extents.y = (bounds.max.y - bounds.min.y) * 0.5;\n                result.extents.z = (bounds.max.z - bounds.min.z) * 0.5;\n                return result;\n            }\n\n            const { south, west, north, east, center: mid } = geoBox;\n            const midX = mid.longitude;\n            const midY = mid.latitude;\n            const cosSouth = Math.cos(THREE.Math.degToRad(south));\n            const sinSouth = Math.sin(THREE.Math.degToRad(south));\n            const cosWest = Math.cos(THREE.Math.degToRad(west));\n            const sinWest = Math.sin(THREE.Math.degToRad(west));\n            const cosNorth = Math.cos(THREE.Math.degToRad(north));\n            const sinNorth = Math.sin(THREE.Math.degToRad(north));\n            const cosEast = Math.cos(THREE.Math.degToRad(east));\n            const sinEast = Math.sin(THREE.Math.degToRad(east));\n            const cosMidX = Math.cos(THREE.Math.degToRad(midX));\n            const sinMidX = Math.sin(THREE.Math.degToRad(midX));\n            const cosMidY = Math.cos(THREE.Math.degToRad(midY));\n            const sinMidY = Math.sin(THREE.Math.degToRad(midY));\n\n            // Build the orientation of the OBB using the normal vector and its partial derivates.\n\n            // the sperical coordinates of the mid point of the geobox.\n            MathUtils.newVector3(cosMidX * cosMidY, sinMidX * cosMidY, sinMidY, result.zAxis);\n\n            // the partial derivates of the normal vector.\n            MathUtils.newVector3(-sinMidX, cosMidX, 0, result.xAxis);\n            MathUtils.newVector3(-cosMidX * sinMidY, -sinMidX * sinMidY, cosMidY, result.yAxis);\n\n            let width: number;\n            let minY: number;\n            let maxY: number;\n\n            if (south >= 0) {\n                // abs(dot(southWest - southEast, xAxis))\n                width = Math.abs(\n                    cosSouth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                );\n\n                // dot(south, yAxis)\n                minY = cosMidY * sinSouth - sinMidY * cosSouth;\n\n                // dot(northEast, zAxis)\n                maxY =\n                    cosMidY * sinNorth -\n                    sinMidY * cosNorth * (cosMidX * cosEast + sinMidX * sinEast);\n            } else {\n                if (north <= 0) {\n                    // abs(dot(northWest - northEast, xAxis))\n                    width = Math.abs(\n                        cosNorth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                    );\n\n                    // dot(north, yAxis)\n                    maxY = cosMidY * sinNorth - sinMidY * cosNorth;\n                } else {\n                    // abs(dot(west - east, xAxis))\n                    width = Math.abs(cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest));\n\n                    // dot(northEast, yAxis)\n                    maxY =\n                        cosMidY * sinNorth -\n                        sinMidY * cosNorth * (sinMidX * sinEast + cosMidX * cosEast);\n                }\n\n                // dot(southEast, yAxis)\n                minY =\n                    cosMidY * sinSouth -\n                    sinMidY * cosSouth * (cosMidX * cosEast + sinMidX * sinEast);\n            }\n\n            const rMax = (this.unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n            const rMin = (this.unitScale + (geoBox.minAltitude || 0)) * 0.5;\n\n            // min(dot(southEast, zAxis), dot(northEast, zAxis))\n\n            const d = cosMidY * (cosMidX * cosEast + sinMidX * sinEast);\n\n            const minZ = Math.min(\n                cosNorth * d + sinNorth * sinMidY,\n                cosSouth * d + sinSouth * sinMidY\n            );\n\n            MathUtils.newVector3(\n                width * rMax,\n                (maxY - minY) * rMax,\n                rMax - minZ * rMin,\n                result.extents\n            );\n\n            MathUtils.newVector3(0, (minY + maxY) * rMax, rMax + rMax, result.position);\n\n            apply(result.xAxis, result.yAxis, result.zAxis, result.position);\n\n            result.position.x = result.position.x - result.zAxis.x * result.extents.z;\n            result.position.y = result.position.y - result.zAxis.y * result.extents.z;\n            result.position.z = result.position.z - result.zAxis.z * result.extents.z;\n\n            return result;\n        }\n\n        throw new Error(\"Invalid bounding box\");\n    }\n\n    /** @override */\n    unprojectBox(_worldBox: Box3Like): GeoBox {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return lengthOfVector3(worldPoint) - this.unitScale;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        const scale = this.unitScale / (lengthOfVector3(worldPoint) || 1);\n        worldPoint.x *= scale;\n        worldPoint.y *= scale;\n        worldPoint.z *= scale;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 0 };\n        }\n        const scale = 1 / (lengthOfVector3(worldPoint) || 1);\n        normal.x = worldPoint.x * scale;\n        normal.y = worldPoint.y * scale;\n        normal.z = worldPoint.z * scale;\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === mercatorProjection || sourceProjection === webMercatorProjection) {\n            const { x, y, z } = worldPos;\n            const r = this.unitScale;\n            const mx = x / r - Math.PI;\n            const my = y / r - Math.PI;\n            const w = Math.exp(my);\n            const d = w * w;\n            const gx = (2 * w) / (d + 1);\n            const gy = (d - 1) / (d + 1);\n            const scale = r + z;\n\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = Math.cos(mx) * gx * scale;\n            result.y = Math.sin(mx) * gx * scale;\n            result.z = gy * scale;\n\n            if (sourceProjection === webMercatorProjection) {\n                result.z = -result.z;\n            }\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n\n    /** @override */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        const latitude = THREE.Math.degToRad(geoPoint.latitude);\n        const longitude = THREE.Math.degToRad(geoPoint.longitude);\n\n        const cosLongitude = Math.cos(longitude);\n        const sinLongitude = Math.sin(longitude);\n        const cosLatitude = Math.cos(latitude);\n        const sinLatitude = Math.sin(latitude);\n\n        MathUtils.newVector3(\n            cosLongitude * cosLatitude,\n            sinLongitude * cosLatitude,\n            sinLatitude,\n            result.zAxis\n        );\n\n        MathUtils.newVector3(-sinLongitude, cosLongitude, 0, result.xAxis);\n\n        MathUtils.newVector3(\n            -cosLongitude * sinLatitude,\n            -sinLongitude * sinLatitude,\n            cosLatitude,\n            result.yAxis\n        );\n\n        this.projectPoint(geoPoint, result.position);\n\n        return result;\n    }\n}\n\nexport const sphereProjection: Projection = new SphereProjection(EarthConstants.EQUATORIAL_RADIUS);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A class used to represent a quadtree.\n */\nexport class QuadTree {\n    /**\n     * Constructs a new `QuadTree` for the given [[TilingScheme]].\n     *\n     * Example:\n     * ```typescript\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * const geoBox = quadTree.getGeoBox(tileKey);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tilingScheme The TilingScheme used by this `QuadTree`.\n     */\n    constructor(readonly tilingScheme: TilingScheme) {}\n\n    /**\n     * Visits this `QuadTree` and invoke the given accept method with the current [[TileKey]] and\n     * its bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = new GeoCoordinates(latitude, longitude);\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * quadTree.visit((tileKey, geoBox) => {\n     *     if (geoBox.contains(geoPos)) {\n     *         console.log(\"tile\", tileKey, \"contains\", geoPos);\n     *         return tileKey.level < 14; // stop visiting the quadtree if the level is >= 14.\n     *     }\n     *     return false; // stop visiting the quadtree,\n     *                   // the tile's geoBox doesn't contain the given coordinates.\n     * });\n     * ```\n     *\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visit(accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        this.visitTileKey(TileKey.fromRowColumnLevel(0, 0, 0), accept);\n    }\n\n    /**\n     * Visits the subtree starting from the given tile.\n     *\n     * @param tileKey The root of the subtree that should be visited.\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visitTileKey(tileKey: TileKey, accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        const geoBox = this.tilingScheme.getGeoBox(tileKey);\n\n        if (!accept(tileKey, geoBox)) {\n            return;\n        }\n\n        for (const subTileKey of this.tilingScheme.getSubTileKeys(tileKey)) {\n            this.visitTileKey(subTileKey, accept);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { normalizedEquirectangularProjection } from \"../projection/EquirectangularProjection\";\nimport { halfQuadTreeSubdivisionScheme } from \"./HalfQuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * [[TilingScheme]] used by most of the data published by HERE.\n *\n * The `hereTilingScheme` features a half quadtree subdivision scheme and an equirectangular\n * projection.\n */\nexport const hereTilingScheme = new TilingScheme(\n    halfQuadTreeSubdivisionScheme,\n    normalizedEquirectangularProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { webMercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and web Mercator projection.\n */\nexport const webMercatorTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    webMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * The [[TilingScheme]] used by the HERE web tiles.\n *\n * The `mercatorTilingScheme` features a quadtree subdivision scheme and a Mercator projection.\n */\nexport const mercatorTilingScheme = new TilingScheme(quadTreeSubdivisionScheme, mercatorProjection);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { transverseMercatorProjection } from \"../projection/TransverseMercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and\n * transverse Mercator projection.\n */\nexport const polarTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    transverseMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Interface representing a Vector3.\n */\nexport interface Vector3Like {\n    /**\n     * The X position.\n     */\n    x: number;\n\n    /**\n     * The Y position.\n     */\n    y: number;\n\n    /**\n     * The Z position.\n     */\n    z: number;\n}\n\nexport function isVector3Like(v: any): v is Vector3Like {\n    return v && typeof v.x === \"number\" && typeof v.y === \"number\" && typeof v.z === \"number\";\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[TransformLike]] is used to represent transforms with\n * only translation and rotation.\n */\nexport interface TransformLike {\n    /**\n     * The position of this transform.\n     */\n    readonly position: Vector3Like;\n\n    /**\n     * The x-axis of this transform.\n     */\n    readonly xAxis: Vector3Like;\n\n    /**\n     * The y-axis of this transform.\n     */\n    readonly yAxis: Vector3Like;\n\n    /**\n     * The z-axis of this transform.\n     */\n    readonly zAxis: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[TransformLike]].\n *\n * @param object The object.\n */\nexport function isTransformLike(object: {}): object is TransformLike {\n    const transform = object as Partial<TransformLike>;\n    return (\n        transform.position !== undefined &&\n        transform.xAxis !== undefined &&\n        transform.yAxis !== undefined &&\n        transform.zAxis !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Frustum, Matrix4, Plane, Vector3 } from \"three\";\nimport { OrientedBox3Like } from \"./OrientedBox3Like\";\n\nexport class OrientedBox3 implements OrientedBox3Like {\n    /**\n     * The position of the center of this `OrientedBox3`.\n     */\n    readonly position = new Vector3();\n\n    /**\n     * The x-axis of this `OrientedBox3`.\n     */\n    readonly xAxis = new Vector3(1, 0, 0);\n\n    /**\n     * The y-axis of this `OrientedBox3`.\n     */\n    readonly yAxis = new Vector3(0, 1, 0);\n\n    /**\n     * The z-axis of this `OrientedBox3`.\n     */\n    readonly zAxis = new Vector3(0, 0, 1);\n\n    /**\n     * The extents of this `OrientedBox3`.\n     */\n    readonly extents = new Vector3();\n\n    /**\n     * Creates a new `OrientedBox3`.\n     */\n    constructor();\n\n    /**\n     * Creates a new `OrientedBox3` with the given position, orientation and extents.\n     *\n     * @param position The position of the center of the `OrientedBox3`.\n     * @param rotationMatrix The rotation of the `OrientedBox3`.\n     * @param extents The extents of the `OrientedBox3`.\n     */\n    constructor(position: Vector3, rotationMatrix: Matrix4, extents: Vector3);\n\n    /**\n     * Creates a new `OrientedBox3`.\n     *\n     * @hideconstructor\n     */\n    constructor(position?: Vector3, rotationMatrix?: Matrix4, extents?: Vector3) {\n        if (position !== undefined) {\n            this.position.copy(position);\n        }\n\n        if (rotationMatrix !== undefined) {\n            rotationMatrix.extractBasis(this.xAxis, this.yAxis, this.zAxis);\n        }\n\n        if (extents !== undefined) {\n            this.extents.copy(extents);\n        }\n    }\n\n    /**\n     * Create a copy of this [[OrientedBoundingBox]].\n     */\n    clone(): OrientedBox3 {\n        const newBox = new OrientedBox3();\n        newBox.copy(this);\n        return newBox;\n    }\n\n    /**\n     * Copies the values of `other` to this [[OrientedBox3]].\n     * @param other The other [[OrientedBox3]] to copy.\n     */\n    copy(other: OrientedBox3) {\n        this.position.copy(other.position);\n        this.xAxis.copy(other.xAxis);\n        this.yAxis.copy(other.yAxis);\n        this.zAxis.copy(other.zAxis);\n        this.extents.copy(other.extents);\n    }\n\n    /**\n     * Gets the center position of this [[OrientedBox3]].\n     *\n     * @param center The returned center position.\n     */\n    getCenter(center = new Vector3()): Vector3 {\n        return center.copy(this.position);\n    }\n\n    /**\n     * Gets the size of this [[OrientedBox3]].\n     *\n     * @param size The returned size.\n     */\n    getSize(size = new Vector3()): Vector3 {\n        return size.copy(this.extents).multiplyScalar(2);\n    }\n\n    /**\n     * Gets the orientation matrix of this `OrientedBox3`.\n     * @param matrix The output orientation matrix.\n     */\n    getRotationMatrix(matrix: Matrix4 = new Matrix4()): Matrix4 {\n        return matrix.makeBasis(this.xAxis, this.yAxis, this.zAxis);\n    }\n\n    /**\n     * Checks intersection with the given `THREE.Frustum` or array of `THREE.Plane`s.\n     *\n     * @param frustumOrPlanes Frustum or array of planes.\n     */\n    intersects(frustumOrPlanes: Plane[] | Frustum): boolean {\n        const planes: Plane[] = Array.isArray(frustumOrPlanes)\n            ? frustumOrPlanes\n            : frustumOrPlanes.planes;\n\n        for (const plane of planes) {\n            const r =\n                Math.abs(plane.normal.dot(this.xAxis) * this.extents.x) +\n                Math.abs(plane.normal.dot(this.yAxis) * this.extents.y) +\n                Math.abs(plane.normal.dot(this.zAxis) * this.extents.z);\n\n            const d = plane.distanceToPoint(this.position);\n\n            if (d + r < 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if this [[OrientedBox3]] contains the given point.\n     *\n     * @param point A valid point.\n     */\n    contains(point: Vector3): boolean {\n        const dx = point.x - this.position.x;\n        const dy = point.y - this.position.y;\n        const dz = point.z - this.position.z;\n        const x = Math.abs(dx * this.xAxis.x + dy * this.xAxis.y + dz * this.xAxis.z);\n        const y = Math.abs(dx * this.yAxis.x + dy * this.yAxis.y + dz * this.yAxis.z);\n        const z = Math.abs(dx * this.zAxis.x + dy * this.zAxis.y + dz * this.zAxis.z);\n        if (x > this.extents.x || y > this.extents.y || z > this.extents.z) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPoint(point: Vector3): number {\n        return Math.sqrt(this.distanceToPointSquared(point));\n    }\n\n    /**\n     * Returns the squared distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPointSquared(point: Vector3): number {\n        const d = new Vector3();\n        d.subVectors(point, this.position);\n\n        const lengths = [d.dot(this.xAxis), d.dot(this.yAxis), d.dot(this.zAxis)];\n\n        let result = 0;\n\n        for (let i = 0; i < 3; ++i) {\n            const length = lengths[i];\n            const extent = this.extents.getComponent(i);\n            if (length < -extent) {\n                const dd = extent + length;\n                result += dd * dd;\n            } else if (length > extent) {\n                const dd = length - extent;\n                result += dd * dd;\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { enforceBlending } from \"./Utils\";\n\nconst vertexShader: string = `\nuniform float size;\n\nvoid main() {\n    vec3 transformed = vec3(position);\n    vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\n    gl_Position = projectionMatrix * mvPosition;\n    gl_PointSize = size;\n}\n`;\n\nconst fragmentShader: string = `\nuniform vec3 diffuse;\n\nvoid main() {\n    float alpha = 1.0;\n\n    float radius = 0.5;\n    vec2 coords = gl_PointCoord.xy - vec2(0.5);\n    float len = length(coords);\n    float falloff = fwidth(len);\n    float threshold = 1.0 - smoothstep(radius - falloff, radius, len);\n    alpha *= threshold;\n\n    gl_FragColor = vec4(diffuse, alpha);\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface CirclePointsMaterialParameters extends THREE.ShaderMaterialParameters {\n    /**\n     * Point size.\n     */\n    size?: number;\n}\n\nconst DEFAULT_CIRCLE_SIZE = 1;\n\n/**\n * Material designed to render circle points. Note that it is always transparent since the circle\n * shape is created with an alpha channel to benefit an antialising that a mere `discard` could\n * not bring.\n */\nexport class CirclePointsMaterial extends THREE.ShaderMaterial {\n    isCirclePointsMaterial: true;\n    uniforms: { [uniform: string]: THREE.IUniform };\n    vertexShader: string;\n    fragmentShader: string;\n\n    private m_size: number;\n    private m_color: THREE.Color;\n\n    /**\n     * Constructs a new `CirclePointsMaterial`.\n     *\n     * @param parameters The constructor's parameters.\n     */\n    constructor(parameters: CirclePointsMaterialParameters = {}) {\n        parameters.depthTest = false;\n\n        super(parameters);\n        enforceBlending(this);\n\n        this.isCirclePointsMaterial = true;\n        this.type = \"CirclePointsMaterial\";\n        this.vertexShader = vertexShader;\n        this.fragmentShader = fragmentShader;\n\n        this.m_size = parameters.size || DEFAULT_CIRCLE_SIZE;\n        this.m_color = new THREE.Color();\n\n        this.uniforms = {\n            diffuse: new THREE.Uniform(this.m_color),\n            size: new THREE.Uniform(this.m_size)\n        };\n\n        this.extensions.derivatives = true;\n    }\n\n    /**\n     * Gets the circle screen size.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Sets the circle screen size.\n     */\n    set size(size: number) {\n        this.m_size = size;\n        this.uniforms.size.value = size;\n    }\n\n    /**\n     * Gets the diffuse.\n     */\n    get color(): string {\n        return \"#\" + this.m_color.getHexString();\n    }\n\n    /**\n     * Sets the diffuse.\n     */\n    set color(color: string) {\n        this.m_color.set(color);\n        this.uniforms.diffuse.value.set(this.m_color);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/GroupedPriorityList\";\nexport * from \"./lib/Logger\";\nexport * from \"./lib/Math2D\";\nexport * from \"./lib/MathUtils\";\nexport * from \"./lib/Mixins\";\nexport * from \"./lib/assert\";\nexport * from \"./lib/CachedResource\";\nexport * from \"./lib/ContextLogger\";\nexport * from \"./lib/PerformanceTimer\";\nexport * from \"./lib/ObjectUtils\";\nexport * from \"./lib/OptionsUtils\";\nexport * from \"./lib/UriResolver\";\nexport * from \"./lib/UrlUtils\";\nexport * from \"./lib/Functions\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * A `PriorityListElement` has a priority to assist in sorting. The idea is that the items in a\n * grouped priority list will not modify their priority during processing to such an amount, that\n * they will change into another group. Smaller lists are smaller to sort, and in case of resource\n * limitation (maximum number of rendered objects reached), not all items have to be sorted at all.\n */\nexport interface PriorityListElement {\n    /**\n     * The integer value of this priority is used to group objects of \"same\" priority.\n     */\n    priority: number;\n}\n\n/**\n * The `PriorityListGroup` contains a list of [[PriorityListElement]]s that all have the same\n * (integer) priority.\n */\nexport class PriorityListGroup<T extends PriorityListElement> {\n    constructor(readonly priority: number, public elements: T[] = new Array()) {}\n\n    /**\n     * Create and return a deep copy of the `PriorityListGroup<T>`.\n     *\n     * @returns A clone of the `PriorityListGroup<T>`.\n     */\n    clone(): PriorityListGroup<T> {\n        return new PriorityListGroup<T>(this.priority, this.elements.slice());\n    }\n}\n\n/**\n * The `PriorityListGroupMap` is a map to map the (integer) priority to a [[PriorityListGroup]].\n */\nexport type PriorityListGroupMap<T extends PriorityListElement> = Map<number, PriorityListGroup<T>>;\n\n/**\n * The `GroupedPriorityList` contains a [[PriorityListGroupMap]] to manage a larger number of items\n * in priority groups.\n */\nexport class GroupedPriorityList<T extends PriorityListElement> {\n    readonly groups: PriorityListGroupMap<T> = new Map();\n    private m_sortedGroups: Array<PriorityListGroup<T>> | undefined;\n    /**\n     * Add an element to the `GroupedPriorityList`. Selects group based on the elements priority.\n     *\n     * @param element Element to be added.\n     */\n    add(element: T): void {\n        this.getGroup(element.priority).elements.push(element);\n    }\n\n    /**\n     * Remove an element from the `GroupedPriorityList`.\n     *\n     * Note: It is required that the priority is the same as it was when the element has been added.\n     * Otherwise, the removal will fail.\n     *\n     * @param element Element to be removed.\n     * @returns `True` if the element was removed, `false` otherwise.\n     */\n    remove(element: T): boolean {\n        const group = this.getGroup(element.priority);\n        if (group !== undefined) {\n            const foundIndex = group.elements.indexOf(element);\n            if (foundIndex >= 0) {\n                group.elements.splice(foundIndex, 1);\n                if (group.elements.length === 0) {\n                    const normalizedPriority = Math.floor(element.priority);\n                    this.groups.delete(normalizedPriority);\n                    if (this.m_sortedGroups) {\n                        this.m_sortedGroups = [];\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Remove all internal [[PriorityListGroup]]s.\n     */\n    clear(): void {\n        this.groups.clear();\n        if (this.m_sortedGroups) {\n            this.m_sortedGroups = [];\n        }\n    }\n\n    /**\n     * Merge another [[GroupedPriorityList]] into this one.\n     *\n     * @param other Other group to merge.\n     */\n    merge(other: GroupedPriorityList<T>): GroupedPriorityList<T> {\n        for (const otherGroup of other.groups) {\n            const group = this.findGroup(otherGroup[1].priority);\n            if (group === undefined) {\n                this.groups.set(Math.floor(otherGroup[1].priority), otherGroup[1].clone());\n                if (this.m_sortedGroups) {\n                    this.m_sortedGroups = [];\n                }\n                continue;\n            }\n            group.elements = group.elements.concat(otherGroup[1].elements);\n        }\n        return this;\n    }\n\n    /**\n     * Return a sorted list of [[PriorityListGroup]]s.\n     */\n    get sortedGroups(): Array<PriorityListGroup<T>> {\n        if (this.m_sortedGroups && this.m_sortedGroups.length > 0) {\n            return this.m_sortedGroups;\n        }\n\n        if (!this.m_sortedGroups) {\n            this.m_sortedGroups = [];\n        }\n        for (const priorityList of this.groups) {\n            this.m_sortedGroups.push(priorityList[1]);\n        }\n\n        this.m_sortedGroups.sort((a: PriorityListGroup<T>, b: PriorityListGroup<T>) => {\n            return b.priority - a.priority;\n        });\n        return this.m_sortedGroups;\n    }\n\n    /**\n     * Apply function to all elements in this `GroupedPriorityList`.\n     *\n     * @param {(element: T) => void} fun Function to apply.\n     */\n    forEach(fun: (element: T) => void): void {\n        for (const group of this.groups) {\n            group[1].elements.forEach(fun);\n        }\n    }\n\n    /**\n     * Count the number of elements in this `GroupedPriorityList`.\n     */\n    count(): number {\n        let n = 0;\n        for (const group of this.groups) {\n            n += group[1].elements.length;\n        }\n        return n;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private findGroup(priority: number): PriorityListGroup<T> | undefined {\n        const normalizedPriority = Math.floor(priority);\n        const group = this.groups.get(normalizedPriority);\n        return group;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private getGroup(priority: number): PriorityListGroup<T> {\n        let group = this.findGroup(priority);\n\n        if (group === undefined) {\n            const normalizedPriority = Math.floor(priority);\n            group = new PriorityListGroup<T>(normalizedPriority);\n            this.groups.set(normalizedPriority, group);\n            if (this.m_sortedGroups) {\n                this.m_sortedGroups = [];\n            }\n        }\n\n        return group;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./ConsoleChannel\";\nexport * from \"./IChannel\";\nexport * from \"./ILogger\";\nexport * from \"./Logger\";\nexport * from \"./LoggerManager\";\nexport * from \"./MultiChannel\";\nexport * from \"./WorkerChannel\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { LoggerManagerImpl } from \"./LoggerManagerImpl\";\n\n/**\n * The LoggerManager class implements a singleton object that handles logging.\n *\n * Example:\n *\n * ```typescript\n *\n * const logger = LoggerManager.instance.create(\"MyFontLoaderClass\");\n * if (missingFonts.length > 0) {\n *     logger.error(\"These fonts can not be loaded: \", missingFonts);\n * } else {\n *     logger.log(\"All fonts have been loaded.\");\n * }\n * ```\n */\nexport class LoggerManager {\n    private static m_instance: ILoggerManager;\n\n    static get instance(): ILoggerManager {\n        return this.m_instance || (this.m_instance = new LoggerManagerImpl());\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConsoleChannel } from \"./ConsoleChannel\";\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { Logger } from \"./Logger\";\nimport { WorkerChannel } from \"./WorkerChannel\";\n\n/**\n * LoggerManagerImpl is the class for the singleton instance of the logger manager.\n * It handles channels and loggers.\n */\n\nexport class LoggerManagerImpl implements ILoggerManager {\n    channel: IChannel;\n    private readonly m_loggers: ILogger[] = [];\n    private m_levelSetForAll?: LogLevel;\n\n    constructor() {\n        this.channel =\n            typeof self === \"undefined\" || typeof self.document !== \"undefined\"\n                ? new ConsoleChannel()\n                : new WorkerChannel();\n    }\n\n    getLoggerNames(): string[] {\n        return this.m_loggers.map(logger => logger.name);\n    }\n\n    getLogger(name: string): ILogger | undefined {\n        return this.m_loggers.find(logger => logger.name === name);\n    }\n\n    create(loggerName: string, options: LoggerOptions = {}): ILogger {\n        if (\n            this.m_levelSetForAll !== undefined &&\n            (options.level === undefined || options.level < this.m_levelSetForAll)\n        ) {\n            options.level = this.m_levelSetForAll;\n        }\n        const logger = new Logger(loggerName, this.channel, options);\n        this.m_loggers.push(logger);\n        return logger;\n    }\n\n    dispose(logger: ILogger) {\n        const found = this.m_loggers.indexOf(logger);\n        if (found < 0) {\n            throw new Error(`Cannot unregister \"${logger}\" : no such logger registered.`);\n        }\n        this.m_loggers.splice(found, 1);\n    }\n\n    updateAll(options: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            logger.update(options);\n        }\n    }\n\n    update(loggerName: string, config: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            if (logger.name === loggerName) {\n                logger.update(config);\n            }\n        }\n    }\n\n    enableAll(enabled: boolean) {\n        for (const logger of this.m_loggers) {\n            logger.enabled = enabled;\n        }\n    }\n\n    enable(loggerName: string, value: boolean) {\n        this.update(loggerName, { enabled: value });\n    }\n\n    setLogLevelForAll(level: LogLevel) {\n        this.m_levelSetForAll = level;\n        for (const logger of this.m_loggers) {\n            logger.level = level;\n        }\n    }\n\n    setLogLevel(loggerName: string, level: LogLevel) {\n        this.update(loggerName, { level });\n    }\n\n    setChannel(channel: IChannel) {\n        this.channel = channel;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class allowing mixing several channels.\n */\nexport class MultiChannel implements IChannel {\n    private readonly channels: IChannel[] = [];\n    constructor(...channels: IChannel[]) {\n        this.channels = channels;\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.error(message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.debug(message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.info(message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.log(message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.trace(message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.warn(message, ...optionalParams);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace Math2D {\n    /**\n     * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n     * objects with two numbers each). Should be faster.\n     */\n    export class Box {\n        /**\n         * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n         * objects with two numbers each). Should be faster.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        constructor(public x = 0, public y = 0, public w = 0, public h = 0) {}\n\n        /**\n         * Set new values to all properties of the box.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        set(x: number, y: number, w: number, h: number) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n            this.h = h;\n        }\n\n        /**\n         * Test box for inclusion of point.\n         *\n         * @param x X coordinate of point.\n         * @param y Y coordinate of point.\n         */\n        contains(x: number, y: number): boolean {\n            return this.x <= x && this.x + this.w >= x && this.y <= y && this.y + this.h >= y;\n        }\n\n        /**\n         * Test box for inclusion of another box.\n         *\n         * @param other Box 2 to test for inclusion.\n         */\n        containsBox(other: Box): boolean {\n            const xmax = other.x + other.w;\n            const ymax = other.y + other.h;\n            return (\n                this.contains(other.x, other.y) &&\n                this.contains(xmax, other.y) &&\n                this.contains(other.x, ymax) &&\n                this.contains(xmax, ymax)\n            );\n        }\n\n        /**\n         * Test two boxes for intersection.\n         *\n         * @param other Box 2 to test for intersection.\n         */\n        intersects(other: Box): boolean {\n            return (\n                this.x <= other.x + other.w &&\n                this.x + this.w >= other.x &&\n                this.y <= other.y + other.h &&\n                this.y + this.h >= other.y\n            );\n        }\n    }\n\n    /**\n     * Box to store UV coordinates.\n     */\n    export interface UvBox {\n        s0: number;\n        t0: number;\n        s1: number;\n        t1: number;\n    }\n\n    /**\n     * Compute squared distance between two 2D points `a` and `b`.\n     *\n     * @param ax Point a.x\n     * @param ay Point a.y\n     * @param bx Point b.x\n     * @param by Point b.y\n     * @returns Squared distance between the two points\n     */\n    export function distSquared(ax: number, ay: number, bx: number, by: number): number {\n        return (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n    }\n\n    /**\n     * Computes the squared length of a line.\n     *\n     * @param line An array of that forms a line via [x,y,z,x,y,z,...] tuples.\n     */\n    export function computeSquaredLineLength(line: number[]): number {\n        let squaredLineLength: number = 0;\n\n        const length = line.length - 4;\n        for (let i = 0; i < length; i += 3) {\n            const xDiff = line[i + 3] - line[i];\n            const yDiff = line[i + 4] - line[i + 1];\n            squaredLineLength += xDiff * xDiff + yDiff * yDiff;\n        }\n        return squaredLineLength;\n    }\n\n    /**\n     * Compute squared distance between a 2D point and a 2D line segment.\n     *\n     * @param px Test point X\n     * @param py Test point y\n     * @param l0x Line segment start X\n     * @param l0y Line segment start Y\n     * @param l1x Line segment end X\n     * @param l1y Line segment end Y\n     * @returns Squared distance between point and line segment\n     */\n    export function distToSegmentSquared(\n        px: number,\n        py: number,\n        l0x: number,\n        l0y: number,\n        l1x: number,\n        l1y: number\n    ): number {\n        const lineLengthSuared = distSquared(l0x, l0y, l1x, l1y);\n        if (lineLengthSuared === 0) {\n            return distSquared(px, py, l0x, l0y);\n        }\n        let t = ((px - l0x) * (l1x - l0x) + (py - l0y) * (l1y - l0y)) / lineLengthSuared;\n        t = Math.max(0, Math.min(1, t));\n        return distSquared(px, py, l0x + t * (l1x - l0x), l0y + t * (l1y - l0y));\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace MathUtils {\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     *\n     * @returns Clamped value.\n     */\n    export function clamp(value: number, min: number, max: number): number {\n        return value < min ? min : value > max ? max : value;\n    }\n\n    /**\n     * Returns a linear interpolation between the values of edge0 and edge1 based on the factor.\n     *\n     * Given two known points the linear interpolant between these points may be presented as\n     * straight line. This means that for given factor change the resulting change of return\n     * value is always const.\n     * @see https://en.wikipedia.org/wiki/Linear_interpolation\n     *\n     * @param edge0\n     * @param edge1\n     * @param factor Interpolation factor that ranges between: 0 <= x <= 1.\n     */\n    export function lerp(edge0: number, edge1: number, factor: number): number {\n        return edge0 * (1 - factor) + edge1 * factor;\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smoothStep(edge0: number, edge1: number, x: number) {\n        // Scale, bias and saturate x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * (3 - 2 * x);\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     *\n     * Improved version by Ken Perlin, which has zero 1st- and 2nd-order derivatives at `x = 0` and\n     * `x = 1`:\n     *\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smootherStep(edge0: number, edge1: number, x: number) {\n        // Scale, and clamp x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n\n    /**\n     * Maps a number from one range to another.\n     *\n     * @param val The incoming value to be converted.\n     * @param inMin Lower bound of the value's current range.\n     * @param inMax Upper bound of the value's current range.\n     * @param outMin Lower bound of the value's target range.\n     * @param outMax Upper bound of the value's target range.\n     */\n    export function map(val: number, inMin: number, inMax: number, outMin: number, outMax: number) {\n        return ((val - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n    }\n\n    /**\n     * Returns the smaller of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function min2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.min(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the larger of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function max2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.max(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value of a given number is inside an upper or lower bound. The bounds may be\n     * undefined, in which case their value is ignored.\n     *\n     * @param value Value to check.\n     * @param lowerBound The lower bound to check the value against.\n     * @param upperBound The upper bound to check the value against.\n     *\n     * @returns `true` if value is inside the bounds or if the bounds are `undefined`, `false`\n     *          otherwise.\n     */\n    export function isClamped(\n        value: number,\n        lowerBound: number | undefined,\n        upperBound: number | undefined\n    ): boolean {\n        if (lowerBound !== undefined && value < lowerBound) {\n            return false;\n        }\n        if (upperBound !== undefined && value > upperBound) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Smoothly interpolates between two values using cubic formula\n     *\n     * @param startValue\n     * @param endValue\n     * @param time\n     * @returns Result of the interpolation within the range of `[startValue, endValue]`\n     */\n    export function easeInOutCubic(startValue: number, endValue: number, time: number): number {\n        const timeValue =\n            time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;\n        return startValue + (endValue - startValue) * timeValue;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Copy methods and properties from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods and properties into.\n * @param baseCtors Class to take all methods and properties from.\n */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\n/**\n * Copy methods from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods into.\n * @param baseCtors Class to take all methods from.\n */\nexport function applyMixinsWithoutProperties(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            const descriptor = Object.getOwnPropertyDescriptor(baseCtor.prototype, name);\n            if (\n                descriptor !== undefined &&\n                descriptor.get === undefined &&\n                name !== \"constructor\"\n            ) {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            }\n        });\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\ndeclare const process: any;\n\n// cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\n\n//TODO: Make assertHandler configurable\n\n/**\n * Implementation of assert as a development help\n *\n * Note - this is deliberately a global function so that minimizers remove the\n * entire call when building for production.\n *\n * @hidden\n * @param condition Condition to match, if false, throws an Error(message)\n * @param message Optional message, defaults to \"ASSERTION failed\"\n */\nexport function assert(condition: boolean, message?: string): void {\n    if (!isProduction) {\n        if (!condition) {\n            throw new Error(message !== undefined ? message : \"ASSERTION failed\");\n        }\n    }\n}\n\nexport function assertExists<T>(element: T | undefined, message?: string): T {\n    if (!isProduction) {\n        if (element === undefined || element === null) {\n            throw new Error(\n                message !== undefined ? message : \"ASSERTION failed: Element is undefined or null\"\n            );\n        }\n    }\n    return element!;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Refinement of `console` interface only for important information i.e `info`, `warn` and `errors`.\n */\nexport interface ISimpleChannel {\n    info(message?: any, ...optionalParams: any[]): void;\n    warn(message?: any, ...optionalParams: any[]): void;\n    error(message?: any, ...optionalParams: any[]): void;\n}\n\n/**\n * Extension of [[ISimpleChannel]] to support contextual logging by adding stack of prefixes.\n */\nexport interface IContextLogger extends ISimpleChannel {\n    /**\n     * Push \"attribute-like\" context.\n     */\n    pushAttr(name: string): void;\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number): void;\n\n    /**\n     * Remove current context from top of stack.\n     */\n    pop(): void;\n}\n\n/**\n * Context-aware logger that decorates log message with stack-based prefix, emits `headerMessage`\n * before first actual log message.\n */\nexport class ContextLogger implements IContextLogger {\n    private readonly context: string[] = [];\n    private m_headerLogged = false;\n\n    /**\n     * Construct a context-aware logger that logs to `m_logger`.\n     */\n    constructor(readonly m_logger: ISimpleChannel, readonly headerMessage: string) {}\n\n    /**\n     * Push \"attribute-like\" context.\n     *\n     * Following log messages will be prefixed with `name` or `.name` depending on current context.\n     */\n    pushAttr(name: string) {\n        this.context.push(`${this.context.length > 0 ? \".\" : \"\"}${name}`);\n    }\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number) {\n        this.context.push(`[${index}]`);\n    }\n\n    pop() {\n        this.context.pop();\n    }\n\n    // They, are public member functions it's just tslint who doesn't understand this.\n\n    // tslint:disable:member-ordering\n    warn = this.createLogMethod(\"warn\");\n    info = this.createLogMethod(\"info\");\n    error = this.createLogMethod(\"error\");\n    // tslint:enable:member-ordering\n\n    private createLogMethod(severity: \"warn\" | \"info\" | \"error\") {\n        return (message: string, ...rest: any[]) => {\n            if (!this.m_headerLogged) {\n                this.m_logger.info(this.headerMessage);\n                this.m_headerLogged = true;\n            }\n            this.m_logger[severity](`${this.context.join(\"\")}: ${message}`, ...rest);\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n/**\n * See:\n * https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now\n */\n/* tslint:ensable:max-line-length */\n\nexport class PerformanceTimer {\n    /**\n     * Returns timestamp in milliseconds since page load.\n     *\n     * If the [[DOMHighResTimeStamp]] is supported, the resolution is up to 5 microseconds,\n     * otherwise it is in milliseconds. Timespans are computed by taking the difference between two\n     * samples.\n     *\n     * Example:\n     * ```typescript\n     * const now = PerformanceTimer.now();\n     * // call some expensive function for which you want to check the duration.\n     * const end = PerformanceTimer.now();\n     * const elapsedTime = end - now;\n     * ```\n     */\n    static now(): number {\n        return PerformanceTimer.nowFunc();\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    private static readonly instance = new PerformanceTimer();\n\n    private static readonly nowFunc: () => number = PerformanceTimer.getNowFunc();\n\n    private static getNowFunc() {\n        if (typeof performance !== \"undefined\" && typeof performance.now !== \"undefined\") {\n            return () => performance.now();\n        }\n\n        // fall back to Date.getTime()\n        return () => {\n            return new Date().getTime();\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Deep clone of object.\n *\n * Like `JSON.parse(JSON.stringify(obj))`, but supports basic javascript types (string, number,\n * object), `Date` and `RegExp`s and cycles.\n *\n * Throws error if enounters object with `prototype` assuming that in general class instances\n * cannot be reliably cloned by generic algorithm.\n */\nexport function cloneDeep<T>(obj: T): T {\n    const cache: Map<object, object> = new Map();\n    function cloneInternal(src: any): any {\n        if (src === null) {\n            return null;\n        } else if (typeof src === \"object\") {\n            const cached = cache.get(src);\n            if (cached !== undefined) {\n                return cached;\n            }\n\n            if (Array.isArray(src)) {\n                const result: any[] = [];\n                cache.set(src, result);\n                result.length = src.length;\n                for (let i = 0; i < result.length; ++i) {\n                    result[i] = cloneInternal(src[i]);\n                }\n                return result;\n            } else if (src instanceof Date) {\n                const result = new Date(src.getTime());\n                cache.set(src, result);\n                return result;\n            } else if (src instanceof RegExp) {\n                const result = new RegExp(src.source, src.flags);\n                cache.set(src, result);\n                return result;\n            } else if (src.constructor !== Object) {\n                throw new Error(\"cloneDeep doesn't support objects with custom prototypes\");\n            } else {\n                const result: typeof src = {};\n                cache.set(src, result);\n                for (const key in src) {\n                    if (src.hasOwnProperty(key)) {\n                        result[key] = cloneInternal(src[key]);\n                    }\n                }\n                return result;\n            }\n        } else {\n            // string, number, boolean, undefined and functions are returned as is\n            return src;\n        }\n    }\n\n    const r = cloneInternal(obj);\n    cache.clear();\n    return r;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Get first defined value.\n *\n * Specialized \"replacement\" for `a || b || c` used frequently to get value from various sources\n * (defaults, configs  constants).\n * In contrast to `||`, this function provides proper typing for usual use cases (constant as last\n * argument) and correct treatment of `null` and `undefined`.\n *\n * If last parameter is \"defined\" then return type is `T`, otherwise return type is `T | undefined`.\n *\n * Usage example:\n *\n *     interface Config {\n *         x?: number;\n *     }\n *     const someConfig: Config = {};\n *     const val: number | undefined = undefined;\n *     const DEFAULT = 5;\n *     const x = getOptionValue(val, someConfig.x, DEFAULT);\n *         // typeof x === 'number' because DEFAULT is defined\n *     const y = getOptionValue(val, someConfig.x);\n *         // typeof y === 'number | undefined' because someConfig.x is possibly undefined\n */\n// specialized overloads with last param defined params overload\nexport function getOptionValue<T>(a: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T | undefined, d: T): T;\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined;\n\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined {\n    for (const candidate of values) {\n        if (candidate !== undefined && candidate !== null) {\n            return candidate;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Merge options into existing parameters object.\n *\n * Convenience helper with _similar_ semantics as:\n *\n *     const finalParams1 = { ...defaults, ... options };\n *     const finalParams2 = Object.assign({}, defaults, options);\n *\n * This function doesn't copy _extra_ properties of `options` that doesn't exist in `defaults`.\n * `defaults` is used as _parameters_ template.\n *\n * This doc uses following notion of `option` and `parameter` terms:\n * * `parameter` is a variable, or 'almost constant' of procedure/function/algorith/object\n *    * `parameter` usually have sensible and usually used default\n *    * `parameter` is always defined (no `undefined`, `null` or `?` in type)\n *    * `parameter` can be overriden by specyfying `option` with same name\n * * `option` means value that may be passed optionally, overrides `parameter` value with same name\n *\n * Usage:\n *\n *     interface FooParams {\n *         useTextures: boolean;\n *         opacity: number;\n *     }\n *\n *     const FOO_DEFAULTS: FooParams = {\n *         useTextures: true,\n *         opacity: 0.8\n *     };\n *\n *     type FooOptions = Partial<FooParams>;\n *\n *     function doSomething(options: FooOptions) {\n *         const params = mergeWithOptions(FOO_DEFAULTS, options);\n *             // typeof params === FooParams\n *             // params.opacity = 0.5\n *             // params.useTextures = true\n *             // params.someOtherOptionFromOtherApi is not defined\n *     }\n *     const opt = {opacity: 0.5, someOtherOptionFromOtherApi: 'aaa'};\n *     doSomething(opt);\n *\n * Rationale:\n *   * both `Object.assign` and spread operator copy extra options\n *   * `Object.assign` & `spread operator` may copy `undefined` and `null`s if they really exist\n *     in options object\n *\n * @param parameters parmeters template object holding all expected parameters\n * @param options options object\n * @returns new object with `parameters` overriden by values from `options`\n */\nexport function mergeWithOptions<T extends object>(parameters: T, options?: Partial<T>): T {\n    // NOTE: `as object` needed due to TypeScript bug:\n    //       https://github.com/Microsoft/TypeScript/issues/14409\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    const result = { ...(parameters as object) } as T;\n    if (options === undefined || options === null) {\n        return result;\n    }\n    for (const prop in parameters) {\n        if (parameters.hasOwnProperty(prop)) {\n            const optionValue = options[prop];\n            if (optionValue !== undefined && optionValue !== null) {\n                result[prop] = optionValue as any;\n            }\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { resolveReferenceUri } from \"./UrlUtils\";\n\n/**\n * Custom, app-specific URI resolver interface.\n */\nexport interface UriResolver {\n    /**\n     * Attempt to resolve `URI` to `URL`.\n     *\n     * If given resolver doesn't know about this specific kind of `URI`, it should return string as\n     * received.\n     *\n     * @param input `URI`\n     * @returns actual `URL` if this handler knows how locate given `uri` or original `uri`\n     */\n    resolveUri(uri: string): string;\n}\n\nexport interface PrefixUriResolverDefinition {\n    [prefix: string]: string;\n}\n\n/**\n * Basic, import-map like [[UriResolver]].\n *\n * Resolves `uris` basing on exact or prefix match of `key` from `definitions`.\n *\n * In definitions, `key` is matched against input uri with following strategy:\n *  - `key` without trailing `/` -> `key` and input `uri` must be identical\n *  - `key` with trailing `/`, -> `key` is treated as \"package prefix\", so `uri` must start with\n *    `key`\n *\n * Example:\n * ```\n * {\n *     \"local://poiMasterList\": \"/assets/poiMasterList.json\"\n *        // will match only 'local://poiMasterList' and resolve `/assets/poiMasterList.json`\n *     \"local://icons/\": \"/assets/icons/\"\n *        // will match only 'local://icons/ANYPATH' (and similar) and resolve to\n *        // `/assets/icons/ANYPATH\n * }\n * ```\n * Inspired by [`WICG` import maps proposal](https://github.com/WICG/import-maps#the-import-map).\n */\nexport class PrefixMapUriResolver implements UriResolver {\n    constructor(readonly definitions: PrefixUriResolverDefinition) {}\n\n    resolveUri(uri: string) {\n        return Object.keys(this.definitions).reduce((r, key) => {\n            if (key.endsWith(\"/\") && r.startsWith(key)) {\n                const newPrefix = this.definitions[key];\n                return newPrefix + r.substr(key.length);\n            } else if (r === key) {\n                return this.definitions[key];\n            }\n            return r;\n        }, uri);\n    }\n}\n\n/**\n * [UriResolver] that resolve relative `uri`s against to parent resource `uri`.\n */\nexport class RelativeUriResolver implements UriResolver {\n    constructor(readonly parentUri: string) {}\n\n    resolveUri(uri: string) {\n        return resolveReferenceUri(this.parentUri, uri);\n    }\n}\n\n/**\n * Compose URI resolvers.\n *\n * Creates new [[UriResolver]] that applies resolvers in orders or arguments.\n *\n * Example:\n *\n *     const themeUrl = ...; // url of parent object\n *     const childUrlResolver = composeUrlResolvers(\n *           new RelativeUriResolver(themeUrl),\n *           defaultUrlResolver\n *     );\n */\nexport function composeUriResolvers(...resolvers: Array<UriResolver | undefined>): UriResolver {\n    return {\n        resolveUri(originalUrl: string) {\n            return resolvers.reduce((url, resolver) => {\n                if (resolver !== undefined) {\n                    return resolver.resolveUri(url);\n                } else {\n                    return url;\n                }\n            }, originalUrl);\n        }\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Chains two functions for further assigning as one wrapped callback function\n */\nexport function chainCallbacks<T extends (this: unknown, ...args: any[]) => any>(\n    f1: T | null | undefined,\n    f2: T\n): T {\n    return function(this: any, ...args: any[]): ReturnType<T> {\n        if (f1) {\n            f1.apply(this, args);\n        }\n        return f2.apply(this, args);\n    } as T;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { baseUrl } from \"./UrlUtils\";\n\n/**\n * Get base URL for from where relative URLs will be loaded.\n *\n * * In browser, it resolves to `baseUrl(location.href)` i.e document's base URL\n * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n *\n * * In node, it resolves to `file://${process.cwd()}`.\n */\nexport function getAppBaseUrl() {\n    return baseUrl(window.location.href);\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    DisplacementFeature,\n    DisplacementFeatureParameters,\n    ExtrusionFeature,\n    ExtrusionFeatureParameters,\n    FadingFeature,\n    FadingFeatureParameters\n} from \"./MapMeshMaterials\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport { enforceBlending, setShaderDefine, setShaderMaterialDefine } from \"./Utils\";\n\nconst vertexSource: string = `\n#define EDGE_DEPTH_OFFSET 0.0001\n\nattribute vec3 position;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 edgeColor;\nuniform float edgeColorMix;\n\n#ifdef USE_DISPLACEMENTMAP\nattribute vec3 normal;\nattribute vec2 uv;\nuniform sampler2D displacementMap;\n#endif\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_vertex>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\nvoid main() {\n\n    #ifdef USE_COLOR\n    vColor = mix(edgeColor.rgb, color.rgb, edgeColorMix);\n    #else\n    vColor = edgeColor.rgb;\n    #endif\n\n    vec3 transformed = vec3( position );\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_vertex>\n    #endif\n\n    #ifdef USE_DISPLACEMENTMAP\n    transformed += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n\n    vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n    gl_Position = projectionMatrix * mvPosition;\n    // After projection gl_Position contains clip space coordinates of each vertex\n    // before perspective division (1 / w), thus only vertexes with -w < z < w should\n    // be displayed and offset. We offset only those edges which z coordinate in NDC\n    // space is between: -inf < z < 1\n    float depthOffset = step(-1.0, -gl_Position.z / gl_Position.w) * EDGE_DEPTH_OFFSET;\n    gl_Position.z -= depthOffset;\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_fragment>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\nvoid main() {\n    float alphaValue = 1.0;\n    gl_FragColor = vec4(vColor, alphaValue);\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_fragment>\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[EdgeMaterial]].\n */\nexport interface EdgeMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters,\n        ExtrusionFeatureParameters {\n    /**\n     * Edge color.\n     */\n    color?: number | string;\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    colorMix?: number;\n}\n\n/**\n * Material designed to render the edges of extruded buildings using GL_LINES. It supports solid\n * colors, vertex colors, color mixing and distance fading.\n */\nexport class EdgeMaterial extends THREE.RawShaderMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    static DEFAULT_COLOR: number = 0x000000;\n    static DEFAULT_COLOR_MIX: number = 0.0;\n\n    /**\n     * Constructs a new `EdgeMaterial`.\n     *\n     * @param params `EdgeMaterial` parameters.\n     */\n    constructor(params?: EdgeMaterialParameters) {\n        const defines: { [key: string]: any } = {};\n        const hasDisplacementMap = params !== undefined && params.displacementMap !== undefined;\n        const hasExtrusion =\n            params !== undefined &&\n            params.extrusionRatio !== undefined &&\n            params.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN &&\n            params.extrusionRatio < ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        if (hasDisplacementMap) {\n            setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n        }\n        if (hasExtrusion) {\n            setShaderDefine(defines, \"USE_EXTRUSION\", true);\n        }\n\n        const shaderParams = {\n            name: \"EdgeMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                edgeColor: new THREE.Uniform(new THREE.Color(EdgeMaterial.DEFAULT_COLOR)),\n                edgeColorMix: new THREE.Uniform(EdgeMaterial.DEFAULT_COLOR_MIX),\n                fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                extrusionRatio: new THREE.Uniform(ExtrusionFeatureDefs.DEFAULT_RATIO_MAX),\n                displacementMap: new THREE.Uniform(\n                    hasDisplacementMap ? params!.displacementMap : new THREE.Texture()\n                )\n            },\n            depthWrite: false,\n            defines\n        };\n        super(shaderParams);\n        enforceBlending(this);\n\n        FadingFeature.patchGlobalShaderChunks();\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                // Color may be set directly on object (omitting class setter), because we already\n                // know that is does no require any special handling nor material update\n                // (see: set color()).\n                this.color.set(params.color as any);\n            }\n            if (params.colorMix !== undefined) {\n                this.colorMix = params.colorMix;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.extrusionRatio !== undefined) {\n                this.extrusionRatio = params.extrusionRatio;\n            }\n        }\n    }\n\n    /**\n     * Edge color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.edgeColor.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.edgeColor.value.copy(value);\n    }\n\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    get colorMix(): number {\n        return this.uniforms.edgeColorMix.value as number;\n    }\n    set colorMix(value: number) {\n        if (this.uniforms.edgeColorMix.value === value) {\n            return;\n        }\n        this.uniforms.edgeColorMix.value = value;\n        setShaderMaterialDefine(this, \"USE_COLOR\", value > 0.0);\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        if (this.uniforms.fadeFar.value === value) {\n            return;\n        }\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get extrusionRatio(): number {\n        return this.uniforms.extrusionRatio.value as number;\n    }\n    set extrusionRatio(value: number) {\n        if (this.uniforms.extrusionRatio.value === value) {\n            return;\n        }\n        this.uniforms.extrusionRatio.value = value;\n        // NOTE: We could also disable shader extrusion chunks when it hits\n        // ExtrusionFeatureDefs.DEFAULT_RATIO_MAX value, but this would cause shader re-compile.\n        const useExtrusion = value >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN;\n        setShaderMaterialDefine(this, \"USE_EXTRUSION\", useExtrusion);\n    }\n\n    get displacementMap(): THREE.Texture | undefined {\n        return this.uniforms.displacementMap.value;\n    }\n\n    set displacementMap(map: THREE.Texture | undefined) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== undefined;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ExtrusionFeatureDefs } from \"../MapMeshMaterialsDefs\";\n\nconst MIN_BUILDING_HEIGHT_SQUARED =\n    ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT * ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT;\n\nexport default {\n    extrusion_pars_vertex: `\n// Extrusion axis (xyz: vector, w: factor).\nattribute vec4 extrusionAxis;\nuniform float extrusionRatio;\nvarying vec4 vExtrusionAxis;\nvarying float vExtrusionRatio;\n\n`,\n    extrusion_vertex: `\n// Cancel extrusionRatio (meaning, force to 1) if extrusionAxisLen < MIN_BUILDING_HEIGHT.\nconst float MIN_BUILDING_HEIGHT_SQUARED = ${MIN_BUILDING_HEIGHT_SQUARED};\nfloat extrusionAxisLenSquared = dot(extrusionAxis.xyz, extrusionAxis.xyz);\nvExtrusionRatio = (extrusionAxisLenSquared < MIN_BUILDING_HEIGHT_SQUARED) ? 1.0 : extrusionRatio;\n\ntransformed = transformed + extrusionAxis.xyz * (vExtrusionRatio - 1.0);\nvExtrusionAxis = vec4(normalMatrix * extrusionAxis.xyz, extrusionAxis.w);\n`,\n    // Modified version of THREE <normal_fragment_begin> shader chunk which, for flat shaded\n    // geometries, computes the normal either with the extrusion axis or fragment derivatives based\n    // on the extrusion factor (1.0 = ceiling, 0.0 = footprint).\n    extrusion_normal_fragment_begin: `\n#ifdef FLAT_SHADED\n    // Flattened this divergent path to prevent undefined behaviour in the following derivatives\n    // functions. For more info:\n    // http://www.aclockworkberry.com/shader-derivative-functions/#Derivatives_and_branches\n\n    // Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\n    vec3 fdx = vec3(dFdx(vViewPosition.x), dFdx(vViewPosition.y), dFdx(vViewPosition.z));\n    vec3 fdy = vec3(dFdy(vViewPosition.x), dFdy(vViewPosition.y), dFdy(vViewPosition.z));\n    vec3 normal = cross( fdx, fdy );\n    if (vExtrusionAxis.w > 0.999999) {\n        normal = vExtrusionAxis.xyz;\n    }\n    normal = normalize(normal);\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t\tbitangent = bitangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t#endif\n\t#endif\n#endif\n// non perturbed normal for clearcoat among others\nvec3 geometryNormal = normal;\n`,\n    extrusion_pars_fragment: `\nvarying float vExtrusionRatio;\nvarying vec4 vExtrusionAxis;\n`,\n    extrusion_fragment: `\ngl_FragColor.a *= smoothstep( 0.0, 0.25, vExtrusionRatio );\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * The shader chunks have their lines \"#ifdef USE_FADING\" commented out, because currently the\n * mesh materials use individually created shader strings based on the materials settings.\n * @see [[FadingMeshBasicMaterial]]\n **/\n\nexport default {\n    fading_pars_vertex: `\nvarying float fadingDepth;\n`,\n\n    fading_vertex: `\nfadingDepth = -mvPosition.z;\n`,\n\n    fading_pars_fragment: `\nvarying float fadingDepth;\nuniform float fadeNear;\nuniform float fadeFar;\n`,\n\n    fading_fragment: `\n\n// lerp with \"hard\" edges\n//float fadingFactor = 1.0 - clamp((fadingDepth - fadeNear) / (fadeFar - fadeNear), 0.0, 1.0);\n\n// smooth transitions\nfloat fadingFactor = smoothstep( fadeNear, fadeFar, fadingDepth );\n\ngl_FragColor.a *= 1.0 - fadingFactor;\n\n// debugging color:\n// gl_FragColor = vec4(1., fadingFactor, fadingFactor, 1.0);\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nattribute vec4 color;\nvarying vec3 vColor;\n#endif\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 position;        // high part\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifdef USE_COLOR\nvarying vec3 color;\n#endif\n\nvoid main() {\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( diffuse * vColor, opacity );\n    #else\n    gl_FragColor = vec4( diffuse, opacity );\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface HighPrecisionLineMaterialParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n}\n\n/**\n * Material designed to render high precision lines (ideal for position-sensible data).\n */\nexport class HighPrecisionLineMaterial extends THREE.RawShaderMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n\n    isHighPrecisionLineMaterial: boolean;\n\n    /**\n     * Constructs a new `HighPrecisionLineMaterial`.\n     *\n     * @param params `HighPrecisionLineMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = {\n            name: \"HighPrecisionLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                diffuse: new THREE.Uniform(\n                    new THREE.Color(HighPrecisionLineMaterial.DEFAULT_COLOR)\n                ),\n                opacity: new THREE.Uniform(HighPrecisionLineMaterial.DEFAULT_OPACITY),\n                u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n                u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n                u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n            }\n        };\n        Object.assign(shaderParams, params);\n        super(shaderParams);\n\n        this.type = \"HighPrecisionLineMaterial\";\n        this.isHighPrecisionLineMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n        }\n\n        this.updateTransparencyFeature();\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    private updateTransparencyFeature() {\n        this.transparent = this.opacity < 1.0 ? true : false;\n    }\n}\n\nexport function isHighPrecisionLineMaterial(\n    material: object | undefined\n): material is HighPrecisionLineMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionLineMaterial).isHighPrecisionLineMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\nuniform float size;\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n\n    // ignore sizeAttenuation for now!\n    gl_PointSize = size;\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface HighPrecisionPointMaterialParameters extends THREE.PointsMaterialParameters {\n    /**\n     * Point color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Point opacity.\n     */\n    opacity?: number;\n    /**\n     * Point scale.\n     */\n    scale?: number;\n    /**\n     * UV transformation matrix.\n     */\n    uvTransform?: THREE.Matrix3;\n}\n\n/**\n * Material designed to render high precision points (ideal for position-sensible data).\n */\nexport class HighPrecisionPointMaterial extends THREE.PointsMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_SIZE: number = 1.0;\n    static DEFAULT_SCALE: number = 1.0;\n\n    isHighPrecisionPointMaterial: boolean;\n    uniforms: { [uniform: string]: THREE.IUniform };\n    vertexShader?: string;\n    fragmentShader?: string;\n\n    /**\n     * Constructs a new `HighPrecisionPointMaterial`.\n     *\n     * @param params `HighPrecisionPointMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionPointMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = params;\n        super(shaderParams);\n\n        this.type = \"HighPrecisionPointMaterial\";\n        this.vertexShader = vertexSource;\n        this.fragmentShader = THREE.ShaderChunk.points_frag;\n        this.fog = false;\n\n        this.uniforms = {\n            diffuse: new THREE.Uniform(new THREE.Color(HighPrecisionPointMaterial.DEFAULT_COLOR)),\n            opacity: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_OPACITY),\n            size: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SIZE),\n            scale: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SCALE),\n            map: new THREE.Uniform(new THREE.Texture()),\n            uvTransform: new THREE.Uniform(new THREE.Matrix3()),\n            u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n            u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n            u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n        };\n\n        this.isHighPrecisionPointMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.size !== undefined) {\n                this.size = params.size;\n            }\n            if (params.scale !== undefined) {\n                this.scale = params.scale;\n            }\n            if (params.uvTransform !== undefined) {\n                this.uvTransform = params.uvTransform;\n            }\n            if (params.map !== undefined) {\n                this.map = params.map;\n            }\n        }\n    }\n\n    /**\n     *  Point scale.\n     */\n    get scale(): number {\n        return this.uniforms.scale.value;\n    }\n\n    set scale(value: number) {\n        this.uniforms.scale.value = value;\n    }\n\n    /**\n     * UV transformation matrix.\n     */\n    get uvTransform(): THREE.Matrix3 {\n        return this.uniforms.uvTransform.value;\n    }\n    set uvTransform(value: THREE.Matrix3) {\n        this.uniforms.uvTransform.value = value;\n    }\n}\n\nexport function isHighPrecisionPointMaterial(\n    material: object | undefined\n): material is HighPrecisionPointMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionPointMaterial).isHighPrecisionPointMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst vertexSource: string = `\nattribute vec4 position;\nattribute vec4 color;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    vColor = color;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform sampler2D map;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(map, vUv.xy);\n    color *= vColor.a;\n    if (color.a < 0.05) {\n        discard;\n    }\n    gl_FragColor = color;\n}`;\n\n/**\n * Parameters used when constructing a new [[IconMaterial]].\n */\nexport interface IconMaterialParameters {\n    /**\n     * Texture map.\n     */\n    map: THREE.Texture;\n}\n\n/**\n * 2D material for icons, similar to [[TextMaterial]]. Uses component in texture coordinates to\n * apply opacity.\n */\nexport class IconMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Constructs a new `IconMaterial`.\n     *\n     * @param params `IconMaterial` parameters.\n     */\n    constructor(params: IconMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"IconMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                map: new THREE.Uniform(params.map)\n            },\n            depthTest: true,\n            depthWrite: true,\n            transparent: true,\n\n            vertexColors: THREE.VertexColors,\n            premultipliedAlpha: true,\n            blending: THREE.NormalBlending\n        };\n        super(shaderParams);\n    }\n\n    /**\n     * Icon texture map/atlas.\n     */\n    get map(): THREE.Texture {\n        return this.uniforms.map.value;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The shader used in the [[UnrealBloomPass]] for the bloom/glow effect.\n */\nexport const LuminosityHighPassShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        luminosityThreshold: { value: 1.0 },\n        smoothWidth: { value: 1.0 },\n        defaultColor: { value: new THREE.Color(0x000000) },\n        defaultOpacity: { value: 0.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform vec3 defaultColor;\n    uniform float defaultOpacity;\n    uniform float luminosityThreshold;\n    uniform float smoothWidth;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        vec3 luma = vec3( 0.299, 0.587, 0.114 );\n        float v = dot( texel.xyz, luma );\n        vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n        float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n        gl_FragColor = mix( outputColor, texel, alpha );\n    }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { CopyShader } from \"./CopyMaterial\";\n\n/**\n * The material to use for the quad of the [[MSAARenderPass]] in the composing.\n */\nexport class MSAAMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `MSAAMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `SepiaShader`.\n */\nexport const SepiaShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        amount: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float amount;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 color = texture2D( tDiffuse, vUv );\n            vec3 c = color.rgb;\n            color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\n            color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\n            color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\n            gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LineCaps } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\nimport {\n    DisplacementFeature,\n    DisplacementFeatureParameters,\n    FadingFeature,\n    FadingFeatureParameters\n} from \"./MapMeshMaterials\";\nimport linesShaderChunk, { LineCapsModes } from \"./ShaderChunks/LinesChunks\";\nimport {\n    enforceBlending,\n    getShaderMaterialDefine,\n    setShaderDefine,\n    setShaderMaterialDefine\n} from \"./Utils\";\n\nconst LineCapsDefinesMapping: { [key in LineCaps]: number } = {\n    None: LineCapsModes.CAPS_NONE,\n    Square: LineCapsModes.CAPS_SQUARE,\n    Round: LineCapsModes.CAPS_ROUND,\n    TriangleIn: LineCapsModes.CAPS_TRIANGLE_IN,\n    TriangleOut: LineCapsModes.CAPS_TRIANGLE_OUT\n};\n\nconst DefinesLineCapsMapping: { [key: number]: LineCaps } = Object.keys(\n    LineCapsDefinesMapping\n).reduce((r, lineCapsName) => {\n    const defineKey = lineCapsName as keyof typeof LineCapsDefinesMapping;\n    const defineValue: number = LineCapsDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineCaps });\n\n/**\n * The vLength contains the actual line length, it's needed for the creation of line caps by\n * detecting line ends. `vLength == vExtrusionCoord.x + lineWidth * 2`\n */\n/**\n * The vExtrusionStrength relies on the edges of the lines. Represents how far the current point was\n * extruded on the edges because of the current angle. Needed for preventing line caps artifacts on\n * sharp line edges. For example, on sharp edges, some vertices can be extruded much further than\n * the full line length.\n */\n\nconst tmpColor = new THREE.Color();\nconst vertexSource: string = `\n#define SEGMENT_OFFSET 0.1\n\nattribute vec3 extrusionCoord;\nattribute vec3 position;\nattribute vec4 bitangent;\nattribute vec3 tangent;\nattribute vec2 uv;\nattribute vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float lineWidth;\nuniform float outlineWidth;\nuniform vec2 drawRange;\n\n#ifdef USE_DISPLACEMENTMAP\nuniform sampler2D displacementMap;\n#endif\n\nvarying vec3 vPosition;\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nattribute vec3 color;\nvarying vec3 vColor;\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\n#include <fog_pars_vertex>\n\n#include <extrude_line_vert_func>\n\nvoid main() {\n    // Calculate the segment.\n    vec2 segment = abs(extrusionCoord.xy) - SEGMENT_OFFSET;\n    float segmentPos = sign(extrusionCoord.x) / 2.0 + 0.5;\n\n    // Calculate the vertex position inside the line (segment) and extrusion direction and factor.\n    float linePos = mix(segment.x, segment.y, segmentPos);\n    vec2 extrusionDir = sign(extrusionCoord.xy);\n    float extrusionFactor = extrusionDir.y * tan(bitangent.w / 2.0);\n\n    // Calculate the extruded vertex position (and scale the extrusion direction).\n    vec3 pos = extrudeLine(\n        position, linePos, lineWidth + outlineWidth, bitangent, tangent, extrusionDir);\n\n    // Store the normalized extrusion coordinates in vCoords (with their ranges in vRange).\n    vRange = vec3(extrusionCoord.z, lineWidth, extrusionFactor);\n    vCoords = vec4(extrusionDir / vRange.xy, segment / vRange.x);\n\n    // Adjust the segment to fit the drawRange.\n    float capDist = (lineWidth + outlineWidth) / extrusionCoord.z;\n    if ((vCoords.w + capDist) < drawRange.x || (vCoords.z - capDist) > drawRange.y) {\n        vCoords.zw += 1.0;\n    }\n    if (vCoords.z < drawRange.x) {\n        vCoords.zw += vec2(drawRange.x - vCoords.z, 0.0);\n    }\n    if (vCoords.w > drawRange.y) {\n        vCoords.zw -= vec2(0.0, vCoords.w - drawRange.y);\n    }\n\n    // Transform position.\n    #ifdef USE_DISPLACEMENTMAP\n    pos += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n    vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\n    // Pass extruded position to fragment shader.\n    vPosition = pos;\n\n    #ifdef USE_COLOR\n    // Pass vertex color to fragment shader.\n    vColor = color;\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n\n    #include <fog_vertex>\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform vec3 outlineColor;\nuniform float opacity;\nuniform float lineWidth;\nuniform float outlineWidth;\nuniform vec2 tileSize;\nuniform vec2 drawRange;\n\n#ifdef USE_DASHED_LINE\nuniform float dashSize;\nuniform float gapSize;\nuniform vec3 dashColor;\n#endif\n\nvarying vec3 vPosition;\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\n#include <round_edges_and_add_caps>\n#include <tile_clip_func>\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\n#include <fog_pars_fragment>\n\nvoid main() {\n    float alpha = opacity;\n    vec3 outputDiffuse = diffuse;\n\n    #ifdef USE_TILE_CLIP\n    tileClip(vPosition.xy, tileSize);\n    #endif\n\n    // Calculate distance to center (0.0: lineCenter, 1.0: lineEdge).\n    float distToCenter = roundEdgesAndAddCaps(vCoords, vRange);\n    // Calculate distance to edge (-1.0: lineCenter, 0.0: lineEdge).\n    float distToEdge = distToCenter - (lineWidth + outlineWidth) / lineWidth;\n\n    // Decrease the line opacity by the distToEdge, making the transition steeper when the slope\n    // of distToChange increases (i.e. the line is further away).\n    float width = fwidth(distToEdge);\n    alpha *= (1.0 - smoothstep(-width, width, distToEdge));\n\n    #ifdef USE_DASHED_LINE\n    // Compute the distance to the dash origin (0.0: dashOrigin, 1.0: dashEnd, (d+g)/d: gapEnd).\n    float d = dashSize / vRange.x;\n    float g = gapSize / vRange.x;\n    float distToDashOrigin = mod(vCoords.x, d + g) / d;\n\n    // Compute distance to dash edge (0.5: dashCenter, 0.0: dashEdge) and compute the\n    // dashBlendFactor similarly on how we did it for the line opacity.\n    float distToDashEdge = 0.5 - distance(distToDashOrigin, (d + g) / d * 0.5);\n    float dashWidth = fwidth(distToDashEdge);\n    float dashBlendFactor = 1.0 - smoothstep(-dashWidth, dashWidth, distToDashEdge);\n\n    #ifdef USE_DASH_COLOR\n    outputDiffuse = mix(diffuse, dashColor, dashBlendFactor);\n    #endif\n    #endif\n\n    #ifdef USE_OUTLINE\n    // Calculate distance to outline (0.0: lineEdge, outlineWidth/lineWidth: outlineEdge) and\n    // compute the outlineBlendFactor (used to mix line and outline colors).\n    float distToOutline = distToCenter - 1.0;\n    float outlineWidth = fwidth(distToOutline);\n    float outlineBlendFactor = smoothstep(-outlineWidth, outlineWidth, distToOutline);\n\n    // Mix the colors using the different computed factors.\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    float colorBlendFactor = smoothstep(-1.0, 1.0, dashBlendFactor - outlineBlendFactor);\n    outputDiffuse = mix(\n      mix(\n        mix(outlineColor, diffuse, colorBlendFactor),\n        outputDiffuse,\n        dashBlendFactor\n      ),\n      outlineColor,\n      outlineBlendFactor\n    );\n    #else\n    outputDiffuse = mix(outputDiffuse, outlineColor, outlineBlendFactor);\n    #endif\n    #endif\n\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    // Multiply the alpha by the dashBlendFactor.\n    #if defined(USE_OUTLINE)\n    alpha *= clamp(dashBlendFactor + outlineBlendFactor, 0.0, 1.0);\n    #else\n    alpha *= 1.0 - dashBlendFactor;\n    #endif\n    #endif\n\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( outputDiffuse * vColor, alpha );\n    #else\n    gl_FragColor = vec4( outputDiffuse, alpha );\n    #endif\n\n    #include <fog_fragment>\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface SolidLineMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string;\n\n    /**\n     * Line outline color.\n     */\n    outlineColor?: number | string;\n\n    /**\n     * Enables/Disable depth test.\n     */\n    depthTest?: boolean;\n\n    /**\n     * Enables/Disable depth write.\n     */\n    depthWrite?: boolean;\n\n    /**\n     * `SolidLineMaterial` extends the ThreeJS `RawShaderMaterial` that does not update fog at\n     * runtime, so instead of recompiling everything we pass it in the constructor.\n     */\n    fog?: boolean;\n\n    /**\n     * Line width.\n     */\n    lineWidth?: number;\n\n    /**\n     * Outline width.\n     */\n    outlineWidth?: number;\n\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n\n    /**\n     * Line dashes color.\n     */\n    dashColor?: number | string;\n\n    /**\n     * Size of the dashed segments.\n     */\n    dashSize?: number;\n\n    /**\n     * Size of the gaps between dashed segments.\n     */\n    gapSize?: number;\n}\n\n/**\n * Material designed to render solid variable-width lines.\n */\nexport class SolidLineMaterial extends THREE.RawShaderMaterial\n    implements DisplacementFeature, FadingFeature {\n    static DEFAULT_COLOR: number = 0xff0000;\n    static DEFAULT_WIDTH: number = 1.0;\n    static DEFAULT_OUTLINE_WIDTH: number = 0.0;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_DRAW_RANGE_START: number = 0.0;\n    static DEFAULT_DRAW_RANGE_END: number = 1.0;\n    static DEFAULT_DASH_SIZE: number = 1.0;\n    static DEFAULT_GAP_SIZE: number = 1.0;\n\n    /**\n     * @hidden\n     * Material properties overrides.\n     */\n    private m_fog: boolean;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `SolidLineMaterial`.\n     *\n     * @param params `SolidLineMaterial` parameters.\n     */\n    constructor(params?: SolidLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        // Setup default defines.\n        const defines: { [key: string]: any } = {\n            CAPS_MODE: LineCapsModes.CAPS_ROUND\n        };\n\n        // Prepare defines based on params passed in, before super class c-tor, this ensures\n        // proper set for shader compilation, without need to re-compile.\n        let fogParam = true;\n        let opacityParam = 1.0;\n        let displacementMap;\n        if (params !== undefined) {\n            fogParam = params.fog === true;\n            if (fogParam) {\n                setShaderDefine(defines, \"USE_FOG\", true);\n            }\n            opacityParam = params.opacity !== undefined ? params.opacity : opacityParam;\n            displacementMap = params.displacementMap;\n            if (displacementMap !== undefined) {\n                setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n            }\n            const hasOutline = params.outlineWidth !== undefined && params.outlineWidth > 0;\n            if (hasOutline) {\n                setShaderDefine(defines, \"USE_OUTLINE\", true);\n            }\n        }\n\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SolidLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: THREE.UniformsUtils.merge([\n                {\n                    diffuse: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    dashColor: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    outlineColor: new THREE.Uniform(\n                        new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)\n                    ),\n                    lineWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_WIDTH),\n                    outlineWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_OUTLINE_WIDTH),\n                    opacity: new THREE.Uniform(SolidLineMaterial.DEFAULT_OPACITY),\n                    tileSize: new THREE.Uniform(new THREE.Vector2()),\n                    fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                    fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                    displacementMap: new THREE.Uniform(\n                        displacementMap !== undefined ? displacementMap : new THREE.Texture()\n                    ),\n                    drawRange: new THREE.Uniform(\n                        new THREE.Vector2(\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_START,\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_END\n                        )\n                    ),\n                    dashSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_DASH_SIZE),\n                    gapSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_GAP_SIZE)\n                },\n                // We need the fog uniforms available when we use `fog` setter as the internal\n                // recompilation cannot add or remove uniforms.\n                THREE.UniformsLib.fog\n            ]),\n            defines,\n            // No need to pass overridden `fog` and `opacity` params they will be set\n            // after super c-tor call.\n            fog: fogParam,\n            opacity: opacityParam\n        };\n        super(shaderParams);\n        // Required to satisfy compiler error if fields has no initializer or are not definitely\n        // assigned in the constructor, this also mimics ShaderMaterial set of defaults\n        // for overridden props.\n        this.m_fog = fogParam;\n        this.m_opacity = opacityParam;\n\n        enforceBlending(this);\n        this.extensions.derivatives = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                tmpColor.set(params.color as any);\n                this.color = tmpColor;\n            }\n            if (params.outlineColor !== undefined) {\n                tmpColor.set(params.outlineColor as any);\n                this.outlineColor = tmpColor;\n            }\n            if (params.lineWidth !== undefined) {\n                this.lineWidth = params.lineWidth;\n            }\n            if (params.outlineWidth !== undefined) {\n                this.outlineWidth = params.outlineWidth;\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.depthTest !== undefined) {\n                this.depthTest = params.depthTest;\n            }\n            if (params.depthWrite !== undefined) {\n                this.depthWrite = params.depthWrite;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.caps !== undefined) {\n                this.caps = params.caps;\n            }\n            if (params.drawRangeStart !== undefined) {\n                this.drawRangeStart = params.drawRangeStart;\n            }\n            if (params.drawRangeEnd !== undefined) {\n                this.drawRangeEnd = params.drawRangeEnd;\n            }\n            if (params.dashColor !== undefined) {\n                tmpColor.set(params.dashColor as any);\n                this.dashColor = tmpColor;\n            }\n            if (params.dashSize !== undefined) {\n                this.dashSize = params.dashSize;\n            }\n            if (params.gapSize !== undefined) {\n                this.gapSize = params.gapSize;\n            }\n            if (params.fog !== undefined) {\n                this.fog = params.fog;\n            }\n        }\n        // ShaderMaterial overrides requires invalidation cause super c-tor may set this\n        // properties before related `defines` and `uniforms` were created.\n        this.invalidateFog();\n        this.invalidateOpacity();\n    }\n\n    /**\n     * Overrides THREE.Material.fog flag to add support for custom shader.\n     *\n     * @param enable Whether we want to enable the fog.\n     */\n    set fog(enable: boolean) {\n        this.m_fog = enable;\n        // Function may be called from THREE.js cause we override setter,\n        // in this case defines are not yet initalized and require late invalidation in\n        // SolidLineMaterial c-tor.\n        if (this.defines !== undefined) {\n            setShaderMaterialDefine(this, \"USE_FOG\", enable);\n        }\n    }\n\n    /**\n     * Checks if fog is enabled.\n     */\n    get fog(): boolean {\n        return this.m_fog && getShaderMaterialDefine(this, \"USE_FOG\") === true;\n    }\n\n    /**\n     * The method to call to recompile a material to enable/disable outline effect\n     *\n     * @param enable Whether we want to use outline.\n     */\n    set outline(enable: boolean) {\n        setShaderMaterialDefine(this, \"USE_OUTLINE\", enable);\n    }\n\n    /**\n     * Checks if outline is enabled.\n     */\n    get outline(): boolean {\n        return getShaderMaterialDefine(this, \"USE_OUTLINE\") === true;\n    }\n\n    /**\n     * Line opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n    set opacity(value: number) {\n        this.m_opacity = value;\n        // Setting opacity before uniform being created requires late invalidation,\n        // call to invalidateOpacity() is done at the end of c-tor.\n        if (this.uniforms !== undefined) {\n            this.uniforms.opacity.value = value;\n        }\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    /**\n     * Outline color.\n     *\n     * @note The width of outline ([[outlineWidth]]) need to be also set to enable outlining.\n     */\n    get outlineColor(): THREE.Color {\n        return this.uniforms.outlineColor.value as THREE.Color;\n    }\n    set outlineColor(value: THREE.Color) {\n        this.uniforms.outlineColor.value.copy(value);\n    }\n\n    /**\n     * Dash color.\n     *\n     * @note The property [[gapSize]] need to be set to enable dashed line.\n     */\n    get dashColor(): THREE.Color {\n        return this.uniforms.dashColor.value as THREE.Color;\n    }\n    set dashColor(value: THREE.Color) {\n        this.uniforms.dashColor.value.copy(value);\n        setShaderMaterialDefine(this, \"USE_DASH_COLOR\", true);\n    }\n\n    /**\n     * Line width.\n     */\n    get lineWidth(): number {\n        return this.uniforms.lineWidth.value as number;\n    }\n    set lineWidth(value: number) {\n        this.uniforms.lineWidth.value = value;\n    }\n\n    /**\n     * Outline width.\n     */\n    get outlineWidth(): number {\n        return this.uniforms.outlineWidth.value as number;\n    }\n    set outlineWidth(value: number) {\n        this.uniforms.outlineWidth.value = value;\n        this.outline = value > 0.0;\n    }\n\n    /**\n     * Size of the dashed segments.\n     *\n     * @note Ths [[gapSize]] need to be also set to enable dashed line.\n     * @see gapSize.\n     */\n    get dashSize(): number {\n        return this.uniforms.dashSize.value as number;\n    }\n    set dashSize(value: number) {\n        this.uniforms.dashSize.value = value;\n    }\n\n    /**\n     * Size of the gaps between dashed segments.\n     *\n     * @note You may also need to set [[dashSize]].\n     * @see dashSize.\n     */\n    get gapSize(): number {\n        return this.uniforms.gapSize.value as number;\n    }\n    set gapSize(value: number) {\n        this.uniforms.gapSize.value = value;\n        setShaderMaterialDefine(this, \"USE_DASHED_LINE\", value > 0.0);\n    }\n\n    /**\n     * Caps mode.\n     */\n    get caps(): LineCaps {\n        let result: LineCaps = \"Round\";\n        const capsMode = getShaderMaterialDefine(this, \"CAPS_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineCaps type.\n        if (typeof capsMode === \"number\" && DefinesLineCapsMapping.hasOwnProperty(capsMode)) {\n            result = DefinesLineCapsMapping[capsMode];\n        }\n        return result;\n    }\n    set caps(value: LineCaps) {\n        // Line caps mode may be set directly from theme, thus we need to check value\n        // correctness and if we provide string to define mapping.\n        if (LineCapsDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"CAPS_MODE\", LineCapsDefinesMapping[value]);\n        }\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get displacementMap(): THREE.Texture | undefined {\n        return this.uniforms.displacementMap.value;\n    }\n    set displacementMap(map: THREE.Texture | undefined) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== undefined;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n\n    get drawRangeStart(): number {\n        return this.uniforms.drawRange.value.x as number;\n    }\n    set drawRangeStart(value: number) {\n        this.uniforms.drawRange.value.x = value;\n    }\n\n    get drawRangeEnd(): number {\n        return this.uniforms.drawRange.value.y as number;\n    }\n    set drawRangeEnd(value: number) {\n        this.uniforms.drawRange.value.y = value;\n    }\n\n    set clipTileSize(tileSize: THREE.Vector2) {\n        this.uniforms.tileSize.value.copy(tileSize);\n        const useTileClip = tileSize.x > 0 && tileSize.y > 0;\n        setShaderMaterialDefine(this, \"USE_TILE_CLIP\", useTileClip);\n    }\n    get clipTileSize(): THREE.Vector2 {\n        return this.uniforms.tileSize.value as THREE.Vector2;\n    }\n\n    private invalidateFog() {\n        if (this.m_fog !== getShaderMaterialDefine(this, \"USE_FOG\")) {\n            setShaderMaterialDefine(this, \"USE_FOG\", this.m_fog);\n        }\n    }\n\n    private invalidateOpacity() {\n        if (this.m_opacity !== this.uniforms.opacity.value) {\n            this.uniforms.opacity.value = this.m_opacity;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `VignetteShader`.\n */\nexport const VignetteShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        offset: { value: 1.0 },\n        darkness: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float offset;\n        uniform float darkness;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 texel = texture2D( tDiffuse, vUv );\n            vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\n            gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    ContainsExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    LiteralExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\n\nimport { ArrayOperators } from \"./operators/ArrayOperators\";\nimport { CastOperators } from \"./operators/CastOperators\";\nimport { ColorOperators } from \"./operators/ColorOperators\";\nimport { ComparisonOperators } from \"./operators/ComparisonOperators\";\nimport { FeatureOperators } from \"./operators/FeatureOperators\";\nimport { FlowOperators } from \"./operators/FlowOperators\";\nimport { InterpolationOperators } from \"./operators/InterpolationOperators\";\nimport { MapOperators } from \"./operators/MapOperators\";\nimport { MathOperators } from \"./operators/MathOperators\";\nimport { MiscOperators } from \"./operators/MiscOperators\";\nimport { ObjectOperators } from \"./operators/ObjectOperators\";\nimport { StringOperators } from \"./operators/StringOperators\";\nimport { TypeOperators } from \"./operators/TypeOperators\";\n\nexport interface OperatorDescriptor {\n    /**\n     * Returns `true` if this operator requires a dynamic execution context (e.g. [\"zoom\"]).\n     */\n    isDynamicOperator?: (call: CallExpr) => boolean;\n\n    /**\n     * Evaluates the given expression.\n     */\n    call: (context: ExprEvaluatorContext, call: CallExpr) => Value;\n}\n\nexport interface OperatorDescriptorMap {\n    [name: string]: OperatorDescriptor;\n}\n\nconst operatorDescriptors = new Map<string, OperatorDescriptor>();\n\n/*\n * @hidden\n */\nexport class ExprEvaluatorContext {\n    private m_partialEvaluation = false;\n\n    constructor(\n        readonly evaluator: ExprEvaluator,\n        readonly env: Env,\n        readonly scope: ExprScope,\n        readonly cache?: Map<Expr, Value>\n    ) {}\n\n    /**\n     * `true` if the this context is used to partially evaluate expressions.\n     */\n    get partialEvaluation() {\n        return this.m_partialEvaluation;\n    }\n\n    /**\n     * Evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    evaluate(expr: Expr | undefined) {\n        if (expr !== undefined) {\n            return expr.accept(this.evaluator, this);\n        }\n        throw new Error(\"Failed to evaluate expression\");\n    }\n\n    /**\n     * Partially evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    partiallyEvaluate(expr: Expr | undefined): Expr {\n        if (expr === undefined) {\n            throw new Error(\"Failed to evaluate expression\");\n        }\n\n        const previousEvaluationMode = this.m_partialEvaluation;\n\n        this.m_partialEvaluation = true;\n\n        try {\n            const value = expr.accept(this.evaluator, this);\n\n            this.m_partialEvaluation = previousEvaluationMode;\n\n            if (value instanceof Expr) {\n                return value;\n            }\n\n            return LiteralExpr.fromValue(value);\n        } catch (error) {\n            // rethrow the exception\n            throw error;\n        } finally {\n            // reset the evaluation mode.\n            this.m_partialEvaluation = previousEvaluationMode;\n        }\n    }\n}\n\n/**\n * [[ExprEvaluator]] is used to evaluate [[Expr]] in a given environment.\n *\n * @hidden\n */\nexport class ExprEvaluator implements ExprVisitor<Value, ExprEvaluatorContext> {\n    static defineOperator(op: string, builtin: OperatorDescriptor) {\n        operatorDescriptors.set(op, builtin);\n    }\n\n    static defineOperators(builtins: OperatorDescriptorMap) {\n        Object.getOwnPropertyNames(builtins).forEach(p => {\n            this.defineOperator(p, builtins[p]);\n        });\n    }\n\n    /**\n     * Returns the [[OperatorDescriptor]] for the given operator name.\n     * @hidden\n     */\n    static getOperator(op: string): OperatorDescriptor | undefined {\n        return operatorDescriptors.get(op);\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprEvaluatorContext): Value {\n        const value = context.env.lookup(expr.name);\n        return value !== undefined ? value : null;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprEvaluatorContext): Value {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprEvaluatorContext): Value {\n        return context.env.lookup(expr.name) !== undefined;\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: ExprEvaluatorContext): Value {\n        const value = expr.value.accept(this, context);\n\n        const result = expr.elements.includes(value as any);\n\n        if (context.cache !== undefined) {\n            context.cache.set(expr, result);\n        }\n\n        return result;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: ExprEvaluatorContext): Value {\n        const r = context.evaluate(match.value);\n        for (const [label, body] of match.branches) {\n            if (Array.isArray(label) && (label as any[]).includes(r)) {\n                return context.evaluate(body);\n            } else if (label === r) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCaseExpr(match: CaseExpr, context: ExprEvaluatorContext): Value {\n        for (const [condition, body] of match.branches) {\n            if (context.evaluate(condition)) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprEvaluatorContext): Value {\n        if (context.cache !== undefined) {\n            const v = context.cache.get(expr);\n            if (v !== undefined) {\n                return v;\n            }\n        }\n\n        const descriptor = expr.descriptor || operatorDescriptors.get(expr.op);\n\n        if (descriptor) {\n            expr.descriptor = descriptor;\n\n            const result = descriptor.call(context, expr);\n\n            if (context.cache) {\n                context.cache.set(expr, result);\n            }\n\n            return result;\n        }\n\n        throw new Error(`undefined operator '${expr.op}`);\n    }\n}\n\nExprEvaluator.defineOperators(CastOperators);\nExprEvaluator.defineOperators(ComparisonOperators);\nExprEvaluator.defineOperators(MathOperators);\nExprEvaluator.defineOperators(StringOperators);\nExprEvaluator.defineOperators(ColorOperators);\nExprEvaluator.defineOperators(TypeOperators);\nExprEvaluator.defineOperators(MiscOperators);\nExprEvaluator.defineOperators(FlowOperators);\nExprEvaluator.defineOperators(ArrayOperators);\nExprEvaluator.defineOperators(InterpolationOperators);\nExprEvaluator.defineOperators(ObjectOperators);\nExprEvaluator.defineOperators(FeatureOperators);\nExprEvaluator.defineOperators(MapOperators);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    at: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const args = call.args;\n            const index = context.evaluate(args[0]);\n            if (typeof index !== \"number\") {\n                throw new Error(`expected the index of the element to retrieve`);\n            }\n            const value = context.evaluate(args[1]);\n            if (!Array.isArray(value)) {\n                throw new Error(`expected an array`);\n            }\n            return index >= 0 && index < value.length ? value[index] : null;\n        }\n    }\n};\n\nexport const ArrayOperators: OperatorDescriptorMap = operators;\nexport type ArrayOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"to-boolean\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Boolean(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-string\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-number\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const arg of call.args) {\n                const value = Number(context.evaluate(arg));\n                if (!isNaN(value)) {\n                    return value;\n                }\n            }\n            throw new Error(\"cannot convert the value to a number\");\n        }\n    }\n};\n\nexport const CastOperators: OperatorDescriptorMap = operators;\nexport type CastOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ColorUtils } from \"../ColorUtils\";\nimport { CallExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport { parseStringEncodedColor } from \"../StringEncodedNumeral\";\n\nconst operators = {\n    alpha: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            let color: Value | undefined = context.evaluate(call.args[0]);\n            if (typeof color === \"string\") {\n                color = parseStringEncodedColor(color);\n            }\n            const alpha = typeof color === \"number\" ? ColorUtils.getAlphaFromHex(color) : 1;\n            return alpha;\n        }\n    },\n    rgba: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            const a = context.evaluate(call.args[3]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                typeof a === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0 &&\n                a >= 0 &&\n                a <= 1\n            ) {\n                return rgbaToHex(r, g, b, a);\n            }\n            throw new Error(`unknown color 'rgba(${r},${g},${b},${a})'`);\n        }\n    },\n    rgb: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0\n            ) {\n                return rgbToHex(r, g, b);\n            }\n            throw new Error(`unknown color 'rgb(${r},${g},${b})'`);\n        }\n    },\n    // Hsl operator contains angle modulated to <0, 360> range, percent of\n    // saturation and lightness in <0, 100> range, i.e. hsl(360, 100, 100)\n    hsl: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const h = context.evaluate(call.args[0]);\n            const s = context.evaluate(call.args[1]);\n            const l = context.evaluate(call.args[2]);\n            if (\n                typeof h === \"number\" &&\n                typeof s === \"number\" &&\n                typeof l === \"number\" &&\n                h >= 0 &&\n                s >= 0 &&\n                l >= 0\n            ) {\n                return hslToHex(h, s, l);\n            }\n            throw new Error(`unknown color 'hsl(${h},${s}%,${l}%)'`);\n        }\n    }\n};\n\nfunction rgbaToHex(r: number, g: number, b: number, a: number): number {\n    // We decode rgba color channels using custom hex format with transparency.\n    return ColorUtils.getHexFromRgba(\n        THREE.Math.clamp(r, 0, 255) / 255,\n        THREE.Math.clamp(g, 0, 255) / 255,\n        THREE.Math.clamp(b, 0, 255) / 255,\n        THREE.Math.clamp(a, 0, 1)\n    );\n}\n\nfunction rgbToHex(r: number, g: number, b: number): number {\n    return ColorUtils.getHexFromRgb(\n        THREE.Math.clamp(r, 0, 255) / 255,\n        THREE.Math.clamp(g, 0, 255) / 255,\n        THREE.Math.clamp(b, 0, 255) / 255\n    );\n}\n\nfunction hslToHex(h: number, s: number, l: number): number {\n    return ColorUtils.getHexFromHsl(\n        THREE.Math.euclideanModulo(h, 360) / 360,\n        THREE.Math.clamp(s, 0, 100) / 100,\n        THREE.Math.clamp(l, 0, 100) / 100\n    );\n}\n\nexport const ColorOperators: OperatorDescriptorMap = operators;\nexport type ColorOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction compare(context: ExprEvaluatorContext, call: CallExpr, strict: boolean = false) {\n    const left = context.evaluate(call.args[0]) as any;\n    const right = context.evaluate(call.args[1]) as any;\n\n    if (\n        !(\n            (typeof left === \"number\" && typeof right === \"number\") ||\n            (typeof left === \"string\" && typeof right === \"string\")\n        )\n    ) {\n        if (strict) {\n            throw new Error(`invalid operands '${left}' and '${right}' for operator '${call.op}'`);\n        }\n    }\n\n    switch (call.op) {\n        case \"<\":\n            return left < right;\n        case \">\":\n            return left > right;\n        case \"<=\":\n            return left <= right;\n        case \">=\":\n            return left >= right;\n        default:\n            throw new Error(`invalid comparison operator '${call.op}'`);\n    }\n}\n\nconst operators = {\n    \"!\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return !context.evaluate(call.args[0]);\n        }\n    },\n\n    \"==\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left === right;\n        }\n    },\n\n    \"!=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left !== right;\n        }\n    },\n\n    \"<\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \"<=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) }\n};\n\nexport const ComparisonOperators: OperatorDescriptorMap = operators;\nexport type ComparisonOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\n\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"geometry-type\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const geometryType = context.env.lookup(\"$geometryType\");\n            switch (geometryType) {\n                case \"point\":\n                    return \"Point\";\n                case \"line\":\n                    return \"LineString\";\n                case \"polygon\":\n                    return \"Polygon\";\n                default:\n                    return null;\n            }\n        }\n    }\n};\n\nexport const FeatureOperators: OperatorDescriptorMap = operators;\nexport type FeatureOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction conditionalCast(context: ExprEvaluatorContext, type: string, args: Expr[]) {\n    switch (type) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            for (const childExpr of args) {\n                const value = context.evaluate(childExpr);\n                if (typeof value === type) {\n                    return value;\n                }\n            }\n            throw new Error(`expected a '${type}'`);\n        default:\n            throw new Error(`invalid type '${type}'`);\n    } // switch\n}\n\nconst operators = {\n    all: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (!context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    any: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    none: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    boolean: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"boolean\", call.args);\n        }\n    },\n\n    number: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"number\", call.args);\n        }\n    },\n\n    string: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"string\", call.args);\n        }\n    }\n};\n\nexport const FlowOperators: OperatorDescriptorMap = operators;\nexport type FlowOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, LiteralExpr, NumberLiteralExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport { createInterpolatedProperty, getPropertyValue } from \"../InterpolatedProperty\";\nimport { InterpolatedProperty, InterpolatedPropertyDefinition } from \"../InterpolatedPropertyDefs\";\n\ntype InterpolateCallExpr = CallExpr & {\n    _mode?: InterpolatedPropertyDefinition<any>[\"interpolation\"];\n    _exponent?: number;\n    _stops?: number[];\n    _interpolatedProperty?: InterpolatedProperty;\n};\n\n/**\n * Evaluates the given piecewise function.\n */\nfunction step(context: ExprEvaluatorContext, call: CallExpr) {\n    const { args } = call;\n\n    const value = context.evaluate(args[0]) as number;\n\n    if (value === null) {\n        // returns the default value of step.\n        return context.evaluate(args[1]);\n    }\n\n    if (typeof value !== \"number\") {\n        throw new Error(`the input of a 'step' operator must have type 'number'`);\n    }\n\n    let first = 1;\n    let last = args.length / 2 - 1;\n\n    while (first < last) {\n        // tslint:disable-next-line: no-bitwise\n        const mid = (first + last) >>> 1;\n        const stop = (args[mid * 2] as NumberLiteralExpr).value;\n\n        if (value < stop) {\n            last = mid - 1;\n        } else if (value > stop) {\n            first = mid + 1;\n        } else {\n            last = mid;\n        }\n    }\n\n    const result = args[first * 2];\n\n    if (!(result instanceof NumberLiteralExpr)) {\n        throw new Error(\"expected a numeric literal\");\n    }\n\n    const index = result.value <= value ? first : first - 1;\n\n    return context.evaluate(args[index * 2 + 1]);\n}\n\n/**\n * Prepare and validate the \"interpolate\" call.\n *\n * @param call An [[Expr]] representing an \"interpolate\" call.\n * @hidden\n */\nfunction prepareInterpolateCallExpr(call: InterpolateCallExpr) {\n    if (call._interpolatedProperty || call._mode !== undefined) {\n        return;\n    }\n\n    const interpolatorType = call.args[0];\n\n    if (!(interpolatorType instanceof CallExpr)) {\n        throw new Error(\"expected an interpolation type\");\n    }\n\n    let mode: InterpolatedPropertyDefinition<any>[\"interpolation\"];\n    let exponent: number | undefined;\n\n    if (interpolatorType.op === \"linear\") {\n        mode = \"Linear\";\n    } else if (interpolatorType.op === \"discrete\") {\n        mode = \"Discrete\";\n    } else if (interpolatorType.op === \"cubic\") {\n        mode = \"Cubic\";\n    } else if (interpolatorType.op === \"exponential\") {\n        mode = \"Exponential\";\n        const base = interpolatorType.args[0];\n        if (!(base instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected the base of the exponential interpolation\");\n        }\n        exponent = base.value;\n    } else {\n        throw new Error(\"unrecognized interpolation type\");\n    }\n\n    const input = call.args[1];\n\n    if (!(input instanceof CallExpr)) {\n        throw new Error(\"expected the input of the interpolation\");\n    }\n\n    if (input.op !== \"zoom\") {\n        throw new Error(\"only 'zoom' is supported\");\n    }\n\n    if (call.args.length === 2 || call.args.length % 2) {\n        throw new Error(\"invalid number of samples\");\n    }\n\n    const stops: number[] = [];\n    const values: Value[] = [];\n\n    let isConstantInterpolation = true;\n\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n\n        if (!(stop instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n\n        if (stops.length > 0 && stop.value === stops[stops.length - 1]) {\n            stops[stops.length - 1] = stop.value - 0.0000001;\n        }\n\n        stops.push(stop.value);\n\n        if (isConstantInterpolation) {\n            const value = call.args[i + 1];\n\n            if (value instanceof LiteralExpr) {\n                values.push(value.value);\n            } else {\n                isConstantInterpolation = false;\n            }\n        }\n    }\n\n    if (isConstantInterpolation) {\n        const result = createInterpolatedProperty({\n            interpolation: mode,\n            exponent,\n            zoomLevels: stops,\n            values\n        });\n\n        if (!result) {\n            throw new Error(\"failed to create interpolation\");\n        }\n\n        call._interpolatedProperty = result;\n    } else {\n        call._mode = mode;\n        call._exponent = exponent;\n        call._stops = stops;\n    }\n}\n\ntype StepCallExpr = CallExpr & {\n    /**\n     * `true` if the input of `step` call is `[\"zoom\"], otherwise false.\n     */\n    _inputIsZoom?: boolean;\n\n    /**\n     * The stops when the a constant [[InterpolatedProperty]] cannot be\n     * created for this `[\"step\"]` call.\n     */\n    _stops?: number[];\n\n    /**\n     * The [[InterpolatedProperty]] representing this `step` call,\n     * otherwise `undefined` if an interpolated property cannot\n     * be created at parsing time (e.g. one if the value of the step is not a literal).\n     */\n    _interpolatedProperty?: InterpolatedProperty;\n};\n\n/**\n * Classify the given `step` call.\n *\n * This function checks the input of the `step` and ensures that the stops\n * are literals.\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction classifyStepCallExpr(call: StepCallExpr) {\n    if (call._inputIsZoom !== undefined) {\n        // nothing to do, the `call` was already classified.\n        return;\n    }\n\n    if (call.args[0] === undefined) {\n        throw new Error(\"expected the input of the 'step' operator\");\n    }\n\n    if (call.args.length < 3 || call.args.length % 2) {\n        throw new Error(\"not enough arguments\");\n    }\n\n    const input = call.args[0];\n\n    // tslint:disable-next-line: prefer-conditional-expression\n    if (input instanceof CallExpr && input.op === \"zoom\") {\n        call._inputIsZoom = true;\n    } else {\n        call._inputIsZoom = false;\n    }\n\n    // check that the stops are literals.\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n        if (!(stop instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n    }\n}\n\n/**\n * Prepares the given call for the dynamic exception.\n * This method collects the stops and\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction prepareStepCallExpr(call: StepCallExpr) {\n    if (call._stops || call._interpolatedProperty) {\n        // nothing to do, the `call` was already prepared for execution.\n        return;\n    }\n\n    // collect the stops of the step call.\n    const stops: number[] = [Number.MIN_SAFE_INTEGER];\n\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i] as NumberLiteralExpr;\n        stops.push(stop.value);\n    }\n\n    // collect the values of the step call.\n    const values: Value[] = [];\n    let hasConstantValues = true;\n\n    for (let i = 1; hasConstantValues && i < call.args.length; i += 2) {\n        const literal = call.args[i];\n        if (literal instanceof LiteralExpr) {\n            values.push(literal.value);\n        } else {\n            hasConstantValues = false;\n        }\n    }\n\n    if (hasConstantValues) {\n        // all the values of this zoom-based `step` are constant,\n        // create an interpolated property and store it together\n        // with the call.\n        const interpolatedProperty = createInterpolatedProperty({\n            interpolation: \"Discrete\",\n            zoomLevels: stops,\n            values\n        });\n\n        if (interpolatedProperty === undefined) {\n            throw new Error(\"failed to create interpolator\");\n        }\n\n        call._interpolatedProperty = interpolatedProperty;\n    } else {\n        // the values the `[\"step\"]` call are not constants,\n        // cache the `zoomLevels` to avoid recreating input `Array`\n        // when instantiating a new [[InterpolatedProperty]].\n        call._stops = stops;\n    }\n}\n\nconst operators = {\n    interpolate: {\n        isDynamicOperator: (call: CallExpr): boolean => {\n            return call.args[1] && call.args[1].isDynamic();\n        },\n        call: (context: ExprEvaluatorContext, call: InterpolateCallExpr): Value => {\n            prepareInterpolateCallExpr(call);\n\n            if (context.scope !== ExprScope.Dynamic) {\n                return call;\n            }\n\n            let interpolatedProperty = call._interpolatedProperty;\n\n            if (!interpolatedProperty) {\n                const values: Value[] = [];\n\n                for (let i = 2; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i + 1]);\n                    values.push(value);\n                }\n\n                interpolatedProperty = createInterpolatedProperty({\n                    interpolation: call._mode!,\n                    exponent: call._exponent,\n                    zoomLevels: call._stops!,\n                    values\n                });\n\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n\n            return getPropertyValue(interpolatedProperty, context.env);\n        }\n    },\n    step: {\n        isDynamicOperator: (call: CallExpr): boolean => {\n            return call.args[0] && call.args[0].isDynamic();\n        },\n        call: (context: ExprEvaluatorContext, call: StepCallExpr): Value => {\n            classifyStepCallExpr(call);\n\n            if (context.scope === ExprScope.Value) {\n                return call;\n            }\n\n            if (context.scope === ExprScope.Condition || call._inputIsZoom === false) {\n                return step(context, call);\n            }\n\n            prepareStepCallExpr(call);\n\n            let interpolatedProperty = call._interpolatedProperty;\n\n            if (!interpolatedProperty) {\n                // the values of the interpolation are not literals,\n                // evaluate the sub expressions and combine them\n                // with the constant stops computed when preparing this call.\n                const values: Value[] = [];\n                for (let i = 1; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i]);\n                    values.push(value);\n                }\n\n                interpolatedProperty = createInterpolatedProperty({\n                    interpolation: \"Discrete\",\n                    zoomLevels: call._stops!,\n                    values\n                });\n\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n\n            return getPropertyValue(interpolatedProperty, context.env);\n        }\n    }\n};\n\nexport const InterpolationOperators: OperatorDescriptorMap = operators;\nexport type InterpolationOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Interpolant } from \"three\";\n\nexport class ExponentialInterpolant extends Interpolant {\n    /**\n     * Exponent value. Defaults to `2.0`.\n     */\n    exponent: number = 2.0;\n\n    // Note: We need to disable linting here as tslint thinks this function is never used, though it\n    // indeed is called by ``Interpolant.evaluate(level)``.\n    // tslint:disable-next-line\n    private interpolate_(i1: number, t0: number, t: number, t1: number) {\n        const result = this.resultBuffer;\n        // TODO: Remove when Interpolant types are fixed.\n        const values = (this as any).sampleValues;\n        const stride = this.valueSize;\n        const offset1 = i1 * stride;\n        const offset0 = offset1 - stride;\n        const weight1 = Math.pow((t - t0) / (t1 - t0), this.exponent);\n        const weight0 = 1 - weight1;\n\n        for (let i = 0; i !== stride; ++i) {\n            result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"ppi-scale\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            return value * scaleFactor;\n        }\n    },\n    \"world-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidth = Math.pow(2, 17) / Math.pow(2, zoom);\n            const v = pixels * zoomWidth * scaleFactor;\n            return v;\n        }\n    },\n    \"world-discrete-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidthDiscrete = Math.pow(2, 17) / Math.pow(2, Math.floor(zoom));\n            const v = pixels * zoomWidthDiscrete * scaleFactor;\n            return v;\n        }\n    },\n    ppi: {\n        call: (context: ExprEvaluatorContext) => {\n            const ppi = context.env.lookup(\"$ppi\");\n            if (typeof ppi === \"number\") {\n                return ppi;\n            }\n            return 72;\n        }\n    },\n    zoom: {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext): Value => {\n            if (context.scope === ExprScope.Condition) {\n                const zoom = context.env.lookup(\"$zoom\")!;\n                if (zoom !== undefined) {\n                    return zoom;\n                }\n                throw new Error(\"failed to get the zoom level.\");\n            }\n            // direct usages of 'zoom' outside technique filter conditions\n            // and interpolations are not allowed.\n            throw new Error(\"invalid usage of the 'zoom' operator.\");\n        }\n    }\n};\n\nexport const MapOperators: OperatorDescriptorMap = operators;\nexport type MapOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nimport * as THREE from \"three\";\n\nconst operators = {\n    \"^\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '^'`\n                );\n            }\n            return Math.pow(a, b);\n        }\n    },\n\n    \"-\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '-'`\n                );\n            }\n            return a - b;\n        }\n    },\n\n    \"/\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '/'`\n                );\n            }\n            return a / b;\n        }\n    },\n\n    \"%\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '%'`\n                );\n            }\n            return a % b;\n        }\n    },\n\n    \"+\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) + Number(context.evaluate(b)), 0);\n        }\n    },\n\n    \"*\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) * Number(context.evaluate(b)), 1);\n        }\n    },\n\n    abs: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'abs'`);\n            }\n            return Math.abs(value);\n        }\n    },\n\n    acos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'acos'`);\n            }\n            return Math.acos(value);\n        }\n    },\n\n    asin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'asin'`);\n            }\n            return Math.asin(value);\n        }\n    },\n\n    atan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'atan'`);\n            }\n            return Math.atan(value);\n        }\n    },\n\n    ceil: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ceil'`);\n            }\n            return Math.ceil(value);\n        }\n    },\n\n    cos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'cos'`);\n            }\n            return Math.cos(value);\n        }\n    },\n\n    e: {\n        call: () => {\n            return Math.E;\n        }\n    },\n\n    floor: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'floor'`);\n            }\n            return Math.floor(value);\n        }\n    },\n\n    ln: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln'`);\n            }\n            return Math.log(value);\n        }\n    },\n\n    ln2: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln2'`);\n            }\n            return Math.log2(value);\n        }\n    },\n\n    log10: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'log10'`);\n            }\n            return Math.log10(value);\n        }\n    },\n\n    max: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.max(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    min: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.min(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    /**\n     * Clamp numeric value to given range, inclusive.\n     *\n     * Synopsis:\n     * ```\n     * [\"clamp\", v: number, min: number, max: number]`\n     * ```\n     */\n    clamp: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const v = context.evaluate(call.args[0]);\n            const min = context.evaluate(call.args[1]);\n            const max = context.evaluate(call.args[2]);\n\n            if (typeof v !== \"number\" || typeof min !== \"number\" || typeof max !== \"number\") {\n                throw new Error(`invalid operands '${v}', ${min}, ${max} for operator 'clamp'`);\n            }\n            return THREE.Math.clamp(v, min, max);\n        }\n    },\n\n    pi: {\n        call: () => {\n            return Math.PI;\n        }\n    },\n\n    round: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'round'`);\n            }\n            return Math.round(value);\n        }\n    },\n\n    sin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sin'`);\n            }\n            return Math.sin(value);\n        }\n    },\n\n    sqrt: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sqrt'`);\n            }\n            return Math.sqrt(value);\n        }\n    },\n\n    tan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'tan'`);\n            }\n            return Math.tan(value);\n        }\n    }\n};\n\nexport const MathOperators: OperatorDescriptorMap = operators;\nexport type MathOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    length: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (Array.isArray(value) || typeof value === \"string\") {\n                return value.length;\n            }\n            throw new Error(`invalid operand '${value}' for operator 'length'`);\n        }\n    },\n    coalesce: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                const value = context.evaluate(childExpr);\n                if (value !== null) {\n                    return value;\n                }\n            }\n            return null;\n        }\n    }\n};\n\nexport const MiscOperators: OperatorDescriptorMap = operators;\nexport type MiscOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr } from \"../Expr\";\n\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nenum LookupMode {\n    get,\n    has\n}\n\nfunction lookupMember(context: ExprEvaluatorContext, args: Expr[], lookupMode: LookupMode) {\n    const memberName = context.evaluate(args[0]);\n\n    if (typeof memberName !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n\n    const object = context.evaluate(args[1]) as any;\n\n    if (object && typeof object === \"object\" && hasOwnProperty.call(object, memberName)) {\n        return lookupMode === LookupMode.get ? object[memberName] : true;\n    }\n\n    return lookupMode === LookupMode.get ? null : false;\n}\n\nconst operators = {\n    get: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.get)\n    },\n\n    has: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.has)\n    }\n};\n\nexport const ObjectOperators: OperatorDescriptorMap = operators;\nexport type ObjectOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    concat: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return \"\".concat(...call.args.map(a => String(context.evaluate(a))));\n        }\n    },\n\n    downcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleLowerCase();\n        }\n    },\n\n    upcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleUpperCase();\n        }\n    },\n\n    \"~=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.indexOf(right) !== -1;\n            }\n            return false;\n        }\n    },\n\n    \"^=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.startsWith(right);\n            }\n            return false;\n        }\n    },\n\n    \"$=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.endsWith(right);\n            }\n            return false;\n        }\n    }\n};\n\nexport const StringOperators: OperatorDescriptorMap = operators;\nexport type StringOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    typeof: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return typeof context.evaluate(call.args[0]);\n        }\n    }\n};\n\nexport const TypeOperators: OperatorDescriptorMap = operators;\nexport type TypeOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    ContainsExpr,\n    Env,\n    Expr,\n    ExprVisitor,\n    HasAttributeExpr,\n    LiteralExpr,\n    MatchExpr,\n    MatchLabel,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\nexport interface InstantiationContext {\n    /**\n     * The [[Env]] used to lookup for names.\n     */\n    env: Env;\n\n    /**\n     * The names to preserve during the instantiation.\n     */\n    preserve?: Set<string>;\n}\n\n/**\n * @hidden\n */\nexport class ExprInstantiator implements ExprVisitor<Expr, InstantiationContext> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name);\n        return LiteralExpr.fromValue(value !== undefined ? value : null);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name) !== undefined;\n        return LiteralExpr.fromValue(value);\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: InstantiationContext): Expr {\n        const value = expr.value.accept(this, context);\n\n        if (value instanceof LiteralExpr) {\n            const result = expr.elements.includes(value.value as any);\n            return LiteralExpr.fromValue(result);\n        }\n\n        return value === expr.value ? expr : new ContainsExpr(value, expr.elements);\n    }\n\n    visitCallExpr(expr: CallExpr, context: InstantiationContext): Expr {\n        const args = expr.args.map(arg => arg.accept(this, context));\n        if (args.some((a, i) => a !== expr.args[i])) {\n            return new CallExpr(expr.op, args);\n        }\n        return expr;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: InstantiationContext): Expr {\n        const value = match.value.accept(this, context);\n\n        if (value instanceof LiteralExpr) {\n            const r = value.value;\n            for (const [label, body] of match.branches) {\n                if (Array.isArray(label) && (label as any[]).includes(r)) {\n                    return body.accept(this, context);\n                } else if (label === r) {\n                    return body.accept(this, context);\n                }\n            }\n            return match.fallback.accept(this, context);\n        }\n\n        let changed = match.value !== value;\n\n        const branches: Array<[MatchLabel, Expr]> = match.branches.map(([label, branch]) => {\n            const newBranch = branch.accept(this, context);\n            if (newBranch !== branch) {\n                changed = true;\n            }\n            return [label, newBranch];\n        });\n\n        const fallback = match.fallback.accept(this, context);\n\n        if (fallback !== match.fallback) {\n            changed = true;\n        }\n\n        return changed ? new MatchExpr(value, branches, fallback) : match;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: InstantiationContext): Expr {\n        const branches: Array<[Expr, Expr]> = [];\n\n        let changed = false;\n\n        for (const [condition, branch] of expr.branches) {\n            const newCondition = condition.accept(this, context);\n\n            if (newCondition instanceof LiteralExpr) {\n                if (newCondition.value) {\n                    return branch.accept(this, context);\n                }\n            } else {\n                if (newCondition !== condition) {\n                    changed = true;\n                }\n                branches.push([newCondition, branch]);\n            }\n        }\n\n        if (branches.length === 0) {\n            // all the conditions of this CaseExpr evaluated\n            // to false, so the resulting of instantiating this CaseExpr\n            // is the same as instantiating its fallback expression.\n            return expr.fallback.accept(this, context);\n        }\n\n        if (branches.length !== expr.branches.length) {\n            // the number of branches changed, this means that\n            // some of the branches had constant expressions that\n            // evaluate to false. In this case the resulting\n            // `CaseExpr` has less branches.\n            changed = true;\n        }\n\n        // Instantiate the body of all the branches of this CaseExpr\n        // that have dynamic conditions.\n        branches.forEach(branch => {\n            const instantiatedBranch = branch[1].accept(this, context);\n\n            if (instantiatedBranch !== branch[1]) {\n                changed = true;\n            }\n\n            branch[1] = instantiatedBranch;\n        });\n\n        const fallback = expr.fallback.accept(this, context);\n\n        if (fallback !== expr.fallback) {\n            changed = true;\n        }\n\n        if (!changed) {\n            // nothing changed, return the old expression.\n            return expr;\n        }\n\n        return new CaseExpr(branches, fallback);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    CallExpr,\n    ContainsExpr,\n    EqualityOp,\n    Expr,\n    HasAttributeExpr,\n    NumberLiteralExpr,\n    RelationalOp,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\n/**\n * Character value\n */\nenum Character {\n    Tab = 9,\n    Lf = 10,\n    Cr = 13,\n    Space = 32,\n    LParen = 40,\n    RParen = 41,\n    Comma = 44,\n    Dot = 46,\n    LBracket = 91,\n    Backslash = 92,\n    RBracket = 93,\n    _0 = 48,\n    _9 = 57,\n    _ = 95,\n    A = 64,\n    Z = 90,\n    a = 97,\n    z = 122,\n    DoubleQuote = 34,\n    SingleQuote = 39,\n    Exclaim = 33,\n    Equal = 61,\n    Caret = 94,\n    Tilde = 126,\n    Dollar = 36,\n    Less = 60,\n    Greater = 62,\n    Bar = 124,\n    Amp = 38\n}\n\n/**\n * Check if a codepoint is a whitespace character.\n */\nfunction isSpace(codepoint: number): boolean {\n    switch (codepoint) {\n        case Character.Tab:\n        case Character.Lf:\n        case Character.Cr:\n        case Character.Space:\n            return true;\n        default:\n            return false;\n    } // switch\n}\n\n/**\n * Check if codepoint is a digit character.\n */\nfunction isNumber(codepoint: number): boolean {\n    return codepoint >= Character._0 && codepoint <= Character._9;\n}\n\n/**\n * Check if codepoint is a letter character.\n */\nfunction isLetter(codepoint: number): boolean {\n    return (\n        (codepoint >= Character.a && codepoint <= Character.z) ||\n        (codepoint >= Character.A && codepoint <= Character.Z)\n    );\n}\n\n/**\n * Check if codepoint is either a digit or a letter character.\n */\nfunction isLetterOrNumber(codepoint: number): boolean {\n    return isLetter(codepoint) || isNumber(codepoint);\n}\n\n/**\n * Check if codepoint is an identification character: underscore, dollar sign, dot or bracket.\n */\nfunction isIdentChar(codepoint: number): boolean {\n    return (\n        isLetterOrNumber(codepoint) ||\n        codepoint === Character._ ||\n        codepoint === Character.Dollar ||\n        codepoint === Character.Dot ||\n        codepoint === Character.LBracket ||\n        codepoint === Character.RBracket\n    );\n}\n\n/**\n * Tokens used in theme grammar.\n */\nenum Token {\n    Eof = 0,\n    Error,\n    Identifier,\n    Number,\n    String,\n    Comma,\n    LParen,\n    RParen,\n    LBracket,\n    RBracket,\n    Exclaim,\n    TildeEqual,\n    CaretEqual,\n    DollarEqual,\n    EqualEqual,\n    ExclaimEqual,\n    Less,\n    Greater,\n    LessEqual,\n    GreaterEqual,\n    BarBar,\n    AmpAmp\n}\n\n/**\n * Maps a token to its string name.\n */\nfunction tokenSpell(token: Token): string {\n    switch (token) {\n        case Token.Eof:\n            return \"eof\";\n        case Token.Error:\n            return \"error\";\n        case Token.Identifier:\n            return \"identifier\";\n        case Token.Number:\n            return \"number\";\n        case Token.String:\n            return \"string\";\n        case Token.Comma:\n            return \",\";\n        case Token.LParen:\n            return \"(\";\n        case Token.RParen:\n            return \")\";\n        case Token.LBracket:\n            return \"[\";\n        case Token.RBracket:\n            return \"]\";\n        case Token.Exclaim:\n            return \"!\";\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        case Token.BarBar:\n            return \"||\";\n        case Token.AmpAmp:\n            return \"&&\";\n        default:\n            throw new Error(`invalid token ${token}`);\n    }\n}\n\n/**\n * Lexer class implementation.\n */\nclass Lexer {\n    private m_token: Token = Token.Error;\n    private m_index = 0;\n    private m_char: number = Character.Lf;\n    private m_text?: string;\n\n    constructor(readonly code: string) {}\n\n    /**\n     * Single lexer token.\n     */\n    token(): Token {\n        return this.m_token;\n    }\n\n    /**\n     * Parsed text.\n     */\n    text(): string {\n        return this.m_text || \"\";\n    }\n\n    /**\n     * Go to the next token.\n     */\n    next(): Token {\n        this.m_token = this.yylex();\n        if (this.m_token === Token.Error) {\n            throw new Error(`unexpected character ${this.m_char}`);\n        }\n        return this.m_token;\n    }\n\n    private yyinp(): void {\n        this.m_char = this.code.codePointAt(this.m_index++) || 0;\n    }\n\n    private yylex(): Token {\n        this.m_text = undefined;\n        while (isSpace(this.m_char)) {\n            this.yyinp();\n        }\n        if (this.m_char === 0) {\n            return Token.Eof;\n        }\n        const ch = this.m_char;\n        this.yyinp();\n        switch (ch) {\n            case Character.LParen:\n                return Token.LParen;\n            case Character.RParen:\n                return Token.RParen;\n            case Character.LBracket:\n                return Token.LBracket;\n            case Character.RBracket:\n                return Token.RBracket;\n            case Character.Comma:\n                return Token.Comma;\n            case Character.SingleQuote:\n            case Character.DoubleQuote: {\n                const start = this.m_index - 1;\n                while (this.m_char && this.m_char !== ch) {\n                    // ### TODO handle escape sequences\n                    this.yyinp();\n                }\n                if (this.m_char !== ch) {\n                    throw new Error(\"Unfinished string literal\");\n                }\n                this.yyinp();\n                this.m_text = this.code.substring(start, this.m_index - 2);\n                return Token.String;\n            }\n            case Character.Exclaim:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.ExclaimEqual;\n                }\n                return Token.Exclaim;\n            case Character.Caret:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.CaretEqual;\n                }\n                return Token.Error;\n            case Character.Tilde:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.TildeEqual;\n                }\n                return Token.Error;\n            case Character.Equal:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.EqualEqual;\n                }\n                return Token.Error;\n            case Character.Less:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.LessEqual;\n                }\n                return Token.Less;\n            case Character.Greater:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.GreaterEqual;\n                }\n                return Token.Greater;\n            case Character.Bar:\n                if (this.m_char === Character.Bar) {\n                    this.yyinp();\n                    return Token.BarBar;\n                }\n                return Token.Error;\n            case Character.Amp:\n                if (this.m_char === Character.Amp) {\n                    this.yyinp();\n                    return Token.AmpAmp;\n                }\n                return Token.Error;\n            default: {\n                const start = this.m_index - 2;\n                if (\n                    isLetter(ch) ||\n                    ch === Character._ ||\n                    (ch === Character.Dollar && isIdentChar(this.m_char))\n                ) {\n                    while (isIdentChar(this.m_char)) {\n                        this.yyinp();\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Identifier;\n                } else if (isNumber(ch)) {\n                    while (isNumber(this.m_char)) {\n                        this.yyinp();\n                    }\n                    if (this.m_char === Character.Dot) {\n                        this.yyinp();\n                        while (isNumber(this.m_char)) {\n                            this.yyinp();\n                        }\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Number;\n                } else if (ch === Character.Dollar) {\n                    if (this.m_char === Character.Equal) {\n                        this.yyinp();\n                        return Token.DollarEqual;\n                    }\n                    return Token.Error;\n                }\n            }\n        }\n        return Token.Error;\n    }\n}\n\nfunction getEqualityOp(token: Token): EqualityOp | undefined {\n    switch (token) {\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nfunction getRelationalOp(token: Token): RelationalOp | undefined {\n    switch (token) {\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nexport class ExprParser {\n    private readonly lex: Lexer;\n\n    constructor(code: string) {\n        this.lex = new Lexer(code);\n        this.lex.next();\n    }\n\n    parse(): Expr | never {\n        return this.parseLogicalOr();\n    }\n\n    private yyexpect(token: Token): void | never {\n        if (this.lex.token() !== token) {\n            throw new Error(\n                `Syntax error: Expected token '${tokenSpell(token)}' but ` +\n                    `found '${tokenSpell(this.lex.token())}'`\n            );\n        }\n        this.lex.next();\n    }\n\n    private parsePrimary(): Expr | never {\n        switch (this.lex.token()) {\n            case Token.Identifier: {\n                const text = this.lex.text();\n                switch (text) {\n                    case \"has\":\n                        this.lex.next(); // skip has keyword\n                        this.yyexpect(Token.LParen);\n                        const hasAttribute = this.lex.text();\n                        this.yyexpect(Token.Identifier);\n                        this.yyexpect(Token.RParen);\n                        return new HasAttributeExpr(hasAttribute);\n                    case \"length\":\n                        this.lex.next(); // skip length keyword\n                        this.yyexpect(Token.LParen);\n                        const value = this.parseLogicalOr();\n                        this.yyexpect(Token.RParen);\n                        return new CallExpr(\"length\", [value]);\n                    default:\n                        const expr = new VarExpr(text);\n                        this.lex.next();\n                        return expr;\n                }\n            }\n\n            case Token.LParen: {\n                this.lex.next();\n                const expr = this.parseLogicalOr();\n                this.yyexpect(Token.RParen);\n                return expr;\n            }\n\n            default:\n                return this.parseLiteral();\n        } // switch\n    }\n\n    private parseLiteral(): NumberLiteralExpr | StringLiteralExpr | never {\n        switch (this.lex.token()) {\n            case Token.Number: {\n                const expr = new NumberLiteralExpr(parseFloat(this.lex.text()));\n                this.lex.next();\n                return expr;\n            }\n            case Token.String: {\n                const expr = new StringLiteralExpr(this.lex.text());\n                this.lex.next();\n                return expr;\n            }\n            default:\n                throw new Error(\"Syntax error\");\n        } // switch\n    }\n\n    private parseUnary(): Expr | never {\n        if (this.lex.token() === Token.Exclaim) {\n            this.lex.next();\n            return new CallExpr(\"!\", [this.parseUnary()]);\n        }\n        return this.parsePrimary();\n    }\n\n    private parseRelational(): Expr | never {\n        let expr = this.parseUnary();\n        while (true) {\n            if (this.lex.token() === Token.Identifier && this.lex.text() === \"in\") {\n                this.lex.next();\n                this.yyexpect(Token.LBracket);\n                const elements = [this.parseLiteral()];\n                while (this.lex.token() === Token.Comma) {\n                    this.lex.next();\n                    elements.push(this.parseLiteral());\n                }\n                this.yyexpect(Token.RBracket);\n                expr = new ContainsExpr(\n                    expr,\n                    elements.map(literal => literal.value)\n                );\n            } else {\n                const op = getRelationalOp(this.lex.token());\n                if (op === undefined) {\n                    break;\n                }\n                this.lex.next();\n                const right = this.parseUnary();\n                expr = new CallExpr(op, [expr, right]);\n            }\n        }\n        return expr;\n    }\n\n    private parseEquality(): Expr | never {\n        let expr = this.parseRelational();\n        while (true) {\n            const op = getEqualityOp(this.lex.token());\n            if (op === undefined) {\n                break;\n            }\n            this.lex.next();\n            const right = this.parseRelational();\n            expr = new CallExpr(op, [expr, right]);\n        }\n        return expr;\n    }\n\n    private parseLogicalAnd(): Expr | never {\n        const expr = this.parseEquality();\n\n        if (this.lex.token() !== Token.AmpAmp) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseEquality());\n        } while (this.lex.token() === Token.AmpAmp);\n\n        return new CallExpr(\"all\", expressions);\n    }\n\n    private parseLogicalOr(): Expr | never {\n        const expr = this.parseLogicalAnd();\n\n        if (this.lex.token() !== Token.BarBar) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseLogicalAnd());\n        } while (this.lex.token() === Token.BarBar);\n\n        return new CallExpr(\"any\", expressions);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Common communication protocol for [[WorkerService]].\n */\nexport namespace WorkerServiceProtocol {\n    /**\n     * Service id of worker manager ([[WorkerServiceManager]]) used to create/destroy service\n     * instances in workers.\n     */\n    export const WORKER_SERVICE_MANAGER_SERVICE_ID = \"worker-service-manager\";\n\n    /**\n     * Define possible names of messages exchanged with services within `WebWorker`.\n     */\n    export enum ServiceMessageName {\n        Initialized = \"initialized\",\n        Request = \"request\",\n        Response = \"response\"\n    }\n\n    /**\n     * Interface for `ServiceMessage` which describes metadata for a service messages.\n     */\n    export interface ServiceMessage {\n        service: string;\n        type: ServiceMessageName;\n    }\n\n    /**\n     * This message is sent by the worker to the main thread. No data is sent. Receiving this\n     * message confirms that the worker has started successfully.\n     */\n    export interface InitializedMessage extends ServiceMessage {\n        type: ServiceMessageName.Initialized;\n    }\n\n    /**\n     * Type guard to check if an object is a signal message from worker.\n     */\n    export function isInitializedMessage(message: any): message is InitializedMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Initialized\n        );\n    }\n\n    /**\n     * Define possible names of requests called on services within `WebWorker`.\n     */\n    export enum Requests {\n        CreateService = \"create-service\",\n        DestroyService = \"destroy-service\"\n    }\n\n    /**\n     * This is an internal general interface used in communication with workers.\n     * Check [[ConcurrentWorkerSet]]'s invokeRequest function for exemplary usage.\n     */\n    export interface ServiceRequest {\n        type: string;\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically create a\n     * new service.\n     *\n     * May throw `UnknownServiceError` if service of given type is not registered in\n     * [[WorkerServiceManager]], see [[isUnknownServiceError]].\n     */\n    export interface CreateServiceRequest extends ServiceRequest {\n        type: Requests.CreateService;\n\n        /**\n         * Type of service to be created.\n         *\n         * @see [[WorkerServiceManager.register]]\n         */\n        targetServiceType: string;\n\n        /**\n         * The newly created service instance will be available under this id.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Test if `error` thrown by [[CreateServiceRequest]] was caused by unknown type of service.\n     */\n    export function isUnknownServiceError(error: Error): boolean {\n        return /unknown targetServiceType requested: /.test(error.message);\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically destroy a\n     * service.\n     */\n    export interface DestroyServiceRequest extends ServiceRequest {\n        type: Requests.DestroyService;\n\n        /**\n         * Id of service to be destroyed.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Possible service management messages (`CreateService` or `DestroyService`) sent to WebWorker.\n     */\n    export type WorkerServiceManagerRequest = CreateServiceRequest | DestroyServiceRequest;\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface RequestMessage extends ServiceMessage {\n        type: ServiceMessageName.Request;\n        messageId: number;\n        request: any;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isRequestMessage(message: any): message is RequestMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Request\n        );\n    }\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface ResponseMessage extends ServiceMessage {\n        type: ServiceMessageName.Response;\n        messageId: number;\n        errorMessage?: string;\n        errorStack?: string;\n        response?: object;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isResponseMessage(message: any): message is ResponseMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Response\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoJson } from \"../lib/GeoJsonDataType\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Communication protocol with [[ITiler]].\n */\nexport namespace WorkerTilerProtocol {\n    /**\n     * Define possible names of requests called on tiler services within `WebWorker`.\n     */\n    export enum Requests {\n        RegisterIndex = \"register-index\",\n        UpdateIndex = \"update-index\",\n        TileRequest = \"tile-request\"\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface RegisterIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.RegisterIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an index registration request sent to a worker.\n     */\n    export function isRegisterIndexRequest(message: any): message is RegisterIndexRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.RegisterIndex\n        );\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface UpdateIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.UpdateIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an update request for the index registration.\n     */\n    export function isUpdateIndexRequest(message: any): message is UpdateIndexRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.UpdateIndex;\n    }\n\n    /**\n     * This object is sent to the tiler asking to retrieve a specific tile. The expected response\n     * type is an object containing a tiled payload.\n     */\n    export interface TileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileRequest;\n        index: string;\n        tileKey: number;\n    }\n\n    /**\n     * Type guard to check if an object is a tile request sent to a worker.\n     */\n    export function isTileRequest(message: any): message is TileRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.TileRequest;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Definitions, StyleSet } from \"./Theme\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Interface for `OptionsMap` which describes a general structure of key-value pairs.\n */\nexport interface OptionsMap {\n    [name: string]: any;\n}\n\n/**\n * Allows to cancel and prioritize requests inside the requestQueue. Useful to optimize the order of\n * decoding tiles during animations and camera movements.\n *\n * `RequestController` is not extending [[AbortController]], because this is not supported in ES5.\n */\nexport class RequestController implements AbortController {\n    /**\n     * Creates an instance of `RequestController`.\n     *\n     * @param {number} priority\n     * @param {AbortController} abortController Optional [[AbortController]] used internally, since\n     *      [[AbortController]]s should not be subclassed.\n     */\n    constructor(\n        public priority: number = 0,\n        public abortController: AbortController = new AbortController()\n    ) {}\n\n    get signal(): AbortSignal {\n        return this.abortController.signal;\n    }\n\n    /**\n     * Invoking this method will set this object's AbortSignal's aborted flag and\n     * signal to any observers that the associated activity is to be aborted.\n     */\n    abort(): void {\n        this.abortController.abort();\n    }\n}\n\n/**\n * Communication protocol with [[ITileDecoder]].\n */\nexport namespace WorkerDecoderProtocol {\n    /**\n     * Define possible names of messages exchanged with decoder services within `WebWorker`.\n     */\n    export enum DecoderMessageName {\n        Configuration = \"configuration\"\n    }\n\n    /**\n     * Interface for `DecodedTileMessage` which describes metadata for a decoded tile.\n     */\n    export interface DecoderMessage {\n        service: string;\n        type: DecoderMessageName;\n    }\n\n    /**\n     * Interface for a ConfigurationMessage that is sent from the datasource to the decoder. The\n     * message used to configure the [[ITileDecoder]].\n     */\n    export interface ConfigurationMessage extends DecoderMessage {\n        type: DecoderMessageName.Configuration;\n        styleSet?: StyleSet;\n        definitions?: Definitions;\n        options?: OptionsMap;\n        languages?: string[];\n    }\n\n    /**\n     * Type guard to check if an object is an instance of `ConfigurationMessage`.\n     */\n    export function isConfigurationMessage(message: any): message is ConfigurationMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === DecoderMessageName.Configuration\n        );\n    }\n\n    /**\n     * Define possible names of requests called on decoder services within `WebWorker`.\n     */\n    export enum Requests {\n        DecodeTileRequest = \"decode-tile-request\",\n        TileInfoRequest = \"tile-info-request\"\n    }\n\n    /**\n     * This object is sent to the decoder asking to decode a specific tile. The expected response\n     * type is a [[DecodedTile]].\n     */\n    export interface DecodeTileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.DecodeTileRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is a decoded tile object sent to a worker.\n     */\n    export function isDecodeTileRequest(message: any): message is DecodeTileRequest {\n        return (\n            message &&\n            typeof message.type === \"string\" &&\n            message.type === Requests.DecodeTileRequest\n        );\n    }\n\n    /**\n     * This object is sent to the decoder asking for a tile info of a specific tile. The expected\n     * response type is a [[DecodedTile]].\n     */\n    export interface TileInfoRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileInfoRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is an info tile object sent to a worker.\n     */\n    export function isTileInfoRequest(message: any): message is TileInfoRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.TileInfoRequest\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\n\nimport { Env, MapEnv, Value } from \"./Expr\";\nimport { makeDecodedTechnique } from \"./StyleSetEvaluator\";\nimport { AttrEvaluationContext, evaluateTechniqueAttr } from \"./TechniqueAttr\";\nimport {\n    IndexedTechnique,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    isTextTechnique,\n    Technique\n} from \"./Techniques\";\n\n/**\n * Defines a map tile metadata.\n */\nexport interface TileInfo {\n    readonly tileKey: TileKey;\n    readonly setupTime: number;\n    readonly transferList?: ArrayBuffer[];\n    readonly numBytes: number;\n}\n\n/**\n * Represents a feature group type for tile info.\n */\nexport enum FeatureGroupType {\n    Point,\n    Line,\n    Polygon\n}\n\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n\n/**\n * Structure of arrays containing data for all features of this group. No methods, since the object\n * is being passed as part of ExtendedTileInfo across \"process boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n */\nexport class FeatureGroup {\n    /** featureIds */\n    featureIds: Array<number | undefined> = new Array<number | undefined>();\n\n    /** Indices into [[ExtendedTileInfo]].techniqueCatalog */\n    techniqueIndex: number[];\n\n    /** Indices into [[ExtendedTileInfo]].textCatalog. */\n    textIndex: number[];\n\n    /** Indices into positions. */\n    positionIndex: number[];\n\n    /** XY coordinates of this group. */\n    positions: number[];\n\n    /** number of features */\n    numFeatures: number = 0;\n\n    /** number of positions of elements (2 per point) */\n    numPositions: number = 0;\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].layerCatalog. Only available if\n     * [[OmvFeatureGroup]] has been constructed with `storeExtendedTags` set to `true`.\n     */\n    layerIndex?: number[];\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].classCatalog. Only available if\n     * [[OmvFeatureGroup]] has been constructed with `storeExtendedTags` set to `true`.\n     */\n    classIndex?: number[];\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].typeCatalog. Only available if [[OmvFeatureGroup]]\n     * has been constructed with `storeExtendedTags` set to `true`.\n     */\n    typeIndex?: number[];\n\n    /**\n     * Construct featureGroup.\n     *\n     * @param storeExtendedTags Pass `true` to create fields for more OMV tags (`layer`, `class`\n     * and `type`).\n     */\n    constructor(storeExtendedTags: boolean, startSize: number = 5000) {\n        this.featureIds = new Array<number>(startSize);\n        this.featureIds.length = startSize;\n        this.techniqueIndex = new Array<number>(startSize);\n        this.techniqueIndex.length = startSize;\n        this.textIndex = new Array<number>(startSize);\n        this.textIndex.length = startSize;\n        this.positionIndex = new Array<number>(startSize);\n        this.positionIndex.length = startSize;\n        this.positions = new Array<number>(10 * startSize);\n        this.positions.length = 10 * startSize;\n\n        if (storeExtendedTags) {\n            this.layerIndex = new Array<number>(startSize);\n            this.layerIndex.length = startSize;\n            this.classIndex = new Array<number>(startSize);\n            this.classIndex.length = startSize;\n            this.typeIndex = new Array<number>(startSize);\n            this.typeIndex.length = startSize;\n        }\n    }\n\n    /**\n     * Compute size in bytes.\n     */\n    getNumBytes(): number {\n        return (\n            (this.featureIds.length +\n                this.techniqueIndex.length +\n                this.textIndex.length +\n                this.positionIndex.length +\n                this.positions.length +\n                (this.layerIndex !== undefined ? this.layerIndex.length : 0) +\n                (this.classIndex !== undefined ? this.classIndex.length : 0) +\n                (this.typeIndex !== undefined ? this.typeIndex.length : 0)) *\n            8\n        );\n    }\n}\n\n/**\n * Structure of arrays containing data for roads. No methods, since the object is being passed as\n * part of [[ExtendedTileInfo]] across \"process boundaries\" to the web worker.\n */\nexport class LineFeatureGroup extends FeatureGroup {\n    /**\n     * An array of road segment ids. Is the same length as `featureIds` but certain elements can be\n     * `undefined` (if this line feature is not a road).\n     */\n    segmentIds?: number[];\n\n    /**\n     * An array of road start offsets. Certain elements may be `undefined` (if this line feature is\n     * not a road).\n     */\n    segmentStartOffsets?: number[];\n\n    /**\n     * An array of road end offsets. Certain elements may be `undefined` (if this line feature is\n     * not a road).\n     */\n    segmentEndOffsets?: number[];\n\n    /**\n     * An array of object defined by the user. Certain elements may be `undefined` (if this line\n     * feature is not a road, or if the object for that feature is undefined).\n     */\n    userData: Array<{} | undefined> = [];\n\n    /** @override */\n    getNumBytes(): number {\n        return (\n            super.getNumBytes() +\n            ((this.segmentIds !== undefined ? this.segmentIds.length : 0) +\n                (this.segmentStartOffsets !== undefined ? this.segmentStartOffsets.length : 0) +\n                (this.segmentEndOffsets !== undefined ? this.segmentEndOffsets.length : 0)) *\n                8\n        );\n    }\n}\n\n/**\n * Structure of arrays containing data for polygons. No methods, since the object is being passed as\n * part of ExtendedTileInfo across \"process boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n *\n * Due to the complexity of the access, there are supporting classes to store and access data in\n * the feature groups. See [[ExtendedTileInfoWriter]] and [[ExtendedTileInfoPolygonAccessor]].\n */\nexport class PolygonFeatureGroup extends FeatureGroup {\n    /**\n     * Indices into innerRingStartIndex. One entry for every polygon feature.\n     *\n     * Number of rings is computed by either:\n     *\n     * a) Computing from the next innerRingStart, or\n     *\n     * b) Computing from the size of the array.\n     */\n    outerRingStartIndex: number[];\n\n    /**\n     * One entry for every polygon feature. Contains `true` if a polygon ring is an _outside_ ring,\n     * `false` otherwise.\n     */\n    innerRingIsOuterContour: number[];\n\n    /**\n     * Indices into [[OmvFeatureGroup]]`.positions`. One index for every ring.\n     *\n     * Number of inner rings is computed by either:\n     *\n     * a) Computing from the next innerRingStart, or\n     *\n     * b) Computing from the size of the array.\n     */\n    innerRingStartIndex: number[];\n\n    /**\n     * Number of rings stored in all polygons in tis group. Used to keep size of the\n     * arrays.\n     */\n    groupNumRings: number = 0;\n\n    constructor(storeExtendedTags: boolean, startSize: number = 5000) {\n        super(storeExtendedTags, startSize);\n\n        this.outerRingStartIndex = new Array<number>(startSize);\n        this.outerRingStartIndex.length = startSize;\n        this.innerRingIsOuterContour = new Array<number>(startSize);\n        this.innerRingIsOuterContour.length = startSize;\n        this.innerRingStartIndex = new Array<number>(startSize);\n        this.innerRingStartIndex.length = startSize;\n    }\n\n    /** @override */\n    getNumBytes(): number {\n        return (\n            super.getNumBytes() +\n            ((this.outerRingStartIndex !== undefined ? this.outerRingStartIndex.length : 0) +\n                (this.innerRingIsOuterContour !== undefined\n                    ? this.innerRingIsOuterContour.length\n                    : 0) +\n                (this.innerRingStartIndex !== undefined ? this.innerRingStartIndex.length : 0)) *\n                8\n        );\n    }\n}\n\n/**\n * Class to hold infos from [[OmvTile]]s. Optimized for fast serialization when being passed from\n * webworker to main thread. No methods, since the object is being passed across \"process\n * boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n *\n * Due to the complexity of the access, there are supporting classes to store and access data in\n * the feature groups. See [[ExtendedTileInfoWriter]] and [[ExtendedTileInfoPolygonAccessor]].\n */\nexport class ExtendedTileInfo implements TileInfo {\n    /**\n     * Catalog of strings. Addressed by every features stringIndex.\n     */\n    readonly textCatalog: string[] = new Array<string>();\n    /**\n     * Catalog of techniques. Addressed by every features featureIndex.\n     */\n    readonly techniqueCatalog: IndexedTechnique[] = new Array<IndexedTechnique>();\n\n    /**\n     * Feature group containing all infos about `POINT` features.\n     */\n    readonly pointGroup: FeatureGroup;\n\n    /**\n     * Feature group containing all infos about `LINESTRING` features.\n     */\n    readonly lineGroup: LineFeatureGroup;\n\n    /**\n     * Feature group containing all infos about `POLYGON` features.\n     */\n    readonly polygonGroup: PolygonFeatureGroup;\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly layerCatalog?: string[];\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly classCatalog?: string[];\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly typeCatalog?: string[];\n\n    /**\n     * Used for performance diagnostics.\n     */\n    setupTime: number = 0;\n\n    /**\n     * Size in bytes.\n     */\n    numBytes: number = 0;\n\n    constructor(readonly tileKey: TileKey, storeExtendedTags: boolean) {\n        this.pointGroup = new FeatureGroup(storeExtendedTags);\n        this.lineGroup = new LineFeatureGroup(storeExtendedTags);\n        this.polygonGroup = new PolygonFeatureGroup(storeExtendedTags);\n\n        if (storeExtendedTags) {\n            this.layerCatalog = new Array<string>();\n            this.classCatalog = new Array<string>();\n            this.typeCatalog = new Array<string>();\n        }\n    }\n\n    /**\n     * Compute the memory footprint caused by objects owned by the `ExtendedTileInfo`.\n     */\n    getNumBytes(): number {\n        let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n        for (const str of this.textCatalog) {\n            numBytes += 2 * str.length;\n        }\n\n        numBytes += this.techniqueCatalog.length * MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n        numBytes += this.pointGroup.getNumBytes();\n        numBytes += this.lineGroup.getNumBytes();\n        numBytes += this.polygonGroup.getNumBytes();\n\n        if (this.layerCatalog !== undefined) {\n            for (const str of this.layerCatalog) {\n                numBytes += 2 * str.length;\n            }\n            for (const str of this.classCatalog!) {\n                numBytes += 2 * str.length;\n            }\n            for (const str of this.typeCatalog!) {\n                numBytes += 2 * str.length;\n            }\n        }\n\n        return numBytes;\n    }\n}\n\nexport namespace ExtendedTileInfo {\n    function finishFeatureGroup(featureGroup: FeatureGroup) {\n        featureGroup.featureIds.length = featureGroup.numFeatures;\n        featureGroup.techniqueIndex.length = featureGroup.numFeatures;\n        featureGroup.textIndex.length = featureGroup.numFeatures;\n        featureGroup.positionIndex.length = featureGroup.numFeatures;\n        featureGroup.positions.length = featureGroup.numPositions;\n\n        if (featureGroup.layerIndex !== undefined) {\n            featureGroup.layerIndex.length = featureGroup.numFeatures;\n        }\n        if (featureGroup.classIndex !== undefined) {\n            featureGroup.classIndex.length = featureGroup.numFeatures;\n        }\n        if (featureGroup.typeIndex !== undefined) {\n            featureGroup.typeIndex.length = featureGroup.numFeatures;\n        }\n    }\n\n    function finishPolygonFeatureGroup(polygonGroup: PolygonFeatureGroup) {\n        finishFeatureGroup(polygonGroup);\n        polygonGroup.outerRingStartIndex.length = polygonGroup.numFeatures;\n        polygonGroup.innerRingIsOuterContour.length = polygonGroup.groupNumRings;\n        polygonGroup.innerRingStartIndex.length = polygonGroup.groupNumRings;\n    }\n\n    function finishLineFeatureGroup(lineGroup: LineFeatureGroup) {\n        finishFeatureGroup(lineGroup);\n        if (lineGroup.segmentIds !== undefined) {\n            lineGroup.segmentIds.length = lineGroup.numFeatures;\n            lineGroup.segmentStartOffsets!.length = lineGroup.numFeatures;\n            lineGroup.segmentEndOffsets!.length = lineGroup.numFeatures;\n        }\n    }\n\n    /**\n     * Finalize the tile's features groups.\n     */\n    export function finish(tileInfo: ExtendedTileInfo) {\n        finishFeatureGroup(tileInfo.pointGroup);\n        finishLineFeatureGroup(tileInfo.lineGroup);\n        finishPolygonFeatureGroup(tileInfo.polygonGroup);\n        tileInfo.numBytes = tileInfo.getNumBytes();\n    }\n\n    /**\n     * Returns the number of features in this feature group.\n     */\n    export function featureGroupSize(featureGroup: FeatureGroup): number {\n        return featureGroup.numFeatures;\n    }\n\n    /**\n     * Check if the feature group is finalized.\n     */\n    export function featureGroupFinished(featureGroup: FeatureGroup): boolean {\n        return featureGroup.numPositions === featureGroup.positions.length;\n    }\n\n    /**\n     * Check if the tileInfo is finalized.\n     */\n    export function tileInfoFinished(tileInfo: ExtendedTileInfo): boolean {\n        return (\n            featureGroupFinished(tileInfo.pointGroup) &&\n            featureGroupFinished(tileInfo.lineGroup) &&\n            featureGroupFinished(tileInfo.polygonGroup)\n        );\n    }\n\n    /**\n     * Determine the name of (OMV) feature. It implements the special handling required\n     * to determine the text content of a feature from its tags, which are passed in as the `env`.\n     *\n     * @param env Environment containing the tags from the (OMV) feature.\n     * @param useAbbreviation `true` to use the abbreviation if available.\n     * @param useIsoCode `true` to use the tag \"iso_code\".\n     * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n     *                  as the text of the string. Order reflects priority.\n     */\n    export function getFeatureName(\n        env: Env,\n        useAbbreviation?: boolean,\n        useIsoCode?: boolean,\n        languages?: string[]\n    ): string | undefined {\n        let name;\n        if (useAbbreviation) {\n            const abbreviation = env.lookup(`name:short`);\n            if (typeof abbreviation === \"string\" && abbreviation.length > 0) {\n                return abbreviation;\n            }\n        }\n        if (useIsoCode) {\n            const isoCode = env.lookup(`iso_code`);\n            if (typeof isoCode === \"string\" && isoCode.length > 0) {\n                return isoCode;\n            }\n        }\n        if (languages !== undefined) {\n            for (const lang of languages) {\n                name = env.lookup(`name:${lang}`) || env.lookup(`name_${lang}`);\n                if (typeof name === \"string\" && name.length > 0) {\n                    return name;\n                }\n            }\n        }\n        name = env.lookup(\"name\");\n        if (typeof name === \"string\") {\n            return name;\n        }\n        return undefined;\n    }\n\n    /**\n     * Determine the text string of the map feature. It implements the special handling required\n     * to determine the text content of a feature from its tags, which are passed in as the `env`.\n     *\n     * @param feature Feature, including properties from the (OMV) feature.\n     * @param technique technique defining how text should be created from feature\n     * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n     *                  as the text of the string. Order reflects priority.\n     */\n    export function getFeatureText(\n        context: Env | AttrEvaluationContext,\n        technique: Technique,\n        languages?: string[]\n    ): string | undefined {\n        let useAbbreviation: boolean | undefined;\n        let useIsoCode: boolean | undefined;\n        const env = context instanceof Env ? context : context.env;\n        if (\n            isTextTechnique(technique) ||\n            isPoiTechnique(technique) ||\n            isLineMarkerTechnique(technique)\n        ) {\n            if (technique.text !== undefined) {\n                return evaluateTechniqueAttr(context, technique.text);\n            }\n            if (technique.label !== undefined) {\n                const name = env.lookup(technique.label);\n                return typeof name === \"string\" ? name : undefined;\n            }\n            useAbbreviation = technique.useAbbreviation;\n            useIsoCode = technique.useIsoCode;\n        }\n\n        return getFeatureName(env, useAbbreviation, useIsoCode, languages);\n    }\n}\n\n/**\n * Support class for [[ExtendedTileInfo]]. Assist in filling it with data.\n */\nexport class ExtendedTileInfoWriter {\n    /** Map to identify which techniques already have been added to the [[ExtendedTileInfo]]. */\n    private readonly techniqueIndexMap = new Map<number, number>();\n    /** Map to identify which strings already have been added to the [[ExtendedTileInfo]]. */\n    private readonly stringMap = new Map<string, number>();\n    /** Map to identify which `layer` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly layerMap = new Map<string, number>();\n    /** Map to identify which `class` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly classMap = new Map<string, number>();\n    /** Map to identify which `type` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly typeMap = new Map<string, number>();\n\n    /**\n     * Create an [[ExtendedTileInfoWriter]] for an [[ExtendedTileInfo]]. Assist in filling the\n     * [[ExtendedTileInfo]] with data.\n     *\n     * @param tileInfo [[ExtendedTileInfo]] to write data to.\n     * @param storeExtendedTags Pass `true` if feature data like `layer`, `class`or `type` should\n     *          be stored for every feature.\n     */\n    constructor(readonly tileInfo: ExtendedTileInfo, readonly storeExtendedTags: boolean) {}\n\n    /**\n     * Adds a [[Technique]] to the catalog of techniques. Individual techniques have a `_index` file\n     * which has been created in the [[StyleSetEvaluator]]. This index is required to identify a\n     * technique. The `Map` is used to map techniques to already added techniques, or store the\n     * technique as new, and add it to the map.\n     *\n     * @param technique The [[Technique]] to add.\n     */\n    addTechnique(technique: IndexedTechnique): number {\n        let infoTileTechniqueIndex = this.techniqueIndexMap.get(technique._index);\n        if (infoTileTechniqueIndex !== undefined) {\n            return infoTileTechniqueIndex;\n        }\n\n        const decodedTechnique = makeDecodedTechnique(technique);\n\n        infoTileTechniqueIndex = this.tileInfo.techniqueCatalog.length;\n        this.techniqueIndexMap.set(decodedTechnique._index, infoTileTechniqueIndex);\n        this.tileInfo.techniqueCatalog.push(decodedTechnique);\n\n        return infoTileTechniqueIndex;\n    }\n\n    /**\n     * Add a feature.\n     *\n     * @param featureGroup The feature group to add to.\n     * @param technique The technique to add.\n     * @param env The `env` which is a mix of original OMV feature tags and fields added by the\n     *      [[StyleSetEvaluator]]\n     * @param featureId The featureId, a number unique for many features (but not all).\n     * @param infoTileTechniqueIndex The previously computed index of the technique. Must have been\n     *      computed by `addTechnique(technique)`.\n     * @param isPolygonGroup `true`for polygons.\n     */\n    addFeature(\n        featureGroup: FeatureGroup,\n        env: MapEnv,\n        featureId: number | undefined,\n        featureText: string | undefined,\n        infoTileTechniqueIndex: number,\n        featureGroupType: FeatureGroupType\n    ) {\n        // compute name/label of feature\n        let stringIndex = -1;\n        if (featureText !== undefined && featureText.length > 0) {\n            stringIndex = this.addText(featureText);\n        }\n\n        // add indices into the arrays.\n        featureGroup.featureIds[featureGroup.numFeatures] = featureId;\n        featureGroup.techniqueIndex[featureGroup.numFeatures] = infoTileTechniqueIndex;\n        featureGroup.textIndex[featureGroup.numFeatures] = stringIndex;\n        featureGroup.positionIndex[featureGroup.numFeatures] = featureGroup.numPositions;\n\n        switch (featureGroupType) {\n            case FeatureGroupType.Polygon:\n                // polygons need the extra fields for polygon rings\n                const polygonGroup = featureGroup as PolygonFeatureGroup;\n                assert(polygonGroup.outerRingStartIndex !== undefined);\n                assert(polygonGroup.innerRingStartIndex !== undefined);\n                assert(polygonGroup.innerRingIsOuterContour !== undefined);\n                polygonGroup.outerRingStartIndex[featureGroup.numFeatures] =\n                    polygonGroup.groupNumRings;\n                break;\n            case FeatureGroupType.Line:\n                (featureGroup as LineFeatureGroup).userData[featureGroup.numFeatures] = env.entries;\n                break;\n        }\n\n        // store the extra feature fields\n        if (this.storeExtendedTags) {\n            featureGroup.layerIndex![featureGroup.numFeatures] = this.addLayer(\n                env.lookup(\"$layer\")\n            );\n            featureGroup.classIndex![featureGroup.numFeatures] = this.addClass(env.lookup(\"class\"));\n            featureGroup.typeIndex![featureGroup.numFeatures] = this.addType(env.lookup(\"type\"));\n        }\n\n        featureGroup.numFeatures++;\n    }\n\n    /**\n     * Add the X/Y coordinate of the point. Only for point feature groups.\n     *\n     * @param featureGroup The feature group to add it to.\n     * @param x X Position of point.\n     * @param y Y Position of point.\n     */\n    addFeaturePoint(featureGroup: FeatureGroup, x: number, y: number) {\n        featureGroup.positions[featureGroup.numPositions++] = x;\n        featureGroup.positions[featureGroup.numPositions++] = y;\n    }\n\n    /**\n     * Add the line points as X/Y coordinates to the line feature.\n     *\n     * If a line feature has more than one line (rare for HERE data), it should define multiple\n     * line features for it.\n     *\n     * @param featureGroup The feature group to add to. Must be line feature group.\n     * @param points The X/Y coordinates of the points.\n     */\n    addFeaturePoints(featureGroup: FeatureGroup, points: number[]) {\n        const n = featureGroup.numPositions;\n        const l = points.length;\n        const p = featureGroup.positions;\n        for (let i = 0; i < l; i++) {\n            p[n + i] = points[i];\n        }\n        featureGroup.numPositions += points.length;\n    }\n\n    /**\n     * Add the information about road segments to the line feature. Performs lazy initialization of\n     * `segmentIds`, `segmentStartOffsets`, and `segmentEndOffsets` members of a\n     * [[LineFeatureGroup]] instance.\n     *\n     * @param featureGroup The line feature group to add information to.\n     * @param segmentId Segment id of a feature.\n     * @param startOffset Start offset of a feature.\n     * @param endOffset End offset of a feature.\n     */\n    addRoadSegments(\n        featureGroup: LineFeatureGroup,\n        segmentId: number,\n        startOffset: number,\n        endOffset: number\n    ) {\n        if (featureGroup.segmentIds === undefined) {\n            featureGroup.segmentIds = new Array<number>();\n            featureGroup.segmentStartOffsets = new Array<number>();\n            featureGroup.segmentEndOffsets = new Array<number>();\n        }\n\n        featureGroup.segmentIds[featureGroup.numFeatures - 1] = segmentId;\n        featureGroup.segmentStartOffsets![featureGroup.numFeatures - 1] = startOffset;\n        featureGroup.segmentEndOffsets![featureGroup.numFeatures - 1] = endOffset;\n    }\n\n    /**\n     * Add a single ring to the polygon. Can be called multiple times to add multiple rings to the\n     * polygon.\n     *\n     * @param featureGroup Polygon feature group to add polygon ring to.\n     * @param contour The X/Y coordinates of the ring.\n     * @param isOuterRing Pass `true`if it is a outer ring, otherwise `false`.\n     */\n    addRingPoints(featureGroup: PolygonFeatureGroup, contour: number[], isOuterRing: boolean) {\n        featureGroup.innerRingStartIndex[featureGroup.groupNumRings] = featureGroup.numPositions;\n        featureGroup.innerRingIsOuterContour[featureGroup.groupNumRings] = isOuterRing ? 1 : 0;\n        featureGroup.groupNumRings++;\n\n        const n = featureGroup.numPositions;\n        const l = contour.length;\n        const p = featureGroup.positions;\n        for (let i = 0; i < l; i++) {\n            p[n + i] = contour[i];\n        }\n        featureGroup.numPositions += contour.length;\n    }\n\n    /**\n     * Finalize the tile info's feature group.\n     */\n    finish(): any {\n        ExtendedTileInfo.finish(this.tileInfo);\n    }\n\n    private addText(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.textCatalog, this.stringMap);\n    }\n\n    private addLayer(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.layerCatalog!, this.layerMap);\n    }\n\n    private addClass(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.classCatalog!, this.classMap);\n    }\n\n    private addType(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.typeCatalog!, this.typeMap);\n    }\n\n    // Add a string to the strings catalog. Returns index into the catalog.\n    private addStringValue(\n        str: Value | undefined,\n        catalog: string[],\n        map: Map<string, number>\n    ): number {\n        if (str === undefined || str === null) {\n            return -1;\n        }\n        const name = str.toString();\n        let i = map.get(name);\n        if (i !== undefined) {\n            return i;\n        }\n        i = catalog.length;\n        catalog.push(name);\n        map.set(name, i);\n        return i;\n    }\n}\n\n/**\n * Support for [[ExtendedTileInfo]]. Defines the accessor that allows to access the polygon data.\n */\nexport interface ExtendedTileInfoPolygonAccessor {\n    /**\n     * Number of rings in the polygon.\n     */\n    numRings: number;\n\n    /**\n     * Return if ring is an outer ring.\n     *\n     * @param ringIndex Specify ring index.\n     * @return `true` if ring is an outer ring, `false` otherwise.\n     */\n    isOuterRing(ringIndex: number): boolean;\n\n    /**\n     * Return information about the vertices that make up the ring.\n     *\n     * @param ringIndex Specify ring index.\n     * @returns Info about the array, start and number of points in the ring.\n     */\n    getPoints(\n        ringIndex: number\n    ): {\n        points: ArrayLike<number>;\n        pointsStart: number;\n        numPointValues: number;\n    };\n}\n\n/**\n * Implementation of [[ExtendedTileInfoPolygonAccessor]].\n */\nclass ExtendedTileInfoPolygonAccessorImpl implements ExtendedTileInfoPolygonAccessor {\n    /**\n     * Accessed data for polygons feature group.\n     */\n    polygons?: PolygonFeatureGroup;\n    /**\n     * Feature's index in the group.\n     */\n    featureIndex: number = 0;\n    /**\n     * Indicates where the ring starts.\n     */\n    ringStart: number = 0;\n    /**\n     * Number of rings.\n     */\n    numRings: number = 0;\n\n    /**\n     * Setup the accessor for extended [[TileInfo]].\n     *\n     * @param polygons polygons feature group.\n     * @param featureIndex feature's index in the group.\n     * @param ringStart where the ring starts.\n     * @param numRings number of rings.\n     */\n    setup(\n        polygons: PolygonFeatureGroup,\n        featureIndex: number,\n        ringStart: number,\n        numRings: number\n    ) {\n        this.polygons = polygons;\n        this.featureIndex = featureIndex;\n        this.ringStart = ringStart;\n        this.numRings = numRings;\n    }\n\n    /**\n     * Shut down the accessor and free all references.\n     */\n    reset() {\n        this.polygons = undefined;\n        this.featureIndex = 0;\n        this.ringStart = 0;\n        this.numRings = 0;\n    }\n\n    isOuterRing(ringIndex: number): boolean {\n        assert(ringIndex >= 0);\n        assert(ringIndex < this.numRings);\n        assert(this.polygons !== undefined);\n        if (ringIndex < 0 || ringIndex >= this.numRings || this.polygons === undefined) {\n            throw new Error(\"ExtendedTileInfoPolygonAccessor: Invalid ring index\");\n        }\n        return this.polygons.innerRingIsOuterContour[this.ringStart + ringIndex] !== 0;\n    }\n\n    getPoints(\n        ringIndex: number\n    ): {\n        points: ArrayLike<number>;\n        pointsStart: number;\n        numPointValues: number;\n    } {\n        assert(ringIndex >= 0);\n        assert(ringIndex < this.numRings);\n        assert(this.polygons !== undefined);\n        if (ringIndex < 0 || ringIndex >= this.numRings || this.polygons === undefined) {\n            throw new Error(\"ExtendedTileInfoPolygonAccessor: Invalid ring index\");\n        }\n\n        // compute the start/size of the points in this ring. All `points` are actually just the\n        // indices of a single X/Y coordinate.\n        const pointsStart = this.polygons.innerRingStartIndex[this.ringStart + ringIndex];\n\n        let numPointValues: number;\n        if (ringIndex < this.numRings - 1) {\n            numPointValues =\n                this.polygons.innerRingStartIndex[this.ringStart + ringIndex + 1] - pointsStart;\n        } else {\n            if (this.ringStart + ringIndex < this.polygons.innerRingStartIndex.length - 1) {\n                numPointValues =\n                    this.polygons.innerRingStartIndex[this.ringStart + ringIndex + 1] - pointsStart;\n            } else {\n                numPointValues = this.polygons.positions.length - pointsStart;\n            }\n        }\n\n        return {\n            points: this.polygons.positions,\n            pointsStart,\n            numPointValues\n        };\n    }\n}\n\n/**\n * Interface that a client of [[ExtendedTileInfoAccessor]] has to implement.\n */\nexport interface ExtendedTileInfoHandler {\n    acceptPoint?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        x: number,\n        y: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number\n    ): void;\n\n    acceptLine?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number,\n        points: ArrayLike<number>,\n        pointsStart: number,\n        numElements: number,\n        segmentId?: number,\n        startOffset?: number,\n        endOffset?: number\n    ): void;\n\n    acceptPolygon?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number,\n        polygonAccessor: ExtendedTileInfoPolygonAccessor\n    ): void;\n}\n\n/**\n * Supporting class for [[ExtendedTileInfo]]. Takes an [[ExtendedTileInfoHandler]] and calls an\n * `accept` for every feature of the [[ExtendedTileInfo]], or just all features of a specified\n * `featureId`.\n */\nexport class ExtendedTileInfoVisitor {\n    // static instance to work without allocations.\n    private static polygonAccessor = new ExtendedTileInfoPolygonAccessorImpl();\n\n    constructor(readonly tileInfo: ExtendedTileInfo) {}\n\n    /**\n     * Visit all feature in the [[ExtendedTileInfo]]\n     *\n     * @param handler Let the `handler` visit all features.\n     */\n    visitAll(handler: ExtendedTileInfoHandler) {\n        this.visitAllPointFeatures(handler);\n        this.visitAllLineFeatures(handler);\n        this.visitAllPolygonFeatures(handler);\n    }\n\n    /**\n     * Visit all features of a specified featureId.\n     *\n     * @param featureId The featureId to visit.\n     * @param handler The `handler` to use.\n     */\n    visitFeature(featureId: number, handler: ExtendedTileInfoHandler): number {\n        let numFeaturesFound = 0;\n        const numPointFeatures = this.tileInfo.pointGroup.numFeatures;\n        const pointFeatures = this.tileInfo.pointGroup.featureIds;\n        for (let i = 0; i < numPointFeatures; i++) {\n            if (pointFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitPointFeature(i, handler);\n            }\n        }\n        const numLineFeatures = this.tileInfo.lineGroup.numFeatures;\n        const lineFeatures = this.tileInfo.lineGroup.featureIds;\n        for (let i = 0; i < numLineFeatures; i++) {\n            if (lineFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitLineFeature(i, handler);\n            }\n        }\n        const numPolygonFeatures = this.tileInfo.polygonGroup.numFeatures;\n        const polygonsFeatures = this.tileInfo.polygonGroup.featureIds;\n        for (let i = 0; i < numPolygonFeatures; i++) {\n            if (polygonsFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitPolygonFeature(i, handler);\n            }\n        }\n        return numFeaturesFound;\n    }\n\n    /**\n     * Visit all `POINT` features.\n     *\n     * @param handler The `handler` to use.\n     */\n    visitAllPointFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.pointGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitPointFeature(i, handler);\n        }\n    }\n\n    /**\n     * Visit all `LINESTRING` features.\n     *\n     * @param handler The handler to use.\n     */\n    visitAllLineFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.lineGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitLineFeature(i, handler);\n        }\n    }\n\n    /**\n     * Visit all `POLYGON` features.\n     *\n     * @param handler The `handler` to use.\n     */\n    visitAllPolygonFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.polygonGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitPolygonFeature(i, handler);\n        }\n    }\n\n    private getTag(featureIndex: number, index: number[]): number {\n        return index !== undefined && index[featureIndex] >= 0 ? index[featureIndex] : -1;\n    }\n\n    /**\n     * Call the `handler` on a point feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitPointFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        const tileInfo = this.tileInfo;\n        const points = tileInfo.pointGroup;\n\n        const start = points.positionIndex[featureIndex];\n        const x = points.positions[start];\n        const y = points.positions[start + 1];\n\n        if (!!handler.acceptPoint) {\n            handler.acceptPoint(\n                points.featureIds[featureIndex],\n                points.techniqueIndex[featureIndex],\n                x,\n                y,\n                points.textIndex[featureIndex],\n                this.getTag(featureIndex, points.layerIndex!),\n                this.getTag(featureIndex, points.classIndex!),\n                this.getTag(featureIndex, points.typeIndex!)\n            );\n        }\n    }\n\n    /**\n     * Call the `handler` on a line feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitLineFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        const tileInfo = this.tileInfo;\n        const lines = tileInfo.lineGroup;\n\n        const numFeatures = lines.numFeatures;\n        const positionsStart = lines.positionIndex[featureIndex];\n        const numPointValues =\n            featureIndex === numFeatures - 1\n                ? lines.positions.length - positionsStart\n                : lines.positionIndex[featureIndex + 1] - positionsStart;\n\n        let segmentId: number | undefined;\n        let startOffset: number | undefined;\n        let endOffset: number | undefined;\n\n        if (lines.segmentIds !== undefined) {\n            segmentId = lines.segmentIds[featureIndex];\n            startOffset = lines.segmentStartOffsets![featureIndex];\n            endOffset = lines.segmentEndOffsets![featureIndex];\n        }\n\n        if (!!handler.acceptLine) {\n            handler.acceptLine(\n                lines.featureIds[featureIndex],\n                lines.techniqueIndex[featureIndex],\n                lines.textIndex[featureIndex],\n                this.getTag(featureIndex, lines.layerIndex!),\n                this.getTag(featureIndex, lines.classIndex!),\n                this.getTag(featureIndex, lines.typeIndex!),\n                tileInfo.lineGroup.positions,\n                positionsStart,\n                numPointValues,\n                segmentId,\n                startOffset,\n                endOffset\n            );\n        }\n    }\n\n    /**\n     * Call the `handler` on a polygon feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitPolygonFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        if (handler.acceptPolygon === undefined) {\n            return;\n        }\n\n        const tileInfo = this.tileInfo;\n        const polygons = tileInfo.polygonGroup;\n\n        const numFeatures = polygons.numFeatures;\n        const ringStart = polygons.outerRingStartIndex[featureIndex];\n        const numRings =\n            featureIndex === numFeatures - 1\n                ? polygons.innerRingStartIndex.length - ringStart\n                : polygons.outerRingStartIndex[featureIndex + 1] - ringStart;\n\n        // Use a static instance, so we do not allocate anything here\n        ExtendedTileInfoVisitor.polygonAccessor.setup(polygons, featureIndex, ringStart, numRings);\n\n        handler.acceptPolygon(\n            polygons.featureIds[featureIndex],\n            polygons.techniqueIndex[featureIndex],\n            polygons.textIndex[featureIndex],\n            this.getTag(featureIndex, polygons.layerIndex!),\n            this.getTag(featureIndex, polygons.classIndex!),\n            this.getTag(featureIndex, polygons.typeIndex!),\n            ExtendedTileInfoVisitor.polygonAccessor\n        );\n\n        // Free all data references.\n        ExtendedTileInfoVisitor.polygonAccessor.reset();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    ContainsExpr,\n    Expr,\n    ExprVisitor,\n    HasAttributeExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\n/**\n * [[ExprPool]] maintains a set of unique interned [[Expr]] objects.\n *\n * @hidden\n */\nexport class ExprPool implements ExprVisitor<Expr, void> {\n    private readonly m_booleanLiterals = new Map<boolean, BooleanLiteralExpr>();\n    private readonly m_numberLiterals = new Map<number, NumberLiteralExpr>();\n    private readonly m_stringLiterals = new Map<string, StringLiteralExpr>();\n    private readonly m_objectLiterals = new Map<object, ObjectLiteralExpr>();\n    private readonly m_varExprs = new Map<string, VarExpr>();\n    private readonly m_hasAttributeExprs = new Map<string, HasAttributeExpr>();\n    private readonly m_inExprs = new Map<Expr, ContainsExpr[]>();\n    private readonly m_callExprs = new Map<string, CallExpr[]>();\n\n    /**\n     * Add `expr` to this [[ExprPool]] and return a unique [[Expr]]\n     * object that is structurally equivalent to `expr`.\n     *\n     * @param expr The [[Expr]] to add to this [[ExprPool]].\n     * @returns A unique [[Expr]] that is structurally equivalent to `expr`.\n     */\n    add(expr: Expr): Expr {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): Expr {\n        return NullLiteralExpr.instance;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): Expr {\n        const e = this.m_booleanLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_booleanLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): Expr {\n        const e = this.m_numberLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_numberLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): Expr {\n        const e = this.m_stringLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_stringLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): Expr {\n        const e = this.m_objectLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_objectLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): Expr {\n        const e = this.m_varExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_varExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): Expr {\n        const e = this.m_hasAttributeExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_hasAttributeExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: void): Expr {\n        const value = expr.value.accept(this, context);\n        if (!this.m_inExprs.has(value)) {\n            this.m_inExprs.set(value, []);\n        }\n        const inExprs = this.m_inExprs.get(value)!;\n        for (const inExpr of inExprs) {\n            if (inExpr.elements.length !== expr.elements.length) {\n                continue;\n            }\n            // find the index of the first element in the cached 'in' expr\n            // that is not contained in 'expr.elements'.\n            const i = inExpr.elements.findIndex(x => !expr.elements.includes(x));\n            if (i === -1) {\n                return inExpr;\n            }\n        }\n        const e = new ContainsExpr(value, expr.elements);\n        this.m_inExprs.set(value, [e]);\n        return e;\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): Expr {\n        const value = expr.value.accept(this, context);\n        const branches: typeof expr.branches = expr.branches.map(([label, body]) => [\n            label,\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n        return new MatchExpr(value, branches, fallback);\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): Expr {\n        const branches: typeof expr.branches = expr.branches.map(([condition, body]) => [\n            condition.accept(this, context),\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n        return new CaseExpr(branches, fallback);\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): Expr {\n        // rewrite the actual arguments\n        const expressions = expr.args.map(childExpr => childExpr.accept(this, context));\n        // ensure we have a valid set of interned expressions for the calls\n        if (!this.m_callExprs.has(expr.op)) {\n            this.m_callExprs.set(expr.op, []);\n        }\n        // get the calls for the given operator.\n        const calls = this.m_callExprs.get(expr.op)!;\n        for (const call of calls) {\n            // check the number of arguments\n            if (call.args.length !== expressions.length) {\n                continue;\n            }\n            // find the index of the first mismatch.\n            let index = 0;\n            for (; index < call.args.length; ++index) {\n                if (call.args[index] !== expressions[index]) {\n                    break;\n                }\n            }\n            if (index === call.args.length) {\n                // no mismatch found, return the 'interned' call.\n                return call;\n            }\n        }\n        const e = new CallExpr(expr.op, expressions);\n        calls.push(e);\n        return e;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { Env, Expr, ExprScope, MapEnv, Value } from \"./Expr\";\nimport { getPropertyValue, isInterpolatedProperty } from \"./InterpolatedProperty\";\nimport { InterpolatedProperty } from \"./InterpolatedPropertyDefs\";\n\nconst logger = LoggerManager.instance.create(\"TechniqueAttr\");\n\nexport interface AttrEvaluationContext {\n    /**\n     * Expression evaluation environment containing variable bindings.\n     */\n    env: MapEnv;\n\n    /**\n     * Storage level of tile containing this feature.\n     *\n     * To be removed, when interpolators will be based on [[Expr]].\n     */\n    storageLevel: number;\n\n    /**\n     * Zoom level of tile containing this feature.\n     *\n     * To be removed, when interpolators will be based on [[Expr]].\n     */\n    zoomLevel: number;\n\n    /**\n     * Optional, cache of expression results.\n     *\n     * @see [[Expr.evaluate]]\n     */\n    cachedExprResults?: Map<Expr, Value>;\n}\n\n/**\n * Evaluate feature attr _without_ default value.\n *\n * @returns actual value or `undefined`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | InterpolatedProperty | undefined\n): T | undefined;\n\n/**\n * Evaluate feature attr _with_ default value.\n *\n * @returns actual value or `defaultValue`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | InterpolatedProperty | undefined,\n    defaultValue: T\n): T;\n\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | InterpolatedProperty | undefined,\n    defaultValue?: T\n): T | undefined {\n    const env = context instanceof Env ? context : context.env;\n\n    let evaluated: Value | undefined;\n    if (Expr.isExpr(attrValue)) {\n        try {\n            evaluated = attrValue.evaluate(\n                env,\n                ExprScope.Dynamic,\n                !(context instanceof Env) ? context.cachedExprResults : undefined\n            );\n        } catch (error) {\n            logger.error(`failed to evaluate expression '${JSON.stringify(attrValue)}': ${error}`);\n            evaluated = undefined;\n        }\n    } else if (isInterpolatedProperty(attrValue)) {\n        const storageLevel =\n            context instanceof Env ? (context.lookup(\"$zoom\") as number) : context.zoomLevel;\n        evaluated = getPropertyValue(attrValue, storageLevel) as any;\n    } else {\n        evaluated = (attrValue as unknown) as Value;\n    }\n    if (evaluated === undefined || evaluated === null) {\n        return defaultValue;\n    } else {\n        return (evaluated as unknown) as T;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"./Expr\";\nimport { StyleDeclaration, Theme } from \"./Theme\";\n\n/**\n * The ThemeVisitor visits every style in the theme in a depth-first fashion.\n */\nexport class ThemeVisitor {\n    constructor(readonly theme: Theme) {}\n    /**\n     * Applies a function to every style in the theme.\n     *\n     * @param visitFunc Function to be called with `style` as an argument. Function should return\n     *                  `true` to cancel visitation.\n     * @returns `true` if function has finished prematurely.\n     */\n    visitStyles(visitFunc: (style: StyleDeclaration) => boolean): boolean {\n        const visit = (style: StyleDeclaration): boolean => {\n            if (isJsonExpr(style)) {\n                return false;\n            }\n            if (visitFunc(style)) {\n                return true;\n            }\n            return false;\n        };\n        if (this.theme.styles !== undefined) {\n            for (const styleSetName in this.theme.styles) {\n                if (this.theme.styles[styleSetName] !== undefined) {\n                    for (const style of this.theme.styles[styleSetName]) {\n                        if (visit(style)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { DataSource } from \"./DataSource\";\nimport { TileGeometryCreator } from \"./geometry/TileGeometryCreator\";\nimport { Tile } from \"./Tile\";\n\n/**\n * Provides background geometry for all tiles.\n */\nexport class BackgroundDataSource extends DataSource {\n    private static readonly DEFAULT_TILING_SCHEME = webMercatorTilingScheme;\n    private m_tilingScheme: TilingScheme = BackgroundDataSource.DEFAULT_TILING_SCHEME;\n\n    constructor() {\n        super(\"background\");\n        this.cacheable = true;\n    }\n\n    updateStorageLevelOffset() {\n        let storageLevelOffset: number | undefined;\n\n        this.mapView.dataSources.forEach(ds => {\n            if (ds === this) {\n                return;\n            }\n            const tilingScheme = ds.getTilingScheme();\n            if (tilingScheme === this.m_tilingScheme) {\n                storageLevelOffset =\n                    storageLevelOffset === undefined\n                        ? ds.storageLevelOffset\n                        : Math.max(storageLevelOffset, ds.storageLevelOffset);\n            }\n        });\n\n        if (storageLevelOffset === undefined) {\n            storageLevelOffset = 0;\n        }\n\n        if (storageLevelOffset !== this.storageLevelOffset) {\n            this.storageLevelOffset = storageLevelOffset;\n            this.mapView.clearTileCache(this.name);\n        }\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]) {\n        this.mapView.clearTileCache(this.name);\n    }\n\n    setTilingScheme(tilingScheme?: TilingScheme) {\n        const newScheme = tilingScheme || BackgroundDataSource.DEFAULT_TILING_SCHEME;\n        if (newScheme === this.m_tilingScheme) {\n            return;\n        }\n\n        this.m_tilingScheme = newScheme;\n        this.updateStorageLevelOffset();\n        this.mapView.clearTileCache(this.name);\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile | undefined {\n        const tile = new Tile(this, tileKey);\n        tile.forceHasGeometry(true);\n        tile.removeDecodedTile(); // Skip geometry loading.\n        TileGeometryCreator.instance.addGroundPlane(tile, Number.MIN_SAFE_INTEGER);\n\n        return tile;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection, sphereProjection } from \"@here/harp-geoutils\";\nimport { Vector3 } from \"three\";\nimport { SubdivisionModifier } from \"./SubdivisionModifier\";\n\nconst VERTEX_POSITION_CACHE = [new Vector3(), new Vector3(), new Vector3()];\n\n/**\n * The [[SphericalGeometrySubdivisionModifier]] subdivides triangle mesh geometries positioned\n * on the surface of a sphere centered at `(0, 0, 0)`.\n */\nexport class SphericalGeometrySubdivisionModifier extends SubdivisionModifier {\n    /**\n     * Constructs a new [[SphericalGeometrySubdivisionModifier]].\n     *\n     * @param angle The maximum angle in radians between two vertices and the origin.\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(readonly angle: number, readonly projection: Projection = sphereProjection) {\n        super();\n    }\n\n    /** @override */\n    protected shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined {\n        const aa = sphereProjection.reprojectPoint(this.projection, a, VERTEX_POSITION_CACHE[0]);\n        const bb = sphereProjection.reprojectPoint(this.projection, b, VERTEX_POSITION_CACHE[1]);\n        const cc = sphereProjection.reprojectPoint(this.projection, c, VERTEX_POSITION_CACHE[2]);\n\n        const alpha = aa.angleTo(bb);\n        const beta = bb.angleTo(cc);\n        const gamma = cc.angleTo(aa);\n\n        // find the maximum angle\n        const m = Math.max(alpha, Math.max(beta, gamma));\n\n        // split the triangle if needed.\n        if (m < this.angle) {\n            return undefined;\n        }\n\n        if (m === alpha) {\n            return 0;\n        } else if (m === beta) {\n            return 1;\n        } else if (m === gamma) {\n            return 2;\n        }\n\n        throw new Error(\"failed to split triangle\");\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { BufferAttribute, BufferGeometry, Vector3 } from \"three\";\n\nconst tmpVectorA = new Vector3();\nconst tmpVectorB = new Vector3();\nconst tmpVectorC = new Vector3();\n\n/**\n * The [[SubdivisionModifier]] subdivides triangle mesh geometries.\n */\nexport abstract class SubdivisionModifier {\n    /**\n     * Constructs a new [[SubdivisionModifier]].\n     */\n    constructor() {\n        // nothing to do\n    }\n\n    /**\n     * Subdivides the faces of the given [[THREE.BufferGeometry]].\n     *\n     * This method modifies (in-place) the vertices and the faces of the geometry.\n     * Please note that only the vertex position and their UV coordinates are subdivided.\n     * Normals, vertex colors and other attributes are left unmodified.\n     *\n     * @param geometry The [[THREE.BufferGeometry]] to subdivide.\n     */\n    modify(geometry: BufferGeometry): BufferGeometry {\n        const positionAttr = geometry.getAttribute(\"position\") as BufferAttribute;\n        const position = Array.from(positionAttr.array);\n\n        const uvAttr = geometry.getAttribute(\"uv\") as BufferAttribute;\n        const uv = uvAttr !== undefined ? Array.from(uvAttr.array) : undefined;\n\n        const edgeAttr = geometry.getAttribute(\"edge\") as BufferAttribute;\n        const edge = edgeAttr !== undefined ? Array.from(edgeAttr.array) : undefined;\n\n        const wallAttr = geometry.getAttribute(\"wall\") as BufferAttribute;\n        const wall = wallAttr !== undefined ? Array.from(wallAttr.array) : undefined;\n\n        const indexAttr = geometry.getIndex() as BufferAttribute;\n        const indices = Array.from(indexAttr.array);\n\n        // A cache containing the indices of the vertices added\n        // when subdiving the faces of the geometry.\n        const cache = new Map<string, number>();\n\n        /**\n         * Returns the index of the vertex positioned in the middle of the given vertices.\n         */\n        function middleVertex(i: number, j: number): number {\n            // Build a unique `key` for the pair of indices `(i, j)`.\n            const key = `${Math.min(i, j)}_${Math.max(i, j)}`;\n\n            const h = cache.get(key);\n\n            if (h !== undefined) {\n                // Nothing to do, a vertex in the middle of (i, j) was already created.\n                return h;\n            }\n\n            // The position of the new vertex.\n            tmpVectorA.set(position[i * 3], position[i * 3 + 1], position[i * 3 + 2]);\n            tmpVectorB.set(position[j * 3], position[j * 3 + 1], position[j * 3 + 2]);\n            tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n\n            // The index of the new vertex.\n            const index = position.length / 3;\n            position.push(...tmpVectorC.toArray());\n            // Cache the position of the new vertex.\n            cache.set(key, index);\n\n            // The uvs of the new vertex.\n            if (uv !== undefined) {\n                tmpVectorA.set(uv[i * 2], uv[i * 2 + 1], 0);\n                tmpVectorB.set(uv[j * 2], uv[j * 2 + 1], 0);\n                tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n                uv.push(tmpVectorC.x, tmpVectorC.y);\n            }\n\n            // The edge and wall attributes of the new vertex.\n            // If a new vertex has been introduced between i and j, connect the elements\n            // accordingly.\n            if (edge !== undefined) {\n                if (edge[i] === j) {\n                    edge.push(j);\n                    edge[i] = index;\n                } else if (edge[j] === i) {\n                    edge.push(i);\n                    edge[j] = index;\n                } else {\n                    edge.push(-1);\n                }\n            }\n            if (wall !== undefined) {\n                if (wall[i] === j) {\n                    wall.push(j);\n                    wall[i] = index;\n                } else if (wall[j] === i) {\n                    wall.push(i);\n                    wall[j] = index;\n                } else {\n                    wall.push(-1);\n                }\n            }\n\n            return index;\n        }\n\n        const newIndices = [];\n        while (indices.length >= 3) {\n            const v0 = indices.shift()!;\n            const v1 = indices.shift()!;\n            const v2 = indices.shift()!;\n\n            tmpVectorA.set(position[v0 * 3], position[v0 * 3 + 1], position[v0 * 3 + 2]);\n            tmpVectorB.set(position[v1 * 3], position[v1 * 3 + 1], position[v1 * 3 + 2]);\n            tmpVectorC.set(position[v2 * 3], position[v2 * 3 + 1], position[v2 * 3 + 2]);\n\n            const edgeToSplit = this.shouldSplitTriangle(tmpVectorA, tmpVectorB, tmpVectorC);\n\n            switch (edgeToSplit) {\n                case 0: {\n                    const v3 = middleVertex(v0, v1);\n                    indices.push(v0, v3, v2, v3, v1, v2);\n                    break;\n                }\n\n                case 1: {\n                    const v3 = middleVertex(v1, v2);\n                    indices.push(v0, v1, v3, v0, v3, v2);\n                    break;\n                }\n\n                case 2: {\n                    const v3 = middleVertex(v2, v0);\n                    indices.push(v0, v1, v3, v3, v1, v2);\n                    break;\n                }\n\n                case undefined: {\n                    newIndices.push(v0, v1, v2);\n                    break;\n                }\n\n                default:\n                    throw new Error(\"failed to subdivide the given geometry\");\n            }\n        }\n\n        positionAttr.array = new Float32Array(position);\n        positionAttr.count = position.length / positionAttr.itemSize;\n        positionAttr.needsUpdate = true;\n\n        geometry.setIndex(newIndices);\n\n        if (uv !== undefined) {\n            uvAttr.array = new Float32Array(uv);\n            uvAttr.count = uv.length / uvAttr.itemSize;\n            uvAttr.needsUpdate = true;\n        }\n\n        if (edge !== undefined) {\n            edgeAttr.array = new Float32Array(edge);\n            edgeAttr.count = edge.length / edgeAttr.itemSize;\n            edgeAttr.needsUpdate = true;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * Returns if the given triangle should be subdivide.\n     *\n     * Implementations of this function should return the index of\n     * the edge of the triangle to split (0, 1, or 2) or undefined if\n     * the triangle doesn't need to be subdivided.\n     *\n     * @param a The position of the first vertex of the triangle.\n     * @param b The position of the second vertex of the triangle.\n     * @param c The position of the third vertex of the triangle.\n     */\n    protected abstract shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphTextureCache } from \"./GlyphTextureCache\";\nimport { FontStyle, FontVariant, TextRenderStyle } from \"./TextStyle\";\n\nconst ASSETS_PATH = \"_Assets/\";\nconst BOLD_ASSETS_PATH = \"_BoldAssets/\";\nconst ITALIC_ASSETS_PATH = \"_ItalicAssets/\";\nconst BOLD_ITALIC_ASSETS_PATH = \"_BoldItalicAssets/\";\nconst REPLACEMENT_PATH = \"_Assets/Extra/\";\n\ninterface SrcGlyphData {\n    id: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n    page: number;\n    chnl: number;\n}\n\n/**\n * Metrics defining the placement and rendering of all glyphs in a given [[Font]].\n */\nexport interface FontMetrics {\n    size: number;\n    distanceRange: number;\n    base: number;\n    lineHeight: number;\n    lineGap: number;\n    capHeight: number;\n    xHeight: number;\n}\n\n/**\n * Description of all assets, charset and metrics that define a font inside a [[FontCatalog]].\n */\nexport interface Font {\n    name: string;\n    metrics: FontMetrics;\n    charset: string;\n    bold?: string;\n    italic?: string;\n    boldItalic?: string;\n}\n\n/**\n * Description of a continuous range of Unicode code points (as well as information on which fonts\n * supports it).\n */\nexport interface UnicodeBlock {\n    name: string;\n    min: number;\n    max: number;\n    fonts: string[];\n}\n\n/**\n * Collection of font assets used to render glyphs when using a [[TextCanvas]].\n *\n * @summary A `FontCatalog` works as a stack of SDF bitmap fonts (using the BMFont format) designed\n * to cover the widest Unicode code point range possible. In order to manage all these assets\n * elegantly, the assets inside the `FontCatalog` are stored on a per-Unicode-Block basis, and\n * assets for a block are only loaded once a glyph belonging to that block is requested.\n *\n * Bitmap information coming from all different fonts is then stored in a unified WebGL GPU Texture\n * resource, which can be sampled to render all currently loaded glyphs.\n *\n */\nexport class FontCatalog {\n    /**\n     * Loads a `FontCatalog`.\n     *\n     * @param url Asset url.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     *\n     * @returns `FontCatalog` Promise.\n     */\n    static async load(path: string, maxCodePointCount: number): Promise<FontCatalog> {\n        const url = new URL(path, window.location.href);\n        const fontCatalog = await FontCatalog.loadJSON(url.href);\n\n        const replacementDirUrl = new URL(`${fontCatalog.name}${REPLACEMENT_PATH}`, url);\n        const replacementJson = await FontCatalog.loadJSON(\n            replacementDirUrl.href + \"Specials.json\"\n        );\n        const replacementTexture = await FontCatalog.loadTexture(\n            replacementDirUrl.href + \"Specials.png\"\n        );\n        replacementTexture.wrapS = THREE.ClampToEdgeWrapping;\n        replacementTexture.wrapT = THREE.ClampToEdgeWrapping;\n        replacementTexture.minFilter = THREE.NearestFilter;\n        replacementTexture.needsUpdate = true;\n\n        const replacementFont = fontCatalog.fonts.find((font: Font) => font.name === \"Extra\");\n        const replacementGlyph = new GlyphData(\n            65533,\n            \"Specials\",\n            replacementJson.chars[0].width,\n            replacementJson.chars[0].height,\n            replacementJson.chars[0].xadvance,\n            replacementJson.chars[0].xoffset,\n            replacementJson.chars[0].yoffset,\n            0.0,\n            0.0,\n            1.0,\n            1.0,\n            replacementTexture,\n            replacementFont!\n        );\n\n        const fontCatalogInfo = new FontCatalog(\n            url.href.substr(0, url.href.lastIndexOf(\"/\")),\n            fontCatalog.name,\n            fontCatalog.type,\n            fontCatalog.size,\n            fontCatalog.maxWidth,\n            fontCatalog.maxHeight,\n            fontCatalog.distanceRange,\n            fontCatalog.fonts,\n            fontCatalog.supportedBlocks,\n            maxCodePointCount,\n            replacementGlyph\n        );\n        return fontCatalogInfo;\n    }\n\n    static async loadTexture(url: string): Promise<THREE.Texture> {\n        return new Promise(resolve => {\n            new THREE.TextureLoader().load(url, resolve);\n        }) as Promise<THREE.Texture>;\n    }\n\n    static async loadJSON(url: string): Promise<any> {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`${url} Status Text:  ${response.statusText}`);\n        }\n        const rawJSON = await response.text();\n        return JSON.parse(rawJSON);\n    }\n\n    private m_glyphTextureCache: GlyphTextureCache;\n\n    private m_loadingJson: Map<string, Promise<any>>;\n    private m_loadingPages: Map<string, Promise<THREE.Texture>>;\n    private m_loadingGlyphs: Map<string, Promise<GlyphData>>;\n    private m_loadedJson: Map<string, any>;\n    private m_loadedPages: Map<string, THREE.Texture>;\n    private m_loadedGlyphs: Map<string, Map<number, GlyphData>>;\n\n    /**\n     * @hidden\n     * Creates a new FontCatalog.\n     *\n     * @param url FontCatalog's URL.\n     * @param name FontCatalog's name.\n     * @param type FontCatalog's type (sdf or msdf).\n     * @param size FontCatalog's glyph size (pixels).\n     * @param maxWidth FontCatalog's maximum glyph width (pixels).\n     * @param maxHeight FontCatalog's maximum glyph height (pixels).\n     * @param distanceRange Distance range used to generate the SDF bitmaps.\n     * @param fonts Array of supported fonts.\n     * @param unicodeBlocks Array of supported Unicode blocks.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     * @param m_replacementGlyph [[GlyphData]] to be used whenever a Unicode code point is not\n     * supported by this `FontCatalog`.\n     *\n     * @returns New FontCatalog.\n     */\n    private constructor(\n        readonly url: string,\n        readonly name: string,\n        readonly type: string,\n        readonly size: number,\n        readonly maxWidth: number,\n        readonly maxHeight: number,\n        readonly distanceRange: number,\n        readonly fonts: Font[],\n        readonly unicodeBlocks: UnicodeBlock[],\n        readonly maxCodePointCount: number,\n        private m_replacementGlyph: GlyphData\n    ) {\n        this.m_glyphTextureCache = new GlyphTextureCache(\n            maxCodePointCount,\n            this.maxWidth + 1,\n            this.maxHeight + 1\n        );\n\n        this.m_loadingJson = new Map<string, Promise<any>>();\n        this.m_loadingPages = new Map<string, Promise<THREE.Texture>>();\n        this.m_loadingGlyphs = new Map<string, Promise<GlyphData>>();\n        this.m_loadedJson = new Map<string, any>();\n        this.m_loadedPages = new Map<string, THREE.Texture>();\n        this.m_loadedGlyphs = new Map<string, Map<number, GlyphData>>();\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.fonts.length = 0;\n        this.unicodeBlocks.length = 0;\n        this.m_glyphTextureCache.dispose();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Removes all loaded (and loading) assets.\n     */\n    clear() {\n        this.m_glyphTextureCache.clear();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        this.m_glyphTextureCache.update(renderer);\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_glyphTextureCache.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_glyphTextureCache.textureSize;\n    }\n\n    /**\n     * Current internal loading state.\n     */\n    get isLoading(): boolean {\n        return (\n            this.m_loadingJson.size > 0 ||\n            this.m_loadingPages.size > 0 ||\n            this.m_loadingGlyphs.size > 0\n        );\n    }\n\n    /**\n     * Loads the description file for a specific [[UnicodeBlock]]. This speeds up consequent calls\n     * to `FontCatalog`.loadCharset() that require glyphs from this block to be loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to retrieve this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to load.\n     * @param loadPages If `true`, all pages in this Unicode block will also be loaded.\n     *\n     * @returns Loaded Unicode Block json.\n     */\n    async loadBlock(\n        block: UnicodeBlock,\n        font: Font,\n        fontStyle: FontStyle,\n        loadPages?: boolean\n    ): Promise<any> {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        let json = this.m_loadedJson.get(jsonPath);\n        if (json === undefined) {\n            let jsonPromise = this.m_loadingJson.get(jsonPath);\n            if (jsonPromise === undefined) {\n                try {\n                    jsonPromise = FontCatalog.loadJSON(jsonPath);\n                    this.m_loadingJson.set(jsonPath, jsonPromise);\n                    json = await jsonPromise;\n                    this.m_loadingJson.delete(jsonPath);\n                    this.m_loadedJson.set(jsonPath, json);\n                } catch (e) {\n                    // tslint:disable-next-line:no-console\n                    console.error(e);\n                    this.m_loadingJson.delete(jsonPath);\n                }\n            } else {\n                json = await jsonPromise;\n            }\n        }\n\n        const pagePromises: Array<Promise<THREE.Texture>> = [];\n        if (loadPages === true) {\n            for (const page of json.pages) {\n                pagePromises.push(this.loadPage(`${assetsPath}/${page}`));\n            }\n        }\n        await Promise.all(pagePromises);\n\n        return json;\n    }\n\n    /**\n     * Releases the description file for a specific [[UnicodeBlock]] (and all downloaded pages).\n     * Safe to call when no assets for this block have been loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to remove this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to remove.\n     */\n    removeBlock(block: UnicodeBlock, font: Font, fontStyle: FontStyle): void {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        const json = this.m_loadedJson.get(jsonPath);\n        if (json !== undefined) {\n            for (const page of json.pages) {\n                const pagePath = `${assetsPath}/${page}`;\n                this.m_loadingPages.delete(pagePath);\n                this.m_loadedPages.delete(pagePath);\n            }\n            this.m_loadingJson.delete(jsonPath);\n            this.m_loadedJson.delete(jsonPath);\n        }\n    }\n\n    /**\n     * Loads all the required glyphs needed to render the input text. Character repetition will not\n     * be considered, and only styled assets (with applied font selection, style and variants) will\n     * be loaded.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] for which glyphs will be loaded.\n     *\n     * @returns Promise containing an array of all loaded [[GlyphData]] for the input text.\n     */\n    async loadCharset(input: string, style: TextRenderStyle): Promise<GlyphData[]> {\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const shouldTransform =\n            style.fontVariant === FontVariant.AllCaps ||\n            style.fontVariant === FontVariant.SmallCaps;\n\n        const charset = (shouldTransform ? input.toUpperCase() : input).replace(\n            /[\\s\\S](?=([\\s\\S]+))/g,\n            (c, s) => {\n                return s.indexOf(c) + 1 ? \"\" : c;\n            }\n        );\n        const glyphPromises: Array<Promise<GlyphData>> = [];\n        for (const char of charset) {\n            const codePoint = char.codePointAt(0)!;\n            const font = this.getFont(codePoint, fontName);\n            const fontHash = `${font.name}_${fontStyle}`;\n            const glyphHash = `${fontHash}_${codePoint}`;\n\n            let fontGlyphMap = this.m_loadedGlyphs.get(fontHash);\n            if (fontGlyphMap === undefined) {\n                fontGlyphMap = new Map();\n                this.m_loadedGlyphs.set(fontHash, fontGlyphMap);\n            }\n\n            const glyph = fontGlyphMap.get(codePoint);\n            if (glyph === undefined) {\n                let glyphPromise = this.m_loadingGlyphs.get(glyphHash);\n                if (glyphPromise === undefined) {\n                    if (font.charset.indexOf(String.fromCodePoint(codePoint)) === -1) {\n                        const replacementGlyph = this.createReplacementGlyph(codePoint, char, font);\n                        fontGlyphMap!.set(codePoint, replacementGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, replacementGlyph);\n                        continue;\n                    }\n\n                    let charUnicodeBlock: UnicodeBlock | undefined;\n                    for (const block of this.unicodeBlocks) {\n                        if (codePoint >= block.min && codePoint <= block.max) {\n                            charUnicodeBlock = block;\n                            break;\n                        }\n                    }\n\n                    glyphPromise = this.loadAssets(codePoint, fontStyle, charUnicodeBlock!, font);\n                    this.m_loadingGlyphs.set(glyphHash, glyphPromise);\n                    glyphPromise.then((loadedGlyph: GlyphData) => {\n                        this.m_loadingGlyphs.delete(glyphHash);\n                        fontGlyphMap!.set(codePoint, loadedGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, loadedGlyph);\n                    });\n                }\n                glyphPromises.push(glyphPromise);\n            } else if (!this.m_glyphTextureCache.has(glyphHash)) {\n                glyphPromises.push(Promise.resolve(glyph));\n                this.m_glyphTextureCache.add(glyphHash, glyph);\n            }\n        }\n\n        return Promise.all(glyphPromises);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for a specific character.\n     * Returns `undefined` if the assets for this glyph haven't been loaded yet.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param font [[Font]] to get this glyph from.\n     * @param fontStyle Specific [[FontStyle]] to get glyphs for.\n     *\n     * @returns [[GlyphData]] for this code point.\n     */\n    getGlyph(codePoint: number, font: Font, fontStyle: FontStyle): GlyphData | undefined {\n        const fontGlyphMap = this.m_loadedGlyphs.get(`${font.name}_${fontStyle}`);\n        if (fontGlyphMap === undefined) {\n            return undefined;\n        }\n        return fontGlyphMap.get(codePoint);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for the specified text.\n     * Returns `undefined` if the assets for these glyphs haven't been loaded yet.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] to get glyphs for.\n     * @param letterCaseArray Array containing the original letter case for the requested glyphs.\n     *\n     * @returns Array containing [[GlyphData]] for each character of the input text.\n     */\n    getGlyphs(\n        input: string,\n        style: TextRenderStyle,\n        letterCaseArray?: boolean[]\n    ): GlyphData[] | undefined {\n        const result = [];\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const fontVariant = style.fontVariant;\n        const shouldTransform =\n            fontVariant === FontVariant.AllCaps || fontVariant === FontVariant.SmallCaps;\n        for (const character of input) {\n            const transformedCharacter = shouldTransform ? character.toUpperCase() : character;\n            for (const char of transformedCharacter) {\n                const codePoint = char.codePointAt(0)!;\n                const font = this.getFont(codePoint, fontName);\n                const glyphData = this.getGlyph(codePoint, font, fontStyle);\n                if (glyphData !== undefined) {\n                    result.push(glyphData);\n                    if (letterCaseArray !== undefined) {\n                        letterCaseArray.push(char !== character);\n                    }\n                } else {\n                    return undefined;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the best matched font for a specific character.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param fontName Font name suggestion.\n     *\n     * @returns Best matched font.\n     */\n    getFont(codePoint: number, fontName?: string): Font {\n        let selectedFontName: string = this.fonts[0].name;\n        for (const block of this.unicodeBlocks) {\n            if (codePoint >= block.min && codePoint <= block.max) {\n                selectedFontName =\n                    fontName !== undefined &&\n                    block.fonts.find(element => {\n                        return element === fontName;\n                    }) !== undefined\n                        ? fontName\n                        : block.fonts[0];\n                break;\n            }\n        }\n\n        return this.fonts.find(element => {\n            return element.name === selectedFontName;\n        })!;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `FontCatalog`.\n     *\n     * @param info The info object to increment with the values from this `FontCatalog`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        let numBytes = 0;\n\n        for (const block of this.unicodeBlocks) {\n            numBytes += (block.max - block.min) * 2;\n        }\n\n        // Always stored in RGBA internally.\n        let textureBytes =\n            this.m_glyphTextureCache.textureSize.x * this.m_glyphTextureCache.textureSize.y * 4;\n\n        for (const page in this.m_loadedPages.entries) {\n            if (this.m_loadedPages.get(page) !== undefined) {\n                const loadedPage = this.m_loadedPages.get(page);\n                if (loadedPage !== undefined) {\n                    textureBytes += loadedPage.image.width * loadedPage.image.height * 4;\n                }\n            }\n        }\n\n        info.heapSize += numBytes + textureBytes;\n        info.gpuSize += textureBytes;\n    }\n\n    private createReplacementGlyph(codePoint: number, char: string, font: Font): GlyphData {\n        const replacementGlyph = this.m_replacementGlyph.clone();\n        (replacementGlyph as any).codePoint = codePoint;\n        (replacementGlyph as any).character = char;\n        (replacementGlyph as any).font = font;\n        return replacementGlyph;\n    }\n\n    private async loadAssets(\n        codePoint: number,\n        fontStyle: FontStyle,\n        block: UnicodeBlock,\n        font: Font\n    ): Promise<GlyphData> {\n        const json = await this.loadBlock(block, font, fontStyle);\n        if (json === undefined) {\n            return this.m_replacementGlyph;\n        }\n\n        const sourceGlyphData = (json.chars as SrcGlyphData[]).find(char => char.id === codePoint);\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const texturePath = `${assetsPath}/${json.pages[sourceGlyphData!.page]}`;\n        const texture = await this.loadPage(texturePath);\n\n        const glyphData = new GlyphData(\n            sourceGlyphData!.id,\n            block.name,\n            sourceGlyphData!.width,\n            sourceGlyphData!.height,\n            sourceGlyphData!.xadvance,\n            sourceGlyphData!.xoffset,\n            sourceGlyphData!.yoffset,\n            sourceGlyphData!.x / texture!.image.width,\n            1.0 - (sourceGlyphData!.y + sourceGlyphData!.height) / texture!.image.height,\n            (sourceGlyphData!.x + sourceGlyphData!.width) / texture!.image.width,\n            1.0 - sourceGlyphData!.y / texture!.image.height,\n            texture!,\n            font\n        );\n\n        return glyphData;\n    }\n\n    private async loadPage(pagePath: string): Promise<THREE.Texture> {\n        let page = this.m_loadedPages.get(pagePath);\n        if (page === undefined) {\n            let pagePromise = this.m_loadingPages.get(pagePath);\n            if (pagePromise === undefined) {\n                pagePromise = FontCatalog.loadTexture(pagePath);\n                this.m_loadingPages.set(pagePath, pagePromise);\n                page = await pagePromise;\n                page.wrapS = THREE.ClampToEdgeWrapping;\n                page.wrapT = THREE.ClampToEdgeWrapping;\n                page.minFilter = THREE.NearestFilter;\n                page.needsUpdate = true;\n                if (this.m_loadingPages.delete(pagePath)) {\n                    this.m_loadedPages.set(pagePath, page);\n                }\n                this.m_loadingPages.delete(pagePath);\n            } else {\n                page = await pagePromise;\n            }\n        }\n        return page;\n    }\n\n    private getAssetsPath(fontStyle: FontStyle, font: Font) {\n        let fontStylePath = ASSETS_PATH;\n        switch (fontStyle) {\n            case FontStyle.Bold:\n                if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.Italic:\n                if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.BoldItalic:\n                if (font.boldItalic !== undefined) {\n                    fontStylePath = BOLD_ITALIC_ASSETS_PATH;\n                } else if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                } else if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n        }\n        return `${this.url}/${this.name}${fontStylePath}${font.name!}`;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport * as THREE from \"three\";\n\nimport { Font, FontMetrics } from \"./FontCatalog\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphClearMaterial, GlyphCopyMaterial } from \"./TextMaterials\";\n\n/**\n * Maximum number of texture atlas pages we can copy from in a single go. This amount is determined\n * by the maximum number of texture units available on a pixel shader for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_IMAGE_UNITS\n */\nconst MAX_NUM_COPY_PAGES = 8;\n\n/**\n * Maximum texture size supported. This amount is determined by the maximum texture size supported\n * for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE\n */\nconst MAX_TEXTURE_SIZE = 4096;\n\n/**\n * @hidden\n * Information stored for every entry in a [[GlyphTextureCache]].\n */\nexport interface GlyphCacheEntry {\n    glyphData: GlyphData;\n    location: THREE.Vector2;\n}\n\n/**\n * @hidden\n * Unified glyph SDF bitmap storage for all fonts in a [[FontCatalog]].\n * Implemented as an abstraction layer on top of an LRUCache and WebGLRenderTarget.\n */\nexport class GlyphTextureCache {\n    private m_cacheWidth: number;\n    private m_cacheHeight: number;\n    private m_textureSize: THREE.Vector2;\n    private m_entryCache: LRUCache<string, GlyphCacheEntry>;\n\n    private m_scene: THREE.Scene;\n    private m_camera: THREE.OrthographicCamera;\n    private m_rt: THREE.WebGLRenderTarget;\n\n    private m_copyTextureSet: Set<THREE.Texture>;\n    private m_copyTransform: THREE.Matrix3;\n    private m_copyPositions: THREE.Vector2[];\n    private m_copyMaterial: GlyphCopyMaterial;\n    private m_copyVertexBuffer: THREE.InterleavedBuffer;\n    private m_copyPositionAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyUVAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyGeometry: THREE.BufferGeometry;\n    private m_copyMesh: THREE.Mesh;\n    private m_copyGeometryDrawCount: number;\n\n    private m_clearMaterial: GlyphClearMaterial;\n    private m_clearPositionAttribute: THREE.BufferAttribute;\n    private m_clearGeometry: THREE.BufferGeometry;\n    private m_clearMesh: THREE.Mesh;\n    private m_clearGeometryDrawCount: number;\n\n    /**\n     * Creates a `GlyphTextureCache` object.\n     *\n     * @param capacity Cache's maximum glyph capacity.\n     * @param entryWidth Maximum entry width.\n     * @param entryHeight Maximum entry height.\n     *\n     * @returns New `GlyphTextureCache`.\n     */\n    constructor(\n        readonly capacity: number,\n        readonly entryWidth: number,\n        readonly entryHeight: number\n    ) {\n        const nRows = Math.floor(Math.sqrt(capacity));\n        this.m_cacheHeight = nRows * nRows < capacity ? nRows + 1 : nRows;\n        this.m_cacheWidth = nRows * this.m_cacheHeight < capacity ? nRows + 1 : nRows;\n\n        this.m_textureSize = new THREE.Vector2(\n            this.m_cacheWidth * entryWidth,\n            this.m_cacheHeight * entryHeight\n        );\n        if (this.m_textureSize.y > MAX_TEXTURE_SIZE || this.m_textureSize.x > MAX_TEXTURE_SIZE) {\n            // tslint:disable-next-line:no-console\n            console.warn(\n                \"GlyphTextureCache texture size (\" +\n                    this.m_textureSize.x +\n                    \", \" +\n                    this.m_textureSize.y +\n                    \") exceeds WebGL's widely supported MAX_TEXTURE_SIZE (\" +\n                    MAX_TEXTURE_SIZE +\n                    \").\\n\" +\n                    \"This could result in rendering errors on some devices.\\n\" +\n                    \"Please consider reducing its capacity or input assets size.\"\n            );\n        }\n\n        this.m_entryCache = new LRUCache<string, GlyphCacheEntry>(capacity);\n        this.initCacheEntries();\n\n        this.m_scene = new THREE.Scene();\n        this.m_camera = new THREE.OrthographicCamera(\n            0,\n            this.m_textureSize.x,\n            this.m_textureSize.y,\n            0\n        );\n        this.m_camera.position.z = 1;\n        this.m_camera.updateMatrixWorld(false);\n        this.m_rt = new THREE.WebGLRenderTarget(this.m_textureSize.x, this.m_textureSize.y, {\n            wrapS: THREE.ClampToEdgeWrapping,\n            wrapT: THREE.ClampToEdgeWrapping,\n            depthBuffer: false,\n            stencilBuffer: false\n        });\n\n        this.m_copyTextureSet = new Set<THREE.Texture>();\n        this.m_copyTransform = new THREE.Matrix3();\n        this.m_copyPositions = [];\n        this.m_copyPositions.push(\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2()\n        );\n\n        this.m_copyMaterial = new GlyphCopyMaterial();\n        this.m_copyVertexBuffer = new THREE.InterleavedBuffer(new Float32Array(capacity * 20), 5);\n        this.m_copyVertexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_copyPositionAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            3,\n            0\n        );\n        this.m_copyUVAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            2,\n            3\n        );\n        this.m_copyGeometry = new THREE.BufferGeometry();\n        this.m_copyGeometry.setAttribute(\"position\", this.m_copyPositionAttribute);\n        this.m_copyGeometry.setAttribute(\"uv\", this.m_copyUVAttribute);\n\n        const copyIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        copyIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_copyGeometry.setIndex(copyIndexBuffer);\n        this.m_copyMesh = new THREE.Mesh(this.m_copyGeometry, this.m_copyMaterial);\n        this.m_copyMesh.frustumCulled = false;\n        this.m_copyGeometryDrawCount = 0;\n\n        this.m_clearMaterial = new GlyphClearMaterial();\n        this.m_clearPositionAttribute = new THREE.BufferAttribute(\n            new Float32Array(capacity * 8),\n            2\n        );\n        this.m_clearPositionAttribute.setUsage(THREE.DynamicDrawUsage);\n        this.m_clearGeometry = new THREE.BufferGeometry();\n        this.m_clearGeometry.setAttribute(\"position\", this.m_clearPositionAttribute);\n        const clearIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        clearIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_clearGeometry.setIndex(clearIndexBuffer);\n        this.m_clearMesh = new THREE.Mesh(this.m_clearGeometry, this.m_clearMaterial);\n        this.m_clearMesh.frustumCulled = false;\n        this.m_clearGeometryDrawCount = 0;\n\n        this.m_scene.add(this.m_clearMesh, this.m_copyMesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose(): void {\n        this.m_entryCache.clear();\n        this.m_scene.remove(this.m_clearMesh, this.m_copyMesh);\n        this.m_rt.dispose();\n        this.m_clearMaterial.dispose();\n        this.m_copyMaterial.dispose();\n        this.m_copyTextureSet.clear();\n        this.m_clearGeometry.dispose();\n        this.m_copyGeometry.dispose();\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_rt.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_textureSize;\n    }\n\n    /**\n     * Add a new entry to the GlyphTextureCache. If the limit of entries is hit, the least requested\n     * entry will be replaced.\n     *\n     * @param hash Entry's hash.\n     * @param glyph Entry's glyph data.\n     */\n    add(hash: string, glyph: GlyphData): void {\n        const entry = this.m_entryCache.get(hash);\n        if (entry !== undefined) {\n            return;\n        }\n\n        const oldestEntry = this.m_entryCache.oldest;\n        if (oldestEntry === null) {\n            throw new Error(\"GlyphTextureCache is uninitialized!\");\n        }\n        this.clearCacheEntry(oldestEntry.value);\n        this.copyGlyphToCache(hash, glyph, oldestEntry.value.location);\n    }\n\n    /**\n     * Checks if an entry is in the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Test result.\n     */\n    has(hash: string): boolean {\n        return this.m_entryCache.has(hash);\n    }\n\n    /**\n     * Retrieves an entry from the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Retrieval result.\n     */\n    get(hash: string): GlyphCacheEntry | undefined {\n        return this.m_entryCache.get(hash);\n    }\n\n    /**\n     * Clears the internal LRUCache.\n     */\n    clear(): void {\n        this.m_copyGeometryDrawCount = 0;\n        this.m_clearGeometryDrawCount = 0;\n        this.m_entryCache.clear();\n        this.m_copyTextureSet.clear();\n        this.initCacheEntries();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        let oldRenderTarget: THREE.RenderTarget | null = null;\n\n        const willClearGeometry = this.m_clearGeometryDrawCount > 0;\n        const willCopyGeometry = this.m_copyGeometryDrawCount > 0;\n\n        if (willClearGeometry || willCopyGeometry) {\n            oldRenderTarget = renderer.getRenderTarget();\n            renderer.setRenderTarget(this.m_rt);\n        }\n\n        if (willClearGeometry) {\n            if (this.m_clearGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n            }\n            this.m_clearPositionAttribute.needsUpdate = true;\n            this.m_clearPositionAttribute.updateRange.offset = 0;\n            this.m_clearPositionAttribute.updateRange.count = this.m_clearGeometryDrawCount * 8;\n            this.m_clearGeometry.index.needsUpdate = true;\n            this.m_clearGeometry.index.updateRange.offset = 0;\n            this.m_clearGeometry.index.updateRange.count = this.m_clearGeometryDrawCount * 6;\n            this.m_clearGeometry.setDrawRange(0, this.m_clearGeometryDrawCount * 6);\n\n            this.m_clearMesh.visible = true;\n            this.m_copyMesh.visible = false;\n\n            renderer.render(this.m_scene, this.m_camera);\n            this.m_clearGeometryDrawCount = 0;\n            this.m_clearMesh.visible = false;\n        }\n\n        if (willCopyGeometry) {\n            if (this.m_copyGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n            }\n            this.m_copyVertexBuffer.needsUpdate = true;\n            this.m_copyVertexBuffer.updateRange.offset = 0;\n            this.m_copyVertexBuffer.updateRange.count = this.m_copyGeometryDrawCount * 20;\n            this.m_copyGeometry.index.needsUpdate = true;\n            this.m_copyGeometry.index.updateRange.offset = 0;\n            this.m_copyGeometry.index.updateRange.count = this.m_copyGeometryDrawCount * 6;\n            this.m_copyGeometry.setDrawRange(0, this.m_copyGeometryDrawCount * 6);\n\n            this.m_copyMesh.visible = true;\n            const srcPages = Array.from(this.m_copyTextureSet);\n            const nCopies = Math.ceil(this.m_copyTextureSet.size / MAX_NUM_COPY_PAGES);\n            for (let copyIndex = 0; copyIndex < nCopies; copyIndex++) {\n                const pageOffset = copyIndex * MAX_NUM_COPY_PAGES;\n                this.m_copyMaterial.uniforms.pageOffset.value = pageOffset;\n                for (let i = 0; i < MAX_NUM_COPY_PAGES; i++) {\n                    const pageIndex = pageOffset + i;\n                    if (pageIndex < this.m_copyTextureSet.size) {\n                        this.m_copyMaterial.uniforms[\"page\" + i].value = srcPages[pageIndex];\n                    }\n                }\n\n                renderer.render(this.m_scene, this.m_camera);\n            }\n            this.m_copyTextureSet.clear();\n            this.m_copyGeometryDrawCount = 0;\n        }\n        if (willClearGeometry || willCopyGeometry) {\n            renderer.setRenderTarget(oldRenderTarget);\n        }\n    }\n\n    private initCacheEntries() {\n        const dummyMetrics: FontMetrics = {\n            size: 0,\n            distanceRange: 0,\n            base: 0,\n            lineHeight: 0,\n            lineGap: 0,\n            capHeight: 0,\n            xHeight: 0\n        };\n        const dummyFont: Font = {\n            name: \"\",\n            metrics: dummyMetrics,\n            charset: \"\"\n        };\n\n        const dummyGlyphData = new GlyphData(\n            0,\n            \"\",\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            THREE.Texture.DEFAULT_IMAGE,\n            dummyFont\n        );\n\n        for (let i = 0; i < this.m_cacheHeight; i++) {\n            for (let j = 0; j < this.m_cacheWidth; j++) {\n                const dummyEntry: GlyphCacheEntry = {\n                    glyphData: dummyGlyphData,\n                    location: new THREE.Vector2(j, i)\n                };\n                this.m_entryCache.set(`Dummy_${i * this.m_cacheHeight + j}`, dummyEntry);\n            }\n        }\n    }\n\n    private copyGlyphToCache(hash: string, glyph: GlyphData, cacheLocation: THREE.Vector2) {\n        this.m_copyTextureSet.add(glyph.texture);\n        let copyTextureIndex = 0;\n        for (const value of this.m_copyTextureSet.values()) {\n            if (value === glyph.texture) {\n                break;\n            }\n            copyTextureIndex++;\n        }\n        glyph.copyIndex = copyTextureIndex;\n\n        this.m_copyTransform.set(\n            1.0,\n            0.0,\n            cacheLocation.x * this.entryWidth - glyph.offsetX,\n            0.0,\n            1.0,\n            cacheLocation.y * this.entryHeight - glyph.positions[0].y,\n            0.0,\n            0.0,\n            0.0\n        );\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositions[i].set(glyph.positions[i].x, glyph.positions[i].y);\n            this.m_copyPositions[i].applyMatrix3(this.m_copyTransform);\n        }\n\n        if (this.m_copyGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_copyGeometryDrawCount * 4;\n        const baseIndex = this.m_copyGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositionAttribute.setXYZ(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y,\n                glyph.copyIndex\n            );\n            this.m_copyUVAttribute.setXY(\n                baseVertex + i,\n                glyph.sourceTextureCoordinates[i].x,\n                glyph.sourceTextureCoordinates[i].y\n            );\n        }\n\n        if (this.m_copyGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n        }\n        this.m_copyGeometry.index.setX(baseIndex, baseVertex);\n        this.m_copyGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_copyGeometryDrawCount;\n\n        const u0 = this.m_copyPositions[0].x / this.m_textureSize.x;\n        const v0 = this.m_copyPositions[0].y / this.m_textureSize.y;\n        const u1 = this.m_copyPositions[3].x / this.m_textureSize.x;\n        const v1 = this.m_copyPositions[3].y / this.m_textureSize.y;\n        glyph.dynamicTextureCoordinates[0].set(u0, v0);\n        glyph.dynamicTextureCoordinates[1].set(u1, v0);\n        glyph.dynamicTextureCoordinates[2].set(u0, v1);\n        glyph.dynamicTextureCoordinates[3].set(u1, v1);\n\n        glyph.isInCache = true;\n        this.m_entryCache.set(hash, {\n            glyphData: glyph,\n            location: cacheLocation\n        });\n    }\n\n    private clearCacheEntry(entry: GlyphCacheEntry) {\n        entry.glyphData.isInCache = false;\n        this.m_copyPositions[0].set(\n            entry.location.x * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[1].set(\n            (entry.location.x + 1) * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[2].set(\n            entry.location.x * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n        this.m_copyPositions[3].set(\n            (entry.location.x + 1) * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n\n        if (this.m_clearGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_clearGeometryDrawCount * 4;\n        const baseIndex = this.m_clearGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_clearPositionAttribute.setXY(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y\n            );\n        }\n\n        if (this.m_clearGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n        }\n        this.m_clearGeometry.index.setX(baseIndex, baseVertex);\n        this.m_clearGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_clearGeometryDrawCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\n\n/** @hidden */\nexport class Entry<Key, Value> {\n    constructor(\n        public key: Key,\n        public value: Value,\n        public size: number,\n        public newer: Entry<Key, Value> | null,\n        public older: Entry<Key, Value> | null\n    ) {}\n}\n\n/**\n * Fixed size cache that evicts its entries in least-recently-used order when it overflows.\n * Modeled after standard JavaScript `Map` otherwise.\n */\nexport class LRUCache<Key, Value> {\n    /**\n     * Optional callback that is called on every item that is evicted from the cache.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    evictionCallback?: (key: Key, value: Value) => void;\n\n    /**\n     * Optional callback that is called on every item that should be evicted from the cache to\n     * determine if it can be removed, or should be locked in the cache.\n     *\n     * It returns `true` if the item can be removed from cache, `false` otherwise. Locking items in\n     * the cache should be a temporary measure, since if the cache is filled with non-evictable\n     * items only, it may grow beyond its capacity.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    canEvict?: (key: Key, value: Value) => boolean;\n    private m_capacity: number;\n    private m_size = 0;\n\n    /**\n     * The internal map object that keeps the key-value pairs and their order.\n     */\n    private m_map = new Map<Key, Entry<Key, Value>>();\n\n    /**\n     * The newest entry, i.e. the most recently used item.\n     */\n    private m_newest: Entry<Key, Value> | null = null;\n\n    /**\n     * The oldest entry, i.e. the least recently used item.\n     */\n    private m_oldest: Entry<Key, Value> | null = null;\n\n    /**\n     * A function determining the size per element.\n     */\n    private m_sizeFunction: (v: Value) => number;\n\n    /**\n     * Creates a new instance of `LRUCache`.\n     *\n     * The optional [[sizeFunction]] can be used to fine tune the memory consumption of all cached\n     * elements, thus [[cacheCapacity]] means then memory used (in MBs). Otherwise, if\n     * [[sizeFunction]] is not specified, the [[cacheCapacity]] accounts for the maximum\n     * number of elements stored.\n     *\n     * @param cacheCapacity Number used to configure the maximum cache size, may express\n     * number of entries or memory consumed in megabytes depending on [[sizeFunction]].\n     * @param sizeFunction A function determining the size per element.\n     */\n    constructor(cacheCapacity: number, sizeFunction: (v: Value) => number = () => 1) {\n        this.m_capacity = cacheCapacity;\n        this.m_sizeFunction = sizeFunction;\n    }\n\n    /**\n     * Iterates over all items from the most recently used item to the least recently used one.\n     *\n     * **Note**: Results are undefined if the entire cache is modified during iteration. You may\n     * although modify the current element in [[callbackfn]] function.\n     *\n     * @param callbackfn The callback to call for each item.\n     * @param thisArg Optional this argument for the callback.\n     */\n    forEach(\n        callbackfn: (value: Value, key: Key, map: LRUCache<Key, Value>) => void,\n        thisArg?: any\n    ): void {\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const older = entry.older;\n            callbackfn.call(thisArg, entry.value, entry.key, this);\n            entry = older;\n        }\n    }\n\n    /**\n     * The size of the cache, i.e. the sum of all the sizes of all the objects in the cache.\n     *\n     * @returns The size of the cache.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Returns the maximum capacity of the cache, i.e. the maximum number of elements this cache\n     * can contain or the total amount of memory that may be consumed by cache if element size\n     * function was specified in cache c-tor.\n     *\n     * @returns The capacity of the cache.\n     */\n    get capacity(): number {\n        return this.m_capacity;\n    }\n\n    /**\n     * @deprecated - DO NOT USE. Will be removed in future versions.\n     *\n     * Returns the internal map object that keeps the key-value pairs and their order.\n     *\n     * @returns The internal map object.\n     */\n    get map(): Map<Key, Entry<Key, Value>> {\n        // ### TODO - remove me. Cache must not expose its internal object,\n        // modifications to it are fatal for the internal state machine.\n        return this.m_map;\n    }\n\n    /**\n     * Returns the newest entry in the cache.\n     *\n     * @returns Newest entry in the cache.\n     */\n    get newest(): Entry<Key, Value> | null {\n        return this.m_newest;\n    }\n\n    /**\n     * Returns the oldest entry in the cache.\n     *\n     * Note: Does not promote the oldest item as most recently used item.\n     *\n     * @returns Oldest entry in the cache.\n     */\n    get oldest(): Entry<Key, Value> | null {\n        return this.m_oldest;\n    }\n\n    /**\n     * Resets the capacity of this cache. If `newCapacity` is smaller than the current cache size,\n     * all items will be evicted until the cache shrinks to `newCapacity`.\n     *\n     * @param newCapacity The new capacity of this cache.\n     */\n    setCapacity(newCapacity: number): void {\n        this.m_capacity = newCapacity;\n        this.evict();\n    }\n\n    /**\n     * Resets the cache capacity and function used to measure the element size.\n     *\n     * @param newCapacity The new capacity masured in units returned from [[sizeMeasure]] funtion.\n     * @param sizeMeasure Function that defines the size of element, if you want to measure\n     * number of elements only always return 1 from this function (default), you may also\n     * specify own function that measures entries by memory consumed, nubmer of sub-elements, etc.\n     */\n    setCapacityAndMeasure(newCapacity: number, sizeMeasure: (v: Value) => number = () => 1) {\n        this.m_capacity = newCapacity;\n        this.m_sizeFunction = sizeMeasure;\n        this.shrinkToCapacity();\n    }\n\n    /**\n     * Updates the size of all elements in this cache. If their aggregated size is larger than the\n     * capacity, items will be evicted until the cache shrinks to fit the capacity.\n     */\n    shrinkToCapacity(): void {\n        let size = 0;\n        const sizeFunction = this.m_sizeFunction;\n\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entrySize = sizeFunction(entry.value);\n            entry.size = entrySize;\n            size += entrySize;\n            entry = entry.older;\n        }\n\n        this.m_size = size;\n        this.evict();\n    }\n\n    /**\n     * Inserts or updates a key/value pair in the cache.\n     *\n     * If the key already existed in the cache, it will be updated and promoted to the most recently\n     * used item.\n     *\n     * If the key didn't exist in the cache, it will be inserted as most recently used item. An\n     * eviction of the least recently used item takes place if the cache exceeded its capacity.\n     *\n     * @param key The key for the key-value pair to insert or update.\n     * @param value The value for the key-value pair to insert or update.\n     */\n    set(key: Key, value: Value) {\n        const valueSize = this.m_sizeFunction(value);\n        let entry = this.m_map.get(key);\n        if (entry !== undefined) {\n            this.m_size = this.m_size - entry.size + valueSize;\n            entry.value = value;\n            entry.size = valueSize;\n            this.promoteEntry(entry);\n            this.evict();\n        } else {\n            if (valueSize > this.m_capacity) {\n                return; // single item too big to cache\n            }\n\n            entry = new Entry<Key, Value>(key, value, valueSize, null, null);\n            if (this.m_map.size === 0) {\n                this.m_newest = this.m_oldest = entry;\n            } else {\n                assert(this.m_newest !== null);\n                const newest: Entry<Key, Value> = this.m_newest!;\n                entry.older = this.m_newest;\n                newest.newer = entry;\n                this.m_newest = entry;\n            }\n            this.m_map.set(key, entry);\n            this.m_size += valueSize;\n            this.evict();\n        }\n    }\n\n    /**\n     * Looks up key in the cache and returns the associated value.\n     *\n     * @param key The key to look up.\n     * @returns The associated value, or `undefined` if the key-value pair is not in the cache.\n     */\n    get(key: Key): Value | undefined {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return undefined;\n        }\n\n        this.promoteEntry(entry);\n        return entry.value;\n    }\n\n    /**\n     * Test if a key/value pair is in the cache.\n     *\n     * @param key The key to look up.\n     * @returns `true` if the key-value pair is in the cache, `false` otherwise.\n     */\n    has(key: Key): boolean {\n        return this.m_map.has(key);\n    }\n\n    /**\n     * Clears the cache and removes all stored key-value pairs.\n     *\n     * Does not call the eviction callback. Use [[evictAll]] to clear the cache and call the\n     * eviction callback.\n     */\n    clear(): void {\n        this.m_newest = this.m_oldest = null;\n        this.m_size = 0;\n        this.m_map.clear();\n    }\n\n    /**\n     * Evicts all items from the cache, calling the eviction callback on each item.\n     *\n     * Use [[clear]] to remove all items without calling the eviction callback.\n     */\n    evictAll(): void {\n        const cb = this.evictionCallback;\n        if (cb !== undefined) {\n            this.forEach((value, key) => cb(key, value));\n        }\n        this.clear();\n    }\n\n    /**\n     * Evict selected elements from the cache using [[selector]] function.\n     *\n     * @param selector The function for selecting elements for eviction.\n     * @param thisArg Optional _this_ object reference.\n     */\n    evictSelected(selector: (value: Value, key: Key) => boolean, thisArg?: any) {\n        const cb = this.evictionCallback;\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entryOlder = entry.older;\n            if (selector.call(thisArg, entry.value, entry.key)) {\n                if (cb !== undefined) {\n                    cb(entry.key, entry.value);\n                }\n                this.deleteEntry(entry);\n                this.m_map.delete(entry.key);\n            }\n            entry = entryOlder;\n        }\n    }\n\n    /**\n     * Explicitly removes a key-value pair from the cache.\n     *\n     * **Note**: This is an explicit removal, thus, the eviction callback will not be called.\n     *\n     * @param key The key of the key-value pair to delete.\n     * @returns `true` if the key-value pair existed and was deleted, `false` otherwise.\n     */\n    delete(key: Key): boolean {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return false;\n        }\n        this.deleteEntry(entry);\n        return this.m_map.delete(key);\n    }\n\n    protected evict() {\n        while (this.m_oldest !== null && this.m_size > this.m_capacity) {\n            const evicted = this.evictOldest();\n            if (evicted === undefined) {\n                return;\n            }\n        }\n    }\n\n    protected evictOldest(): Entry<Key, Value> | undefined {\n        assert(this.m_oldest !== null);\n        const oldest = this.m_oldest!;\n        assert(oldest.older === null);\n        let itemToRemove = oldest;\n\n        if (this.canEvict !== undefined) {\n            while (!this.canEvict(itemToRemove.key, itemToRemove.value)) {\n                if (itemToRemove.newer === null) {\n                    return undefined;\n                }\n                itemToRemove = itemToRemove.newer;\n            }\n        }\n\n        if (itemToRemove === oldest) {\n            this.m_oldest = itemToRemove.newer;\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = null;\n            }\n        } else {\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = itemToRemove.older;\n                if (itemToRemove.older !== null) {\n                    itemToRemove.older.newer = itemToRemove.newer;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        const isOk = this.m_map.delete(itemToRemove.key);\n        assert(isOk === true);\n        if (isOk && this.evictionCallback !== undefined) {\n            this.evictionCallback(itemToRemove.key, itemToRemove.value);\n        }\n        this.m_size -= itemToRemove.size;\n        return itemToRemove;\n    }\n\n    private deleteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            this.m_newest = entry.older;\n        } else if (entry.newer) {\n            entry.newer.older = entry.older;\n        } else {\n            assert(false);\n        }\n\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        } else if (entry.older) {\n            entry.older.newer = entry.newer;\n        } else {\n            assert(false);\n        }\n\n        this.m_size -= entry.size;\n    }\n\n    private promoteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            return;\n        } // already newest, nothing to do\n\n        // re-link newer and older items\n        if (entry.newer) {\n            assert(entry.newer.older === entry);\n            entry.newer.older = entry.older;\n        }\n        if (entry.older) {\n            assert(entry.older.newer === entry);\n            entry.older.newer = entry.newer;\n        }\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        }\n        // re-link ourselves\n        entry.newer = null;\n        entry.older = this.m_newest;\n\n        // finally, set ourselves as the newest entry\n        assert(this.m_newest !== null);\n        const newest = this.m_newest!;\n        assert(newest.newer === null);\n        newest.newer = entry;\n        this.m_newest = entry;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { FontCatalog } from \"./rendering/FontCatalog\";\nimport { GlyphData } from \"./rendering/GlyphData\";\nimport { TextBufferObject } from \"./rendering/TextBufferObject\";\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT, TextGeometry } from \"./rendering/TextGeometry\";\nimport { SdfTextMaterial } from \"./rendering/TextMaterials\";\nimport { FontVariant, TextLayoutStyle, TextRenderStyle } from \"./rendering/TextStyle\";\nimport { LineTypesetter } from \"./typesetting/LineTypesetter\";\nimport { PathTypesetter, PathTypesettingParameters } from \"./typesetting/PathTypesetter\";\nimport { TypesettingParameters } from \"./typesetting/Typesetter\";\nimport { createSdfTextMaterial } from \"./utils/MaterialUtils\";\n\nconst tempTextPosition = new THREE.Vector3();\nconst tempTextBounds = {\n    array: [new THREE.Box2()],\n    offset: 0\n};\nlet tempVertexBuffer = new Float32Array();\n\ninterface TextPlacementParameters {\n    input: string | GlyphData[];\n    layer: TextCanvasLayer;\n    textPath?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n    textPathOverflow?: boolean;\n    bounds?: THREE.Box2;\n    individualBounds?: THREE.Box2[];\n    computeTextBuffer?: boolean;\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`measureText` function call.\n */\nexport interface MeasurementParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: THREE.Box2[];\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addText` function call.\n */\nexport interface AdditionParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Layer where text will be added.\n     */\n    layer?: number;\n\n    /**\n     * If `true`, the input position parameter will be updated to contain the position of the last\n     * glyph added.\n     */\n    updatePosition?: boolean;\n\n    /**\n     * Object containing additional data intended to be retrieved during picking.\n     */\n    pickingData?: any;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`createTextBufferObject` function call.\n */\nexport interface TextBufferCreationParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output text bounding-box.\n     */\n    outputBounds?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: boolean;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n\n    /**\n     * If `true`, both the [[TextRenderStyle]] and [[TextLayoutStyle]] used to generate the\n     * [[TextBufferObject]] will be stored in it.\n     */\n    storeStyles?: boolean;\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addTextBufferObject` function call.\n */\nexport interface TextBufferAdditionParameters {\n    layer?: number;\n    position?: THREE.Vector3;\n    scale?: number;\n    rotation?: number;\n    color?: THREE.Color;\n    opacity?: number;\n    backgroundColor?: THREE.Color;\n    backgroundOpacity?: number;\n    pickingData?: any;\n}\n\n/**\n * Default's [[TextCanvas]] layer identifier.\n */\nexport const DEFAULT_TEXT_CANVAS_LAYER = 0;\n\n/**\n * [[TextCanvas]] rendering layer.\n */\nexport interface TextCanvasLayer {\n    id: number;\n    storage: TextGeometry;\n}\n\n/**\n * [[TextCanvas]] construction parameters.\n */\nexport interface TextCanvasParameters {\n    /**\n     * WebGLRenderer internally used by this `TextCanvas`.\n     */\n    renderer: THREE.WebGLRenderer;\n\n    /**\n     * Initial [[FontCatalog]].\n     */\n    fontCatalog: FontCatalog;\n\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    maxGlyphCount: number;\n\n    /**\n     * Material used to render text.\n     */\n    material?: THREE.Material;\n\n    /**\n     * Material used to render text background.\n     */\n    backgroundMaterial?: THREE.Material;\n}\n\n/**\n * Describes estimated usage of memory on heap and GPU.\n */\nexport interface MemoryUsage {\n    heapSize: number;\n    gpuSize: number;\n}\n\n/**\n * three.js text rendering engine which can manage and render high-quality, transformable, stylable\n * and properly layout SDF and MSDF text.\n */\nexport class TextCanvas {\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly maxGlyphCount: number;\n\n    private m_renderer: THREE.WebGLRenderer;\n    private m_fontCatalog: FontCatalog;\n\n    private readonly m_defaultTextRenderStyle: TextRenderStyle;\n    private m_currentTextRenderStyle: TextRenderStyle;\n    private readonly m_defaultTextLayoutStyle: TextLayoutStyle;\n    private m_currentTextLayoutStyle: TextLayoutStyle;\n\n    private m_material: SdfTextMaterial | THREE.Material;\n    private m_bgMaterial: SdfTextMaterial | THREE.Material;\n    private m_ownsMaterial: boolean;\n    private m_ownsBgMaterial: boolean;\n\n    private m_defaultLayer: TextCanvasLayer;\n    private m_layers: TextCanvasLayer[];\n\n    private m_lineTypesetter: LineTypesetter;\n    private m_pathTypesetter: PathTypesetter;\n\n    /**\n     * Constructs a new `TextCanvas`.\n     *\n     * @param params `TextCanvas` construction parameters.\n     *\n     * @returns New `TextCanvas`.\n     */\n    constructor(params: TextCanvasParameters) {\n        this.m_renderer = params.renderer;\n        this.m_fontCatalog = params.fontCatalog;\n        this.minGlyphCount = params.minGlyphCount;\n        this.maxGlyphCount = params.maxGlyphCount;\n\n        if (params.material === undefined) {\n            this.m_ownsMaterial = true;\n            this.m_material = createSdfTextMaterial({ fontCatalog: params.fontCatalog });\n        } else {\n            this.m_ownsMaterial = false;\n            this.m_material = params.material;\n        }\n        if (params.backgroundMaterial === undefined) {\n            this.m_ownsBgMaterial = true;\n            this.m_bgMaterial = createSdfTextMaterial({\n                fontCatalog: params.fontCatalog,\n                isBackground: true\n            });\n        } else {\n            this.m_ownsBgMaterial = false;\n            this.m_bgMaterial = params.backgroundMaterial;\n        }\n\n        this.m_defaultLayer = {\n            id: DEFAULT_TEXT_CANVAS_LAYER,\n            storage: new TextGeometry(\n                new THREE.Scene(),\n                this.m_material,\n                this.m_bgMaterial,\n                this.minGlyphCount,\n                this.maxGlyphCount\n            )\n        };\n        this.m_layers = [this.m_defaultLayer];\n\n        this.m_defaultTextRenderStyle = new TextRenderStyle();\n        this.m_currentTextRenderStyle = this.m_defaultTextRenderStyle;\n        this.m_defaultTextLayoutStyle = new TextLayoutStyle();\n        this.m_currentTextLayoutStyle = this.m_defaultTextLayoutStyle;\n\n        this.m_lineTypesetter = new LineTypesetter();\n        this.m_pathTypesetter = new PathTypesetter();\n    }\n\n    /**\n     * Currently active [[FontCatalog]].\n     */\n    get fontCatalog(): FontCatalog {\n        return this.m_fontCatalog;\n    }\n    set fontCatalog(value: FontCatalog) {\n        this.m_fontCatalog = value;\n\n        const material = this.m_material as THREE.RawShaderMaterial;\n        material.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        material.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        material.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n\n        const bgMaterial = this.m_bgMaterial as THREE.RawShaderMaterial;\n        bgMaterial.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        bgMaterial.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        bgMaterial.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n    }\n\n    /**\n     * Currently active text rendering material.\n     */\n    get material(): THREE.Material {\n        return this.m_material;\n    }\n    set material(value: THREE.Material) {\n        if (this.m_ownsMaterial) {\n            this.m_material.dispose();\n            this.m_ownsMaterial = false;\n        }\n\n        this.m_material = value;\n        for (const layer of this.m_layers) {\n            layer.storage.mesh.material = this.m_material;\n        }\n    }\n\n    /**\n     * Currently active text background rendering material.\n     */\n    get backgroundMaterial(): THREE.Material {\n        return this.m_bgMaterial;\n    }\n    set backgroundMaterial(value: THREE.Material) {\n        if (this.m_ownsBgMaterial) {\n            this.m_bgMaterial.dispose();\n            this.m_ownsBgMaterial = false;\n        }\n\n        this.m_bgMaterial = value;\n        for (const layer of this.m_layers) {\n            layer.storage.backgroundMesh.material = this.m_bgMaterial;\n        }\n    }\n\n    /**\n     * Currently active text rendering style.\n     */\n    get textRenderStyle(): TextRenderStyle {\n        return this.m_currentTextRenderStyle;\n    }\n    set textRenderStyle(style: TextRenderStyle) {\n        this.m_currentTextRenderStyle = style;\n    }\n\n    /**\n     * Currently active text layout style.\n     */\n    get textLayoutStyle(): TextLayoutStyle {\n        return this.m_currentTextLayoutStyle;\n    }\n    set textLayoutStyle(style: TextLayoutStyle) {\n        this.m_currentTextLayoutStyle = style;\n    }\n\n    /**\n     * Clears all the placed glyphs in this `TextCanvas` (as well as resetting the current style).\n     */\n    clear() {\n        for (const layer of this.m_layers) {\n            layer.storage.clear();\n        }\n        this.m_currentTextRenderStyle = this.m_defaultTextRenderStyle;\n    }\n\n    /**\n     * Renders the content of this `TextCanvas`.\n     *\n     * @param camera Orthographic camera.\n     * @param target Optional render target.\n     * @param clear Optional render target clear operation.\n     */\n    render(camera: THREE.OrthographicCamera, target?: THREE.WebGLRenderTarget, clear?: boolean) {\n        this.m_fontCatalog.update(this.m_renderer);\n        let oldTarget: THREE.RenderTarget | null = null;\n        if (target !== undefined) {\n            oldTarget = this.m_renderer.getRenderTarget();\n            this.m_renderer.setRenderTarget(target);\n        }\n        if (clear === true) {\n            this.m_renderer.clear(true);\n        }\n        for (const layer of this.m_layers) {\n            layer.storage.update();\n            this.m_renderer.clear(false, true);\n            this.m_renderer.render(layer.storage.scene, camera);\n        }\n        if (target !== undefined) {\n            this.m_renderer.setRenderTarget(oldTarget);\n        }\n    }\n\n    /**\n     * Creates a new `TextCanvas` rendering layer and returns. If there was already a layer for the\n     * input `layerId`, it just returns this one instead.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Created [[TextCanvasLayer]].\n     */\n    addLayer(layerId: number): TextCanvasLayer {\n        let result = this.getLayer(layerId);\n        if (result === undefined) {\n            result = {\n                id: layerId,\n                storage: new TextGeometry(\n                    new THREE.Scene(),\n                    this.m_material,\n                    this.m_bgMaterial,\n                    this.minGlyphCount,\n                    this.maxGlyphCount\n                )\n            };\n\n            this.m_layers.push(result);\n            this.m_layers.sort((a: TextCanvasLayer, b: TextCanvasLayer) => {\n                return a.id - b.id;\n            });\n        }\n        return result;\n    }\n\n    /**\n     * Retrieves a specific `TextCanvas` rendering layer.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Selected [[TextCanvasLayer]].\n     */\n    getLayer(layerId: number): TextCanvasLayer | undefined {\n        return this.m_layers.find(layer => layer.id === layerId);\n    }\n\n    /**\n     * Retrieves all `TextCanvas` rendering layers.\n     *\n     * @returns Array of [[TextCanvasLayer]]s.\n     */\n    getAllLayers(): TextCanvasLayer[] {\n        return this.m_layers;\n    }\n\n    /**\n     * Returns the computed bounding box for the input text. The current [[TextRenderStyle]] and\n     * [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param outputBounds Output text bounding box.\n     * @param params Optional measurement parameters.\n     *\n     * @returns Result of the measurement. If `false`, some error occurred during execution and the\n     * input text couldn't be properly measured.\n     */\n    measureText(\n        text: string | GlyphData[],\n        outputBounds: THREE.Box2,\n        params?: MeasurementParameters\n    ): boolean {\n        tempTextPosition.set(0, 0, 0);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let outputCharacterBounds;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            outputCharacterBounds = params.outputCharacterBounds;\n            if (params.path !== undefined) {\n                const pathOrigin = params.path.getPoint(0);\n                if (pathOrigin === null) {\n                    return false;\n                }\n                tempTextPosition.set(pathOrigin.x, pathOrigin.y, 0.0);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n\n        return this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: outputBounds,\n            individualBounds: outputCharacterBounds,\n            letterCaseArray: upperCaseArray\n        });\n    }\n\n    /**\n     * Adds the input text to this `TextCanvas` in the specified screen position. The current\n     * [[TextRenderStyle]] and [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param position Screen position.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addText(\n        text: string | GlyphData[],\n        position: THREE.Vector3,\n        params?: AdditionParameters\n    ): boolean {\n        tempTextPosition.copy(position);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let targetLayer = this.m_defaultLayer;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            if (params.path !== undefined) {\n                tempTextPosition.set(0, 0, tempTextPosition.z);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = this.placeText({\n            input: text,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            layer: targetLayer,\n            letterCaseArray: upperCaseArray\n        });\n        if (result && params !== undefined) {\n            if (params.updatePosition === true) {\n                position.copy(tempTextPosition);\n            }\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Creates a new [[TextBufferObject]]. The computed text vertex buffer is equivalent to the\n     * result of performing the `addText` function for the input text in the screen origin.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param params Optional creation parameters.\n     *\n     * @returns New [[TextBufferObject]] (or `undefined` if requested text glyphs couldn't be\n     * retrieved from the current [[FontCatalog]]).\n     */\n    createTextBufferObject(\n        text: string | GlyphData[],\n        params?: TextBufferCreationParameters\n    ): TextBufferObject | undefined {\n        tempTextPosition.set(0, 0, 0);\n\n        let glyphArray;\n        let upperCaseArray: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof text !== \"string\") {\n            glyphArray = text;\n            if (params !== undefined && params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        } else {\n            upperCaseArray = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                text,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? upperCaseArray : undefined\n            );\n            if (glyphArray === undefined) {\n                return undefined;\n            }\n        }\n\n        let path;\n        let pathOverflow;\n        let textBounds;\n        let characterBounds;\n        let renderStyle;\n        let layoutStyle;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.outputBounds === true) {\n                textBounds = new THREE.Box2();\n            }\n            if (params.outputCharacterBounds === true) {\n                characterBounds = [];\n            }\n            if (params.storeStyles === true) {\n                renderStyle = this.m_currentTextRenderStyle;\n                layoutStyle = this.m_currentTextLayoutStyle;\n            }\n        }\n\n        this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            computeTextBuffer: true,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: textBounds,\n            individualBounds: characterBounds,\n            letterCaseArray: upperCaseArray\n        });\n\n        return new TextBufferObject(\n            glyphArray,\n            new Float32Array(tempVertexBuffer),\n            textBounds,\n            characterBounds,\n            renderStyle,\n            layoutStyle\n        );\n    }\n\n    /**\n     * Adds a previously created [[TextBufferObject]] to the `TextCanvas`. Additional parameters can\n     * be provided to override the attributes stored in the buffer.\n     *\n     * @param textBufferObject [[TextBufferObject]] to add.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        params?: TextBufferAdditionParameters\n    ): boolean {\n        let targetLayer = this.m_defaultLayer;\n        let position;\n        let scale;\n        let rotation;\n        let color;\n        let opacity;\n        let bgColor;\n        let bgOpacity;\n\n        if (params !== undefined) {\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            position = params.position;\n            scale = params.scale;\n            rotation = params.rotation;\n            color = params.color;\n            opacity = params.opacity;\n            bgColor = params.backgroundColor;\n            bgOpacity = params.backgroundOpacity;\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = targetLayer.storage.addTextBufferObject(\n            textBufferObject,\n            position,\n            scale,\n            rotation,\n            color,\n            opacity,\n            bgColor,\n            bgOpacity\n        );\n        if (result && params !== undefined) {\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Executes the `pickCallback` for all previously stored picking data for text covering the\n     * specified screen position.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickText(position: THREE.Vector2, callback: (pickData: any | undefined) => void): void {\n        for (const layer of this.m_layers) {\n            layer.storage.pick(position, callback);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextCanvas`.\n     *\n     * @param info The info object to increment with the values from this `TextCanvas`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_fontCatalog.updateMemoryUsage(info);\n\n        for (const layer of this.m_layers) {\n            layer.storage.updateMemoryUsage(info);\n        }\n    }\n\n    // Places all glyphs for input text. Depending on parameters, it can store the resulting glyphs\n    // in the current [[TextGeometry]] (or into a separate buffer) or compute the bounding box for\n    // the input (as a whole or on a per-character basis).\n    private placeText(params: TextPlacementParameters): boolean {\n        if (params.input.length === 0 || this.m_currentTextLayoutStyle.maxLines! === 0) {\n            if (params.bounds !== undefined) {\n                params.bounds.min.set(0, 0);\n                params.bounds.max.set(0, 0);\n            }\n            if (params.individualBounds !== undefined) {\n                params.individualBounds.length = 0;\n            }\n            return true;\n        }\n\n        let glyphArray;\n        let smallCapsTransformations: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof params.input !== \"string\") {\n            glyphArray = params.input;\n            if (params.letterCaseArray) {\n                smallCapsTransformations = params.letterCaseArray;\n            }\n        } else {\n            smallCapsTransformations = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                params.input,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? smallCapsTransformations : undefined\n            );\n            if (glyphArray === undefined) {\n                return false;\n            }\n        }\n\n        let glyphBounds;\n        if (params.individualBounds !== undefined) {\n            tempTextBounds.array = params.individualBounds;\n            tempTextBounds.offset = 0;\n            glyphBounds = tempTextBounds;\n        }\n        if (params.bounds !== undefined) {\n            params.bounds.min.set(Infinity, Infinity);\n            params.bounds.max.set(-Infinity, -Infinity);\n        }\n        if (params.computeTextBuffer === true) {\n            tempVertexBuffer = new Float32Array(glyphArray.length * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        }\n\n        const isPath = params.textPath !== undefined;\n        const typesettingParams: TypesettingParameters | PathTypesettingParameters = {\n            glyphs: glyphArray,\n            fontCatalog: this.m_fontCatalog,\n            textRenderStyle: this.m_currentTextRenderStyle,\n            textLayoutStyle: this.m_currentTextLayoutStyle,\n            position: tempTextPosition,\n            geometry: params.layer.storage,\n            smallCapsArray: smallCapsEnabled ? smallCapsTransformations : undefined,\n            globalBounds: params.bounds,\n            individualBounds: glyphBounds,\n            vertexBuffer: params.computeTextBuffer === true ? tempVertexBuffer : undefined\n        };\n\n        let result = true;\n        if (isPath) {\n            Object.assign(typesettingParams as PathTypesettingParameters, {\n                path: params.textPath,\n                pathOverflow: params.textPathOverflow === true\n            });\n            result = this.m_pathTypesetter.arrangeGlyphs(\n                typesettingParams as PathTypesettingParameters\n            );\n        } else {\n            result = this.m_lineTypesetter.arrangeGlyphs(typesettingParams);\n        }\n        if (glyphBounds !== undefined) {\n            glyphBounds.array.length = glyphBounds.offset;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant, WrappingMode } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * @hidden\n * [[Typesetter]] implementation that handles multi-line complex layout text.\n */\nexport class LineTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_currentParams?: TypesettingParameters;\n\n    /**\n     * Creates a `LineTypesetter` object.\n     *\n     * @returns New `LineTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `LineTypesetter`. Text will be placed into multiple\n     * bidirectional lines, that will be generated taking into account [[textLayoutStyle]] features,\n     * such as:\n     * - Maximum line width.\n     * - Word and character wrapping.\n     * - Maximum number of lines.\n     * - Vertical and horizontal alignment.\n     * - Leading (spacing between lines).\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: TypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_currentParams.position.y +=\n            this.m_currentParams.textLayoutStyle.verticalAlignment *\n            this.m_currentParams.glyphs[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // Compute line origin and height.\n        const origin = this.m_currentParams.position.x;\n        const lineHeight =\n            this.m_currentParams.glyphs[0].font.metrics.lineHeight +\n            this.m_currentParams.textLayoutStyle.leading;\n\n        // Initialize line-breaking and wrapping variables.\n        let lineStartIdx = 0;\n        let glyphWrapIdx = 0;\n        let wordWrapIdx = 0;\n        let lineStartX = 0;\n        let lineCurrX = 0;\n        let glyphWrapX = 0;\n        let wordWrapX = 0;\n\n        let lineCount = 0;\n        let isBidirectionalLine = false;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            if (lineCount > this.m_currentParams.textLayoutStyle.maxLines - 1) {\n                break;\n            }\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            const isNewLine = UnicodeUtils.isNewLine(glyphData.codePoint);\n            const isWhiteSpace = UnicodeUtils.isWhiteSpace(glyphData.codePoint);\n\n            // Check if this line should be treated as bidirectional.\n            if (!isBidirectionalLine && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectionalLine = true;\n            }\n            // Advance the line's current X offset (only for printable characters).\n            if (UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                lineCurrX +=\n                    (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                    this.m_tempScale *\n                    (this.m_tempSmallCaps\n                        ? TypesettingUtils.getSmallCapsScale(\n                              this.m_currentParams.glyphs,\n                              this.m_currentParams.smallCapsArray!,\n                              i,\n                              this.m_currentParams.textRenderStyle.fontVariant\n                          )\n                        : 1.0);\n            }\n            // If this is the first character in a line, update the line's X offset values (needed\n            // to properly center and wrap).\n            if (i === lineStartIdx) {\n                lineStartX = lineCurrX;\n                glyphWrapX = lineCurrX;\n                wordWrapX = lineCurrX;\n            }\n\n            // Check if should break the current line.\n            if (\n                isNewLine ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Character &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth) ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth &&\n                    wordWrapX !== lineStartX)\n            ) {\n                // Perform wrapping.\n                if (this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None) {\n                    let wrapPointIdx = glyphWrapIdx;\n                    let wrapPointX = glyphWrapX;\n                    // Only wrap words when more than a single word fits into the current line.\n                    if (\n                        this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                        wordWrapX !== lineStartX\n                    ) {\n                        wrapPointIdx = wordWrapIdx;\n                        wrapPointX = wordWrapX;\n                    }\n\n                    lineCurrX = wrapPointX;\n                    i = Math.min(\n                        isNewLine ? (lineStartIdx === i ? wrapPointIdx : i) : wrapPointIdx,\n                        this.m_currentParams.glyphs.length - 1\n                    );\n                }\n\n                // Calculate the correct starting position for the line base on alignment, and place\n                // all glyphs in it.\n                const lineAlignment =\n                    this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                        ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                        : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n                this.m_currentParams.position.x =\n                    this.m_currentParams.position.x + lineCurrX * lineAlignment;\n                if (\n                    !this.placeLine(lineStartIdx, i, this.m_tempLineDirection, isBidirectionalLine)\n                ) {\n                    return false;\n                }\n\n                // Update the line position.\n                this.m_currentParams.position.y -= lineHeight * this.m_tempScale;\n                this.m_currentParams.position.x = origin;\n\n                // Find the beginning of a new line (removing trailing white spaces).\n                while (\n                    i !== lineStartIdx &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint)\n                ) {\n                    ++i;\n                }\n                lineStartIdx = i + 1;\n                if (lineStartIdx === this.m_currentParams.glyphs.length) {\n                    break;\n                }\n\n                // Only reset the line's direction when a new line character is found (to keep\n                // correct bidirectional behaviour when a bidirectional run is placed between\n                // multiple lines).\n                if (isNewLine) {\n                    this.m_tempLineDirection = TypesettingUtils.getDirection(\n                        this.m_currentParams.glyphs,\n                        lineStartIdx\n                    );\n                    this.m_tempRunDirection = this.m_tempLineDirection;\n                }\n\n                // Reset the line placement parameters.\n                lineStartX = 0;\n                lineCurrX = 0;\n                glyphWrapIdx = lineStartIdx;\n                glyphWrapX = 0;\n                wordWrapIdx = lineStartIdx;\n                wordWrapX = 0;\n                isBidirectionalLine = false;\n                lineCount++;\n            }\n            // If not, should if we should record any new wrapping points.\n            else if (\n                this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None &&\n                !isWhiteSpace\n            ) {\n                // Update the per-glyph wrapping point.\n                glyphWrapIdx = i;\n                glyphWrapX = lineCurrX;\n\n                // Update the word wrapping point (only if mode is correctly set and we are\n                // currently placed at the end of a word).\n                if (\n                    this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    (UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint) ||\n                        UnicodeUtils.isNewLine(this.m_currentParams.glyphs[i + 1].codePoint))\n                ) {\n                    wordWrapIdx = i;\n                    wordWrapX = lineCurrX;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters, place a final line.\n        if (\n            lineCount <= this.m_currentParams.textLayoutStyle.maxLines - 1 &&\n            lineStartIdx <= this.m_currentParams.glyphs.length - 1\n        ) {\n            const offset =\n                this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                    ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                    : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n            this.m_currentParams.position.setX(\n                this.m_currentParams.position.x + lineCurrX * offset\n            );\n            if (\n                !this.placeLine(\n                    lineStartIdx,\n                    this.m_currentParams.glyphs.length - 1,\n                    this.m_tempLineDirection,\n                    isBidirectionalLine\n                )\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place characters alongside a line. Text direction is taken into account, and text is broken\n    // into directional runs.\n    private placeLine(\n        startIdx: number,\n        endIdx: number,\n        direction: UnicodeUtils.Direction,\n        isBidirectional: boolean\n    ): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(startIdx, endIdx, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n\n        // Initialize line placement parameters.\n        const isRTL = direction === UnicodeUtils.Direction.RTL;\n        const origin = position.x;\n        let offset = 0;\n        let runStart = startIdx;\n\n        for (let i = startIdx; i <= endIdx; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (isRTL) {\n                    position.x = origin + offset;\n                }\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n                if (!isRTL) {\n                    position.x = origin + offset;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (isRTL) {\n                        position.x = origin + offset;\n                    }\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n                    if (!isRTL) {\n                        position.x = origin + offset;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n\n            // Advance the offset position in the line.\n            offset +=\n                (glyphData.advanceX + textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          glyphDataArray,\n                          smallCapsArray!,\n                          i,\n                          textRenderStyle.fontVariant\n                      )\n                    : 1.0) *\n                direction;\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart <= endIdx) {\n            if (isRTL) {\n                position.x = origin + offset;\n            }\n            if (!this.placeRun(runStart, endIdx, this.m_tempRunDirection)) {\n                return false;\n            }\n            if (!isRTL) {\n                position.x = origin + offset;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                position,\n                glyphScale,\n                textLayoutStyle.canvasRotation,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Advance the current position and proceed to next glyph in the run.\n            position.set(\n                position.x +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.cos(textLayoutStyle.lineRotation),\n                position.y +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.sin(textLayoutStyle.lineRotation),\n                position.z\n            );\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * @hidden\n * Parameters passed when placing glyphs using [[PathTypesetter]]'s `arrangeGlyphs` function.\n */\nexport interface PathTypesettingParameters extends TypesettingParameters {\n    /**\n     * Path to be followed when arranging glyphs.\n     */\n    path: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow: boolean;\n}\n\n/**\n * @hidden\n * [[Typesetter]] implementation that arranges glyphs alongside a specified path.\n */\nexport class PathTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_tempPathPosition: THREE.Vector3;\n    private m_tempPathLength: number;\n    private m_tempPathOffset: number;\n\n    private m_currentParams?: PathTypesettingParameters;\n\n    /**\n     * Creates a `PathTypesetter` object.\n     *\n     * @returns New `PathTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n\n        this.m_tempPathPosition = new THREE.Vector3();\n        this.m_tempPathLength = 0.0;\n        this.m_tempPathOffset = 0.0;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `PathTypesetter`. Text will be placed into a single\n     * bidirectional line that follows the specified path. Characters will be orientated and placed\n     * alongside this path following [[TextLayout]]'s [[VerticalAlignment]] and\n     * [[HorizontalAlignment]].\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: PathTypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_tempPathLength = this.m_currentParams.path.getLength();\n        this.m_tempPathOffset = 0.0;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // To be able to properly set the horizontal alignment on a path, we need to first retrieve\n        // how much of the path the input text covers, so we can calculate the correct initial\n        // offset.\n        let isBidirectional = false;\n        let pathWidth = 0.0;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n            if (!isBidirectional && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectional = true;\n            }\n\n            pathWidth +=\n                (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          this.m_currentParams.glyphs,\n                          this.m_currentParams.smallCapsArray!,\n                          i,\n                          this.m_currentParams.textRenderStyle.fontVariant\n                      )\n                    : 1.0);\n        }\n        this.m_tempPathOffset = Math.min(\n            Math.max(\n                -this.m_currentParams.textLayoutStyle.horizontalAlignment +\n                    (this.m_currentParams.textLayoutStyle.horizontalAlignment * pathWidth) /\n                        this.m_tempPathLength,\n                0\n            ),\n            1\n        );\n\n        // Place the input text as a single path line.\n        return this.placeLine(this.m_tempLineDirection, isBidirectional);\n    }\n\n    // Place characters alongside a path line. Text direction is taken into account, and text is\n    // broken into directional runs.\n    private placeLine(direction: UnicodeUtils.Direction, isBidirectional: boolean): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(0, this.m_currentParams!.glyphs.length - 1, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n\n        // Initialize line placement parameters.\n        let runStart = 0;\n        for (let i = runStart; i < glyphDataArray.length; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart < glyphDataArray.length) {\n            if (!this.placeRun(runStart, glyphDataArray.length - 1, this.m_tempRunDirection)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a path line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n        const path = this.m_currentParams!.path;\n\n        const defaultGlyphRotation = textRenderStyle.rotation;\n        const normalDisplacement =\n            textLayoutStyle.verticalAlignment *\n            glyphDataArray[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Update the current interpolated path position and angle.\n            const textPoint = path.getPoint(this.m_tempPathOffset);\n            if (textPoint === null) {\n                return this.m_currentParams!.pathOverflow;\n            }\n            const tangent = path.getTangent(this.m_tempPathOffset);\n            const normal = new THREE.Vector2(-tangent.y, tangent.x).multiplyScalar(\n                normalDisplacement\n            );\n            const angle = Math.atan2(tangent.y, tangent.x);\n            this.m_tempPathPosition.set(normal.x + textPoint.x, normal.y + textPoint.y, position.z);\n            textRenderStyle.rotation = defaultGlyphRotation + angle;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                this.m_tempPathPosition,\n                glyphScale,\n                0.0,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n\n                this.m_tempCorners[j].x -= position.x;\n                this.m_tempCorners[j].y -= position.y;\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Restore the original glyph rotation.\n            textRenderStyle.rotation = defaultGlyphRotation;\n\n            // Advance the current position and proceed to next glyph in the run.\n            this.m_tempPathOffset +=\n                ((glyphData.advanceX + textLayoutStyle.tracking) * glyphScale) /\n                this.m_tempPathLength;\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nenum ContextualForm {\n    Initial,\n    Medial,\n    Final\n}\n\nenum CombinedForm {\n    Isolated,\n    Connected\n}\n\n/**\n * Converter between arabic isolated forms (in Unicode Block 'Arabic') and their contextual forms\n * (in Unicode Block 'Arabic Presentation Forms-B').\n */\nexport class ContextualArabicConverter {\n    private static m_instance: ContextualArabicConverter;\n    static get instance(): ContextualArabicConverter {\n        if (this.m_instance === undefined) {\n            this.m_instance = new ContextualArabicConverter();\n        }\n        return this.m_instance;\n    }\n\n    private m_singleCharactersMap: Map<number, ReadonlyArray<number | undefined>> = new Map();\n    private m_combinedCharactersMap: Map<\n        number,\n        Map<number, ReadonlyArray<number | undefined>>\n    > = new Map();\n    private m_neutralCharacters: number[];\n\n    private constructor() {\n        // Single characters.\n        this.m_singleCharactersMap.set(0x0621, [undefined, undefined, undefined]); // HAMZA\n        this.m_singleCharactersMap.set(0x0622, [undefined, undefined, 0xfe82]); // ALEF_MADDA\n        this.m_singleCharactersMap.set(0x0623, [undefined, undefined, 0xfe84]); // ALEF_HAMZA_ABOVE\n        this.m_singleCharactersMap.set(0x0624, [undefined, undefined, 0xfe86]); // WAW_HAMZA\n        this.m_singleCharactersMap.set(0x0625, [undefined, undefined, 0xfe88]); // ALEF_HAMZA_BELOW\n        this.m_singleCharactersMap.set(0x0626, [0xfe8b, 0xfe8c, 0xfe8a]); // YEH_HAMZA\n        this.m_singleCharactersMap.set(0x0627, [undefined, undefined, 0xfe8e]); // ALEF\n        this.m_singleCharactersMap.set(0x0628, [0xfe91, 0xfe92, 0xfe90]); // BEH\n        this.m_singleCharactersMap.set(0x0629, [undefined, undefined, 0xfe94]); // TEH_MARBUTA\n        this.m_singleCharactersMap.set(0x062a, [0xfe97, 0xfe98, 0xfe96]); // TEH\n        this.m_singleCharactersMap.set(0x062b, [0xfe9b, 0xfe9c, 0xfe9a]); // THEH\n        this.m_singleCharactersMap.set(0x062c, [0xfe9f, 0xfea0, 0xfe9e]); // JEEM\n        this.m_singleCharactersMap.set(0x062d, [0xfea3, 0xfea4, 0xfea2]); // HAH\n        this.m_singleCharactersMap.set(0x062e, [0xfea7, 0xfea8, 0xfea6]); // KHAH\n        this.m_singleCharactersMap.set(0x062f, [undefined, undefined, 0xfeaa]); // DAL\n        this.m_singleCharactersMap.set(0x0630, [undefined, undefined, 0xfeac]); // THAL\n        this.m_singleCharactersMap.set(0x0631, [undefined, undefined, 0xfeae]); // REH\n        this.m_singleCharactersMap.set(0x0632, [undefined, undefined, 0xfeb0]); // ZAIN\n        this.m_singleCharactersMap.set(0x0633, [0xfeb3, 0xfeb4, 0xfeb2]); // SEEN\n        this.m_singleCharactersMap.set(0x0634, [0xfeb7, 0xfeb8, 0xfeb6]); // SHEEN\n        this.m_singleCharactersMap.set(0x0635, [0xfebb, 0xfebc, 0xfeba]); // SAD\n        this.m_singleCharactersMap.set(0x0636, [0xfebf, 0xfec0, 0xfebe]); // DAD\n        this.m_singleCharactersMap.set(0x0637, [0xfec3, 0xfec4, 0xfec2]); // TAH\n        this.m_singleCharactersMap.set(0x0638, [0xfec7, 0xfec8, 0xfec6]); // ZAH\n        this.m_singleCharactersMap.set(0x0639, [0xfecb, 0xfecc, 0xfeca]); // AIN\n        this.m_singleCharactersMap.set(0x063a, [0xfecf, 0xfed0, 0xfece]); // GHAIN\n        this.m_singleCharactersMap.set(0x0640, [0x0640, 0x0640, 0x0640]); // TATWEEL\n        this.m_singleCharactersMap.set(0x0641, [0xfed3, 0xfed4, 0xfed2]); // FEH\n        this.m_singleCharactersMap.set(0x0642, [0xfed7, 0xfed8, 0xfed6]); // QAF\n        this.m_singleCharactersMap.set(0x0643, [0xfedb, 0xfedc, 0xfeda]); // KAF\n        this.m_singleCharactersMap.set(0x0644, [0xfedf, 0xfee0, 0xfede]); // LAM\n        this.m_singleCharactersMap.set(0x0645, [0xfee3, 0xfee4, 0xfee2]); // MEEM\n        this.m_singleCharactersMap.set(0x0646, [0xfee7, 0xfee8, 0xfee6]); // NOON\n        this.m_singleCharactersMap.set(0x0647, [0xfeeb, 0xfeec, 0xfeea]); // HEH\n        this.m_singleCharactersMap.set(0x0648, [undefined, undefined, 0xfeee]); // WAW\n        this.m_singleCharactersMap.set(0x0649, [undefined, undefined, 0xfef0]); // ALEF_MAKSURA\n        this.m_singleCharactersMap.set(0x064a, [0xfef3, 0xfef4, 0xfef2]); // YEH\n        this.m_singleCharactersMap.set(0x067e, [0xfb58, 0xfb59, 0xfb57]); // PEH\n        this.m_singleCharactersMap.set(0x06cc, [0xfbfe, 0xfbff, 0xfbfd]); // Farsi Yeh\n        this.m_singleCharactersMap.set(0x0686, [0xfb7c, 0xfb7d, 0xfb7b]); // Tcheh\n        this.m_singleCharactersMap.set(0x06a9, [0xfb90, 0xfb91, 0xfb8f]); // Keheh\n        this.m_singleCharactersMap.set(0x06af, [0xfb94, 0xfb95, 0xfb93]); // Gaf\n        this.m_singleCharactersMap.set(0x0698, [undefined, undefined, 0xfb8b]); // Jeh\n\n        // Combined characters.\n        this.m_combinedCharactersMap.set(0x0644, new Map());\n        // LAM_ALEF_MADDA\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0622, [0xfef5, 0xfef6]);\n        // LAM_ALEF_HAMZA_ABOVE\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0623, [0xfef7, 0xfef8]);\n        // LAM_ALEF_HAMZA_BELOW\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0625, [0xfef9, 0xfefa]);\n        // LAM_ALEF\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0627, [0xfefb, 0xfefc]);\n\n        // Neutral characters.\n        this.m_neutralCharacters = [\n            0x0610, // ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM\n            0x0612, // ARABIC SIGN ALAYHE ASSALLAM\n            0x0613, // ARABIC SIGN RADI ALLAHOU ANHU\n            0x0614, // ARABIC SIGN TAKHALLUS\n            0x0615, // ARABIC SMALL HIGH TAH\n            0x064b, // ARABIC FATHATAN\n            0x064c, // ARABIC DAMMATAN\n            0x064d, // ARABIC KASRATAN\n            0x064e, // ARABIC FATHA\n            0x064f, // ARABIC DAMMA\n            0x0650, // ARABIC KASRA\n            0x0651, // ARABIC SHADDA\n            0x0652, // ARABIC SUKUN\n            0x0653, // ARABIC MADDAH ABOVE\n            0x0654, // ARABIC HAMZA ABOVE\n            0x0655, // ARABIC HAMZA BELOW\n            0x0656, // ARABIC SUBSCRIPT ALEF\n            0x0657, // ARABIC INVERTED DAMMA\n            0x0658, // ARABIC MARK NOON GHUNNA\n            0x0670, // ARABIC LETTER SUPERSCRIPT ALEF\n            0x06d6, // ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA\n            0x06d7, // ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA\n            0x06d8, // ARABIC SMALL HIGH MEEM INITIAL FORM\n            0x06d9, // ARABIC SMALL HIGH LAM ALEF\n            0x06da, // ARABIC SMALL HIGH JEEM\n            0x06db, // ARABIC SMALL HIGH THREE DOTS\n            0x06dc, // ARABIC SMALL HIGH SEEN\n            0x06df, // ARABIC SMALL HIGH ROUNDED ZERO\n            0x06e0, // ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO\n            0x06e1, // ARABIC SMALL HIGH DOTLESS HEAD OF KHAH\n            0x06e2, // ARABIC SMALL HIGH MEEM ISOLATED FORM\n            0x06e3, // ARABIC SMALL LOW SEEN\n            0x06e4, // ARABIC SMALL HIGH MADDA\n            0x06e7, // ARABIC SMALL HIGH YEH\n            0x06e8, // ARABIC SMALL HIGH NOON\n            0x06ea, // ARABIC EMPTY CENTRE LOW STOP\n            0x06eb, // ARABIC EMPTY CENTRE HIGH STOP\n            0x06ec, // ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE\n            0x06ed // ARABIC SMALL LOW MEEM\n        ];\n    }\n\n    /**\n     * Converts isolated arabic characters into their contextual form.\n     *\n     * @param input String with isolated arabic characters.\n     */\n    convert(input: string): string {\n        let output = \"\";\n        for (let i = 0; i < input.length; ++i) {\n            const currentCodePoint = input.charCodeAt(i);\n\n            // Only process arabic characters in the map.\n            if (this.isArabicCharacter(currentCodePoint)) {\n                // Find the first previous non-neutral character.\n                let prevIndex = i - 1;\n                for (; prevIndex >= 0; --prevIndex) {\n                    if (!this.isNeutral(input.charCodeAt(prevIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the previous character has ligatures with following characters.\n                let prevCodePoint = prevIndex >= 0 ? input.charCodeAt(prevIndex) : undefined;\n                if (prevCodePoint !== undefined) {\n                    const prevMap = this.getCharacterMap(prevCodePoint);\n                    if (\n                        prevMap === undefined ||\n                        (prevMap[ContextualForm.Initial] === undefined &&\n                            prevMap[ContextualForm.Medial] === undefined)\n                    ) {\n                        prevCodePoint = undefined;\n                    }\n                }\n\n                // Find the first next non-neutral character.\n                let nextIndex = i + 1;\n                for (; nextIndex < input.length; ++nextIndex) {\n                    if (!this.isNeutral(input.charCodeAt(nextIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the next character has ligatures with previous characters.\n                let nextCodePoint =\n                    nextIndex < input.length ? input.charCodeAt(nextIndex) : undefined;\n                if (nextCodePoint !== undefined) {\n                    const nextMap = this.getCharacterMap(nextCodePoint);\n                    if (\n                        nextMap === undefined ||\n                        (nextMap[ContextualForm.Medial] === undefined &&\n                            nextMap[ContextualForm.Final] === undefined)\n                    ) {\n                        nextCodePoint = undefined;\n                    }\n                }\n\n                // Check for Lam Alef combinated forms.\n                if (\n                    currentCodePoint === 0x0644 &&\n                    nextCodePoint !== undefined &&\n                    (nextCodePoint === 0x0622 ||\n                        nextCodePoint === 0x0623 ||\n                        nextCodePoint === 0x0625 ||\n                        nextCodePoint === 0x0627)\n                ) {\n                    const combinedMap = this.getCombinedCharacterMap(\n                        currentCodePoint,\n                        nextCodePoint\n                    )!;\n                    if (prevCodePoint !== undefined) {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Connected]!);\n                    } else {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Isolated]!);\n                    }\n\n                    // Skip the next character and continue.\n                    ++i;\n                    continue;\n                }\n\n                // Check for single character contextual forms.\n                const map = this.getCharacterMap(currentCodePoint)!;\n                // Intermediate.\n                if (\n                    prevCodePoint !== undefined &&\n                    nextCodePoint !== undefined &&\n                    map[ContextualForm.Medial] !== undefined\n                ) {\n                    output += String.fromCharCode(map[ContextualForm.Medial]!);\n                }\n                // Final.\n                else if (prevCodePoint !== undefined && map[ContextualForm.Final] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Final]!);\n                }\n                // Initial.\n                else if (nextCodePoint !== undefined && map[ContextualForm.Initial] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Initial]!);\n                }\n                // Isolated.\n                else {\n                    output += String.fromCharCode(currentCodePoint);\n                }\n            } else {\n                output += String.fromCharCode(currentCodePoint);\n            }\n        }\n\n        return output;\n    }\n\n    private isArabicCharacter(codePoint: number): boolean {\n        return this.m_singleCharactersMap.has(codePoint);\n    }\n\n    private getCharacterMap(codePoint: number): ReadonlyArray<number | undefined> | undefined {\n        return this.m_singleCharactersMap.get(codePoint);\n    }\n\n    private getCombinedCharacterMap(\n        codePoint: number,\n        nextCodePoint: number\n    ): ReadonlyArray<number | undefined> | undefined {\n        const map = this.m_combinedCharactersMap.get(codePoint);\n        if (map !== undefined) {\n            return map.get(nextCodePoint);\n        }\n        return undefined;\n    }\n\n    private isNeutral(codePoint: number): boolean {\n        for (const character of this.m_neutralCharacters) {\n            if (character === codePoint) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * This path in world coordinates is projected to screen space and blocks all other labels.\n *\n * It could be used for example:\n * - Border rejects labels.\n * - Route blocks street labels from being rendered underneath.\n *\n * Could potentially be expanded in future to have a priority, however for now, this isn't required.\n */\n\nexport class PathBlockingElement {\n    /**\n     * Note, [[screenSpaceLines]] is only used as a performance improvement and contains no\n     * useful information. They are used to contain the screen space coordinates of the\n     * points. By allocating the space here, we avoid per frame allocations, see\n     * [[TextElementsRenderer.prepopulateScreenWithBlockingElements]].\n     */\n    readonly screenSpaceLines: THREE.Line3[];\n\n    /**\n     * Constructs a path from a list of points.\n     * Pre allocates the [[screenSpaceLines]] used to render.\n     * @param points Points in world coordinates.\n     */\n    constructor(readonly points: Vector3Like[]) {\n        this.screenSpaceLines = new Array<THREE.Line3>(points.length >= 2 ? points.length - 1 : 0);\n        for (let i = 0; i < this.screenSpaceLines.length; i++) {\n            this.screenSpaceLines[i] = new THREE.Line3(new THREE.Vector3(), new THREE.Vector3());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"@here/harp-text-canvas\";\nimport { getPixelFromImage, screenToUvCoordinates } from \"./PixelPicker\";\n\n/**\n * Declares an interface for a `struct` containing a [[BoxBuffer]]'s attribute state information.\n */\nexport interface State {\n    positionAttributeCount: number;\n    colorAttributeCount: number;\n    uvAttributeCount: number;\n    indexAttributeCount: number;\n    pickInfoCount: number;\n}\n\n/**\n * Initial number of boxes in BoxBuffer.\n */\nconst START_BOX_BUFFER_SIZE = 0;\n\n/**\n * Maximum number of boxes in BoxBuffer.\n */\nconst MAX_BOX_BUFFER_SIZE = 32 * 1024;\n\n/**\n * Number of vertices per box/glyph element: 4 corners.\n */\nconst NUM_VERTICES_PER_ELEMENT = 4;\n\n/**\n * Number of indices added per box/glyph: 2 triangles, 6 indices.\n */\nconst NUM_INDICES_PER_ELEMENT = 6;\n\n/**\n * Number of values per position.\n */\nconst NUM_POSITION_VALUES_PER_VERTEX = 3;\n\n/**\n * Number of values per color.\n */\nconst NUM_COLOR_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per UV.\n */\nconst NUM_UV_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per index.\n */\nconst NUM_INDEX_VALUES_PER_VERTEX = 1;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * SubClass of [[THREE.Mesh]] to identify meshes that have been created by [[BoxBuffer]] and\n * [[TextBuffer]]. Add the isEmpty flag to quickly test for empty meshes.\n */\nexport class BoxBufferMesh extends THREE.Mesh {\n    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[]) {\n        super(geometry, material);\n\n        this.type = \"BoxBufferMesh\";\n    }\n\n    /**\n     * A mesh that has no positions and indices set is defined to be empty.\n     *\n     * @returns `True` if no indices have been added to the mesh.\n     */\n    get isEmpty(): boolean {\n        if (this.geometry === undefined) {\n            return true;\n        } else {\n            const bufferGeometry = this.geometry as THREE.BufferGeometry;\n            return bufferGeometry.index === null || bufferGeometry.index.count === 0;\n        }\n    }\n}\n\n/**\n * Buffer for (untransformed) `Box2` objects. Can be used to create a single geometry for screen-\n * aligned boxes, like POIs.\n */\nexport class BoxBuffer {\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` position data.\n     */\n    protected positionAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` color data.\n     */\n    protected colorAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` uv data.\n     */\n    protected uvAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` index data.\n     */\n    protected indexAttribute?: THREE.BufferAttribute;\n    protected pickInfos: Array<any | undefined>;\n\n    /**\n     * [[BufferGeometry]] holding all the different [[BufferAttribute]]s.\n     */\n    protected geometry: THREE.BufferGeometry | undefined;\n\n    /**\n     * [[Mesh]] used for rendering.\n     */\n    protected internalMesh: BoxBufferMesh | undefined;\n\n    private m_size: number = 0;\n\n    /**\n     * Creates a new `BoxBuffer`.\n     *\n     * @param material Material to be used for [[Mesh]] of this `BoxBuffer`.\n     * @param renderOrder Optional renderOrder of this buffer.\n     * @param startElementCount Initial number of elements this `BoxBuffer` can hold.\n     * @param maxElementCount Maximum number of elements this `BoxBuffer` can hold.\n     */\n    constructor(\n        readonly material: THREE.Material | THREE.Material[],\n        readonly renderOrder: number = 0,\n        readonly startElementCount = START_BOX_BUFFER_SIZE,\n        readonly maxElementCount = MAX_BOX_BUFFER_SIZE\n    ) {\n        this.resizeBuffer(startElementCount);\n        this.pickInfos = new Array();\n    }\n\n    /**\n     * Duplicate this `BoxBuffer` with same material and renderOrder.\n     *\n     * @returns A clone of this `BoxBuffer`.\n     */\n    clone(): BoxBuffer {\n        return new BoxBuffer(this.material, this.renderOrder);\n    }\n\n    /**\n     * Dispose of the geometry.\n     */\n    dispose() {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n            this.geometry = undefined;\n        }\n        this.internalMesh = undefined;\n    }\n\n    /**\n     * Return the current number of elements the buffer can hold.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Clear's the `BoxBuffer` attribute buffers.\n     */\n    reset() {\n        if (this.positionAttribute !== undefined) {\n            this.positionAttribute.count = 0;\n            this.colorAttribute!.count = 0;\n            this.uvAttribute!.count = 0;\n            this.indexAttribute!.count = 0;\n            this.pickInfos!.length = 0;\n        }\n    }\n\n    /**\n     * Returns `true` if this `BoxBuffer` can hold the specified amount of glyphs. If the buffer\n     * can only add the glyph by increasing the buffer size, the resize() method is called, which\n     * will then create a new geometry for the mesh.\n     *\n     * @param glyphCount Number of glyphs to be added to the buffer.\n     * @returns `true` if the element (box or glyph) can be added to the buffer, `false` otherwise.\n     */\n    canAddElements(glyphCount = 1): boolean {\n        const indexAttribute = this.indexAttribute!;\n        if (\n            indexAttribute.count + glyphCount * NUM_INDICES_PER_ELEMENT >=\n            indexAttribute.array.length\n        ) {\n            // Too many elements for the current buffer, check if we can resize the buffer.\n            if (indexAttribute.array.length >= this.maxElementCount * NUM_INDICES_PER_ELEMENT) {\n                return false;\n            }\n\n            const newSize = Math.min(this.maxElementCount, this.size === 0 ? 256 : this.size * 2);\n            this.resize(newSize);\n        }\n        return true;\n    }\n\n    /**\n     * Returns this `BoxBuffer`'s attribute [[State]].\n     */\n    saveState(): State {\n        const state: State = {\n            positionAttributeCount: this.positionAttribute!.count,\n            colorAttributeCount: this.colorAttribute!.count,\n            uvAttributeCount: this.uvAttribute!.count,\n            indexAttributeCount: this.indexAttribute!.count,\n            pickInfoCount: this.pickInfos!.length\n        };\n        return state;\n    }\n\n    /**\n     * Store this `BoxBuffer`'s attribute [[State]] to a previously stored one.\n     *\n     * @param state [[State]] struct describing a previous attribute state.\n     */\n    restoreState(state: State) {\n        this.positionAttribute!.count = state.positionAttributeCount;\n        this.colorAttribute!.count = state.colorAttributeCount;\n        this.uvAttribute!.count = state.uvAttributeCount;\n        this.indexAttribute!.count = state.indexAttributeCount;\n        this.pickInfos!.length = state.pickInfoCount;\n    }\n\n    /**\n     * Adds a new box to this `BoxBuffer`.\n     *\n     * @param screenBox [[Math2D.Box]] holding screen coordinates for this box.\n     * @param uvBox [[Math2D.UvBox]] holding uv coordinates for this box.\n     * @param color Box's color.\n     * @param opacity Box's opacity.\n     * @param distance Box's distance to camera.\n     * @param pickInfo Box's picking information.\n     */\n    addBox(\n        screenBox: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        color: THREE.Color,\n        opacity: number,\n        distance: number,\n        pickInfo?: any\n    ): boolean {\n        if (!this.canAddElements()) {\n            return false;\n        }\n\n        const { s0, t0, s1, t1 } = uvBox;\n        const { x, y, w, h } = screenBox;\n\n        const r = Math.round(color.r * 255);\n        const g = Math.round(color.g * 255);\n        const b = Math.round(color.b * 255);\n        const a = Math.round(opacity * 255);\n\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        const baseVertex = positionAttribute.count;\n        const baseIndex = indexAttribute.count;\n\n        positionAttribute.setXYZ(baseVertex, x, y, distance);\n        positionAttribute.setXYZ(baseVertex + 1, x + w, y, distance);\n        positionAttribute.setXYZ(baseVertex + 2, x, y + h, distance);\n        positionAttribute.setXYZ(baseVertex + 3, x + w, y + h, distance);\n\n        colorAttribute.setXYZW(baseVertex, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 1, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 2, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 3, r, g, b, a);\n\n        uvAttribute.setXY(baseVertex, s0, t0);\n        uvAttribute.setXY(baseVertex + 1, s1, t0);\n        uvAttribute.setXY(baseVertex + 2, s0, t1);\n        uvAttribute.setXY(baseVertex + 3, s1, t1);\n\n        indexAttribute.setX(baseIndex, baseVertex);\n        indexAttribute.setX(baseIndex + 1, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 2, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 3, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 4, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 5, baseVertex + 3);\n\n        positionAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        colorAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        uvAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        indexAttribute.count += NUM_INDICES_PER_ELEMENT;\n\n        this.pickInfos.push(pickInfo);\n\n        return true;\n    }\n\n    /**\n     * Updates a [[BufferGeometry]] object to reflect the changes in this `TextBuffer`'s attribute\n     * data.\n     */\n    updateBufferGeometry() {\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        if (positionAttribute.count > 0) {\n            positionAttribute.needsUpdate = true;\n            positionAttribute.updateRange.offset = 0;\n            positionAttribute.updateRange.count =\n                positionAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (colorAttribute.count > 0) {\n            colorAttribute.needsUpdate = true;\n            colorAttribute.updateRange.offset = 0;\n            colorAttribute.updateRange.count = colorAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (uvAttribute.count > 0) {\n            uvAttribute.needsUpdate = true;\n            uvAttribute.updateRange.offset = 0;\n            uvAttribute.updateRange.count = uvAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (indexAttribute.count > 0) {\n            indexAttribute.needsUpdate = true;\n            indexAttribute.updateRange.offset = 0;\n            indexAttribute.updateRange.count = indexAttribute.count;\n        }\n\n        if (this.geometry !== undefined) {\n            this.geometry.clearGroups();\n            this.geometry.addGroup(0, this.indexAttribute!.count);\n        }\n    }\n\n    /**\n     * Check if the buffer is empty. If it is empty, the memory usage is minimized to reduce\n     * footprint.\n     */\n    cleanUp() {\n        // If there is nothing in this buffer, resize it, it may never be used again.\n        if (this.indexAttribute!.count === 0 && this.size > START_BOX_BUFFER_SIZE) {\n            this.clearAttributes();\n        }\n    }\n\n    /**\n     * Determine if the mesh is empty.\n     */\n    get isEmpty(): boolean {\n        return this.internalMesh!.isEmpty;\n    }\n\n    /**\n     * Get the [[Mesh]] object. The geometry instance of the mesh may change if the buffers are\n     * resized. The mesh, once created, will not change, so it can always be added to the scene.\n     */\n    get mesh(): BoxBufferMesh {\n        if (this.internalMesh === undefined) {\n            this.resize();\n        }\n        return this.internalMesh!;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * boxes are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     * @param imageData Image data to test if the pixel is transparent\n     */\n    pickBoxes(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void,\n        imageData?: ImageBitmap | ImageData\n    ) {\n        const n = this.pickInfos.length;\n        const pickInfos = this.pickInfos;\n        const positions = this.positionAttribute!;\n        const screenX = screenPosition.x;\n        const screenY = screenPosition.y;\n\n        const canvas = document.createElement(\"canvas\");\n        for (let pickInfoIndex = 0; pickInfoIndex < n; pickInfoIndex++) {\n            const positionIndex = pickInfoIndex * NUM_VERTICES_PER_ELEMENT;\n\n            const minX = positions.getX(positionIndex);\n            if (screenX < minX) {\n                continue;\n            }\n\n            const maxX = positions.getX(positionIndex + 1);\n            if (screenX > maxX) {\n                continue;\n            }\n\n            const minY = positions.getY(positionIndex);\n            if (screenY < minY) {\n                continue;\n            }\n\n            const maxY = positions.getY(positionIndex + 2);\n            if (screenY > maxY) {\n                continue;\n            }\n\n            const box = new Math2D.Box(minX, minY, maxX - minX, maxY - minY);\n            if (\n                imageData !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo.uvBox !== undefined &&\n                this.isPixelTransparent(\n                    imageData,\n                    screenX,\n                    screenY,\n                    box,\n                    pickInfos[pickInfoIndex].poiInfo.uvBox,\n                    canvas\n                )\n            ) {\n                continue;\n            }\n\n            if (pickInfos[pickInfoIndex] !== undefined) {\n                pickCallback(pickInfos[pickInfoIndex]);\n            }\n        }\n    }\n\n    /**\n     * Creates a new [[Geometry]] object from all the attribute data stored in this `BoxBuffer`.\n     * The [[Mesh]] object may be created if it is not initialized already.\n     *\n     * @param newSize Optional number of elements to resize the buffer to.\n     * @param forceResize Optional flag to force a resize even if new size is smaller than before.\n     */\n    resize(newSize?: number, forceResize?: boolean): BoxBufferMesh {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n        }\n\n        this.geometry = new THREE.BufferGeometry();\n\n        if (newSize !== undefined && (forceResize === true || newSize > this.size)) {\n            this.resizeBuffer(newSize);\n        }\n\n        this.geometry.setAttribute(\"position\", this.positionAttribute!);\n        this.geometry.setAttribute(\"color\", this.colorAttribute!);\n        this.geometry.setAttribute(\"uv\", this.uvAttribute!);\n        this.geometry.setIndex(this.indexAttribute!);\n        this.geometry.addGroup(0, this.indexAttribute!.count);\n\n        if (this.internalMesh === undefined) {\n            this.internalMesh = new BoxBufferMesh(this.geometry, this.material);\n            this.internalMesh.renderOrder = this.renderOrder;\n        } else {\n            this.internalMesh.geometry = this.geometry;\n        }\n        return this.internalMesh;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `BoxBuffer`.\n     *\n     * @param info The info object to increment with the values from this `BoxBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.positionAttribute!.count * NUM_POSITION_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.colorAttribute!.count * NUM_COLOR_VALUES_PER_VERTEX +\n            this.uvAttribute!.count * NUM_UV_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.indexAttribute!.count * NUM_BYTES_PER_INT32; // May be UInt16, so we overestimate\n\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    /**\n     * Check if a pixel is transparent or not.\n     *\n     * @param imageData Data containing the pixels.\n     * @param xScreenPos X position of the pixel.\n     * @param yScreenPos Y position of the pixel.\n     * @param box Bounding box of the image in screen coordinates.\n     * @param uvBox Uv box referred to the given bounding box.\n     * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n     *      ImageBitmap\n     */\n    protected isPixelTransparent(\n        imageData: ImageBitmap | ImageData,\n        xScreenPos: number,\n        yScreenPos: number,\n        box: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        canvas?: HTMLCanvasElement\n    ): boolean {\n        let pixelIsTransparent = false;\n\n        const { u, v } = screenToUvCoordinates(xScreenPos, yScreenPos, box, uvBox);\n\n        const imageWidth = imageData.width;\n        const x = imageWidth * u;\n        const imageHeight = imageData.height;\n        const y = imageHeight * v;\n\n        const pixel = getPixelFromImage(x, y, imageData, canvas);\n\n        if (pixel !== undefined && pixel[3] === 0) {\n            pixelIsTransparent = true;\n        }\n        return pixelIsTransparent;\n    }\n\n    /**\n     * Remove current attributes and arrays. Minimizes memory footprint.\n     */\n    protected clearAttributes() {\n        this.positionAttribute = undefined;\n        this.colorAttribute = undefined;\n        this.uvAttribute = undefined;\n        this.indexAttribute = undefined;\n        this.resize(START_BOX_BUFFER_SIZE, true);\n    }\n\n    /**\n     * Resize the attribute buffers. New value must be larger than the previous one.\n     *\n     * @param newSize New number of elements in the buffer. Number has to be larger than the\n     *      previous size.\n     */\n    protected resizeBuffer(newSize: number) {\n        const newPositionArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_POSITION_VALUES_PER_VERTEX\n        );\n\n        if (this.positionAttribute !== undefined && this.positionAttribute.array.length > 0) {\n            const positionAttributeCount = this.positionAttribute.count;\n            newPositionArray.set(this.positionAttribute.array);\n            this.positionAttribute.array = newPositionArray;\n            this.positionAttribute.count = positionAttributeCount;\n        } else {\n            this.positionAttribute = new THREE.BufferAttribute(\n                newPositionArray,\n                NUM_POSITION_VALUES_PER_VERTEX\n            );\n            this.positionAttribute.count = 0;\n            this.positionAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newColorArray = new Uint8Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_COLOR_VALUES_PER_VERTEX\n        );\n\n        if (this.colorAttribute !== undefined) {\n            const colorAttributeCount = this.colorAttribute.count;\n            newColorArray.set(this.colorAttribute.array);\n            this.colorAttribute.array = newColorArray;\n            this.colorAttribute.count = colorAttributeCount;\n        } else {\n            this.colorAttribute = new THREE.BufferAttribute(\n                newColorArray,\n                NUM_COLOR_VALUES_PER_VERTEX,\n                true\n            );\n            this.colorAttribute.count = 0;\n            this.colorAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newUvArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_UV_VALUES_PER_VERTEX\n        );\n\n        if (this.uvAttribute !== undefined) {\n            const uvAttributeCount = this.uvAttribute.count;\n            newUvArray.set(this.uvAttribute.array);\n            this.uvAttribute.array = newUvArray;\n            this.uvAttribute.count = uvAttributeCount;\n        } else {\n            this.uvAttribute = new THREE.BufferAttribute(newUvArray, NUM_UV_VALUES_PER_VERTEX);\n            this.uvAttribute.count = 0;\n            this.uvAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const numIndexValues = newSize * NUM_INDICES_PER_ELEMENT * NUM_INDEX_VALUES_PER_VERTEX;\n\n        const newIndexArray =\n            numIndexValues > 65535\n                ? new Uint32Array(numIndexValues)\n                : new Uint16Array(numIndexValues);\n\n        if (this.indexAttribute !== undefined) {\n            const indexAttributeCount = this.indexAttribute.count;\n            newIndexArray.set(this.indexAttribute.array);\n            this.indexAttribute.array = newIndexArray;\n            this.indexAttribute.count = indexAttributeCount;\n        } else {\n            this.indexAttribute = new THREE.BufferAttribute(\n                newIndexArray,\n                NUM_INDEX_VALUES_PER_VERTEX\n            );\n            this.indexAttribute.count = 0;\n            this.indexAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        this.m_size = newSize;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\n/**\n * It returns an array containing the channel colors for the pixel at the given coordinates.\n *\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param imageData Data containing the pixels.\n * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n * ImageBitmap\n */\nexport function getPixelFromImage(\n    xPos: number,\n    yPos: number,\n    imageData: ImageData | ImageBitmap,\n    canvas?: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    let pickedColor;\n\n    const isImageBitmap = (imgData: ImageBitmap | ImageData) => {\n        return (imgData as ImageBitmap).close !== undefined;\n    };\n\n    if (isImageBitmap(imageData!)) {\n        if (canvas === undefined) {\n            canvas = document.createElement(\"canvas\");\n        }\n        pickedColor = getPixelFromImageBitmap(imageData as ImageBitmap, xPos, yPos, canvas);\n    } else {\n        const pixelsData = imageData as ImageData;\n        const stride = pixelsData.data.length / (pixelsData.height * pixelsData.width);\n        pickedColor = getPixelFromImageData(pixelsData, xPos, yPos, stride);\n    }\n    return pickedColor;\n}\n\n/**\n * Given the x and y position in screen coordinates inside the target box, it map them to the UV\n * coordinates.\n * @param screenX X value in screen coordinates.\n * @param screenY Y value in screen coordinates.\n * @param box Bounding box in screen coordinates.\n * @param uvBox Uv box referred to the given bounding box.\n */\nexport function screenToUvCoordinates(\n    screenX: number,\n    screenY: number,\n    box: Math2D.Box,\n    uvBox: Math2D.UvBox\n): { u: number; v: number } {\n    const minX = box.x;\n    const maxX = box.x + box.w;\n    const minY = box.y;\n    const maxY = box.y + box.h;\n    const u = MathUtils.map(screenX, minX, maxX, uvBox.s0, uvBox.s1);\n    const v = MathUtils.map(screenY, minY, maxY, uvBox.t0, uvBox.t1);\n\n    return { u, v };\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Bitmap image in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param canvas HTML Canvas element on which the image is drawn.\n */\nexport function getPixelFromImageBitmap(\n    image: ImageBitmap,\n    xPos: number,\n    yPos: number,\n    canvas: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    if (xPos > image.width || xPos < 0 || yPos > image.height || yPos < 0) {\n        return undefined;\n    }\n\n    let pixelData;\n\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    const context = canvas.getContext(\"2d\");\n    if (context !== null) {\n        context.drawImage(\n            image,\n            0,\n            0,\n            image.width,\n            image.height,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n        );\n        pixelData = context.getImageData(xPos, yPos, 1, 1).data;\n    }\n    return pixelData;\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Image data in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param stride The stride value of the image data.\n */\nexport function getPixelFromImageData(\n    imgData: ImageData,\n    xPos: number,\n    yPos: number,\n    stride: number\n): Uint8ClampedArray | undefined {\n    const getPixel = (imageData: ImageData, index: number, strd: number) => {\n        const i = index * strd;\n        const d = imageData.data;\n        const pixel = new Uint8ClampedArray(strd);\n        for (let s = 0; s < strd; s++) {\n            pixel[0] = d[i + s];\n        }\n        return pixel;\n    };\n    if (xPos > imgData.width || xPos < 0 || yPos > imgData.height || yPos < 0) {\n        return undefined;\n    }\n    return getPixel(imgData, yPos * imgData.width + xPos, stride);\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { IChannel } from \"@here/harp-utils\";\n\nexport class PlacementStats {\n    totalGroups: number = 0;\n    resortedGroups: number = 0;\n    total: number = 0;\n    uninitialized: number = 0;\n    tooFar: number = 0;\n    numNotVisible: number = 0;\n    numPathTooSmall: number = 0;\n    numCannotAdd: number = 0;\n    numRenderedPoiIcons: number = 0;\n    numRenderedPoiTexts: number = 0;\n    numPoiTextsInvisible: number = 0;\n    numRenderedTextElements: number = 0;\n\n    constructor(private readonly m_logger: IChannel) {}\n\n    clear() {\n        this.totalGroups = 0;\n        this.resortedGroups = 0;\n        this.total = 0;\n        this.uninitialized = 0;\n        this.tooFar = 0;\n        this.numNotVisible = 0;\n        this.numPathTooSmall = 0;\n        this.numCannotAdd = 0;\n        this.numRenderedPoiIcons = 0;\n        this.numRenderedPoiTexts = 0;\n        this.numPoiTextsInvisible = 0;\n        this.numRenderedTextElements = 0;\n    }\n    log() {\n        const numNotRendered =\n            this.uninitialized +\n            this.numPoiTextsInvisible +\n            this.tooFar +\n            this.numNotVisible +\n            this.numCannotAdd;\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"Resorted groups\", this.resortedGroups);\n        this.m_logger.debug(\"Total labels\", this.total);\n        this.m_logger.debug(\"Rendered labels\", this.numRenderedTextElements);\n        this.m_logger.debug(\"Rejected labels\", numNotRendered);\n        this.m_logger.debug(\"Unitialized labels\", this.uninitialized);\n        this.m_logger.debug(\"Rendered poi icons\", this.numRenderedPoiIcons);\n        this.m_logger.debug(\"Rendered poi texts\", this.numRenderedPoiTexts);\n        this.m_logger.debug(\"Poi text invisible\", this.numPoiTextsInvisible);\n        this.m_logger.debug(\"Too far\", this.tooFar);\n        this.m_logger.debug(\"Not visible\", this.numNotVisible);\n        this.m_logger.debug(\"Path too small\", this.numPathTooSmall);\n        this.m_logger.debug(\"Rejected, max glyphs reached\", this.numCannotAdd);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * @hidden\n */\nexport class SimpleLineCurve extends THREE.LineCurve {\n    private m_lengths?: number[];\n\n    constructor(v1: THREE.Vector2, v2: THREE.Vector2) {\n        super(v1, v2);\n    }\n\n    getLengths(): number[] {\n        if (this.m_lengths === undefined) {\n            this.m_lengths = [0, this.v2.distanceTo(this.v1)];\n        }\n        return this.m_lengths;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PathParam {\n    private m_point: THREE.Vector2 | undefined;\n\n    constructor(readonly path: THREE.Path, readonly index: number, readonly t: number) {}\n\n    get curve(): THREE.Curve<THREE.Vector2> {\n        return this.path.curves[this.index];\n    }\n\n    get point(): THREE.Vector2 {\n        if (this.m_point === undefined) {\n            this.m_point = this.curve.getPoint(this.t);\n        }\n        return this.m_point;\n    }\n}\n\n/**\n * @hidden\n */\nexport class SimplePath extends THREE.Path {\n    private m_cache?: number[];\n\n    constructor() {\n        super();\n    }\n\n    getLengths(): number[] {\n        if (this.m_cache) {\n            return this.m_cache;\n        }\n        let sum = 0;\n        const lengths = new Array<number>();\n        lengths.push(0);\n\n        this.curves.forEach(curve => {\n            const lineCurve = curve as THREE.LineCurve;\n            sum += lineCurve.v1.distanceTo(lineCurve.v2);\n            lengths.push(sum);\n        });\n        this.m_cache = lengths;\n        return lengths;\n    }\n\n    getParamAt(t: number): PathParam | null {\n        const distance = t * this.getLength();\n        const curveLengths = this.getCurveLengths();\n\n        for (let index = 0; index < curveLengths.length; ++index) {\n            if (curveLengths[index] < distance) {\n                continue;\n            }\n\n            const diff = curveLengths[index] - distance;\n            const curve = this.curves[index] as THREE.LineCurve;\n            const segmentLength = curve.getLength();\n            const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n            return new PathParam(this, index, u);\n        }\n\n        return null;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst DEFAULT_FONT_CATALOG = \"./resources/fonts/Default_FontCatalog.json\";\n\n/**\n * Default number of labels/POIs rendered in the scene\n */\nconst DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS = 500;\n\n/**\n * Number of elements that are put into second queue. This second chance queue is used to render\n * TextElements that have not been on screen before. This is a quick source for elements that can\n * appear when the camera moves a bit, before new elements are placed.\n */\nconst DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS = 300;\n\n/**\n * Maximum distance for text labels expressed as a ratio of distance to from the camera (0) to the\n * far plane (1.0). May be synchronized with fog value ?\n */\nconst DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS = 0.99;\n\n/**\n * Minimum scaling factor that may be applied to labels when their are distant from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MIN = 0.7;\n\n/**\n * Maximum scaling factor that may be applied to labels due to their distance from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MAX = 1.5;\n\nconst MIN_GLYPH_COUNT = 1024;\n\nconst MAX_GLYPH_COUNT = 32768;\n\nexport interface TextElementsRendererOptions {\n    /**\n     * The path to the font catalog file. Default is [[DEFAULT_FONT_CATALOG]].\n     */\n    fontCatalog?: string;\n    /**\n     * Optional initial number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MIN_GLYPH_COUNT]]\n     */\n    minNumGlyphs?: number;\n    /**\n     * Optional limit of number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MAX_GLYPH_COUNT]]\n     */\n    maxNumGlyphs?: number;\n    /**\n     * Limits the number of [[DataSource]] labels visible, such as road names and POIs.\n     * On small devices, you can reduce this number to to increase performance.\n     * @default [[DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS]].\n     */\n    maxNumVisibleLabels?: number;\n    /**\n     * The number of [[TextElement]]s that the [[TextElementsRenderer]] tries to render even\n     * if they were not visible during placement. This property only applies to [[TextElement]]s\n     * that were culled by the frustum; useful for map movements and animations.\n     * @default [[DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS]].\n     */\n    numSecondChanceLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] to be rendered, expressed as a fraction of\n     * the distance between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForTextLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] with icons to be rendered,\n     * expressed as a fraction of the distance\n     * between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForPoiLabels?: number;\n    /**\n     * The minimum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MIN]].\n     */\n    labelDistanceScaleMin?: number;\n    /**\n     * The maximum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MAX]].\n     */\n    labelDistanceScaleMax?: number;\n\n    /**\n     * Disable all fading animations for debugging and performance measurement.\n     * @default `false`\n     */\n    disableFading?: boolean;\n}\n\n/**\n * Initializes undefined text renderer options to default values.\n * @param options The options to be initialized.\n */\nexport function initializeDefaultOptions(options: TextElementsRendererOptions) {\n    if (options.fontCatalog === undefined) {\n        options.fontCatalog = DEFAULT_FONT_CATALOG;\n    }\n\n    if (options.minNumGlyphs === undefined) {\n        options.minNumGlyphs = MIN_GLYPH_COUNT;\n    }\n    if (options.maxNumGlyphs === undefined) {\n        options.maxNumGlyphs = MAX_GLYPH_COUNT;\n    }\n    if (options.maxNumVisibleLabels === undefined) {\n        options.maxNumVisibleLabels = DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS;\n    }\n    // TODO: Unused so far.\n    if (options.numSecondChanceLabels === undefined) {\n        options.numSecondChanceLabels = DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS;\n    }\n    if (options.labelDistanceScaleMin === undefined) {\n        options.labelDistanceScaleMin = DEFAULT_LABEL_DISTANCE_SCALE_MIN;\n    }\n    if (options.labelDistanceScaleMax === undefined) {\n        options.labelDistanceScaleMax = DEFAULT_LABEL_DISTANCE_SCALE_MAX;\n    }\n    if (options.maxDistanceRatioForTextLabels === undefined) {\n        options.maxDistanceRatioForTextLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n    if (options.maxDistanceRatioForPoiLabels === undefined) {\n        options.maxDistanceRatioForPoiLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n\n    if (options.disableFading === undefined) {\n        options.disableFading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert, LoggerManager, LogLevel } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\n\nconst logger = LoggerManager.instance.create(\"TextElementsStateCache\", { level: LogLevel.Log });\n\n/**\n * Label distance tolerance squared in meters. Point labels with the same name that are closer in\n * world space than this value are treated as the same label. Used to identify duplicate labels in\n * overlapping tiles and label replacements at different storage levels.\n */\nfunction getDedupSqDistTolerance(zoomLevel: number) {\n    // Defining here a minimum tolerance of 10m at zoom level 13 or higher.\n    const minSqTol = 100;\n    const minSqTolLevel = 13;\n    const maxLevelDelta = 4;\n    const levelDelta = Math.min(\n        maxLevelDelta,\n        minSqTolLevel - Math.min(minSqTolLevel, Math.floor(zoomLevel))\n    );\n    // Distance tolerance computed applying a factor over an arbitrary minimum tolerance for a\n    // chosen zoom level. The factor is an exponential function on zoom level delta wrt minimum\n    // tolerance zoom level.\n    // error = sqrt(sqError) = sqrt(minSqError* 2^(4d)) = minError*2^(2d)\n\n    //tslint:disable-next-line: no-bitwise\n    return minSqTol << (levelDelta << 2);\n}\n\nconst tmpCachedDuplicate: { entries: TextElementState[]; index: number } = {\n    entries: [],\n    index: -1\n};\n\nfunction getCacheKey(element: TextElement): string | number {\n    return element.hasFeatureId() ? element.featureId! : element.text;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their feature ids.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateById(\n    elementState: TextElementState,\n    candidates: TextElementState[]\n): number | undefined {\n    // Cached entries with same feature id found, find the entry with the same tile offset.\n    const element = elementState.element;\n    const duplicateIndex = candidates.findIndex(\n        entry => entry.element.tileOffset === element.tileOffset\n    );\n    if (duplicateIndex === -1) {\n        return -1;\n    }\n    const candidate = candidates[duplicateIndex].element;\n    assert(element.featureId === candidate.featureId);\n\n    if (candidate.text !== element.text) {\n        // Labels with different text shouldn't share the same feature id. This points to\n        // an issue on the map data side. Submit a ticket to the corresponding map backend\n        // issue tracking system if available (e.g. OLPRPS project in JIRA for OMV),\n        // indicating affected labels including tile keys, texts and feature id.\n        logger.warn(\n            `Text feature id ${element.featureId} collision between \"${element.text} and \\\n             ${candidate.text}`\n        );\n        return undefined;\n    }\n    return duplicateIndex;\n}\n\ntype DuplicateCmp = (\n    newCandidate: TextElement,\n    newDistance: number,\n    oldCandidate: TextElement,\n    oldDistance: number\n) => boolean;\n\n// Duplicate criteria for path labels. Candidates are better the longer their paths are.\nfunction isBetterPathDuplicate(\n    newCandidate: TextElement,\n    _newDistance: number,\n    oldCandidate: TextElement,\n    _oldDistance: number\n): boolean {\n    if (newCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    if (oldCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    return newCandidate.pathLengthSqr > oldCandidate.pathLengthSqr;\n}\n\n// Duplicate criteria for point labels. Candidates are better the nearer they are to the label being\n// tested for duplicates.\nfunction isBetterPointDuplicate(\n    _newCandidate: TextElement,\n    newDistance: number,\n    _oldCandidate: TextElement,\n    oldDistance: number\n): boolean {\n    return newDistance < oldDistance;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their text and distances.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @param zoomLevel Current zoom level.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateByText(\n    elementState: TextElementState,\n    candidates: TextElementState[],\n    zoomLevel: number\n): number {\n    const element = elementState.element;\n    const maxSqDistError = getDedupSqDistTolerance(zoomLevel);\n    const entryCount = candidates.length;\n    const elementPosition = element.position;\n    const elementVisible = elementState.visible;\n    let dupIndex: number = -1;\n    let duplicate: TextElement | undefined;\n    let dupDistSquared: number = Infinity;\n    const isBetterDuplicate: DuplicateCmp =\n        element.type === TextElementType.PoiLabel ? isBetterPointDuplicate : isBetterPathDuplicate;\n\n    for (let i = 0; i < entryCount; ++i) {\n        const candidateEntry = candidates[i];\n        const cachedElement = candidateEntry.element;\n        const areDiffType = element.type !== cachedElement.type;\n        const areBothVisible = elementVisible && candidateEntry.visible;\n        if (areDiffType || areBothVisible) {\n            // Two text elements with different type or visible at the same time are always\n            // considered distinct.\n            continue;\n        }\n        const distSquared = elementPosition.distanceToSquared(cachedElement.position);\n        if (distSquared > maxSqDistError) {\n            // Cached text element is too far away to be a duplicate.\n            continue;\n        }\n        if (\n            duplicate === undefined ||\n            isBetterDuplicate(cachedElement, distSquared, duplicate, dupDistSquared)\n        ) {\n            dupIndex = i;\n            duplicate = cachedElement;\n            dupDistSquared = distSquared;\n        }\n    }\n\n    return dupIndex;\n}\n\n/**\n * Caches the state of text element groups currently rendered as well as the text element states\n * belonging to them, including their fading state and text deduplication information.\n */\nexport class TextElementStateCache {\n    private readonly m_referenceMap = new Map<TextElementGroup, TextElementGroupState>();\n    private m_sortedGroupStates: TextElementGroupState[] | undefined;\n\n    // Cache for point labels which may have duplicates in same tile or in neighboring tiles.\n    private readonly m_textMap = new Map<string | number, TextElementState[]>();\n\n    /**\n     * Gets the state corresponding to a given text element group or sets a newly created state if\n     * not found. It updates the states of the text elements belonging to the group using the\n     * specified parameters.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @param textElementFilter Filter used to decide if a text element must be initialized,\n     * @see [[TextElementGroupState]] construction.\n     * @returns Tuple with the group state as first element and a boolean indicating whether the\n     * state was found in cache (`true`) or newly created (`false`) as second element.\n     */\n    getOrSet(\n        textElementGroup: TextElementGroup,\n        textElementFilter: TextElementFilter\n    ): [TextElementGroupState, boolean] {\n        let groupState = this.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            assert(groupState.size === textElementGroup.elements.length);\n            groupState.updateElements(textElementFilter);\n            return [groupState, true];\n        }\n\n        groupState = new TextElementGroupState(textElementGroup, textElementFilter);\n        this.set(textElementGroup, groupState);\n\n        return [groupState, false];\n    }\n\n    get size(): number {\n        return this.m_referenceMap.size;\n    }\n\n    /**\n     * @returns All text element group states in the cache by group priority.\n     */\n    get sortedGroupStates(): TextElementGroupState[] {\n        if (this.m_sortedGroupStates === undefined) {\n            this.m_sortedGroupStates = Array.from(this.m_referenceMap.values());\n            this.m_sortedGroupStates.sort((a: TextElementGroupState, b: TextElementGroupState) => {\n                return b.group.priority - a.group.priority;\n            });\n        }\n\n        assert(this.m_referenceMap.size === this.m_sortedGroupStates.length);\n        return this.m_sortedGroupStates;\n    }\n\n    /**\n     * Updates state of all cached groups, discarding those that are not needed anymore.\n     * @param time The current time.\n     * @param disableFading `True` if fading is currently disabled, `false` otherwise.\n     * @param findReplacements `True` to replace each visible unvisited text element with a\n     * visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @returns `True` if any textElementGroup was evicted from cache, false otherwise.\n     */\n    update(time: number, disableFading: boolean, findReplacements: boolean, zoomLevel: number) {\n        const replaceCallback = findReplacements\n            ? this.replaceElement.bind(this, zoomLevel)\n            : undefined;\n\n        let anyEviction = false;\n        for (const [key, groupState] of this.m_referenceMap.entries()) {\n            if (groupState.visited) {\n                groupState.updateFading(time, disableFading);\n            } else {\n                if (findReplacements) {\n                    groupState.traverseVisibleElements(replaceCallback!);\n                }\n                this.m_referenceMap.delete(key);\n                this.m_sortedGroupStates = undefined;\n                anyEviction = true;\n            }\n        }\n        return anyEviction;\n    }\n\n    /**\n     * Clears visited state for all text element groups in cache.\n     */\n    clearVisited() {\n        for (const groupState of this.m_referenceMap.values()) {\n            groupState.visited = false;\n        }\n    }\n\n    clearTextCache() {\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Clears the whole cache contents.\n     */\n    clear() {\n        this.m_referenceMap.clear();\n        this.m_sortedGroupStates = undefined;\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Removes duplicates for a given text element.\n     *\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     * @returns True if it's the remaining element after deduplication, false if it's been marked\n     * as duplicate.\n     */\n    deduplicateElement(zoomLevel: number, elementState: TextElementState): boolean {\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined) {\n            // Text not found so far, add this element to cache.\n            this.m_textMap.set(getCacheKey(elementState.element), [elementState]);\n            return true;\n        }\n\n        if (cacheResult.index === -1) {\n            // No duplicate found among elements with same text,add this one to cache.\n            cacheResult.entries.push(elementState);\n            return true;\n        }\n\n        // Duplicate found, check whether there's a label already visible and keep that one.\n        const cachedDuplicate = cacheResult.entries[cacheResult.index];\n\n        if (!cachedDuplicate.visible && elementState.visible) {\n            // New label is visible, substitute the cached label.\n            cacheResult.entries[cacheResult.index] = elementState;\n            cachedDuplicate.reset();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replaces a visible unvisited text element with a visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     */\n    replaceElement(zoomLevel: number, elementState: TextElementState): void {\n        assert(elementState.visible);\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined || cacheResult.index === -1) {\n            // No replacement found;\n            return;\n        }\n\n        const replacement = cacheResult.entries[cacheResult.index];\n        assert(!replacement.visible);\n\n        replacement.replace(elementState);\n    }\n\n    /**\n     * Gets the state corresponding to a given text element group.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @returns The group state if cached, otherwise `undefined`.\n     */\n    private get(textElementGroup: TextElementGroup): TextElementGroupState | undefined {\n        const groupState = this.m_referenceMap.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            groupState.visited = true;\n        }\n        return groupState;\n    }\n\n    /**\n     * Sets a specified state for a given text element group.\n     * @param textElementGroup  The group of which the state will be set.\n     * @param textElementGroupState The state to set for the group.\n     */\n    private set(textElementGroup: TextElementGroup, textElementGroupState: TextElementGroupState) {\n        assert(textElementGroup.elements.length > 0);\n        this.m_referenceMap.set(textElementGroup, textElementGroupState);\n        this.m_sortedGroupStates = undefined;\n    }\n\n    private findDuplicate(\n        elementState: TextElementState,\n        zoomLevel: number\n    ): { entries: TextElementState[]; index: number } | undefined {\n        // Point labels may have duplicates (as can path labels), Identify them\n        // and keep the one we already display.\n\n        const element = elementState.element;\n        const cachedEntries = this.m_textMap.get(getCacheKey(element));\n\n        if (cachedEntries === undefined) {\n            // No labels found with the same key.\n            return undefined;\n        }\n\n        tmpCachedDuplicate.entries = cachedEntries;\n        const index = element.hasFeatureId()\n            ? findDuplicateById(elementState, cachedEntries)\n            : findDuplicateByText(elementState, cachedEntries, zoomLevel);\n\n        if (index === undefined) {\n            // Feature id collision, try finding duplicates using text as key.\n            element.featureId = undefined;\n            return this.findDuplicate(elementState, zoomLevel);\n        }\n        tmpCachedDuplicate.index = index;\n        return tmpCachedDuplicate;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementState } from \"./TextElementState\";\n\n/**\n * Type of functions used to do early rejection of elements during group state creation or update.\n * @param textElementState The state of the text element to check.\n * @returns `undefined` if element was rejected, otherwise its current view distance.\n */\nexport type TextElementFilter = (textElementState: TextElementState) => number | undefined;\n\n/**\n * `TextElementGroupState` keeps the state of a text element group and each element in it while\n * they're being rendered.\n */\nexport class TextElementGroupState {\n    private m_textElementStates: TextElementState[];\n    private m_visited: boolean = false;\n\n    /**\n     * Creates the state for specified group.\n     * @param group The group of which the state will be created.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    constructor(readonly group: TextElementGroup, filter: TextElementFilter) {\n        assert(group.elements.length > 0);\n        const length = group.elements.length;\n        this.m_textElementStates = new Array(length);\n        this.m_visited = true;\n\n        // TODO: HARP-7648. Reduce number of allocations here:\n        // a) Avoid creating the state for labels that don't pass early placement checks and make\n        //    this checks more strict.\n        // b) Break label state objects into a set of arrays held at group level, one for each\n        //    primitive field in the label state.\n        for (let i = 0; i < length; ++i) {\n            const textElement = group.elements[i];\n            const state = new TextElementState(textElement);\n            const textDistance = filter(state);\n            state.update(textDistance);\n            this.m_textElementStates[i] = state;\n        }\n    }\n\n    /**\n     * Indicates whether the group has been submitted to the [[TextElementsRenderer]] in the current\n     * frame.\n     */\n    get visited(): boolean {\n        return this.m_visited;\n    }\n\n    set visited(visited: boolean) {\n        this.m_visited = visited;\n    }\n\n    /**\n     * @returns the priority of the text elements in the group.\n     */\n    get priority() {\n        return this.group.priority;\n    }\n\n    /**\n     * Updates the fading state of all text elements within the group to the specified time.\n     * @param time The time to which the fading state will be updated.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined) {\n                elementState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * Calls the specified callback for every visible text elements in the group.\n     * @param visibleElementsCallback Functions that will be called for every visible text element\n     * in the group.\n     */\n    traverseVisibleElements(visibleElementsCallback: (e: TextElementState) => void): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined && elementState.visible) {\n                visibleElementsCallback(elementState);\n            }\n        }\n    }\n\n    /**\n     * Updates the states of elements within the group.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    updateElements(filter: TextElementFilter) {\n        for (const elementState of this.m_textElementStates) {\n            const textDistance = filter(elementState);\n            elementState.update(textDistance);\n        }\n    }\n\n    get size(): number {\n        return this.m_textElementStates.length;\n    }\n\n    /**\n     * Returns text element states.\n     * @returns Array of element states.\n     */\n    get textElementStates(): TextElementState[] {\n        return this.m_textElementStates;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport { RenderState } from \"./RenderState\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * `TextElementState` keeps the current state of a text element while it's being rendered.\n */\nexport class TextElementState {\n    /**\n     * @hidden\n     * Used during label placement to reserve space from front to back.\n     */\n    private m_viewDistance: number | undefined;\n\n    /**\n     * @hidden\n     * Used during rendering. The array type is used for line markers only, which have a points\n     * array and multiple icon positions to render. Since line markers use the same renderState\n     * for text part and icon, there is no separate array of [[RenderState]]s for the text parts\n     * of the line markers.\n     */\n    private m_iconRenderStates?: RenderState | RenderState[];\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    private m_textRenderState?: RenderState;\n\n    constructor(readonly element: TextElement) {}\n\n    get initialized(): boolean {\n        return this.m_textRenderState !== undefined || this.m_iconRenderStates !== undefined;\n    }\n\n    /**\n     * @returns `true` if any component of the element is visible, `false` otherwise.\n     */\n    get visible(): boolean {\n        if (this.m_textRenderState !== undefined && this.m_textRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderState = this.iconRenderState;\n        if (iconRenderState !== undefined && iconRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderStates = this.iconRenderStates;\n        if (iconRenderStates === undefined) {\n            return false;\n        }\n\n        for (const state of iconRenderStates) {\n            if (state.isVisible()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Resets the element to an initialized state.\n     */\n    reset() {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.reset();\n        }\n\n        if (this.iconRenderState) {\n            (this.m_iconRenderStates as RenderState).reset();\n        } else if (this.m_iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.reset();\n            }\n        }\n        this.m_viewDistance = undefined;\n    }\n\n    /**\n     * Replaces given text element, inheriting its current state.\n     * The predecessor text element state is erased.\n     * @param predecessor Text element state to be replaced.\n     */\n    replace(predecessor: TextElementState) {\n        this.m_textRenderState = predecessor.m_textRenderState;\n        this.m_iconRenderStates = predecessor.m_iconRenderStates;\n        predecessor.m_textRenderState = undefined;\n        predecessor.m_iconRenderStates = undefined;\n\n        if (this.element.glyphs === undefined) {\n            // Use the predecessor glyphs, bounds and case array until proper ones are computed.\n            this.element.glyphs = predecessor.element.glyphs;\n            this.element.bounds = predecessor.element.bounds;\n            this.element.glyphCaseArray = predecessor.element.glyphCaseArray;\n        }\n    }\n\n    /**\n     * Returns the last computed distance of the text element to the camera.\n     * @returns Distance to camera.\n     */\n    get viewDistance(): number | undefined {\n        return this.m_viewDistance;\n    }\n\n    /**\n     * Updates the text element state.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    update(viewDistance: number | undefined) {\n        if (this.initialized) {\n            this.setViewDistance(viewDistance);\n        } else if (viewDistance !== undefined) {\n            this.initialize(viewDistance);\n        }\n    }\n\n    /**\n     * Sets the distance of the element to the current view center.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    setViewDistance(viewDistance: number | undefined) {\n        if (viewDistance === this.m_viewDistance) {\n            return;\n        }\n        this.m_viewDistance = viewDistance;\n    }\n\n    /**\n     * Return the last distance that has been computed for sorting during placement. This may not be\n     * the actual distance if the camera is moving, as the distance is computed only during\n     * placement. If the property `alwaysOnTop` is true, the value returned is always `0`.\n     *\n     * @returns 0 or negative distance to camera.\n     */\n    get renderDistance(): number {\n        return this.element.alwaysOnTop === true\n            ? 0\n            : this.m_viewDistance !== undefined\n            ? -this.m_viewDistance\n            : 0;\n    }\n\n    /**\n     * @returns The text render state.\n     */\n    get textRenderState(): RenderState | undefined {\n        return this.m_textRenderState;\n    }\n\n    /**\n     * Returns the icon render state for the case where the text element has only one icon.\n     * @returns The icon render state if the text element has a single icon, otherwise undefined.\n     */\n    get iconRenderState(): RenderState | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState ? this.m_iconRenderStates : undefined;\n    }\n\n    /**\n     * Returns the icon render states for text elements with multiple icons.\n     * @returns The icon render states if the text element has multiple icons, otherwise undefined.\n     */\n    get iconRenderStates(): RenderState[] | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState\n            ? undefined\n            : (this.m_iconRenderStates as RenderState[]);\n    }\n\n    /**\n     * Updates the fading state to the specified time.\n     * @param time The current time.\n     * @param disableFading If `True` there will be no fading transitions, i.e., state will go\n     * directly from FadedIn to FadedOut and viceversa.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.updateFading(time, disableFading);\n        }\n\n        if (this.iconRenderState !== undefined) {\n            const iconRenderState = this.m_iconRenderStates as RenderState;\n            iconRenderState.updateFading(time, disableFading);\n        } else if (this.iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * @param viewDistance Current distance of the element to the view center.\n     */\n    private initialize(viewDistance: number) {\n        assert(this.m_textRenderState === undefined);\n        assert(this.m_iconRenderStates === undefined);\n\n        this.setViewDistance(viewDistance);\n\n        if (this.element.type === TextElementType.LineMarker) {\n            this.m_iconRenderStates = new Array<RenderState>();\n            for (const _point of this.element.points as THREE.Vector3[]) {\n                const iconRenderStates = this.m_iconRenderStates as RenderState[];\n                const renderState = new RenderState();\n                iconRenderStates.push(renderState);\n            }\n            return;\n        }\n\n        this.m_textRenderState = new RenderState();\n\n        if (this.element.type === TextElementType.PoiLabel) {\n            this.m_iconRenderStates = new RenderState();\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * State of fading.\n */\nexport enum FadingState {\n    Undefined = 0,\n    FadingIn = 1,\n    FadedIn = 2,\n    FadingOut = -1,\n    FadedOut = -2\n}\n\n/**\n * Time to fade in/fade out the labels in milliseconds.\n */\nexport const DEFAULT_FADE_TIME = 800;\n\n/**\n * State of rendering of the icon and text part of the `TextElement`. Mainly for fading the elements\n * in and out, to compute the opacity.\n *\n * @hidden\n */\nexport class RenderState {\n    private m_state = FadingState.Undefined;\n\n    /**\n     * Create a `RenderState`.\n     *\n     * @param value Current fading value [0..1].\n     * @param startTime Time stamp the fading started.\n     * @param opacity Computed opacity depending on value.\n     */\n    constructor(public value = 0.0, public startTime = 0, public opacity = 1.0) {}\n\n    /**\n     * Reset existing `RenderState` to appear like a fresh state.\n     */\n    reset() {\n        this.m_state = FadingState.Undefined;\n        this.value = 0.0;\n        this.startTime = 0.0;\n        this.opacity = 1.0;\n    }\n\n    /**\n     * @returns `true` if element state is `FadingState.Undefined`.\n     */\n    isUndefined(): boolean {\n        return this.m_state === FadingState.Undefined;\n    }\n\n    /**\n     * @returns `true` if element is either fading in or fading out.\n     */\n    isFading(): boolean {\n        const fading =\n            this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadingOut;\n        return fading;\n    }\n\n    /**\n     * @returns `true` if element is fading in.\n     */\n    isFadingIn(): boolean {\n        const fadingIn = this.m_state === FadingState.FadingIn;\n        return fadingIn;\n    }\n\n    /**\n     * @returns `true` if element is fading out.\n     */\n    isFadingOut(): boolean {\n        const fadingOut = this.m_state === FadingState.FadingOut;\n        return fadingOut;\n    }\n\n    /**\n     * @returns `true` if element is done with fading in.\n     */\n    isFadedIn(): boolean {\n        const fadedIn = this.m_state === FadingState.FadedIn;\n        return fadedIn;\n    }\n\n    /**\n     * @returns `true` if element is done with fading out.\n     */\n    isFadedOut(): boolean {\n        const fadedOut = this.m_state === FadingState.FadedOut;\n        return fadedOut;\n    }\n\n    /**\n     * @returns `true` if state is neither faded out nor undefined.\n     */\n    isVisible(): boolean {\n        return this.m_state !== FadingState.FadedOut && this.m_state !== FadingState.Undefined;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingIn]].\n     * If previous state is [[FadingState.FadingIn]] or [[FadingState.FadedIn]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeIn(time: number) {\n        if (this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadedIn) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingOut) {\n            // The fadeout is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.value = 1.0 - this.value;\n            this.startTime = time - this.value * DEFAULT_FADE_TIME;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 0;\n        }\n\n        this.m_state = FadingState.FadingIn;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingOut]].\n     * If previous state is [[FadingState.FadingOut]] or [[FadingState.FadedOut]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeOut(time: number) {\n        if (this.m_state === FadingState.FadingOut || this.m_state === FadingState.FadedOut) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingIn) {\n            // The fade-in is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.startTime = time - this.value * DEFAULT_FADE_TIME;\n            this.value = 1.0 - this.value;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 1;\n        }\n\n        this.m_state = FadingState.FadingOut;\n    }\n\n    /**\n     * Updates opacity to current time, changing the state to [[FadingState.FadedOut]] or\n     * [[FadingState.FadedIn]] when the opacity becomes 0 or 1 respectively.\n     * It does nothing if [[isFading]] !== `true`.\n     *\n     * @param time Current time.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_state !== FadingState.FadingIn && this.m_state !== FadingState.FadingOut) {\n            return;\n        }\n\n        if (this.startTime === 0) {\n            this.startTime = time;\n        }\n\n        const fadingTime = time - this.startTime;\n        const startValue = this.m_state === FadingState.FadingIn ? 0 : 1;\n        const endValue = this.m_state === FadingState.FadingIn ? 1 : 0;\n\n        if (disableFading || fadingTime >= DEFAULT_FADE_TIME) {\n            this.value = 1.0;\n            this.opacity = endValue;\n            this.m_state =\n                this.m_state === FadingState.FadingIn ? FadingState.FadedIn : FadingState.FadedOut;\n        } else {\n            // TODO: HARP-7648. Do this once for all labels (calculate the last frame value\n            // increment).\n            this.value = fadingTime / DEFAULT_FADE_TIME;\n\n            this.opacity = THREE.Math.clamp(\n                MathUtils.smootherStep(startValue, endValue, this.value),\n                0,\n                1\n            );\n            assert(this.isFading());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"@here/harp-utils\";\nimport { PrePlacementResult } from \"./Placement\";\n\nexport class UpdateStats {\n    tiles: number = 0;\n    totalGroups: number = 0;\n    newGroups: number = 0;\n    totalLabels: number = 0;\n    results = new Array<number>(PrePlacementResult.Count);\n\n    constructor(private readonly m_logger: IChannel) {\n        this.results.fill(0);\n    }\n\n    clear() {\n        this.tiles = 0;\n        this.totalGroups = 0;\n        this.newGroups = 0;\n        this.totalLabels = 0;\n        this.results.fill(0);\n    }\n    log() {\n        this.m_logger.debug(\"Tiles\", this.tiles);\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"New groups\", this.newGroups);\n        this.m_logger.debug(\"Total labels\", this.totalLabels);\n        this.m_logger.debug(\"Placed labels\", this.results[PrePlacementResult.Ok]);\n        this.m_logger.debug(\"Invisible\", this.results[PrePlacementResult.Invisible]);\n        this.m_logger.debug(\"Poi not ready\", this.results[PrePlacementResult.NotReady]);\n        this.m_logger.debug(\"Too far\", this.results[PrePlacementResult.TooFar]);\n        this.m_logger.debug(\"Duplicate\", this.results[PrePlacementResult.Duplicate]);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PriorityListGroup } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * Group of [[TextElement]] sharing same priority.\n */\nexport class TextElementGroup extends PriorityListGroup<TextElement> {}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GroupedPriorityList } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * List of [[TextElement]] groups sorted by priority.\n */\nexport class TextElementGroupPriorityList extends GroupedPriorityList<TextElement> {}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport {\n    IBloomEffect,\n    IOutlineEffect,\n    ISepiaEffect,\n    IVignetteEffect\n} from \"@here/harp-datasource-protocol\";\nimport { SepiaShader, VignetteShader } from \"@here/harp-materials\";\nimport { IPassManager } from \"./IPassManager\";\nimport { LowResRenderPass } from \"./LowResRenderPass\";\nimport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\nimport { OutlineEffect } from \"./Outline\";\nimport { RenderPass, ShaderPass } from \"./Pass\";\nimport { BloomPass } from \"./UnrealBloomPass\";\n\nconst DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_1;\nconst DEFAULT_STATIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_4;\n\n/**\n * Interface for the antialias settings passed when instantiating a [[MapView]], and transferred to\n * the [[MapRenderingManager]] instance. These parameters can be changed at runtime as opposed to\n * the native WebGL antialiasing.\n */\nexport interface IMapAntialiasSettings {\n    /**\n     * Whether the MSAA is enabled or not.\n     *\n     * @default `false`\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The sampling level to use for MSAA during continuous rendering.\n     *\n     * @default `MSAASampling.Level_1`\n     */\n    dynamicMsaaSamplingLevel?: MSAASampling;\n\n    /**\n     * The sampling level to use for MSAA when the rendering stops.\n     *\n     * @default `MSAASampling.Level_4`\n     */\n    staticMsaaSamplingLevel?: MSAASampling;\n}\n\n/**\n * The `MapRenderingManager` class manages the map rendering (as opposed to text) by dispatching the\n * [[MapRenderingManager.render]] call to a set of internal [[Pass]] instances. It provides an API\n * to modify some of the rendering processes like the antialiasing behaviour at runtime.\n */\nexport interface IMapRenderingManager extends IPassManager {\n    /**\n     * Bloom effect parameters.\n     */\n    bloom: IBloomEffect;\n\n    /**\n     * Outline effect parameters.\n     */\n    outline: IOutlineEffect;\n\n    /**\n     * Vignette effect parameters.\n     */\n    vignette: IVignetteEffect;\n\n    /**\n     * Sepia effect parameters.\n     */\n    sepia: ISepiaEffect;\n\n    /**\n     * Set a `pixelRatio` for dynamic rendering (i.e. during animations). If a value is specified,\n     * the `LowResRenderPass` will be employed to used to render the scene into a lower resolution\n     * render target, which will then be rendered to the screen.\n     */\n    lowResPixelRatio?: number;\n\n    /**\n     * The level of MSAA sampling while the user interacts. It should be a low level so that the\n     * MSAA does not impact the framerate.\n     */\n    dynamicMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The higher level of MSAA sampling for a last frame to render, when the camera is static. It\n     * can be a high level, providing high quality renders requiring few tens of seconds, since no\n     * frame is expected to immediately follow in the requestAnimationFrame. It is still limited by\n     * zooming, since zooming is not requestAnimationFrame-based and can lead to stuttering if the\n     * render time is too long, except on desktop Mac, where mouse interaction already implements\n     * some damping. Higher levels of sampling may lead to noticeable color banding, visible in\n     * areas with a slight color gradient, like large areas or the sky background.\n     */\n    staticMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * The method to call to render the map. This method depends on an `isStaticFrame` boolean that\n     * notifies the pass manager to switch to a higher level render quality for the last frame.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     * @param time Optional time argument provided by the requestAnimationFrame, to pass to\n     * sub-passes.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean,\n        time?: number\n    ): void;\n\n    /**\n     * Updating the outline rebuilds the outline materials of every outlined mesh.\n     *\n     * @param options outline options from the [[Theme]].\n     */\n    updateOutline(options: {\n        thickness: number;\n        color: string;\n        ghostExtrudedPolygons: boolean;\n    }): void;\n}\n\n/**\n * The implementation of [[IMapRenderingManager]] to instantiate in [[MapView]] and manage the map\n * rendering.\n */\nexport class MapRenderingManager implements IMapRenderingManager {\n    bloom = {\n        enabled: false,\n        strength: 1.5,\n        radius: 0.4,\n        threshold: 0.85\n    };\n    outline = {\n        enabled: false,\n        thickness: 0.005,\n        color: \"#000000\",\n        ghostExtrudedPolygons: false,\n        needsUpdate: false\n    };\n    vignette = {\n        enabled: false,\n        offset: 1.0,\n        darkness: 1.0\n    };\n    sepia = {\n        enabled: false,\n        amount: 0.5\n    };\n\n    private m_width: number = 1;\n    private m_height: number = 1;\n\n    private m_outlineEffect?: OutlineEffect;\n    private m_msaaPass: MSAARenderPass;\n    private m_renderPass: RenderPass = new RenderPass();\n    private m_target1: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_target2: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_bloomPass?: BloomPass;\n    private m_sepiaPass: ShaderPass = new ShaderPass(SepiaShader);\n    private m_vignettePass: ShaderPass = new ShaderPass(VignetteShader);\n    private m_readBuffer: THREE.WebGLRenderTarget;\n    private m_dynamicMsaaSamplingLevel: MSAASampling;\n    private m_staticMsaaSamplingLevel: MSAASampling;\n    private m_lowResPass: LowResRenderPass;\n\n    /**\n     * The constructor of `MapRenderingManager`.\n     *\n     * @param width Width of the frame buffer.\n     * @param height Height of the frame buffer.\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     * @param antialiasSetting The object defining the demeanor of MSAA.\n     */\n    constructor(\n        width: number,\n        height: number,\n        lowResPixelRatio: number | undefined,\n        antialiasSettings: IMapAntialiasSettings | undefined = { msaaEnabled: false }\n    ) {\n        this.m_readBuffer = new THREE.WebGLRenderTarget(width, height);\n        this.m_msaaPass = new MSAARenderPass();\n        this.m_msaaPass.enabled =\n            antialiasSettings !== undefined ? antialiasSettings.msaaEnabled === true : false;\n        this.m_dynamicMsaaSamplingLevel =\n            antialiasSettings.dynamicMsaaSamplingLevel === undefined\n                ? DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.dynamicMsaaSamplingLevel;\n        this.m_staticMsaaSamplingLevel =\n            antialiasSettings.staticMsaaSamplingLevel === undefined\n                ? DEFAULT_STATIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.staticMsaaSamplingLevel;\n        this.m_lowResPass = new LowResRenderPass(lowResPixelRatio);\n        this.m_lowResPass.enabled = lowResPixelRatio !== undefined;\n    }\n\n    updateOutline(options: { thickness: number; color: string; ghostExtrudedPolygons: boolean }) {\n        this.outline.color = options.color;\n        this.outline.thickness = options.thickness;\n        this.outline.ghostExtrudedPolygons = options.ghostExtrudedPolygons;\n        this.outline.needsUpdate = true;\n    }\n\n    /**\n     * The method to call to render the map with the `MapRenderingManager` instance. It contains the\n     * chain of sub-passes that can transfer the write and read buffers, and other sheer rendering\n     * conditions as disabling AA when a high DPI device is in use.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param scene The ThreeJS Scene instance containing the map objects to render.\n     * @param camera The ThreeJS Camera instance to render the scene through.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean\n    ) {\n        const target = null;\n        if (!isStaticFrame && this.m_lowResPass.pixelRatio !== undefined) {\n            // Not designed to be combined with our own MSAA\n            this.m_lowResPass.renderToScreen = true;\n            this.m_lowResPass.render(renderer, scene, camera, target, this.m_readBuffer);\n            return;\n        }\n\n        const usePostEffects =\n            this.bloom.enabled ||\n            this.outline.enabled ||\n            this.vignette.enabled ||\n            this.sepia.enabled;\n\n        let activeTarget: null | THREE.WebGLRenderTarget = null;\n\n        // 1. If the bloom is enabled, clear the depth.\n        if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n            renderer.setRenderTarget(this.m_target1);\n            renderer.clearDepth();\n        }\n\n        // 2. Render the map.\n\n        if (this.m_msaaPass.enabled) {\n            // Use a higher MSAA sampling level for static rendering.\n            this.m_msaaPass.samplingLevel = isStaticFrame\n                ? this.m_staticMsaaSamplingLevel\n                : this.m_dynamicMsaaSamplingLevel;\n            // MSAA is the only effect for the moment.\n            this.m_msaaPass.renderToScreen = !usePostEffects;\n            // Render to the specified target with the MSAA pass.\n            this.m_msaaPass.render(renderer, scene, camera, target, this.m_readBuffer);\n        } else {\n            if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n                activeTarget = this.m_target1;\n                this.m_renderPass.render(renderer, scene, camera, this.m_target1, null!);\n            } else if (!this.outline.enabled || (this.outline.enabled && !this.bloom.enabled)) {\n                renderer.render(scene, camera);\n            }\n        }\n\n        // 3. Apply effects\n        if (this.outline.enabled) {\n            if (this.m_outlineEffect === undefined) {\n                this.m_outlineEffect = new OutlineEffect(renderer);\n            }\n            if (this.outline.needsUpdate) {\n                this.m_outlineEffect.color = this.outline.color;\n                this.m_outlineEffect.thickness = this.outline.thickness;\n                this.m_outlineEffect.ghostExtrudedPolygons = this.outline.ghostExtrudedPolygons;\n                this.outline.needsUpdate = false;\n            }\n            const nextEffectEnabled =\n                this.bloom.enabled || this.vignette.enabled || this.sepia.enabled;\n            if (nextEffectEnabled) {\n                activeTarget = this.m_target1;\n            }\n            renderer.setRenderTarget(nextEffectEnabled ? activeTarget : null!);\n            this.m_outlineEffect.render(scene, camera);\n        }\n\n        if (this.bloom.enabled) {\n            if (this.m_bloomPass === undefined) {\n                this.m_bloomPass = new BloomPass(\n                    new THREE.Vector2(this.m_width, this.m_height),\n                    this.bloom.strength,\n                    this.bloom.radius,\n                    this.bloom.threshold\n                );\n            }\n            const nextEffectEnabled = this.vignette.enabled || this.sepia.enabled;\n            this.m_bloomPass.renderToScreen = !nextEffectEnabled;\n            this.m_bloomPass.radius = this.bloom.radius;\n            this.m_bloomPass.strength = this.bloom.strength;\n            this.m_bloomPass.threshold = this.bloom.threshold;\n            this.m_bloomPass.render(renderer, scene, camera, null!, activeTarget!);\n        } else if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.dispose();\n            this.m_bloomPass = undefined;\n        }\n\n        if (this.vignette.enabled) {\n            const oldTarget = activeTarget!;\n            const nextEffectEnabled = this.sepia.enabled;\n            this.m_vignettePass.uniforms.offset.value = this.vignette.offset;\n            this.m_vignettePass.uniforms.darkness.value = this.vignette.darkness;\n            this.m_vignettePass.renderToScreen = !nextEffectEnabled;\n            if (nextEffectEnabled) {\n                activeTarget = activeTarget === this.m_target1 ? this.m_target2 : this.m_target1;\n            }\n            this.m_vignettePass.render(renderer, scene, camera, activeTarget!, oldTarget);\n        }\n\n        if (this.sepia.enabled) {\n            this.m_sepiaPass.renderToScreen = true;\n            this.m_sepiaPass.uniforms.amount.value = this.sepia.amount;\n            this.m_sepiaPass.render(renderer, scene, camera, null!, activeTarget!);\n        }\n    }\n\n    /**\n     * The resize function to call on resize events to resize the render targets. It shall include\n     * the resize methods of all the sub-passes used in `MapRenderingManager`.\n     *\n     * @param width New width to use.\n     * @param height New height to use.\n     */\n    setSize(width: number, height: number) {\n        this.m_readBuffer.setSize(width, height);\n        this.m_msaaPass.setSize(width, height);\n        if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.setSize(width, height);\n        }\n        this.m_lowResPass.setSize(width, height);\n        this.m_target1.setSize(width, height);\n        this.m_target2.setSize(width, height);\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    /**\n     * The `lowResPixelRatio` determines the resolution of the internal `WebGLRenderTarget`. Values\n     * between 0.5 and `window.devicePixelRatio` can be tried to give  good results. A value of\n     * `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     */\n    get lowResPixelRatio(): number | undefined {\n        return this.m_lowResPass.pixelRatio;\n    }\n\n    set lowResPixelRatio(pixelRatio: number | undefined) {\n        this.m_lowResPass.pixelRatio = pixelRatio;\n        this.m_lowResPass.enabled = pixelRatio !== undefined;\n    }\n\n    /**\n     * Set the level of sampling while the user interacts.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set dynamicMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_dynamicMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined during continuous rendering.\n     */\n    get dynamicMsaaSamplingLevel(): MSAASampling {\n        return this.m_dynamicMsaaSamplingLevel;\n    }\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     *\n     * @param value If `true`, MSAA is enabled, disabled otherwise.\n     */\n    set msaaEnabled(value: boolean) {\n        this.m_msaaPass.enabled = value;\n    }\n\n    /**\n     * Return whether the MSAA is enabled.\n     */\n    get msaaEnabled(): boolean {\n        return this.m_msaaPass.enabled;\n    }\n\n    /**\n     * Set the sampling level for rendering static frames.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set staticMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_staticMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined for rendering static frames.\n     */\n\n    get staticMsaaSamplingLevel(): MSAASampling {\n        return this.m_staticMsaaSamplingLevel;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyMaterial, CopyShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * The `LowResRenderPass` renders the scene at a lower resolution into an internal\n * `WebGLRenderTarget`, and then copies the result into the frame buffer. The size of the internal\n * buffer is determined by the current frame buffer size multiplied by `pixelRatio`.\n *\n * @note Since no anti-aliasing is applied during dynamic rendering, visual artifacts may be\n * visible.\n */\nexport class LowResRenderPass extends Pass {\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new CopyMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n    private m_pixelRatio: number | undefined;\n    private m_savedWidth = 0;\n    private m_savedHeight = 0;\n\n    /**\n     * The constructor for `LowResRenderPass`. It builds an internal scene with a camera looking at\n     * a quad.\n     *\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     */\n    constructor(public lowResPixelRatio?: number) {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n        this.m_pixelRatio = lowResPixelRatio;\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        this.m_quadMaterial.dispose();\n        this.m_quad.geometry.dispose();\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     *\n     * @default `undefined`\n     */\n    set pixelRatio(ratio: number | undefined) {\n        this.m_pixelRatio = ratio;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio)\n            );\n        }\n    }\n\n    get pixelRatio(): number | undefined {\n        return this.m_pixelRatio;\n    }\n\n    /**\n     * The render function of `LowResRenderPass`. It renders the whole scene into an internal\n     * `WebGLRenderTarget` instance with a lower resolution, using the passed in `WebGLRenderer`.\n     * The low resolution image is then copied to the `writeBuffer`, which is `undefined` in case it\n     * is the screen.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled || this.pixelRatio === undefined) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_savedWidth = readBuffer.width;\n            this.m_savedHeight = readBuffer.height;\n            this.m_renderTarget = new THREE.WebGLRenderTarget(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio),\n                {\n                    minFilter: THREE.LinearFilter,\n                    magFilter: THREE.LinearFilter,\n                    format: THREE.RGBAFormat,\n                    depthBuffer: true,\n                    stencilBuffer: true\n                }\n            );\n            this.m_renderTarget.texture.name = \"LowResRenderPass.sample\";\n        }\n\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n        this.m_quadUniforms.opacity.value = 1.0;\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        renderer.setRenderTarget(this.m_renderTarget);\n        renderer.clear();\n        // Render into the low resolution internal render target.\n        renderer.render(scene, camera);\n\n        // Render the low resolution target into the screen.\n        // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.clear();\n        renderer.render(this.m_quadScene, this.m_localCamera);\n        renderer.setRenderTarget(oldRenderTarget);\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified. The size of internal\n     * buffer depends on the `pixelRatio`.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        this.m_savedWidth = width;\n        this.m_savedHeight = height;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(width * this.pixelRatio),\n                Math.floor(height * this.pixelRatio)\n            );\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { chainCallbacks } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst vertexShaderChunk = `\n    uniform float outlineThickness;\n\n    vec4 calculateOutline( vec4 pos, vec3 objectNormal, vec4 skinned ) {\n\n        float thickness = outlineThickness;\n        const float ratio = 1.0;\n        vec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + objectNormal, 1.0 );\n        vec4 norm = normalize( pos - pos2 );\n        return pos + norm * thickness * pos.w * ratio;\n\n    }`;\n\nconst vertexShaderChunk2 = `\n    #if ! defined( LAMBERT ) && ! defined( PHONG ) && ! defined( TOON ) && ! defined( STANDARD )\n        #ifndef USE_ENVMAP\n            vec3 objectNormal = normalize( normal );\n        #endif\n    #endif\n\n    #ifdef FLIP_SIDED\n        objectNormal = -objectNormal;\n    #endif\n\n    #ifdef DECLARE_TRANSFORMED\n        vec3 transformed = vec3( position );\n    #endif\n\n    gl_Position = calculateOutline( gl_Position, objectNormal, vec4( transformed, 1.0 ) );\n\n    #include <fog_vertex>`;\n\nconst fragmentShader = `\n    #include <common>\n    #include <fog_pars_fragment>\n\n    uniform vec3 outlineColor;\n    uniform float outlineAlpha;\n\n    void main() {\n\n        gl_FragColor = vec4( outlineColor, outlineAlpha );\n\n        #include <fog_fragment>\n\n    }`;\n\nexport class OutlineEffect {\n    enabled: boolean = true;\n\n    autoClear: boolean;\n    domElement: HTMLCanvasElement;\n    shadowMap: THREE.WebGLShadowMap;\n\n    private m_defaultThickness: number = 0.02;\n    private m_defaultColor: THREE.Color = new THREE.Color(0, 0, 0);\n    private m_defaultAlpha: number = 1;\n    private m_defaultKeepAlive: boolean = false;\n    private m_ghostExtrudedPolygons: boolean = false;\n\n    private m_cache: any = {};\n    private m_removeThresholdCount: number = 60;\n    private m_originalMaterials: any = {};\n    private m_originalOnBeforeRenders: any = {};\n\n    private m_shaderIDs: { [key: string]: string } = {\n        MeshBasicMaterial: \"basic\",\n        MeshLambertMaterial: \"lambert\",\n        MeshPhongMaterial: \"phong\",\n        MeshToonMaterial: \"phong\",\n        MeshStandardMaterial: \"physical\",\n        MeshPhysicalMaterial: \"physical\"\n    };\n    private m_uniformsChunk = {\n        outlineThickness: { value: this.m_defaultThickness },\n        outlineColor: { value: this.m_defaultColor },\n        outlineAlpha: { value: this.m_defaultAlpha }\n    };\n\n    constructor(private m_renderer: THREE.WebGLRenderer) {\n        this.autoClear = m_renderer.autoClear;\n        this.domElement = m_renderer.domElement;\n        this.shadowMap = m_renderer.shadowMap;\n    }\n\n    set thickness(thickness: number) {\n        this.m_defaultThickness = thickness;\n        this.m_uniformsChunk.outlineThickness.value = thickness;\n        this.m_cache = {};\n    }\n\n    set color(color: string) {\n        this.m_defaultColor.set(color);\n        this.m_cache = {};\n    }\n\n    set ghostExtrudedPolygons(ghost: boolean) {\n        this.m_ghostExtrudedPolygons = ghost;\n    }\n\n    clear(color: boolean, depth: boolean, stencil: boolean) {\n        this.m_renderer.clear(color, depth, stencil);\n    }\n\n    getPixelRatio() {\n        return this.m_renderer.getPixelRatio();\n    }\n\n    setPixelRatio(value: number) {\n        this.m_renderer.setPixelRatio(value);\n    }\n\n    getSize(target: THREE.Vector2) {\n        return this.m_renderer.getSize(target);\n    }\n\n    setSize(width: number, height: number, updateStyle: boolean) {\n        this.m_renderer.setSize(width, height, updateStyle);\n    }\n\n    setViewport(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setViewport(x, y, width, height);\n    }\n\n    setScissor(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setScissor(x, y, width, height);\n    }\n\n    setScissorTest(boolean: boolean) {\n        this.m_renderer.setScissorTest(boolean);\n    }\n\n    setRenderTarget(renderTarget: THREE.WebGLRenderTarget) {\n        this.m_renderer.setRenderTarget(renderTarget);\n    }\n\n    render(scene: THREE.Scene, camera: THREE.Camera) {\n        // Re-rendering the scene with the outline effect enables to hide the\n        // extruded polygons and show only the outlines (it is a hack and should be\n        // implemented another way!).\n        if (this.m_ghostExtrudedPolygons) {\n            if (!this.enabled) {\n                this.m_renderer.render(scene, camera);\n                return;\n            }\n\n            const currentAutoClear = this.m_renderer.autoClear;\n            this.m_renderer.autoClear = this.autoClear;\n\n            this.m_renderer.render(scene, camera);\n\n            this.m_renderer.autoClear = currentAutoClear;\n        }\n\n        this.renderOutline(scene, camera);\n    }\n\n    renderOutline(scene: THREE.Scene, camera: THREE.Camera) {\n        const currentAutoClear = this.m_renderer.autoClear;\n        const currentSceneAutoUpdate = scene.autoUpdate;\n        const currentSceneBackground = scene.background;\n        const currentShadowMapEnabled = this.m_renderer.shadowMap.enabled;\n\n        scene.autoUpdate = false;\n        scene.background = null;\n        this.m_renderer.autoClear = false;\n        this.m_renderer.shadowMap.enabled = false;\n\n        scene.traverse(this.setOutlineMaterial.bind(this));\n\n        this.m_renderer.render(scene, camera);\n\n        scene.traverse(this.restoreOriginalMaterial.bind(this));\n\n        this.cleanupCache();\n\n        scene.autoUpdate = currentSceneAutoUpdate;\n        scene.background = currentSceneBackground;\n        this.m_renderer.autoClear = currentAutoClear;\n        this.m_renderer.shadowMap.enabled = currentShadowMapEnabled;\n    }\n\n    private createInvisibleMaterial() {\n        return new THREE.ShaderMaterial({ name: \"invisible\", visible: false });\n    }\n\n    private createMaterial(originalMaterial: THREE.Material) {\n        const shaderID = this.m_shaderIDs[originalMaterial.type];\n        let originalUniforms;\n        let originalVertexShader;\n\n        if (shaderID !== undefined) {\n            const shader = THREE.ShaderLib[shaderID];\n            originalUniforms = shader.uniforms;\n            originalVertexShader = shader.vertexShader;\n        } else if ((originalMaterial as any).isRawShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n\n            if (\n                !/attribute\\s+vec3\\s+position\\s*;/.test(originalVertexShader) ||\n                !/attribute\\s+vec3\\s+normal\\s*;/.test(originalVertexShader)\n            ) {\n                return this.createInvisibleMaterial();\n            }\n        } else if ((originalMaterial as any).isShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n        } else {\n            return this.createInvisibleMaterial();\n        }\n\n        const uniforms = { ...originalUniforms, ...this.m_uniformsChunk };\n\n        const vertexShader = originalVertexShader\n            // put vertexShaderChunk right before \"void main() {...}\"\n            .replace(/void\\s+main\\s*\\(\\s*\\)/, vertexShaderChunk + \"\\nvoid main()\")\n            // put vertexShaderChunk2 the end of \"void main() {...}\"\n            // Note: here assums originalVertexShader ends with \"}\" of \"void main() {...}\"\n            .replace(/\\}\\s*$/, vertexShaderChunk2 + \"\\n}\")\n            // remove any light related lines\n            // Note: here is very sensitive to originalVertexShader\n            // TODO: consider safer way\n            .replace(/#include\\s+<[\\w_]*light[\\w_]*>/g, \"\");\n\n        const defines = {};\n\n        if (\n            !/vec3\\s+transformed\\s*=/.test(originalVertexShader) &&\n            !/#include\\s+<begin_vertex>/.test(originalVertexShader)\n        ) {\n            (defines as any).DECLARE_TRANSFORMED = true;\n        }\n\n        return new THREE.ShaderMaterial({\n            defines,\n            uniforms,\n            vertexShader,\n            fragmentShader,\n            side: THREE.BackSide,\n            //wireframe: true,\n            skinning: false,\n            morphTargets: false,\n            morphNormals: false,\n            fog: false\n        });\n    }\n\n    private getOutlineMaterialFromCache(originalMaterial: THREE.Material) {\n        let data = this.m_cache[originalMaterial.uuid];\n\n        if (data === undefined) {\n            data = {\n                material: this.createMaterial(originalMaterial),\n                used: true,\n                keepAlive: this.m_defaultKeepAlive,\n                count: 0\n            };\n\n            this.m_cache[originalMaterial.uuid] = data;\n        }\n\n        data.used = true;\n\n        return data.material;\n    }\n\n    private getOutlineMaterial(originalMaterial: THREE.Material) {\n        const outlineMaterial = this.getOutlineMaterialFromCache(originalMaterial);\n\n        this.m_originalMaterials[outlineMaterial.uuid] = originalMaterial;\n\n        this.updateOutlineMaterial(outlineMaterial, originalMaterial);\n\n        return outlineMaterial;\n    }\n\n    private setOutlineMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.getOutlineMaterial(\n                    ((object as THREE.Mesh).material as THREE.Material[])[i]\n                );\n            }\n        } else {\n            (object as THREE.Mesh).material = this.getOutlineMaterial(\n                (object as THREE.Mesh).material as THREE.Material\n            );\n        }\n\n        this.m_originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            this.onBeforeRender.bind(this)\n        );\n    }\n\n    private restoreOriginalMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.m_originalMaterials[\n                    ((object as THREE.Mesh).material as THREE.Material[])[i].uuid\n                ];\n            }\n        } else {\n            (object as THREE.Mesh).material = this.m_originalMaterials[\n                ((object as THREE.Mesh).material as THREE.Material).uuid\n            ];\n        }\n\n        object.onBeforeRender = this.m_originalOnBeforeRenders[object.uuid];\n    }\n\n    private onBeforeRender(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        material: THREE.Material,\n        group: THREE.Group\n    ) {\n        const originalMaterial = this.m_originalMaterials[material.uuid];\n\n        // just in case\n        if (originalMaterial === undefined) {\n            return;\n        }\n\n        this.updateUniforms(material, originalMaterial);\n    }\n\n    private updateUniforms(material: THREE.Material, originalMaterial: THREE.Material) {\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).uniforms.outlineAlpha.value = originalMaterial.opacity;\n\n        if (outlineParameters !== undefined) {\n            if (outlineParameters.thickness !== undefined) {\n                (material as any).uniforms.outlineThickness.value = outlineParameters.thickness;\n            }\n            if (outlineParameters.color !== undefined) {\n                (material as any).uniforms.outlineColor.value.fromArray(outlineParameters.color);\n            }\n            if (outlineParameters.alpha !== undefined) {\n                (material as any).uniforms.outlineAlpha.value = outlineParameters.alpha;\n            }\n        }\n    }\n\n    private updateOutlineMaterial(material: THREE.Material, originalMaterial: THREE.Material) {\n        if (material.name === \"invisible\") {\n            return;\n        }\n\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).skinning = (originalMaterial as any).skinning;\n        (material as any).morphTargets = (originalMaterial as any).morphTargets;\n        (material as any).morphNormals = (originalMaterial as any).morphNormals;\n        material.fog = originalMaterial.fog;\n\n        if (outlineParameters !== undefined) {\n            material.visible =\n                originalMaterial.visible === false\n                    ? false\n                    : outlineParameters.visible !== undefined\n                    ? outlineParameters.visible\n                    : true;\n\n            material.transparent =\n                outlineParameters.alpha !== undefined && outlineParameters.alpha < 1.0\n                    ? true\n                    : originalMaterial.transparent;\n\n            if (outlineParameters.keepAlive !== undefined) {\n                this.m_cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n            }\n        } else {\n            material.transparent = originalMaterial.transparent;\n            material.visible = originalMaterial.visible;\n        }\n\n        if ((originalMaterial as any).wireframe === true || originalMaterial.depthTest === false) {\n            material.visible = false;\n        }\n    }\n\n    private cleanupCache() {\n        let keys;\n\n        // clear originialMaterials\n        keys = Object.keys(this.m_originalMaterials);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalMaterials[keys[i]] = undefined;\n        }\n\n        // clear originalOnBeforeRenders\n        keys = Object.keys(this.m_originalOnBeforeRenders);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalOnBeforeRenders[keys[i]] = undefined;\n        }\n\n        // remove unused outlineMaterial from cache\n        keys = Object.keys(this.m_cache);\n\n        for (const key of keys) {\n            if (this.m_cache[key].used === false) {\n                this.m_cache[key].count++;\n\n                if (\n                    this.m_cache[key].keepAlive === false &&\n                    this.m_cache[key].count > this.m_removeThresholdCount\n                ) {\n                    delete this.m_cache[key];\n                }\n            } else {\n                this.m_cache[key].used = false;\n                this.m_cache[key].count = 0;\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CopyShader, LuminosityHighPassShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\nimport { Pass } from \"./Pass\";\n\nconst BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nconst BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\n/**\n * The TS version of ThreeJS's UnrealBloomPass.\n */\nexport class BloomPass extends Pass {\n    strength: number;\n    radius: number;\n    threshold: number;\n    resolution: THREE.Vector2 = new THREE.Vector2(256, 256);\n    private m_renderTargetsHorizontal: THREE.WebGLRenderTarget[] = [];\n    private m_renderTargetsVertical: THREE.WebGLRenderTarget[] = [];\n    private m_nMips: number = 5;\n    private m_highPassUniforms: any;\n    private m_materialHighPassFilter: THREE.ShaderMaterial;\n    private m_separableBlurMaterials: THREE.ShaderMaterial[] = [];\n    private m_materialCopy: THREE.ShaderMaterial;\n    private m_copyUniforms: any;\n    private m_compositeMaterial: THREE.ShaderMaterial;\n\n    private m_camera: THREE.OrthographicCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    private m_scene: THREE.Scene = new THREE.Scene();\n    private m_basic = new THREE.MeshBasicMaterial();\n    private m_quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2));\n\n    private m_bloomTintColors: THREE.Vector3[] = [\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1)\n    ];\n\n    private m_renderTargetBright: THREE.WebGLRenderTarget;\n\n    constructor(resolution: THREE.Vector2, strength: number, radius: number, threshold: number) {\n        super();\n\n        this.strength = strength;\n        this.radius = radius;\n        this.threshold = threshold;\n        this.resolution = resolution;\n\n        this.m_quad.frustumCulled = false;\n        this.m_scene.add(this.m_quad);\n\n        const pars = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        };\n\n        let resx = Math.round(this.resolution.x / 2);\n        let resy = Math.round(this.resolution.y / 2);\n\n        this.m_renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n        this.m_renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n        this.m_renderTargetBright.texture.generateMipmaps = false;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            const renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n            renderTargetHorizonal.texture.generateMipmaps = false;\n            this.m_renderTargetsHorizontal.push(renderTargetHorizonal);\n\n            const renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n            renderTargetVertical.texture.generateMipmaps = false;\n            this.m_renderTargetsVertical.push(renderTargetVertical);\n\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        this.m_highPassUniforms = THREE.UniformsUtils.clone(LuminosityHighPassShader.uniforms);\n\n        // tslint:disable:no-string-literal\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = threshold;\n        this.m_highPassUniforms[\"smoothWidth\"].value = 0.01;\n\n        this.m_materialHighPassFilter = new THREE.ShaderMaterial({\n            uniforms: this.m_highPassUniforms,\n            vertexShader: LuminosityHighPassShader.vertexShader,\n            fragmentShader: LuminosityHighPassShader.fragmentShader,\n            defines: {}\n        });\n\n        // Gaussian Blur Materials\n        const kernelSizeArray = [3, 5, 7, 9, 11];\n        resx = Math.round(this.resolution.x / 2);\n        resy = Math.round(this.resolution.y / 2);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        // Composite material\n        this.m_compositeMaterial = this.getCompositeMaterial(this.m_nMips);\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture1\"\n        ].value = this.m_renderTargetsVertical[0].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture2\"\n        ].value = this.m_renderTargetsVertical[1].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture3\"\n        ].value = this.m_renderTargetsVertical[2].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture4\"\n        ].value = this.m_renderTargetsVertical[3].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture5\"\n        ].value = this.m_renderTargetsVertical[4].texture;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n        this.m_compositeMaterial.needsUpdate = true;\n\n        const bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n        this.m_compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        this.m_copyUniforms = THREE.UniformsUtils.clone(CopyShader.uniforms);\n        this.m_copyUniforms[\"opacity\"].value = 1.0;\n        // tslint:enable:no-string-literal\n\n        this.m_materialCopy = new THREE.ShaderMaterial({\n            uniforms: this.m_copyUniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false,\n            transparent: true\n        });\n    }\n    dispose() {\n        for (const rt of this.m_renderTargetsHorizontal) {\n            rt.dispose();\n        }\n        for (const rt of this.m_renderTargetsVertical) {\n            rt.dispose();\n        }\n        this.m_renderTargetBright.dispose();\n    }\n    /** @override */\n    setSize(width: number, height: number) {\n        let resx = Math.round(width / 2);\n        let resy = Math.round(height / 2);\n        this.m_renderTargetBright.setSize(resx, resy);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_renderTargetsHorizontal[i].setSize(resx, resy);\n            this.m_renderTargetsVertical[i].setSize(resx, resy);\n            // tslint:disable-next-line:no-string-literal\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        // tslint:disable:no-string-literal\n\n        // Render input to screen\n        if (this.renderToScreen) {\n            this.m_quad.material = this.m_basic;\n            this.m_basic.map = readBuffer.texture;\n            renderer.setRenderTarget(null!);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n        }\n\n        // 1. Extract bright areas\n        this.m_highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n        this.m_quad.material = this.m_materialHighPassFilter;\n\n        renderer.setRenderTarget(this.m_renderTargetBright);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // 2. Blur all the mips progressively\n        let inputRenderTarget = this.m_renderTargetBright;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_quad.material = this.m_separableBlurMaterials[i];\n\n            this.m_separableBlurMaterials[i].uniforms[\"colorTexture\"].value =\n                inputRenderTarget.texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionX;\n            renderer.setRenderTarget(this.m_renderTargetsHorizontal[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            this.m_separableBlurMaterials[i].uniforms[\n                \"colorTexture\"\n            ].value = this.m_renderTargetsHorizontal[i].texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionY;\n            renderer.setRenderTarget(this.m_renderTargetsVertical[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            inputRenderTarget = this.m_renderTargetsVertical[i];\n        }\n\n        // Composite all the mips\n        this.m_quad.material = this.m_compositeMaterial;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        renderer.setRenderTarget(this.m_renderTargetsHorizontal[0]);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // Blend it additively over the input texture\n        this.m_quad.material = this.m_materialCopy;\n        this.m_copyUniforms[\"tDiffuse\"].value = this.m_renderTargetsHorizontal[0].texture;\n\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null!);\n            renderer.render(this.m_scene, this.m_camera);\n        } else {\n            renderer.setRenderTarget(readBuffer);\n            renderer.render(this.m_scene, this.m_camera);\n        }\n        // tslint:enable:no-string-literal\n    }\n\n    getSeperableBlurMaterial(kernelRadius: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                KERNEL_RADIUS: kernelRadius,\n                SIGMA: kernelRadius\n            },\n\n            uniforms: {\n                colorTexture: { value: null },\n                texSize: { value: new THREE.Vector2(0.5, 0.5) },\n                direction: { value: new THREE.Vector2(0.5, 0.5) }\n            },\n\n            vertexShader: `varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }`,\n\n            fragmentShader: `#include <common>\n            varying vec2 vUv;\n            uniform sampler2D colorTexture;\n            uniform vec2 texSize;\n            uniform vec2 direction;\n\n            float gaussianPdf(in float x, in float sigma) {\n                return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n            }\n            void main() {\\n\\\n                vec2 invSize = 1.0 / texSize;\n                float fSigma = float(SIGMA);\n                float weightSum = gaussianPdf(0.0, fSigma);\n                vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n                for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n                    float x = float(i);\n                    float w = gaussianPdf(x, fSigma);\n                    vec2 uvOffset = direction * invSize * x;\n                    vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n                    vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n                    diffuseSum += (sample1 + sample2) * w;\n                    weightSum += 2.0 * w;\n                }\n                gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n            }`\n        });\n    }\n\n    getCompositeMaterial(nMips: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                NUM_MIPS: nMips\n            },\n\n            uniforms: {\n                blurTexture1: { value: null },\n                blurTexture2: { value: null },\n                blurTexture3: { value: null },\n                blurTexture4: { value: null },\n                blurTexture5: { value: null },\n                dirtTexture: { value: null },\n                bloomStrength: { value: 1.0 },\n                bloomFactors: { value: null },\n                bloomTintColors: { value: null },\n                bloomRadius: { value: 0.0 }\n            },\n\n            vertexShader: `varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }`,\n\n            fragmentShader: `varying vec2 vUv;\n                uniform sampler2D blurTexture1;\n                uniform sampler2D blurTexture2;\n                uniform sampler2D blurTexture3;\n                uniform sampler2D blurTexture4;\n                uniform sampler2D blurTexture5;\n                uniform sampler2D dirtTexture;\n                uniform float bloomStrength;\n                uniform float bloomRadius;\n                uniform float bloomFactors[NUM_MIPS];\n                uniform vec3 bloomTintColors[NUM_MIPS];\n\n                float lerpBloomFactor(const in float factor) {\n                    float mirrorFactor = 1.2 - factor;\n                    return mix(factor, mirrorFactor, bloomRadius);\n                }\n\n                void main() {\n                    gl_FragColor = bloomStrength * (\nlerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\nlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\nlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\nlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\nlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n                }`\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Message sent by web worker that requests to resolve actual\n * URLs of it's dependencies.\n *\n * Main thread is expected.\n */\nexport interface WorkerBootstrapRequest {\n    type: \"worker-bootstrap-request\";\n\n    /// Names of dependencies, usually NPM package names.\n    dependencies: string[];\n}\n\nexport interface WorkerBootstrapResponse {\n    type: \"worker-bootstrap-response\";\n\n    /// Actual URL scripts requested in [[WorkerBootstrapRequest]].\n    resolvedDependencies: string[];\n}\n\nexport function isWorkerBootstrapRequest(message: any): message is WorkerBootstrapRequest {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-request\" &&\n        Array.isArray(message.dependencies)\n    );\n}\n\nexport function isWorkerBootstrapResponse(message: any): message is WorkerBootstrapResponse {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-response\" &&\n        Array.isArray(message.resolvedDependencies)\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    OrientedBox3,\n    Projection,\n    ProjectionType,\n    TileKey,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DataSource } from \"./DataSource\";\nimport { CalculationStatus, ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { MapTileCuller } from \"./MapTileCuller\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils, TileOffsetUtils } from \"./Utils\";\n\nconst tmpVectors3 = [new THREE.Vector3(), new THREE.Vector3()];\nconst tmpVector4 = new THREE.Vector4();\n\n/**\n * Represents a unique TileKey and the area it takes up on screen.\n *\n * Note, in certain tiling projections, it is possible to have an offset, which represents a tile\n * which has fully wrapped around, hence this defaults to 0 to simplify usage for projections which\n * don't require it.\n */\nexport class TileKeyEntry {\n    constructor(\n        public tileKey: TileKey,\n        public area: number,\n        public offset: number = 0,\n        public minElevation: number = 0,\n        public maxElevation: number = 0,\n        public distance: number = 0\n    ) {}\n}\n\nfunction getGeoBox(tilingScheme: TilingScheme, childTileKey: TileKey, offset: number) {\n    const geoBox = tilingScheme.getGeoBox(childTileKey);\n    const longitudeOffset = 360.0 * offset;\n    geoBox.northEast.longitude += longitudeOffset;\n    geoBox.southWest.longitude += longitudeOffset;\n    return geoBox;\n}\n\n/**\n * Map tile keys to TileKeyEntry.\n * Keys are a combination of morton code and tile offset,\n * see [[TileOffsetUtils.getKeyForTileKeyAndOffset]].\n */\ntype TileKeyEntries = Map<number, TileKeyEntry>;\n\n/**\n * Map zoom level to map of visible tile key entries\n */\ntype ZoomLevelTileKeyMap = Map<number, TileKeyEntries>;\n\n/**\n * Result of frustum intersection\n */\ninterface IntersectionResult {\n    /**\n     * Tiles intersected by the frustum per zoom level.\n     */\n    readonly tileKeyEntries: ZoomLevelTileKeyMap;\n\n    /**\n     * True if the intersection was calculated using precise elevation data, false if it's an\n     * approximation.\n     */\n    calculationFinal: boolean;\n}\n\n/**\n * Computes the tiles intersected by the frustum defined by the current camera setup.\n */\nexport class FrustumIntersection {\n    private readonly m_frustum: THREE.Frustum = new THREE.Frustum();\n    // used to project global coordinates into camera local coordinates\n    private readonly m_viewProjectionMatrix = new THREE.Matrix4();\n    private readonly m_mapTileCuller: MapTileCuller;\n    private m_rootTileKeys: TileKeyEntry[] = [];\n    private readonly m_tileKeyEntries: ZoomLevelTileKeyMap = new Map();\n\n    constructor(\n        private readonly m_camera: THREE.PerspectiveCamera,\n        readonly mapView: MapView,\n        private readonly m_extendedFrustumCulling: boolean,\n        private readonly m_tileWrappingEnabled: boolean,\n        private readonly m_enableMixedLod: boolean\n    ) {\n        this.m_mapTileCuller = new MapTileCuller(m_camera);\n    }\n\n    /**\n     * Return camera used for generating frustum.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * Return projection used to convert geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * Updates the frustum to match the current camera setup.\n     */\n    updateFrustum(projectionMatrixOverride?: THREE.Matrix4) {\n        this.m_viewProjectionMatrix.multiplyMatrices(\n            projectionMatrixOverride !== undefined\n                ? projectionMatrixOverride\n                : this.m_camera.projectionMatrix,\n            this.m_camera.matrixWorldInverse\n        );\n\n        this.m_frustum.setFromMatrix(this.m_viewProjectionMatrix);\n\n        if (this.m_extendedFrustumCulling) {\n            this.m_mapTileCuller.setup();\n        }\n        this.computeRequiredInitialRootTileKeys(this.m_camera.position);\n    }\n\n    /**\n     * Computes the tiles intersected by the updated frustum, see [[updateFrustum]].\n     *\n     * @param tilingScheme The tiling scheme used to generate the tiles.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @param zoomLevels A list of zoom levels to render.\n     * @param dataSources A list of data sources to render.\n     * @returns The computation result, see [[FrustumIntersection.Result]].\n     */\n    compute(\n        tilingScheme: TilingScheme,\n        elevationRangeSource: ElevationRangeSource | undefined,\n        zoomLevels: number[],\n        dataSources: DataSource[]\n    ): IntersectionResult {\n        this.m_tileKeyEntries.clear();\n        let calculationFinal = true;\n\n        // Compute target tile area in clip space size.\n        // A tile should take up roughly 256x256 pixels on screen in accordance to\n        // the zoom level chosen by [MapViewUtils.calculateZoomLevelFromDistance].\n        assert(this.mapView.viewportHeight !== 0);\n        const targetTileArea = Math.pow(256 / this.mapView.viewportHeight, 2);\n        const obbIntersections = this.mapView.projection.type === ProjectionType.Spherical;\n        const tileBounds = obbIntersections ? new OrientedBox3() : new THREE.Box3();\n        const uniqueZoomLevels = new Set(zoomLevels);\n\n        // create tile key map per zoom level\n        for (const zoomLevel of uniqueZoomLevels) {\n            this.m_tileKeyEntries.set(zoomLevel, new Map());\n        }\n\n        for (const item of this.m_rootTileKeys) {\n            const tileKeyEntry = new TileKeyEntry(\n                item.tileKey,\n                Infinity,\n                item.offset,\n                item.minElevation,\n                item.maxElevation\n            );\n\n            for (const zoomLevel of uniqueZoomLevels) {\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.set(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(item.tileKey, item.offset),\n                    tileKeyEntry\n                );\n            }\n        }\n\n        const useElevationRangeSource: boolean =\n            elevationRangeSource !== undefined &&\n            elevationRangeSource.getTilingScheme() === tilingScheme;\n        const workList = [...this.m_rootTileKeys.values()];\n\n        while (workList.length > 0) {\n            const tileEntry = workList.pop();\n\n            if (tileEntry === undefined) {\n                break;\n            }\n\n            // Stop subdivision if hightest visible level is reached\n            const tileKey = tileEntry.tileKey;\n            const subdivide = dataSources.some((ds, i) =>\n                ds.shouldSubdivide(zoomLevels[i], tileKey)\n            );\n            if (!subdivide) {\n                continue;\n            }\n\n            // Stop subdivision if area of tile is too small(mixed LOD only)\n            if (this.m_enableMixedLod && tileEntry.area < targetTileArea) {\n                continue;\n            }\n\n            const parentTileKey = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                tileKey,\n                tileEntry.offset\n            );\n\n            // delete parent tile key from applicable zoom levels\n            for (const zoomLevel of uniqueZoomLevels) {\n                if (tileKey.level >= zoomLevel) {\n                    continue;\n                }\n\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.delete(parentTileKey);\n            }\n\n            for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n                const offset = tileEntry.offset;\n                const tileKeyAndOffset = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    childTileKey,\n                    offset\n                );\n\n                const geoBox = getGeoBox(tilingScheme, childTileKey, offset);\n\n                // For tiles without elevation range source, default 0 (getGeoBox always\n                // returns box with altitude min/max equal to zero) will be propagated as\n                // min and max elevation, these tiles most probably contains features that\n                // lays directly on the ground surface.\n                if (useElevationRangeSource) {\n                    const range = elevationRangeSource!.getElevationRange(childTileKey);\n                    geoBox.southWest.altitude = range.minElevation;\n                    geoBox.northEast.altitude = range.maxElevation;\n                    calculationFinal =\n                        calculationFinal &&\n                        range.calculationStatus === CalculationStatus.FinalPrecise;\n                }\n\n                this.mapView.projection.projectBox(geoBox, tileBounds);\n                const { area, distance } = this.computeTileAreaAndDistance(tileBounds);\n\n                if (area > 0) {\n                    const subTileEntry = new TileKeyEntry(\n                        childTileKey,\n                        area,\n                        offset,\n                        geoBox.southWest.altitude, // minElevation\n                        geoBox.northEast.altitude, // maxElevation\n                        distance\n                    );\n\n                    // insert sub tile entry into tile entries map per zoom level\n                    for (const zoomLevel of uniqueZoomLevels) {\n                        if (subTileEntry.tileKey.level > zoomLevel) {\n                            continue;\n                        }\n\n                        const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                        tileKeyEntries.set(tileKeyAndOffset, subTileEntry);\n                    }\n\n                    workList.push(subTileEntry);\n                }\n            }\n        }\n        return { tileKeyEntries: this.m_tileKeyEntries, calculationFinal };\n    }\n\n    /**\n     * Estimate screen space area of tile and distance to center of tile\n     * @param tileBounds The bounding volume of a tile\n     * @return Area estimate and distance to tile center in clip space\n     */\n    private computeTileAreaAndDistance(\n        tileBounds: THREE.Box3 | OrientedBox3\n    ): { area: number; distance: number } {\n        if (tileBounds instanceof THREE.Box3) {\n            if (\n                (this.m_extendedFrustumCulling &&\n                    !this.m_mapTileCuller.frustumIntersectsTileBox(tileBounds)) ||\n                !this.m_frustum.intersectsBox(tileBounds)\n            ) {\n                return {\n                    area: 0,\n                    distance: Infinity\n                };\n            }\n        } else if (!tileBounds.intersects(this.m_frustum)) {\n            return {\n                area: 0,\n                distance: Infinity\n            };\n        }\n\n        // Project tile bounds center\n        const center = tileBounds.getCenter(tmpVectors3[0]);\n        const projectedPoint = tmpVector4\n            .set(center.x, center.y, center.z, 1.0)\n            .applyMatrix4(this.m_viewProjectionMatrix);\n\n        // Estimate objects screen space size with diagonal of bounds\n        // Dividing by w projects object size to screen space\n        const size = tileBounds.getSize(tmpVectors3[1]);\n        const objectSize = (0.5 * size.length()) / projectedPoint.w;\n\n        return {\n            area: objectSize * objectSize,\n            distance: projectedPoint.z / projectedPoint.w\n        };\n    }\n\n    /**\n     * Create a list of root nodes to test against the frustum. The root nodes each start at level 0\n     * and have an offset (see [[Tile]]) based on:\n     * - the current position [[worldCenter]].\n     * - the height of the camera above the world.\n     * - the field of view of the camera (the maximum value between the horizontal / vertical\n     *   values)\n     * - the tilt of the camera (because we see more tiles when tilted).\n     *\n     * @param worldCenter The center of the camera in world space.\n     */\n    private computeRequiredInitialRootTileKeys(worldCenter: THREE.Vector3) {\n        this.m_rootTileKeys = [];\n        const rootTileKey = TileKey.fromRowColumnLevel(0, 0, 0);\n        const tileWrappingEnabled = this.mapView.projection.type === ProjectionType.Planar;\n\n        if (!tileWrappingEnabled || !this.m_tileWrappingEnabled) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, 0, 0));\n            return;\n        }\n\n        const worldGeoPoint = this.mapView.projection.unprojectPoint(worldCenter);\n        const startOffset = Math.round(worldGeoPoint.longitude / 360.0);\n\n        // This algorithm computes the number of offsets we need to test. The following diagram may\n        // help explain the algorithm below.\n        //\n        //   |🎥\n        //   |.\\ .\n        //   | . \\  .\n        // z |  .  \\   .c2\n        //   |  c1.  \\b    .\n        //   |     .   \\      .\n        //___|a___d1.____\\e______.d2______f\n        //\n        // Where:\n        // - 🎥 is the camera\n        // - z is the height of the camera above the ground.\n        // - a is a right angle.\n        // - b is the look at vector of the camera.\n        // - c1 and c2 are the frustum planes of the camera.\n        // - c1 to c2 is the fov.\n        // - d1 and d2 are the intersection points of the frustum with the world plane.\n        // - e is the tilt/pitch of the camera.\n        // - f is the world\n        //\n        // The goal is to find the distance from e->d2. This is a longitude value, and we convert it\n        // to some offset range. Note e->d2 >= e->d1 (because we can't have a negative tilt).\n        // To find e->d2, we use the right triangle 🎥, a, d2 and subtract the distance a->d2 with\n        // a->e.\n        // a->d2 is found using the angle between a and d2 from the 🎥, this is simply e (because of\n        // similar triangles, angle between a, 🎥 and e equals the tilt) + half of the fov (because\n        // we need the angle between e, 🎥 and d2) and using trigonometry, result is therefore:\n        // (tan(a->d2) * z).\n        // a->e needs just the tilt and trigonometry to compute, result is: (tan(a->e) * z).\n\n        const camera = this.m_camera;\n        const cameraPitch = MapViewUtils.extractAttitude(this.mapView, camera).pitch;\n        // Ensure that the aspect is >= 1.\n        const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n        // Angle between a->d2, note, the fov is vertical, hence we translate to horizontal.\n        const totalAngleRad = THREE.Math.degToRad((camera.fov * aspect) / 2) + cameraPitch;\n        // Length a->d2\n        const worldLengthHorizontalFull = Math.tan(totalAngleRad) * camera.position.z;\n        // Length a->e\n        const worldLengthHorizontalSmallerHalf = Math.tan(cameraPitch) * camera.position.z;\n        // Length e -> d2\n        const worldLengthHorizontal = worldLengthHorizontalFull - worldLengthHorizontalSmallerHalf;\n        const worldLeftPoint = new THREE.Vector3(\n            worldCenter.x - worldLengthHorizontal,\n            worldCenter.y,\n            worldCenter.z\n        );\n        const worldLeftGeoPoint = this.mapView.projection.unprojectPoint(worldLeftPoint);\n        // We multiply by SQRT2 because we need to account for a rotated view (in which case there\n        // are more tiles that can be seen).\n        const offsetRange = THREE.Math.clamp(\n            Math.ceil(\n                Math.abs((worldGeoPoint.longitude - worldLeftGeoPoint.longitude) / 360) * Math.SQRT2\n            ),\n            0,\n            // We can store currently up to 16 unique keys(2^4, where 4 is the default bit-shift\n            // value which is used currently in the [[VisibleTileSet]] methods) hence we can have a\n            // maximum range of 7 (because 2*7+1 = 15).\n            7\n        );\n        for (\n            let offset = -offsetRange + startOffset;\n            offset <= offsetRange + startOffset;\n            offset++\n        ) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, offset, 0, 0));\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Second step tile culling: Do additional check for intersection of box and frustum by checking if\n * the frustum is outside any plane of the tiles `bbox` (oriented, not AABB). It's in the inverse of\n * the standard frustum test, which excludes many cases where the large terrain tiles straddle the\n * planes of the frustum.\n *\n * @see http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n */\nexport class MapTileCuller {\n    private m_globalFrustumMin = new THREE.Vector3();\n    private m_globalFrustumMax = new THREE.Vector3();\n\n    private m_frustumCorners = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n\n    /**\n     * Constructs a `MapTileCuller`.\n     *\n     * @param m_camera A `THREE.Camera`.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Sets up culling and computes frustum corners. You mus call this function before the culling\n     * starts.\n     */\n    setup() {\n        const frustumCorners = this.getFrustumCorners();\n\n        const matrix = this.m_camera.matrixWorld;\n\n        this.m_globalFrustumMin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this.m_globalFrustumMax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n        for (const frustumCorner of frustumCorners) {\n            frustumCorner.applyMatrix4(matrix);\n\n            this.m_globalFrustumMin.x = Math.min(this.m_globalFrustumMin.x, frustumCorner.x);\n            this.m_globalFrustumMin.y = Math.min(this.m_globalFrustumMin.y, frustumCorner.y);\n            this.m_globalFrustumMin.z = Math.min(this.m_globalFrustumMin.z, frustumCorner.z);\n\n            this.m_globalFrustumMax.x = Math.max(this.m_globalFrustumMax.x, frustumCorner.x);\n            this.m_globalFrustumMax.y = Math.max(this.m_globalFrustumMax.y, frustumCorner.y);\n            this.m_globalFrustumMax.z = Math.max(this.m_globalFrustumMax.z, frustumCorner.z);\n        }\n    }\n\n    /**\n     * Checks if the tile's bounding box intersects with the current view's frustum.\n     *\n     * @param tileBounds The bounding box for the tile.\n     */\n    frustumIntersectsTileBox(tileBounds: THREE.Box3): boolean {\n        const globalFrustumMin = this.m_globalFrustumMin;\n        const globalFrustumMax = this.m_globalFrustumMax;\n\n        if (\n            globalFrustumMax.x < tileBounds.min.x ||\n            globalFrustumMax.y < tileBounds.min.y ||\n            globalFrustumMax.z < tileBounds.min.z ||\n            globalFrustumMin.x > tileBounds.max.x ||\n            globalFrustumMin.y > tileBounds.max.y ||\n            globalFrustumMin.z > tileBounds.max.z\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the eight corners of the frustum.\n     */\n    private getFrustumCorners(): THREE.Vector3[] {\n        const frustumCorners = this.m_frustumCorners;\n        const invProjMatrix = (this.m_camera as any).projectionMatrixInverse as THREE.Matrix4;\n\n        let cornerIndex = 0;\n\n        function addPoint(x: number, y: number, z: number) {\n            frustumCorners[cornerIndex++].set(x, y, z).applyMatrix4(invProjMatrix);\n        }\n\n        const w = 1;\n        const h = 1;\n        const n = -1;\n        const f = 1;\n\n        // near\n        addPoint(-w, -h, n);\n        addPoint(w, -h, n);\n        addPoint(-w, h, n);\n        addPoint(w, h, n);\n\n        // far\n        addPoint(-w, -h, f);\n        addPoint(w, -h, f);\n        addPoint(-w, h, f);\n        addPoint(w, h, f);\n\n        return frustumCorners;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { TextElement } from \"../text/TextElement\";\nimport { Tile, TileObject } from \"../Tile\";\n\n/**\n * Overlays the specified object's geometry on the elevation represented by the given displacement\n * map .\n *\n * @param object The object to be overlaid.\n * @param displacementMap Texture representing the elevation data used to overlay the object.\n */\nfunction overlayObject(object: TileObject, displacementMap: THREE.DataTexture): void {\n    if (!(\"material\" in object)) {\n        return;\n    }\n\n    const material = (object as any).material;\n\n    if (\"displacementMap\" in material) {\n        (material as any).displacementMap = displacementMap;\n    }\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param worldCoords World coordinates to overlay.\n * @param elevationProvider Used to get elevation data.\n * @param tile The tile to which the coordinates are relative.\n */\nfunction overlayPosition(\n    worldCoords: THREE.Vector3,\n    elevationProvider: ElevationProvider,\n    tile: Tile\n) {\n    const geoCoords = tile.mapView.projection.unprojectPoint(worldCoords);\n    const height = elevationProvider.getHeight(geoCoords);\n\n    if (height !== undefined) {\n        geoCoords.altitude = height;\n        tile.mapView.projection.projectPoint(geoCoords, worldCoords);\n    }\n}\n\n/**\n * Overlays a text element on top of elevation data if available.\n *\n * @param textElement The text element whose geometry will be overlaid.\n * @param elevationProvider Used to get elevation data.\n * @param tile The tile the text element belongs to.\n */\nfunction overlayTextElement(\n    textElement: TextElement,\n    elevationProvider: ElevationProvider,\n    tile: Tile\n) {\n    // TODO: Move calculation of text element geoCoordinates to decoder.\n    if (textElement.path === undefined) {\n        overlayPosition(textElement.position, elevationProvider, tile);\n        return;\n    }\n\n    for (const position of textElement.path) {\n        overlayPosition(position, elevationProvider, tile);\n    }\n}\n\n// Overlay of text elements within a tile is spread through this many frames to minimize the time\n// spent per frame on elevation overlay.\nconst TEXT_OVERLAY_SPREAD_FRAME_COUNT = 60;\n\n/**\n * Overlays the geometry in the given tile on top of elevation data if available.\n *\n * @param tile The tile whose geometry will be overlaid.\n */\nexport function overlayOnElevation(tile: Tile): void {\n    const elevationProvider = tile.mapView.elevationProvider;\n\n    if (elevationProvider === undefined || tile.objects.length === 0) {\n        return;\n    }\n    const displacementMap = elevationProvider.getDisplacementMap(tile.tileKey);\n    if (displacementMap === undefined || tile.objects.length === 0) {\n        return;\n    }\n\n    const firstObject = tile.objects[0];\n    if (\n        !firstObject.userData ||\n        !firstObject.userData.kind ||\n        !firstObject.userData.kind.find((kind: GeometryKind) => {\n            return kind !== GeometryKind.All && kind !== GeometryKind.Terrain;\n        })\n    ) {\n        return;\n    }\n\n    for (const object of tile.objects) {\n        overlayObject(object, displacementMap.texture);\n    }\n\n    // TODO: Start overlaying text elements as soon as there's some text.\n    if (!tile.allGeometryLoaded) {\n        return;\n    }\n\n    if (tile.allTextElementsOverlaid) {\n        return;\n    }\n\n    const textElementsPerFrame = Math.ceil(\n        tile.textElementGroups.count() / TEXT_OVERLAY_SPREAD_FRAME_COUNT\n    );\n\n    const groups = tile.textElementGroups.sortedGroups;\n    let { groupIndex, elementIndex } = tile.nextTextElementToOverlay;\n    let textElementsCount = 0;\n\n    while (groupIndex < groups.length) {\n        const group = groups[groupIndex];\n        while (textElementsCount < textElementsPerFrame && elementIndex < group.elements.length) {\n            overlayTextElement(group.elements[elementIndex], elevationProvider, tile);\n            elementIndex++;\n            textElementsCount++;\n        }\n\n        if (elementIndex >= group.elements.length) {\n            ++groupIndex;\n            elementIndex = 0;\n        } else {\n            break;\n        }\n    }\n    tile.nextTextElementToOverlay = { groupIndex, elementIndex };\n    tile.textElementsChanged = true;\n    tile.mapView.update();\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\n\nimport { MapView } from \"../MapView\";\nimport { Tile } from \"../Tile\";\nimport { Phase, PhasedTileGeometryLoader } from \"./PhasedTileGeometryLoader\";\nimport { TileGeometryManagerBase } from \"./TileGeometryManager\";\n\n/**\n * The default phases to load geometry.\n */\nconst DefaultPhases: Phase[] = [\n    [GeometryKind.Background, GeometryKind.Terrain, GeometryKind.Area, GeometryKind.Border],\n    [GeometryKind.Line],\n    [GeometryKind.Building],\n    [GeometryKind.Label],\n    [GeometryKind.All]\n];\n\n// FIXME: This should (always) be the first phase, no?\nconst DefaultBasicGeometryKinds: GeometryKindSet = new GeometryKindSet(DefaultPhases[0]);\n\n/**\n * Manages the loading of [[Tile]] geometry in phases.\n */\nexport class PhasedTileGeometryManager extends TileGeometryManagerBase {\n    private m_maxUpdatedTilePerFrame = 5;\n    private m_loadPhaseDefinitions: Phase[] = DefaultPhases;\n    private m_basicGeometryKinds: GeometryKindSet = DefaultBasicGeometryKinds;\n\n    /**\n     * Creates an instance of PhasedTileGeometryManager. Keeps the reference to the [[MapView]].\n     *\n     * @param {MapView} mapView\n     */\n    constructor(mapView: MapView) {\n        super(mapView);\n    }\n\n    /** @override */\n    initTile(tile: Tile): void {\n        if (tile.dataSource.useGeometryLoader) {\n            tile.tileGeometryLoader = new PhasedTileGeometryLoader(\n                tile,\n                this.m_loadPhaseDefinitions,\n                this.m_basicGeometryKinds\n            );\n        }\n    }\n\n    /** @override */\n    updateTiles(tiles: Tile[]): void {\n        let needUpdate = this.mapView.isDynamicFrame\n            ? this.updateSomeTiles(tiles)\n            : this.updateAllTilesTogether(tiles);\n\n        if (this.m_tileUpdateCallback) {\n            for (const tile of tiles) {\n                this.m_tileUpdateCallback(tile);\n            }\n        }\n\n        // updateTileObjectVisibility() has always to be called.\n        needUpdate = this.updateTileObjectVisibility(tiles) || needUpdate;\n\n        if (needUpdate || !this.checkTilesFinished(tiles)) {\n            this.mapView.update();\n        }\n    }\n\n    private checkTilesFinished(tiles: Tile[]): boolean {\n        for (const tile of tiles) {\n            const phasedGeometryLoader = tile.tileGeometryLoader as PhasedTileGeometryLoader;\n            if (phasedGeometryLoader !== undefined && !phasedGeometryLoader.allGeometryLoaded) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Update the tiles during dynamic frames. Number of tiles to update may be limited.\n     *\n     * @param {Tile[]} tiles\n     */\n    private updateSomeTiles(tiles: Tile[]): boolean {\n        let numTilesUpdated = 0;\n\n        for (const tile of tiles) {\n            const phasedGeometryLoader = tile.tileGeometryLoader as PhasedTileGeometryLoader;\n\n            if (phasedGeometryLoader !== undefined) {\n                if (\n                    phasedGeometryLoader.update(\n                        this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                        this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                    )\n                ) {\n                    numTilesUpdated++;\n                    if (\n                        this.m_maxUpdatedTilePerFrame > 0 &&\n                        numTilesUpdated >= this.m_maxUpdatedTilePerFrame\n                    ) {\n                        break;\n                    }\n                }\n            }\n        }\n        return numTilesUpdated > 0;\n    }\n\n    /**\n     * Update the tiles during static frames. Before advancing to the next phase, any tiles lagging\n     * behind are allowed to catch up to their next phase. Only then all tiles will advance to the\n     * next phase together.\n     *\n     * @param {Tile[]} tiles\n     */\n    private updateAllTilesTogether(tiles: Tile[]): boolean {\n        let lowestPhase: number | undefined;\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            const phasedGeometryLoader = tile.tileGeometryLoader as PhasedTileGeometryLoader;\n\n            if (\n                phasedGeometryLoader !== undefined &&\n                (lowestPhase === undefined || phasedGeometryLoader.currentPhase < lowestPhase)\n            ) {\n                lowestPhase = phasedGeometryLoader.currentPhase;\n            }\n        }\n\n        if (lowestPhase !== undefined && lowestPhase < this.m_loadPhaseDefinitions.length) {\n            const nextPhase = lowestPhase + 1;\n            needUpdate = this.updateTilesIfNeeded(tiles, nextPhase);\n        }\n        return needUpdate;\n    }\n\n    /**\n     * Update the tiles during static frames only if their phase is lower than the `toPhase`.\n     *\n     * @param {Tile[]} tiles\n     */\n    private updateTilesIfNeeded(tiles: Tile[], toPhase: number): boolean {\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            const phasedGeometryLoader = tile.tileGeometryLoader as PhasedTileGeometryLoader;\n            if (phasedGeometryLoader !== undefined) {\n                if (\n                    phasedGeometryLoader.updateToPhase(\n                        toPhase,\n                        this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                        this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                    )\n                ) {\n                    needUpdate = true;\n                }\n            }\n        }\n        return needUpdate;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryKind,\n    GeometryKindSet,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    isTextTechnique,\n    Technique\n} from \"@here/harp-datasource-protocol\";\nimport { PerformanceTimer } from \"@here/harp-utils\";\n\nimport { PerformanceStatistics } from \"../Statistics\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryCreator } from \"./TileGeometryCreator\";\nimport { TileGeometryLoader } from \"./TileGeometryLoader\";\n\n/**\n * Describes the kinds of geometry that should be loaded in a single phase.\n */\nexport type Phase = GeometryKind[];\n\n/**\n * The `PhasedTileGeometryLoader` loads the geometry of a [[Tile]] using a list of [[Phase]]s.\n *\n */\nexport class PhasedTileGeometryLoader implements TileGeometryLoader {\n    private m_decodedTile?: DecodedTile;\n    private m_isFinished: boolean = false;\n    private m_availableGeometryKinds: GeometryKindSet | undefined;\n    private m_geometryKindsLoaded: GeometryKindSet = new GeometryKindSet();\n    private m_currentPhaseIndex = 0;\n\n    /**\n     * Creates an instance of PhasedTileGeometryLoader of a [[Tile]]. It stores the phases in which\n     * its geometry should be created.\n     *\n     * @param {Tile} m_tile Tile the loader manages.\n     * @param {Phase[]} m_loadPhaseDefinitions The definitions of the loading phases.\n     * @param {GeometryKindSet} m_basicGeometryKinds The set of [[GeometryKind]] s that have to be\n     *      created before the [[Tile]] is made visible.\n     */\n    constructor(\n        private m_tile: Tile,\n        private m_loadPhaseDefinitions: Phase[],\n        private m_basicGeometryKinds: GeometryKindSet\n    ) {}\n\n    /**\n     * The [[Tile]] this loader is managing.\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * The index into the array of loading phases.\n     */\n    get currentPhase(): number {\n        return this.m_currentPhaseIndex;\n    }\n\n    /**\n     * The number of phases defined.\n     */\n    get numberOfPhases(): number {\n        return this.m_loadPhaseDefinitions.length;\n    }\n\n    /**\n     * The set of [[GeometryKind]]s already created in this [[Tile]].\n     */\n    get geometryKindsCreated(): GeometryKindSet {\n        return this.m_geometryKindsLoaded;\n    }\n\n    /**\n     * The set of [[GeometryKind]]s available in this [[Tile]].\n     */\n    get availableGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_availableGeometryKinds;\n    }\n\n    /**\n     * Returns `true` if all basic [[GeometryKind]]s have been loaded. The set of basic\n     * [[GeometryKind]]s is defined in the constructor of `PhasedTileGeometryLoader`.\n     */\n    get basicGeometryLoaded(): boolean {\n        for (const kind of this.m_basicGeometryKinds) {\n            if (!this.m_geometryKindsLoaded.has(kind)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns `true` if all [[GeometryKind]]s have been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.currentPhase >= this.m_loadPhaseDefinitions.length;\n    }\n\n    /**\n     * Set the [[DecodedTile]] of the tile. Is called after the decoded tile has been loaded, and\n     * prepares its content for later processing in the 'updateXXX' methods.\n     *\n     * @param {DecodedTile} decodedTile The decoded tile with the flat geometry data belonging to\n     *      this tile.\n     * @returns {DecodedTile} The processed decoded tile.\n     */\n    setDecodedTile(decodedTile: DecodedTile): DecodedTile {\n        this.m_decodedTile = decodedTile;\n        this.m_currentPhaseIndex = 0;\n        this.m_geometryKindsLoaded.clear();\n\n        if (this.m_decodedTile !== undefined) {\n            this.m_availableGeometryKinds = TileGeometryLoader.prepareDecodedTile(\n                this.m_decodedTile\n            );\n        }\n        return this.m_decodedTile;\n    }\n\n    /**\n     * Update the tile to have all the content in its decoded tile. Load phases will be ignored.\n     *\n     * @param {(GeometryKindSet | undefined)} enabledKinds The [[GeometryKind]]s that should be\n     *      enabled.\n     * @param {(GeometryKindSet | undefined)} disabledKinds The [[GeometryKind]]s that should be\n     *      disabled.\n     * @returns {boolean} `true` if actual geometry has been created.\n     */\n    updateCompletely(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): boolean {\n        return this.update(enabledKinds, disabledKinds, true);\n    }\n\n    /**\n     * Update the tile to the specified phase (index). All intermediate phases between the current\n     * and the specified phase will be processed.\n     *\n     * @param toPhase A value between 0 and `numberOfPhases`.\n     * @param {(GeometryKindSet | undefined)} enabledKinds The [[GeometryKind]]s that should be\n     *      enabled.\n     * @param {(GeometryKindSet | undefined)} disabledKinds The [[GeometryKind]]s that should be\n     *      disabled.\n     * @returns {boolean} `true` if `updateToPhase` was successful.\n     */\n    updateToPhase(\n        toPhase: number,\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): boolean {\n        let didUpdate = false;\n        toPhase = Math.min(toPhase, this.numberOfPhases);\n        while (this.currentPhase < toPhase) {\n            if (!this.update(enabledKinds, disabledKinds)) {\n                break;\n            }\n            didUpdate = true;\n        }\n        return didUpdate;\n    }\n\n    /**\n     * Create all geometries in the current phase, or ignore the phases and create all remaining\n     * geometries if `doFullUpdate` is `true`.\n     *\n     * @param {(GeometryKindSet | undefined)} enabledKinds The [[GeometryKind]]s that should be\n     *      enabled.\n     * @param {(GeometryKindSet | undefined)} disabledKinds The [[GeometryKind]]s that should be\n     *      disabled.\n     * @param doFullUpdate If a value of `true` is specified, the current phase is ignored and all\n     *      remaining geometries are created.\n     * @returns {boolean} `true` if `update` was successful. If `currentPhase` is smaller than\n     *      `numberOfPhases`, `update` can be called again. If `false` is returned, another call to\n     *      `update` is not required.\n     */\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined,\n        doFullUpdate: boolean = false\n    ): boolean {\n        const tile = this.tile;\n        const loadPhaseDefinitions = this.m_loadPhaseDefinitions;\n\n        if (!tile.dataSource.cacheable) {\n            this.m_currentPhaseIndex = loadPhaseDefinitions.length;\n            return false;\n        }\n\n        let decodedTile = this.m_decodedTile;\n        const currentPhase = this.currentPhase;\n\n        // First time this tile is handled:\n        if (decodedTile === undefined && tile.decodedTile !== undefined) {\n            decodedTile = this.setDecodedTile(tile.decodedTile);\n            TileGeometryCreator.instance.processTechniques(\n                decodedTile,\n                enabledKinds,\n                disabledKinds\n            );\n            tile.clear();\n        }\n\n        if (decodedTile === undefined || currentPhase >= this.numberOfPhases) {\n            return false;\n        }\n\n        const geometryCreator = TileGeometryCreator.instance;\n\n        const stats = PerformanceStatistics.instance;\n        let now = 0;\n\n        if (stats.enabled) {\n            now = PerformanceTimer.now();\n        }\n\n        if (doFullUpdate) {\n            geometryCreator.createAllGeometries(tile, decodedTile);\n\n            // Mark it as finished.\n            this.m_currentPhaseIndex = loadPhaseDefinitions.length;\n        } else {\n            const currentPhaseDefinition = loadPhaseDefinitions[currentPhase];\n\n            for (const kind of currentPhaseDefinition) {\n                this.createKind(geometryCreator, kind);\n            }\n        }\n\n        if (stats.enabled) {\n            stats.currentFrame.addValue(\n                \"geometry.geometryCreationTime\",\n                PerformanceTimer.now() - now\n            );\n        }\n\n        if (this.nextPhase() === undefined) {\n            // All done, update the stats\n            if (stats.enabled) {\n                const currentFrame = stats.currentFrame;\n\n                currentFrame.addValue(\"geometryCount.numGeometries\", decodedTile.geometries.length);\n                currentFrame.addValue(\"geometryCount.numTechniques\", decodedTile.techniques.length);\n                currentFrame.addValue(\n                    \"geometryCount.numPoiGeometries\",\n                    decodedTile.poiGeometries !== undefined ? decodedTile.poiGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextGeometries\",\n                    decodedTile.textGeometries !== undefined ? decodedTile.textGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextPathGeometries\",\n                    decodedTile.textPathGeometries !== undefined\n                        ? decodedTile.textPathGeometries.length\n                        : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numPathGeometries\",\n                    decodedTile.pathGeometries !== undefined ? decodedTile.pathGeometries.length : 0\n                );\n                currentFrame.addMessage(\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} ` +\n                        `col=${tile.tileKey.column} row=${tile.tileKey.row}`\n                );\n            }\n\n            this.finish();\n        }\n        return true;\n    }\n\n    get isFinished(): boolean {\n        return this.m_isFinished;\n    }\n\n    dispose(): void {\n        this.m_decodedTile = undefined;\n    }\n\n    reset(): void {\n        this.m_decodedTile = undefined;\n        this.m_isFinished = false;\n        this.m_availableGeometryKinds = undefined;\n        this.m_geometryKindsLoaded.clear();\n        this.m_currentPhaseIndex = 0;\n    }\n\n    /**\n     * Increment the current phase to activate the next phase of geometries.\n     *\n     * @returns {(number | undefined)} The index into the now active current pase, or `undefined` if\n     *      the last phase has been reached.\n     */\n    protected nextPhase(): number | undefined {\n        if (this.m_currentPhaseIndex < this.m_loadPhaseDefinitions.length) {\n            this.m_currentPhaseIndex++;\n        }\n\n        return this.m_currentPhaseIndex < this.m_loadPhaseDefinitions.length\n            ? this.m_currentPhaseIndex\n            : undefined;\n    }\n\n    /**\n     * Create all geometries of the specified [[GeometryKind]] `kindToCreate`.\n     *\n     * @param {TileGeometryCreator} geometryCreator\n     * @param {GeometryKind} kindToCreate\n     */\n    protected createKind(geometryCreator: TileGeometryCreator, kindToCreate: GeometryKind): void {\n        if (this.m_geometryKindsLoaded.has(kindToCreate)) {\n            return;\n        }\n        this.m_geometryKindsLoaded.add(kindToCreate);\n\n        const tile = this.tile;\n        const decodedTile = this.m_decodedTile;\n\n        if (decodedTile !== undefined) {\n            const filter = (technique: Technique): boolean => {\n                if (technique.enabled === false) {\n                    return false;\n                }\n\n                const techniqueKind = technique.kind;\n\n                // All kinds are allowed, except those which are explicitly disabled.\n                if (kindToCreate === GeometryKind.All) {\n                    return true;\n                }\n\n                if (techniqueKind instanceof Set) {\n                    const techniqueKinds = techniqueKind as GeometryKindSet;\n\n                    // Check if that technique fits the expected kindToCreate.\n                    return techniqueKinds.has(kindToCreate);\n                } else {\n                    return techniqueKind === kindToCreate;\n                }\n            };\n\n            geometryCreator.createObjects(tile, decodedTile, filter);\n\n            const textFilter = (technique: Technique): boolean => {\n                if (\n                    !isPoiTechnique(technique) &&\n                    !isLineMarkerTechnique(technique) &&\n                    !isTextTechnique(technique)\n                ) {\n                    return false;\n                }\n                return filter(technique);\n            };\n\n            // TextElements do not get their geometry created by Tile, but are managed on a\n            // higher level.\n            geometryCreator.createTextElements(tile, decodedTile, textFilter);\n\n            geometryCreator.preparePois(tile, decodedTile);\n        }\n    }\n\n    private finish() {\n        this.m_decodedTile = undefined;\n        this.m_tile.loadingFinished();\n        this.m_tile.removeDecodedTile();\n        this.m_isFinished = true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TextCanvas } from \"@here/harp-text-canvas\";\nimport { MapView } from \"../MapView\";\nimport { PoiRenderer } from \"./PoiRenderer\";\n\nexport class PoiRendererFactory {\n    /**\n     * Creates an instance of poi renderer factory.\n     * @param m_mapView\n     */\n    constructor(private readonly m_mapView: MapView) {}\n\n    /**\n     * Creates poi renderer\n     * @param textCanvas\n     * @returns\n     */\n    createPoiRenderer(textCanvas: TextCanvas): PoiRenderer {\n        return new PoiRenderer(this.m_mapView, textCanvas);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/StyleSetEvaluator\";\nexport * from \"./lib/Extruder\";\nexport * from \"./lib/IMeshBuffers\";\nexport * from \"./lib/Outliner\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/ThreeBufferUtils\";\nexport * from \"./lib/GeoJsonDataType\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Fills an index buffer with the indices for the extruded walls for a polygon contour.\n *\n * @param indexBuffer Index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param contour Vertices that compose the contour.\n * @param contourEdges Collection of booleans indicating if contour edges should be added.\n * @param boundaryWalls If `false`, walls in tile boundaries will not be created.\n *\n */\nexport function addExtrudedWalls(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    contour: number[],\n    contourEdges?: boolean[],\n    boundaryWalls?: boolean\n): void {\n    // Infer the index buffer's position of the vertices that form the extruded-polygons' walls\n    // by stepping through the contour segment by segment.\n    const nSegments = contour.length / vertexStride;\n    for (let i = 0; i < nSegments; ++i) {\n        const vFootprint0 = vertexOffset + i * 2;\n        const vRoof0 = vFootprint0 + 1;\n        const vFootprint1 = vertexOffset + ((i + 1) % nSegments) * 2;\n        const vRoof1 = vFootprint1 + 1;\n        if (boundaryWalls !== false || contourEdges === undefined) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        } else if (contourEdges[i]) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst currEdgeStart = new THREE.Vector2();\nconst currEdgeGoal = new THREE.Vector2();\nconst prevEdgeStart = new THREE.Vector2();\nconst prevEdgeGoal = new THREE.Vector2();\n\n/**\n * Fills an index buffer with the indices for the edges of a polygon contour.\n *\n * @param indexBuffer Edge index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param polygonContour Vertices that compose the contour.\n * @param polygonContourEdges Collection of booleans indicating if contour edges should be added.\n */\nexport function addPolygonEdges(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    polygonContour: number[],\n    polygonContourEdges: boolean[],\n    isExtruded?: boolean,\n    addFootprintEdges?: boolean,\n    wallEdgeSlope?: number\n) {\n    for (let i = 0; i < polygonContourEdges.length; ++i) {\n        if (polygonContourEdges[i]) {\n            if (isExtruded === true) {\n                const vFootprint0 = vertexOffset + i * 2;\n                const vRoof0 = vFootprint0 + 1;\n                const vFootprint1 = vertexOffset + ((i + 1) % polygonContourEdges.length) * 2;\n                const vRoof1 = vFootprint1 + 1;\n\n                if (addFootprintEdges === true) {\n                    indexBuffer.push(vFootprint0, vFootprint1);\n                }\n                indexBuffer.push(vRoof0, vRoof1);\n\n                const prevEdgeIdx = (i === 0 ? polygonContourEdges.length : i) - 1;\n                if (polygonContourEdges[prevEdgeIdx]) {\n                    if (wallEdgeSlope !== undefined) {\n                        const v0x = polygonContour[i * vertexStride];\n                        const v0y = polygonContour[i * vertexStride + 1];\n                        const v1x =\n                            polygonContour[((i + 1) % polygonContourEdges.length) * vertexStride];\n                        const v1y =\n                            polygonContour[\n                                ((i + 1) % polygonContourEdges.length) * vertexStride + 1\n                            ];\n\n                        currEdgeStart.set(v0x, v0y);\n                        currEdgeGoal.set(v1x, v1y);\n                        prevEdgeStart.set(\n                            polygonContour[prevEdgeIdx * vertexStride],\n                            polygonContour[prevEdgeIdx * vertexStride + 1]\n                        );\n                        prevEdgeGoal.set(currEdgeStart.x, currEdgeStart.y);\n\n                        if (\n                            prevEdgeGoal\n                                .sub(prevEdgeStart)\n                                .normalize()\n                                .dot(currEdgeGoal.sub(currEdgeStart).normalize()) <= wallEdgeSlope\n                        ) {\n                            indexBuffer.push(vFootprint0, vRoof0);\n                        }\n                    } else {\n                        indexBuffer.push(vFootprint0, vRoof0);\n                    }\n                }\n            } else {\n                const vFoot0 = vertexOffset + i;\n                const vRoof0 = vertexOffset + ((i + 1) % polygonContourEdges.length);\n                indexBuffer.push(vFoot0, vRoof0);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute as ThreeBufferAttribute,\n    BufferGeometry as ThreeBufferGeometry,\n    InterleavedBufferAttribute as ThreeInterleavedBufferAttribute,\n    TypedArray\n} from \"three\";\nimport {\n    BufferAttribute,\n    BufferElementType,\n    Geometry,\n    GeometryType,\n    InterleavedBufferAttribute\n} from \"./DecodedTile\";\n\n/**\n * Collection of helper methods to convert\n * {@link https://threejs.org/docs/index.html#api/en/core/BufferGeometry|three.js BufferGeometry}\n * to [[Geometry]] that allows creation and transfering of THREE BufferGeometry in webworkers.\n * See also [[CustomDatasourceExample]].\n */\nexport namespace ThreeBufferUtils {\n    export function getBufferElementType(buffer: TypedArray): BufferElementType {\n        if (buffer instanceof Int8Array) {\n            return \"int8\";\n        } else if (buffer instanceof Uint8Array) {\n            return \"uint8\";\n        } else if (buffer instanceof Int16Array) {\n            return \"int16\";\n        } else if (buffer instanceof Uint16Array) {\n            return \"uint16\";\n        } else if (buffer instanceof Int32Array) {\n            return \"int32\";\n        } else if (buffer instanceof Uint32Array) {\n            return \"uint32\";\n        } else if (buffer instanceof Float32Array) {\n            return \"float\";\n        }\n\n        throw new Error(`Unsupported buffer type ${name}`);\n    }\n\n    export function fromThreeBufferAttribute(\n        bufferAttribute: ThreeBufferAttribute\n    ): BufferAttribute {\n        const buffer = (bufferAttribute.array as any) as TypedArray;\n        return {\n            name: bufferAttribute.name,\n            buffer: buffer.buffer,\n            type: getBufferElementType(buffer),\n            itemCount: bufferAttribute.itemSize,\n            normalized: bufferAttribute.normalized\n        };\n    }\n\n    export function fromThreeInterleavedBufferAttribute(\n        bufferAttribute: ThreeInterleavedBufferAttribute\n    ): InterleavedBufferAttribute {\n        throw new Error(\"Not implemented yet\");\n    }\n\n    export function fromThreeBufferGeometry(\n        bufferGeometry: ThreeBufferGeometry,\n        techniqueIndex: number\n    ): Geometry {\n        const vertexAttributes: BufferAttribute[] = [];\n        const attributeNames = Object.getOwnPropertyNames(bufferGeometry.attributes);\n        for (const name of attributeNames) {\n            const attribute = bufferGeometry.attributes[name];\n            // FIXME: Also support InterleavedBufferAttribute\n            const vertexAttribute = fromThreeBufferAttribute(attribute as ThreeBufferAttribute);\n            vertexAttribute.name = name;\n            vertexAttributes.push(vertexAttribute);\n        }\n        const index =\n            bufferGeometry.index !== null\n                ? fromThreeBufferAttribute(bufferGeometry.index)\n                : undefined;\n\n        let count = 0;\n        if (index !== undefined) {\n            count = bufferGeometry.index === null ? 0 : bufferGeometry.index.count;\n        } else {\n            // If there is no index buffer, try to deduce the count from the position attribute.\n            const posAttr = bufferGeometry.attributes.position as ThreeBufferAttribute;\n            if (posAttr === undefined) {\n                throw new Error(\"Missing position attibute to deduce item count\");\n            }\n            count = posAttr.count;\n        }\n\n        return {\n            type: GeometryType.Unspecified,\n            vertexAttributes,\n            index,\n            groups: [{ start: 0, count, technique: techniqueIndex }]\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * Determines whether a position in NDC (Normalized Device Coordinates) is inside the screen.\n * @param ndc The position to check.\n */\nfunction isOnScreen(ndc: THREE.Vector3) {\n    return ndc.z > -1 && ndc.z < 1 && ndc.x >= -1 && ndc.x <= 1 && ndc.y >= -1 && ndc.y <= 1;\n}\n\n/**\n * @hidden\n * Handles the projection of world coordinates to screen coordinates.\n */\nexport class ScreenProjector {\n    static tempV2 = new THREE.Vector2();\n    static tempV3 = new THREE.Vector3();\n\n    private m_width: number = 0;\n    private m_height: number = 0;\n\n    /**\n     * Constructs a new `ScreenProjector`.\n     *\n     * @param m_camera Camera to project against.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Height of the screen.\n     */\n    get width(): number {\n        return this.m_width;\n    }\n\n    /**\n     * Width of the screen.\n     */\n    get height(): number {\n        return this.m_height;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the screen.\n     */\n    projectOnScreen(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (isOnScreen(p)) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates. The z component between -1 and 1 is also returned.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project3(\n        source: Vector3Like,\n        target: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            target.set((p.x * this.m_width) / 2, (p.y * this.m_height) / 2, p.z);\n            return target;\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector. Stores\n     * result in NDC in the target vector.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target').\n     */\n    projectVector(source: Vector3Like, target: THREE.Vector3): THREE.Vector3 {\n        target.set(source.x, source.y, source.z).project(this.m_camera);\n        return target;\n    }\n\n    /**\n     * Fast test to check if projected point is on screen.\n     *\n     * @returns {boolean} `true` if point is on screen, `false` otherwise.\n     */\n    onScreen(source: Vector3Like): boolean {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        return isOnScreen(p);\n    }\n\n    /**\n     * Update the `ScreenProjector` with the latest values of the screen and the camera.\n     *\n     * @param {THREE.Camera} camera Camera to project against.\n     * @param {number} width Width of screen/canvas.\n     * @param {number} height Height of screen/canvas.\n     */\n    update(camera: THREE.Camera, width: number, height: number) {\n        this.m_camera = camera;\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    private ndcToScreen(ndc: THREE.Vector3, screenCoords: THREE.Vector2): THREE.Vector2 {\n        return screenCoords.set((ndc.x * this.m_width) / 2, (ndc.y * this.m_height) / 2);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky, GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { SkyCubemapTexture } from \"./SkyCubemapTexture\";\nimport { SkyGradientTexture } from \"./SkyGradientTexture\";\n\nimport * as THREE from \"three\";\n\n/**\n * Class that handles [[MapView]]'s sky background.\n */\nexport class SkyBackground {\n    private m_skyTexture?: SkyGradientTexture | SkyCubemapTexture;\n\n    /**\n     * Constructs a new `SkyBackground`.\n     *\n     * @param m_sky Sky configuration parameters.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param camera [[MapView]]'s camera.\n     */\n    constructor(\n        private m_sky: GradientSky | CubemapSky,\n        private m_projectionType: ProjectionType,\n        camera: THREE.Camera\n    ) {\n        switch (this.m_sky.type) {\n            case \"gradient\":\n                this.m_skyTexture = new SkyGradientTexture(this.m_sky, this.m_projectionType);\n                this.updateCamera(camera);\n                break;\n            case \"cubemap\": {\n                this.m_skyTexture = new SkyCubemapTexture(this.m_sky);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skyTexture!.dispose();\n    }\n\n    /**\n     * Sky texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_skyTexture!.texture;\n    }\n\n    /**\n     * This method updates the skybox based on the camera position (needed for some types of sky).\n     *\n     * @param camera The camera used in the map view.\n     */\n    updateCamera(camera: THREE.Camera) {\n        if (this.m_sky.type === \"gradient\") {\n            (this.m_skyTexture! as SkyGradientTexture).update(camera);\n        }\n    }\n\n    /**\n     * Updates the sky texture with new parameters.\n     *\n     * @param params New sky configuration parameters.\n     * @param projectionType Which projection is used, this may also change (in which case the\n     * textures should be recreated).\n     */\n    updateTexture(params: GradientSky | CubemapSky, projectionType: ProjectionType) {\n        const isSameSkyType =\n            this.m_sky.type === params.type && this.m_projectionType === projectionType;\n        switch (params.type) {\n            case \"gradient\":\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyGradientTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyGradientTexture(params, projectionType);\n                }\n                break;\n            case \"cubemap\": {\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyCubemapTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyCubemapTexture(params);\n                }\n                break;\n            }\n        }\n        this.m_projectionType = projectionType;\n        this.m_sky = params;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { Color, CubeTexture, DataTexture, Line3, Plane, RGBFormat, Texture, Vector3 } from \"three\";\n\nexport const DEFAULT_TEXTURE_SIZE = 512;\nexport const DEFAULT_MONOMIAL_POWER = 1;\n\n// Vectors used for skybox bitmap computation.\nconst cameraDir = [\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0),\n    new Vector3(0, -1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1)\n];\nconst cameraRight = [\n    new Vector3(0, 0, -1),\n    new Vector3(0, 0, 1),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0)\n];\nconst cameraUp = [\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0)\n];\n\n/**\n * Class tha generates a texture containing a linear gradient, to be used with [[SkyBackground]].\n *\n * The gradient is mapped onto a sphere, where `topColor` maps to the top of the upper hemisphere,\n * `bottomColor` to the bottom of the upper hemisphere, and `groundColor` fills the bottom\n *  hemisphere..\n */\nexport class SkyGradientTexture {\n    private m_width: number;\n    private m_faceCount: number;\n    private m_faces: DataTexture[];\n    private m_skybox?: CubeTexture;\n\n    // Used only in the planar case.\n    private m_farClipPlaneDividedVertically?: THREE.Line3;\n    private m_groundPlane?: THREE.Plane;\n    private m_bottomMidFarPoint?: THREE.Vector3;\n    private m_topMidFarPoint?: THREE.Vector3;\n    private m_horizonPosition?: THREE.Vector3;\n    private m_farClipPlaneCorners?: THREE.Vector3[];\n\n    /**\n     * Constructs a new `SkyGradientTexture`.\n     *\n     * @param sky Initial [[GradientSky]] configuration.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param m_height Optional height parameter.\n     */\n    constructor(\n        sky: GradientSky,\n        private m_projectionType: ProjectionType,\n        private m_height: number = DEFAULT_TEXTURE_SIZE\n    ) {\n        const topColor = new Color(sky.topColor);\n        const bottomColor = new Color(sky.bottomColor);\n        const groundColor = new Color(sky.groundColor);\n\n        this.m_width = this.m_projectionType === ProjectionType.Planar ? 1.0 : this.m_height;\n        this.m_faceCount = this.m_projectionType === ProjectionType.Planar ? 1.0 : 6.0;\n        this.m_faces = [];\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            const data = new Uint8Array(3 * this.m_width * this.m_height);\n            this.fillTextureData(data, i, topColor, bottomColor, groundColor, sky.monomialPower);\n\n            const texture = new DataTexture(data, this.m_width, this.m_height, RGBFormat);\n            texture.needsUpdate = true;\n            texture.unpackAlignment = 1;\n            this.m_faces.push(texture);\n        }\n\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox = new CubeTexture(this.m_faces);\n            this.m_skybox.needsUpdate = true;\n        } else {\n            this.m_farClipPlaneDividedVertically = new Line3();\n            this.m_groundPlane = new Plane(new Vector3(0, 0, 1));\n            this.m_bottomMidFarPoint = new Vector3();\n            this.m_topMidFarPoint = new Vector3();\n            this.m_horizonPosition = new Vector3();\n            this.m_farClipPlaneCorners = [\n                new Vector3(),\n                new Vector3(),\n                new Vector3(),\n                new Vector3()\n            ];\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.m_faces[i].dispose();\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.dispose();\n        }\n    }\n\n    /**\n     * `SkyGradientTexture`'s texture resource (simple texture or cubemap depending on\n     * [[MapView]]'s projection).\n     */\n    get texture(): Texture {\n        return this.m_projectionType === ProjectionType.Planar ? this.m_faces[0] : this.m_skybox!;\n    }\n\n    /**\n     * This method updates the position of the texture depending on the camera frustum.\n     *\n     * @param camera The camera used in the map view.\n     */\n    update(camera: THREE.Camera) {\n        if (this.m_projectionType === ProjectionType.Planar) {\n            this.setHorizonPosition(camera);\n            this.updateTexturePosition();\n        }\n    }\n\n    /**\n     * Updates the `SkyGradientTexture` with new parameters.\n     *\n     * @param params New [[GradientSky]] configuration.\n     */\n    updateTexture(sky: GradientSky) {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.fillTextureData(\n                this.m_faces[i].image.data,\n                i,\n                new Color(sky.topColor),\n                new Color(sky.bottomColor),\n                new Color(sky.groundColor),\n                sky.monomialPower\n            );\n            this.m_faces[i].needsUpdate = true;\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.needsUpdate = true;\n        }\n    }\n\n    // When creating the texture, a Uint8Array is required, because the resulting texture passed\n    // to the scene as a background, is a texImage2D object, that does not accept UintClampedArray\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n    // But, when updating the texture, a Uint8ClampedArray is passed as argument, because\n    // this.m_texture.image.data returns a Uint8ClampedArray. That's why this method accepts both.\n    private fillTextureData(\n        data: Uint8ClampedArray | Uint8Array,\n        faceIdx: number,\n        topColor: Color,\n        bottomColor: Color,\n        groundColor: Color,\n        monomialPower?: number\n    ) {\n        const color = new Color();\n        const dir = new Vector3();\n        const right = new Vector3();\n        const up = new Vector3();\n\n        const upDir = new Vector3(0, 0, 1);\n        for (let i = 0; i < this.m_height; ++i) {\n            for (let j = 0; j < this.m_width; ++j) {\n                if (this.m_projectionType === ProjectionType.Spherical) {\n                    const offsetX = right\n                        .copy(cameraRight[faceIdx])\n                        .multiplyScalar(((j + 0.5) / this.m_width) * 2.0 - 1.0);\n                    const offsetY = up\n                        .copy(cameraUp[faceIdx])\n                        .multiplyScalar(((i + 0.5) / this.m_height) * 2.0 - 1.0);\n                    dir.copy(cameraDir[faceIdx])\n                        .add(offsetX)\n                        .add(offsetY)\n                        .normalize();\n                    const t = Math.max(upDir.dot(dir), 0);\n\n                    color\n                        .copy(groundColor)\n                        .lerp(bottomColor, Math.min(t * 100, 1))\n                        .lerp(topColor, t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER))\n                        .multiplyScalar(255);\n                } else {\n                    const t = i / this.m_height;\n                    if (i === 0) {\n                        color.copy(groundColor).multiplyScalar(255);\n                    } else {\n                        color\n                            .copy(bottomColor)\n                            .lerp(\n                                topColor,\n                                t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER)\n                            )\n                            .multiplyScalar(255);\n                    }\n                }\n\n                data[i * this.m_width * 3 + j * 3] = color.r;\n                data[i * this.m_width * 3 + j * 3 + 1] = color.g;\n                data[i * this.m_width * 3 + j * 3 + 2] = color.b;\n            }\n        }\n    }\n\n    private setHorizonPosition(camera: THREE.Camera) {\n        this.m_farClipPlaneCorners![0].set(-1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![1].set(1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![2].set(-1, 1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![3].set(1, 1, 1).unproject(camera);\n\n        this.m_bottomMidFarPoint!.copy(this.m_farClipPlaneCorners![0])\n            .add(this.m_farClipPlaneCorners![1])\n            .multiplyScalar(0.5);\n        this.m_topMidFarPoint!.copy(this.m_farClipPlaneCorners![2])\n            .add(this.m_farClipPlaneCorners![3])\n            .multiplyScalar(0.5);\n        this.m_farClipPlaneDividedVertically!.set(this.m_bottomMidFarPoint, this.m_topMidFarPoint);\n\n        const hasIntersection = this.m_groundPlane!.intersectLine(\n            this.m_farClipPlaneDividedVertically!,\n            this.m_horizonPosition!\n        );\n\n        // When there is no intersection between the ground plane and the\n        // farClipPlaneDividedVertically, be sure that the horizon is reset. Otherwise a previous\n        // intersection point stored in the m_horizonPosition will be considered the valid one.\n        if (!hasIntersection) {\n            this.m_horizonPosition!.set(0.0, 0.0, 0.0);\n        }\n    }\n\n    private updateTexturePosition() {\n        const coveredBySky = this.m_bottomMidFarPoint!.distanceTo(this.m_horizonPosition!);\n        const frustumHeight = this.m_farClipPlaneDividedVertically!.distance();\n        const skyRatio = coveredBySky / frustumHeight;\n\n        // If there is no intersection between the ground plane and the line that defines the far\n        // clip plane divided vertically, it means that there is no sky visible and therefore the\n        // ground color should be displayed. When there is no intersection, the length of the\n        // this.m_horizonPosition is still equal to zero, as threejs initialize an empty vector with\n        // all the three components to zero.\n        // If there is an intersection, calculate the offset.\n        const ratio = this.m_horizonPosition!.length() === 0 ? 1 : skyRatio - 2 / this.m_height;\n\n        // If the bottom part of the far clipping plane is under the ground plane, scroll the\n        // texture down. Otherwise, the camera is looking at the sky, therefore, scroll the texture\n        // up.\n        this.m_faces[0].offset.set(0, this.m_bottomMidFarPoint!.z <= 0 ? -ratio : skyRatio);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { FontCatalog } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nexport const DEFAULT_FONT_CATALOG_NAME = \"default\";\n\nconst logger = LoggerManager.instance.create(\"FontCatalogLoader\");\n\ntype FontCatalogCallback = (name: string, catalog: FontCatalog) => void;\n\nexport class FontCatalogLoader {\n    private m_catalogsLoading: number = 0;\n\n    constructor(private readonly m_theme: Theme) {}\n\n    /**\n     * Initializes font catalog loader.\n     * @param defaultFontCatalogUrl Url of the font catalog that will be used by default if the\n     * theme doesn't define any font catalog.\n     * @returns Name of the default font catalog.\n     */\n    initialize(defaultFontCatalogUrl: string): string {\n        if (this.m_theme.fontCatalogs === undefined || this.m_theme.fontCatalogs.length === 0) {\n            this.m_theme.fontCatalogs = [\n                {\n                    name: DEFAULT_FONT_CATALOG_NAME,\n                    url: defaultFontCatalogUrl\n                }\n            ];\n            return DEFAULT_FONT_CATALOG_NAME;\n        }\n\n        const defaultFontCatalogName = this.m_theme.fontCatalogs[0].name;\n        return defaultFontCatalogName;\n    }\n\n    async loadCatalogs(catalogCallback: FontCatalogCallback): Promise<void[]> {\n        assert(this.m_theme.fontCatalogs !== undefined);\n        assert(this.m_theme.fontCatalogs!.length > 0);\n\n        const promises: Array<Promise<void>> = [];\n\n        this.m_theme.fontCatalogs!.forEach(fontCatalogConfig => {\n            this.m_catalogsLoading += 1;\n            const fontCatalogPromise: Promise<void> = FontCatalog.load(fontCatalogConfig.url, 1024)\n                .then<void>(catalogCallback.bind(undefined, fontCatalogConfig.name))\n                .catch((error: Error) => {\n                    logger.error(\"Failed to load FontCatalog: \", error);\n                })\n                .finally(() => {\n                    this.m_catalogsLoading -= 1;\n                });\n            promises.push(fontCatalogPromise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    get loading(): boolean {\n        return this.m_catalogsLoading > 0;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapView } from \"../MapView\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * View state obtained from a MapView instance.\n */\nexport class MapViewState implements ViewState {\n    constructor(\n        private readonly m_mapView: MapView,\n        private readonly m_renderedTilesChangeCheck: () => boolean\n    ) {}\n\n    get worldCenter(): THREE.Vector3 {\n        return this.m_mapView.worldCenter;\n    }\n    get cameraIsMoving(): boolean {\n        return this.m_mapView.cameraIsMoving;\n    }\n    get maxVisibilityDist(): number {\n        return this.m_mapView.viewRanges.maximum;\n    }\n    get zoomLevel(): number {\n        return this.m_mapView.zoomLevel;\n    }\n    get frameNumber(): number {\n        return this.m_mapView.frameNumber;\n    }\n    get lookAtDistance(): number {\n        return this.m_mapView.lookAtDistance;\n    }\n    get isDynamic(): boolean {\n        return this.m_mapView.isDynamicFrame;\n    }\n    get hiddenGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_mapView.tileGeometryManager === undefined\n            ? undefined\n            : this.m_mapView.tileGeometryManager.hiddenGeometryKinds;\n    }\n\n    get renderedTilesChanged(): boolean {\n        return this.m_renderedTilesChangeCheck();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert } from \"@here/harp-utils\";\n\nexport class TextCanvasFactory {\n    private m_minGlyphCount: number = 0; //Min amount of glyphs each [[TextCanvas]] layer can store.\n    private m_maxGlyphCount: number = 0; //Max amount of glyphs each [[TextCanvas]] layer can store.\n\n    /**\n     * Creates an instance of text canvas factory.\n     * @param m_renderer\n     */\n    constructor(private readonly m_renderer: THREE.WebGLRenderer) {}\n\n    setGlyphCountLimits(min: number, max: number) {\n        this.m_minGlyphCount = min;\n        this.m_maxGlyphCount = max;\n    }\n\n    /**\n     * Creates text canvas\n     * @param fontCatalog Initial [[FontCatalog]].\n     */\n    createTextCanvas(fontCatalog: FontCatalog): TextCanvas {\n        assert(this.m_maxGlyphCount > 0);\n\n        return new TextCanvas({\n            renderer: this.m_renderer,\n            fontCatalog,\n            minGlyphCount: this.m_minGlyphCount,\n            maxGlyphCount: this.m_maxGlyphCount\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames } from \"../MapView\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\n\n/**\n * Helper class that maintains up-to-date [[MapView]] copyright information in DOM element.\n *\n * @example\n *\n *     // HTML snippet\n *     <div id=\"copyrightNotice\" style=\"position:absolute; right:0; bottom:0; z-index:100\"></div>\n *\n *     // JavaScript\n *     const mapView = new MapView({ ... });\n *     CopyrightElementHandler.install(\"copyrightNotice\", mapView);\n */\nexport class CopyrightElementHandler {\n    /**\n     * Install [[CopyrightElementHandler]] on DOM element and - optionally - attach to a [[MapView]]\n     * instance.\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView, optional, [[attach]] to this [[MapView]]\n     */\n    static install(element: string | HTMLElement, mapView?: MapView): CopyrightElementHandler {\n        return new CopyrightElementHandler(element, mapView);\n    }\n\n    /**\n     * Static copyright info.\n     *\n     * Use when [[MapView]]'s [[DataSource]]'s do not provide proper copyright information.\n     */\n    staticInfo: CopyrightInfo[] | undefined;\n\n    private m_defaults: Map<string, CopyrightInfo> = new Map();\n    private m_element: HTMLElement;\n    private m_mapViews: MapView[] = [];\n\n    /**\n     * Creates a new `CopyrightElementHandler` that updates the DOM element with the copyright info\n     * of the given `mapView`.\n     *\n     * Note: Generally, the static [[install]] method can be used to create and attach a new\n     * `CopyrightElementHandler` to a [[MapView]]\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView optional, [[attach]] to this [[MapView]] instance\n     */\n    constructor(element: string | HTMLElement, mapView?: MapView) {\n        if (typeof element === \"string\") {\n            const htmlElement = document.getElementById(element);\n            if (!htmlElement) {\n                throw new Error(`CopyrightElementHandler: unable to find DOM element #${element}`);\n            }\n            this.m_element = htmlElement;\n        } else {\n            this.m_element = element;\n        }\n\n        if (mapView !== undefined) {\n            this.attach(mapView);\n        }\n    }\n\n    /**\n     * Destroys this object by removing all event listeners from the attached [[MapView]]s.\n     */\n    destroy() {\n        for (const mapView of this.m_mapViews) {\n            mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        }\n    }\n\n    /**\n     * Attaches this [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    attach(mapView: MapView): this {\n        this.m_mapViews.push(mapView);\n\n        mapView.addEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Stop following [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    detach(mapView: MapView): this {\n        mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n\n        this.m_mapViews = this.m_mapViews.filter(item => item !== mapView);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Set [[CopyrightInfo]] defaults to be used in case [[DataSource]] does not provide deatailed\n     * copyright information.\n     *\n     * The defaults will applied to all undefined `year`, `label` and `link` values in the copyright\n     * information retrieved from [[MapView]].\n     */\n    setDefaults(defaults: CopyrightInfo[] | undefined): this {\n        this.m_defaults.clear();\n        if (defaults !== undefined) {\n            for (const item of defaults) {\n                this.m_defaults.set(item.id, item);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the [[staticInfo]] property.\n     *\n     * A `CopyrightElementHandler` always displays a deduplicated sum of static copyright info and\n     * copyright information obtained from attached [[MapView]]s.\n     *\n     * This information is used when [[DataSource]] instances of given [[MapView]] do not provide\n     * copyright information.\n     */\n    setStaticCopyightInfo(staticInfo: CopyrightInfo[] | undefined): this {\n        this.staticInfo = staticInfo;\n        return this;\n    }\n\n    /**\n     * Update copyright info text in controlled HTML element.\n     */\n    update = () => {\n        const mergedCopyrightInfo = this.m_mapViews\n            .map(mapView => mapView.copyrightInfo)\n            .reduce(CopyrightInfo.mergeArrays, this.staticInfo || []);\n\n        // Conditionally hiding of element with copyright information.\n        // If nothing to show we schould to avoid empty white rectangle in right bottom corner.\n        if (mergedCopyrightInfo.length === 0) {\n            this.m_element.style.display = \"none\";\n            return;\n        } else {\n            this.m_element.style.display = \"block\";\n        }\n\n        if (this.m_defaults.size !== 0) {\n            for (const sourceInfo of mergedCopyrightInfo) {\n                const defaults = this.m_defaults.get(sourceInfo.id);\n                if (defaults !== undefined) {\n                    sourceInfo.year = getOptionValue(sourceInfo.year, defaults.year);\n                    sourceInfo.label = getOptionValue(sourceInfo.label, defaults.label);\n                    sourceInfo.link = getOptionValue(sourceInfo.link, defaults.link);\n                }\n            }\n        }\n        const deduped = CopyrightInfo.mergeArrays(mergedCopyrightInfo);\n\n        this.m_element.innerHTML = CopyrightInfo.formatAsHtml(deduped);\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransferManager } from \"@here/harp-transfer-manager\";\nimport {\n    AreaCopyrightInfo,\n    CopyrightCoverageProvider,\n    CopyrightCoverageResponse\n} from \"./CopyrightCoverageProvider\";\n\n/**\n * Copyright provider which retrieves copyright coverage information from provided URL.\n */\nexport class UrlCopyrightProvider extends CopyrightCoverageProvider {\n    private m_cachedCopyrightResponse: Promise<AreaCopyrightInfo[]> | undefined;\n\n    /**\n     * Default constructor.\n     *\n     * @param m_fetchURL URL to fetch copyrights data from.\n     * @param m_baseScheme Scheme to get copyrights from.\n     */\n    constructor(private m_fetchURL: string, private m_baseScheme: string) {\n        super();\n    }\n\n    /**\n     * @inheritdoc\n     * @override\n     */\n    getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]> {\n        if (this.m_cachedCopyrightResponse !== undefined) {\n            return this.m_cachedCopyrightResponse;\n        }\n\n        this.m_cachedCopyrightResponse = new TransferManager()\n            .downloadJson<CopyrightCoverageResponse>(this.m_fetchURL)\n            .then(json => json[this.m_baseScheme])\n            .catch(error => {\n                this.logger.error(error);\n                return [];\n            });\n\n        return this.m_cachedCopyrightResponse;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @module\n *\n * This module provides classes to ease downloading URLs. In particular, following redirects,\n * retrying on HTTP errors, and limiting the number of parallel concurrent downloads.\n */\n\nimport \"@here/harp-fetch\";\n\n/** @internal\n * DeferredPromise takes an executor function for executing it later, when [[exec]] is called.\n * This class allows wrapping other promises or long running functions for later execution.\n */\nclass DeferredPromise<T> {\n    /**\n     * Internal promise to store the deferred executor function.\n     */\n    readonly promise: Promise<T>;\n    private doExec = false;\n    private resolveFunc?: (result?: T) => void;\n    private rejectFunc?: (reason?: any) => void;\n\n    constructor(private readonly executor: () => Promise<T>) {\n        this.promise = new Promise<T>((resolve, reject) => {\n            this.resolveFunc = resolve;\n            this.rejectFunc = reject;\n\n            if (this.doExec) {\n                this.execInnerPromise(this.resolveFunc, this.rejectFunc);\n            }\n        });\n    }\n\n    /**\n     * When `exec` is called the deferred executor function is executed.\n     */\n    exec() {\n        if (this.resolveFunc === undefined || this.rejectFunc === undefined) {\n            // deferred promise not yet initialized - handle it in callback above\n            this.doExec = true;\n            return;\n        }\n\n        this.execInnerPromise(this.resolveFunc, this.rejectFunc);\n    }\n\n    private execInnerPromise(\n        resolveFunc: (result?: T) => void,\n        rejectFunc: (reason?: any) => void\n    ) {\n        this.executor()\n            .then(result => resolveFunc(result))\n            .catch(err => rejectFunc(err));\n    }\n}\n\n/**\n * `TransferManager` for downloading URLs.\n *\n * Features:\n *\n * * Merges JSON downloads, for example, the same URL if requested as JSON will only be downloaded\n *   once.\n * * Limits the amount of parallel downloads, useful when requesting a large amount of URLs that\n *   would otherwise stall the browser.\n * * Retries the downloads with an increasing timeout on HTTP 503 replies.\n *\n * The static method [[instance]] can be used to get a default constructed instance.\n */\nexport class TransferManager {\n    /**\n     * The timeout in milliseconds to wait between retries. This timeout is multiplied with the\n     * number of retries. First retry waits for 0 ms, second retry for 500 ms, third for 1000 ms and\n     * so on.\n     */\n    static readonly retryTimeout = 500;\n    /**\n     * The amount of maximum parallel downloads to allow.\n     */\n    static readonly maxParallelDownloads = 16;\n    /**\n     * Returns a default instance of [[TransferManager]].\n     */\n    static instance(): TransferManager {\n        return TransferManager.defaultInstance;\n    }\n    private static readonly defaultInstance = new TransferManager();\n    private static async fetchRepeatedly(\n        fetchFunction: typeof fetch,\n        retryCount: number,\n        maxRetries: number,\n        url: string,\n        init?: RequestInit\n    ): Promise<Response> {\n        try {\n            const response = await fetchFunction(url, init);\n            if (response.status !== 503 || retryCount > maxRetries) {\n                return response;\n            }\n        } catch (err) {\n            if (\n                err.hasOwnProperty(\"isCancelled\") ||\n                (err.hasOwnProperty(\"name\") && err.name === \"AbortError\") ||\n                retryCount > maxRetries\n            ) {\n                throw err;\n            }\n        }\n        return TransferManager.waitFor(TransferManager.retryTimeout * retryCount).then(() =>\n            TransferManager.fetchRepeatedly(fetchFunction, maxRetries, retryCount + 1, url, init)\n        );\n    }\n    private static waitFor(milliseconds: number): Promise<void> {\n        return new Promise<void>(resolve => setTimeout(resolve, milliseconds));\n    }\n    private activeDownloadCount = 0;\n    private downloadQueue = new Array<DeferredPromise<Response>>();\n    private activeDownloads = new Map<string, Promise<any>>();\n    /**\n     * Constructs a new [[TransferManager]].\n     *\n     * @param fetchFunction The default fetch function to use.\n     * @param maxRetries The maximum amount to try to re-fetch a resource.\n     */\n    constructor(readonly fetchFunction = fetch, readonly maxRetries: number = 5) {}\n    /**\n     * Downloads a JSON object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same resource to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download.\n     */\n    downloadJson<T>(url: string, init?: RequestInit): Promise<T> {\n        return this.downloadAs<T>(response => response.json(), url, init);\n    }\n    /**\n     * Downloads a binary object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same resource to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download\n     */\n    downloadArrayBuffer(url: string, init?: RequestInit): Promise<ArrayBuffer> {\n        return this.download(url, init).then(response => response.arrayBuffer());\n    }\n    /**\n     * Downloads a URL and returns the response.\n     *\n     * Does not merge multiple requests to the same URL.\n     *\n     * @param url The URL to download.\n     * @param init Optional extra parameters for the download.\n     */\n    download(url: string, init?: RequestInit): Promise<Response> {\n        if (this.activeDownloadCount >= TransferManager.maxParallelDownloads) {\n            const deferred = new DeferredPromise<Response>(() => this.doDownload(url, init));\n            this.downloadQueue.push(deferred);\n            return deferred.promise;\n        }\n        return this.doDownload(url, init);\n    }\n    private doDownload(url: string, init?: RequestInit): Promise<Response> {\n        ++this.activeDownloadCount;\n        return TransferManager.fetchRepeatedly(this.fetchFunction, 0, this.maxRetries, url, init)\n            .then(response => {\n                this.onDownloadDone();\n                return response;\n            })\n            .catch(err => {\n                this.onDownloadDone();\n                throw err;\n            });\n    }\n    private onDownloadDone() {\n        --this.activeDownloadCount;\n        this.execDeferredDownload();\n    }\n    private execDeferredDownload() {\n        const future = this.downloadQueue.pop();\n        if (future === undefined) {\n            return;\n        }\n        future.exec();\n    }\n    private downloadAs<T>(\n        converter: (response: Response) => Promise<T>,\n        url: string,\n        init?: RequestInit\n    ): Promise<T> {\n        const cacheKey = url;\n        const pendingFetch = this.activeDownloads.get(cacheKey);\n        if (pendingFetch !== undefined) {\n            return Promise.resolve(pendingFetch);\n        }\n        const newFetch = this.download(url, init)\n            .then(response => {\n                this.activeDownloads.delete(cacheKey);\n                if (response.ok) {\n                    return converter(response);\n                }\n                throw new Error(JSON.stringify(response));\n            })\n            .catch(err => {\n                this.activeDownloads.delete(cacheKey);\n                throw err;\n            });\n        this.activeDownloads.set(cacheKey, newFetch);\n        return newFetch;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * `ImageItem` is used to identify an image in the [[ImageCache]].\n */\nexport interface ImageItem {\n    /** URL of the image, or unique identifier. */\n    url: string;\n    /** Pixel data. */\n    imageData?: ImageData | ImageBitmap;\n    /** Turns to `true` when the data has finished loading. */\n    loaded: boolean;\n    /** `loadingPromise` is only used during loading/generating the image. */\n    loadingPromise?: Promise<ImageItem | undefined>;\n}\n\nexport namespace ImageItem {\n    /**\n     * Missing Typedoc\n     */\n    export function isLoading(imageItem: ImageItem): boolean {\n        return imageItem.loadingPromise !== undefined;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType, getFeatureId } from \"@here/harp-datasource-protocol\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport {\n    BufferedGeometryLineAccessor,\n    BufferedGeometryObject3dAccessor,\n    IGeometryAccessor,\n    ILineAccessor,\n    IndexedBufferedGeometryLineAccessor,\n    IObject3dAccessor,\n    isLineAccessor,\n    isObject3dAccessor\n} from \"./TileGeometry\";\n\nconst logger = LoggerManager.instance.create(\"TileDataAccessor\");\n\n/**\n * Interface for a client visitor that is used to visit all `THREE.Object`s in a tile.\n */\nexport interface ITileDataVisitor {\n    tile: Tile;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`. This function is called before the type of the object is even known.\n     */\n    wantsFeature(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the point with the specified\n     * `featureId`.\n     */\n    wantsPoint(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the line with the specified\n     * `featureId`.\n     */\n    wantsLine(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the area object with the specified\n     * `featureId`.\n     */\n    wantsArea(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`.\n     */\n    wantsObject3D(featureId: number | undefined): boolean;\n\n    /**\n     * Visits a point object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitPoint(featureId: number | undefined): void;\n\n    /**\n     * Visits a line object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitLine(featureId: number | undefined, lineAccessor: ILineAccessor): void;\n\n    /**\n     * Visit an area object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitArea(featureId: number | undefined): void;\n\n    /**\n     * Visits a 3D object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitObject3D(featureId: number | undefined, object3dAccessor: IObject3dAccessor): void;\n}\n\n/**\n * An interface that provides options for [[TileDataAccessor]].\n */\nexport interface TileDataAccessorOptions {\n    /** Limit to objects that have `featureID`s. */\n    onlyWithFeatureIds?: boolean;\n    /** Sets and overrides `wantPoints`, `wantLines`, `wantAreas`, `wantObject3D`. */\n    wantsAll?: boolean;\n    /** `true` to visit points. */\n    wantsPoints?: boolean;\n    /** `true` to visit lines. */\n    wantsLines?: boolean;\n    /** `true` to visit area objects. */\n    wantsAreas?: boolean;\n    /** `true` to visit general 3D objects. */\n    wantsObject3D?: boolean;\n}\n\n/**\n * An accessor for all geometries in a tile. This class uses a client-provided [[ITileDataVisitor]]\n * to visit all objects, based on filtering options specified by both, the `TileDataAccessor` and\n * the visitor itself.\n */\nexport class TileDataAccessor {\n    private m_wantsPoints = true;\n    private m_wantsLines = true;\n    private m_wantsAreas = true;\n    private m_wantsObject3D = true;\n\n    /**\n     * Constructs a `TileDataAccessor` instance.\n     *\n     * @param tile The tile to access.\n     * @param visitor The visitor.\n     * @param options Options for the tile.\n     */\n    constructor(\n        public tile: Tile,\n        private visitor: ITileDataVisitor,\n        options: TileDataAccessorOptions\n    ) {\n        const wantsAll = options.wantsAll === true;\n        this.m_wantsPoints = wantsAll || !(options.wantsPoints === false);\n        this.m_wantsLines = wantsAll || !(options.wantsLines === false);\n        this.m_wantsAreas = wantsAll || !(options.wantsAreas === false);\n        this.m_wantsObject3D = wantsAll || !(options.wantsObject3D === false);\n    }\n\n    /**\n     * Calls the visitor on all objects in the tile.\n     */\n    visitAll(): void {\n        const objects = this.tile.objects;\n\n        for (const object of objects) {\n            this.visitObject(object);\n        }\n    }\n\n    /**\n     * Visits a single object. This function should normally be called during visiting.\n     *\n     * @param object The object to visit.\n     */\n    protected visitObject(object: THREE.Object3D): void {\n        const featureData: TileFeatureData | undefined =\n            object.userData !== undefined\n                ? (object.userData.feature as TileFeatureData)\n                : undefined;\n\n        // early opt out if there is no feature data, or if the feature data has only a single id\n        // and the visitor wants to ignore that featureId\n        if (\n            featureData === undefined ||\n            (featureData.objInfos !== undefined &&\n                featureData.objInfos.length === 1 &&\n                !this.visitor.wantsFeature(getFeatureId(featureData.objInfos[0])))\n        ) {\n            return;\n        }\n\n        const geometryType = featureData.geometryType;\n        if (geometryType === undefined) {\n            logger.warn(\"#visitObject: visiting object failed, no geometryType\", object);\n            return;\n        }\n\n        assert(featureData.objInfos !== undefined, \"featureData.ids missing\");\n        assert(featureData.starts !== undefined, \"featureData.starts missing\");\n        assert(Array.isArray(featureData.starts), \"featureData.starts is not an array\");\n        if (featureData.objInfos !== undefined && featureData.starts !== undefined) {\n            assert(\n                featureData.objInfos.length === featureData.starts.length,\n                \"featureData.ids and featureData.starts have unequal length\"\n            );\n        }\n\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                if (!this.m_wantsPoints) {\n                    return;\n                }\n                break;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                if (!this.m_wantsLines) {\n                    return;\n                }\n                break;\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                if (!this.m_wantsAreas) {\n                    return;\n                }\n                break;\n            case GeometryType.Object3D:\n                if (!this.m_wantsObject3D) {\n                    return;\n                }\n                break;\n            default:\n                logger.warn(\"#visitObject: invalid geometryType\");\n        }\n\n        if (object.type !== \"Mesh\") {\n            logger.warn(\"#visitObject: visiting object failed, not of type 'Mesh'\", object);\n            return;\n        }\n\n        const mesh = object as THREE.Mesh;\n\n        this.visitMesh(mesh, featureData);\n    }\n\n    /**\n     * Gets the `BufferGeometry` from the specified object. This function requires the\n     * attribute `position` in `BufferGeometry` to be set.\n     *\n     * @param object The object from which to get the geometry.\n     * @returns the geometry of the object, or `undefined`.\n     */\n    protected getBufferGeometry(object: THREE.Mesh): THREE.BufferGeometry | undefined {\n        const geometry = object.geometry;\n\n        if (geometry.type !== \"BufferGeometry\") {\n            logger.warn(\"#visitObject: object does not have BufferGeometry\");\n            return undefined;\n        }\n\n        const bufferGeometry = geometry as THREE.BufferGeometry;\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        const position: THREE.BufferAttribute = bufferGeometry.getAttribute(\n            \"position\"\n        ) as THREE.BufferAttribute;\n\n        if (!position) {\n            logger.warn(\"#visitLines: BufferGeometry has no position attribute\");\n            return undefined;\n        }\n\n        return bufferGeometry;\n    }\n\n    /**\n     * Obtains an accessor for the nonindexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new BufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                return new BufferedGeometryObject3dAccessor(object, geometryType, bufferGeometry);\n            default:\n                logger.warn(\"#getGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Obtains an accessor for the indexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getIndexedGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new IndexedBufferedGeometryLineAccessor(\n                    object,\n                    geometryType,\n                    bufferGeometry\n                );\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            default:\n                logger.warn(\"#getIndexedGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Visit the object.\n     *\n     * @param meshObject Object of type `Mesh`.\n     * @param featureData Dataset stored along with the object.\n     */\n    protected visitMesh(meshObject: THREE.Mesh, featureData: TileFeatureData): void {\n        const { objInfos, starts } = featureData;\n        const geometryType = featureData.geometryType;\n\n        // make linter happy: we already know that these both are valid\n        if (objInfos === undefined || starts === undefined || geometryType === undefined) {\n            return;\n        }\n\n        let geometryAccessor: IGeometryAccessor | undefined;\n\n        for (let featureIndex = 0; featureIndex < objInfos.length; featureIndex++) {\n            const featureId = getFeatureId(objInfos[featureIndex]);\n\n            if (!this.visitor.wantsFeature(featureId)) {\n                continue;\n            }\n\n            const featureStart = starts[featureIndex];\n            let featureEnd: number = -1;\n\n            // lazy creation of accessor, in case featureId was not wanted...\n            if (geometryAccessor === undefined) {\n                const bufferGeometry = this.getBufferGeometry(meshObject);\n                if (bufferGeometry === undefined) {\n                    continue;\n                }\n\n                if (bufferGeometry.index !== null) {\n                    geometryAccessor = this.getIndexedGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                } else {\n                    geometryAccessor = this.getGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                }\n\n                if (geometryAccessor === undefined) {\n                    logger.warn(\"#visitObject: no accessor geometryType\", geometryType);\n                    continue;\n                }\n            }\n\n            featureEnd =\n                featureIndex < starts.length - 1\n                    ? starts[featureIndex + 1]\n                    : geometryAccessor.getCount();\n\n            // setup/update the accessor for the new range of the object\n            geometryAccessor.setRange(featureStart, featureEnd);\n\n            switch (geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    this.visitor.visitPoint(featureId);\n                    break;\n                case GeometryType.SolidLine:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.TextPath:\n                    assert(isLineAccessor(geometryAccessor));\n                    this.visitor.visitLine(featureId, (geometryAccessor as any) as ILineAccessor);\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    this.visitor.visitArea(featureId);\n                    break;\n                case GeometryType.Object3D:\n                    assert(isObject3dAccessor(geometryAccessor));\n                    this.visitor.visitObject3D(\n                        featureId,\n                        (geometryAccessor as any) as IObject3dAccessor\n                    );\n                    break;\n                default:\n                    logger.warn(\"#visitObject: invalid geometryType\");\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/Lines\";\nexport * from \"./lib/TriangulateLines\";\nexport * from \"./lib/HighPrecisionLines\";\nexport * from \"./lib/HighPrecisionUtils\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n// Preallocate temp variables used during line generation.\nconst tmpV = new THREE.Vector3();\nconst tmpNormal = new THREE.Vector3();\nconst tmpTangent0 = new THREE.Vector3();\nconst tmpTangent1 = new THREE.Vector3();\nconst tmpBitangent = new THREE.Vector3();\nconst SEGMENT_OFFSET = 0.1;\n\n/**\n * Describes vertex attribute parameters of interleaved buffer.\n */\ninterface VertexAttributeDescriptor {\n    name: string;\n    itemSize: number;\n    offset: number;\n}\n\ninterface VertexDescriptor {\n    attributes: VertexAttributeDescriptor[];\n    stride: number;\n}\n\n/**\n * Declares all the vertex attributes used for rendering a line using the [[SolidLineMaterial]].\n */\n\n/** Base line vertex attributes. */\nconst LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        // The \"extrusionCoord\" is a vec4 which represents:\n        // xy: Extrusion coordinates\n        // sign(xy): Extrusion direction\n        // z: Line length\n        { name: \"extrusionCoord\", itemSize: 3, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 3 },\n        { name: \"tangent\", itemSize: 3, offset: 6 },\n        { name: \"bitangent\", itemSize: 4, offset: 9 }\n    ],\n    stride: 13\n};\n\n/** Optional normal and uv coordinates. */\nconst NORMAL_UV_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"uv\", itemSize: 2, offset: LINE_VERTEX_ATTRIBUTES.stride },\n        { name: \"normal\", itemSize: 3, offset: LINE_VERTEX_ATTRIBUTES.stride + 2 }\n    ],\n    stride: 5\n};\n\n/** Base line vertex attributes plus normals and uv coordinates. */\nconst LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [...LINE_VERTEX_ATTRIBUTES.attributes, ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes],\n    stride: LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Declares all the vertex attributes used for rendering a line using the\n * [[HighPrecisionLineMaterial]].\n */\nconst HP_LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"extrusionCoord\", itemSize: 2, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 2 },\n        { name: \"positionLow\", itemSize: 3, offset: 5 },\n        { name: \"tangent\", itemSize: 3, offset: 8 },\n        { name: \"bitangent\", itemSize: 4, offset: 11 }\n    ],\n    stride: 15\n};\n\n/** High precision line vertex attributes plus normals and uv coordinates. */\nconst HP_LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [\n        ...HP_LINE_VERTEX_ATTRIBUTES.attributes,\n        ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes\n    ],\n    stride: HP_LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Class that holds the vertex and index attributes for a [[Lines]] object.\n */\nexport class LineGeometry {\n    vertices: number[] = [];\n    vertexColors: number[] = [];\n    indices: number[] = [];\n}\n\nfunction getVertexDescriptor(hasNormalsAndUvs: boolean, highPrecision: boolean): VertexDescriptor {\n    if (highPrecision) {\n        return hasNormalsAndUvs ? HP_LINE_VERTEX_ATTRIBUTES_NUV : HP_LINE_VERTEX_ATTRIBUTES;\n    } else {\n        return hasNormalsAndUvs ? LINE_VERTEX_ATTRIBUTES_NUV : LINE_VERTEX_ATTRIBUTES;\n    }\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param center Center of the polyline.\n * @param polyline Array of `numbers` describing a polyline.\n * @param offsets Array of `numbers` representing line segment offsets.\n * @param uvs Array of `numbers` representing texture coordinates.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n * @param highPrecision If `true` will create high-precision vertex information.\n */\nexport function createLineGeometry(\n    center: THREE.Vector3,\n    polyline: ArrayLike<number>,\n    offsets?: ArrayLike<number>,\n    uvs?: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry(),\n    highPrecision: boolean = false\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const stride = getVertexDescriptor(uvs !== undefined, highPrecision).stride;\n\n    const pointCount = polyline.length / 3;\n    const segments = new Array<number>(pointCount);\n    const tangents = new Array<number>(polyline.length - 3);\n    const baseVertex = geometry.vertices.length / stride;\n\n    const hasSegmentOffsets = offsets !== undefined && offsets.length > 0;\n    const hasTexCoords = uvs !== undefined && uvs.length > 0;\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    assert(!hasSegmentOffsets || offsets!.length === pointCount);\n    assert(!hasTexCoords || uvs!.length / 2 === pointCount);\n    assert(!vertexColors || colors!.length === polyline.length);\n\n    // Compute segments and tangents.\n    let sum = SEGMENT_OFFSET;\n    segments[0] = sum;\n    let isFlat = true;\n    for (let i = 0; i < pointCount - 1; ++i) {\n        let sqrLength = 0;\n        for (let j = 0; j < 3; ++j) {\n            const d = polyline[(i + 1) * 3 + j] - polyline[i * 3 + j];\n            tangents[i * 3 + j] = d;\n            sqrLength += d * d;\n            isFlat = j === 2 ? isFlat && polyline[(i + 1) * 3 + j] === 0.0 : isFlat;\n        }\n        const len = Math.sqrt(sqrLength);\n        sum = sum + len;\n        segments[i + 1] = sum;\n    }\n\n    const lineCoverage = hasSegmentOffsets\n        ? Math.abs(offsets![offsets!.length - 1] - offsets![0])\n        : 1.0;\n    const lineLength = segments[segments.length - 1] / lineCoverage;\n\n    // Override the segments if offsets are explicitly provided.\n    if (hasSegmentOffsets) {\n        for (let i = 0; i < pointCount; ++i) {\n            segments[i] = offsets![i] * lineLength + SEGMENT_OFFSET;\n        }\n    }\n\n    // Check if we're working with a closed line.\n    let isClosed = true;\n    for (let j = 0; j < 3; ++j) {\n        isClosed = isClosed && polyline[j] === polyline[polyline.length - 3 + j];\n    }\n\n    const tmpVertices: number[] = [];\n\n    const addVertexPair = (\n        i: number,\n        T1: number,\n        T2: number,\n        segment: number,\n        extrusionCoord: number\n    ) => {\n        tmpVertices.length = 0;\n\n        // Store the segment and extrusionCoord attributes.\n        geometry.vertices.push(segment, extrusionCoord * -1, lineLength);\n        tmpVertices.push(segment, extrusionCoord * 1, lineLength);\n\n        // Store the position attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            if (!highPrecision) {\n                geometry.vertices.push(polyline[i * 3 + j]);\n                tmpVertices.push(polyline[i * 3 + j]);\n            } else {\n                const highComp = Math.fround(polyline[i * 3 + j]);\n                const lowComp = polyline[i * 3 + j] - highComp;\n                geometry.vertices.push(highComp, lowComp);\n                tmpVertices.push(highComp, lowComp);\n            }\n            tmpNormal.setComponent(j, polyline[i * 3 + j]);\n        }\n\n        // Store the bitangent attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            tmpTangent0.setComponent(j, tangents[T1 + j]);\n            tmpTangent1.setComponent(j, tangents[T2 + j]);\n        }\n        tmpTangent0.normalize();\n        geometry.vertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpVertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        const angle = computeBitangent(\n            isFlat ? tmpNormal.set(0, 0, 1) : tmpNormal.add(center).normalize(),\n            tmpTangent0,\n            tmpTangent1.normalize(),\n            tmpBitangent\n        );\n        geometry.vertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n        tmpVertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n\n        if (hasTexCoords) {\n            // uvs\n            geometry.vertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            tmpVertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            // normals\n            geometry.vertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n            tmpVertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n        }\n\n        geometry.vertices.push(...tmpVertices);\n\n        // Add vertex colors (if supplied).\n        if (vertexColors) {\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n        }\n    };\n\n    for (let i = 0; i < pointCount; ++i) {\n        // Retrieve the per-point tangents.\n        const T1 = isClosed && i === 0 ? tangents.length - 3 : Math.max(0, i - 1) * 3;\n        const T2 = isClosed && i === pointCount - 1 ? 0 : Math.min(i * 3, tangents.length - 3);\n\n        // Process v0 and v1.\n        if (i > 0) {\n            addVertexPair(i, T1, T2, segments[i - 1], segments[i]);\n        }\n\n        // Process v2 and v3.\n        if (i + 1 < pointCount) {\n            addVertexPair(\n                i,\n                T1,\n                T2,\n                segments[Math.min(i, segments.length - 1)] * -1,\n                segments[Math.min(i + 1, segments.length - 1)]\n            );\n        }\n    }\n\n    // Store the triangle indices in the final index buffer.\n    for (let i = 0; i < pointCount - 1; ++i) {\n        const base = baseVertex + i * 4;\n        geometry.indices.push(base, base + 1, base + 2, base + 2, base + 1, base + 3);\n    }\n\n    return geometry;\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param polyline Array of `numbers` describing a polyline.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n */\nexport function createSimpleLineGeometry(\n    polyline: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry()\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const pointCount = polyline.length / 3;\n    let index = geometry.vertices.length / 3;\n\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    for (let i = 0; i < pointCount; ++i, index++) {\n        if (i > 0) {\n            geometry.indices.push(index);\n        }\n        if (i < pointCount - 1) {\n            geometry.indices.push(index);\n        }\n        for (let j = 0; j < 3; ++j) {\n            geometry.vertices.push(polyline[i * 3 + j]);\n            if (vertexColors) {\n                geometry.vertexColors.push(colors![i * 3 + j]);\n            }\n        }\n    }\n\n    return geometry;\n}\n\n/**\n * Class used to render groups (or batches) of width-variable lines (in the same tile).\n */\nexport class LineGroup {\n    /**\n     * Adds all the attribute data needed to a [[BufferGeometry]] object for rendering `Lines`.\n     *\n     * @param vertices Array of vertex attributes.\n     * @param colors Array of vertex colors.\n     * @param indices Array of vertex indices.\n     * @param geometry [[BufferGeometry]] object which will store all the `Lines` attribute data.\n     * @param hasNormalsAnUvs Whether vertices have normal and uv coordinates as attributes.\n     * @param highPrecision If `true` will create high-precision vertex information.\n     * @param isSimple `true` to create simple (nonsolid, nonextruded) lines. Defaults to `false`.\n     */\n    static createGeometry(\n        vertices: ArrayLike<number>,\n        colors: ArrayLike<number>,\n        indices: ArrayLike<number>,\n        geometry: THREE.BufferGeometry,\n        hasNormalsAndUvs: boolean = false,\n        highPrecision = false,\n        isSimple = false\n    ): THREE.BufferGeometry {\n        if (isSimple) {\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(new Float32Array(vertices), 3)\n            );\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n            return geometry;\n        } else {\n            const vertexDescriptor = getVertexDescriptor(hasNormalsAndUvs, highPrecision);\n\n            const buffer = new THREE.InterleavedBuffer(\n                new Float32Array(vertices),\n                vertexDescriptor.stride\n            );\n            vertexDescriptor.attributes.forEach(descr => {\n                const attribute = new THREE.InterleavedBufferAttribute(\n                    buffer,\n                    descr.itemSize,\n                    descr.offset,\n                    false\n                );\n                geometry.setAttribute(descr.name, attribute);\n            });\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n\n            return geometry;\n        }\n    }\n\n    private readonly m_geometry: LineGeometry;\n\n    constructor(\n        readonly hasNormalsAndUvs: boolean = false,\n        readonly highPrecision: boolean = false,\n        readonly isSimple: boolean = false\n    ) {\n        this.m_geometry = new LineGeometry();\n    }\n\n    /**\n     * Clears the list of line strips.\n     */\n    clear() {\n        this.m_geometry.vertices = [];\n        this.m_geometry.vertexColors = [];\n        this.m_geometry.indices = [];\n    }\n\n    /**\n     * Add the given points to this line group.\n     *\n     * @param center World center of the provided points.\n     * @param points Sequence of (x,y,z) coordinates.\n     * @param offsets Sequence of line segment offsets.\n     * @param uvs Sequence of (u,v) texture coordinates.\n     * @param colors Sequence of (r,g,b) color components.\n     */\n    add(\n        center: THREE.Vector3,\n        points: ArrayLike<number>,\n        offsets?: ArrayLike<number>,\n        uvs?: ArrayLike<number>,\n        colors?: ArrayLike<number>\n    ): this {\n        if (!this.isSimple) {\n            assert(!this.hasNormalsAndUvs || uvs !== undefined);\n            createLineGeometry(\n                center,\n                points,\n                offsets,\n                uvs,\n                colors,\n                this.m_geometry,\n                this.highPrecision\n            );\n        } else {\n            createSimpleLineGeometry(points, colors, this.m_geometry);\n        }\n        return this;\n    }\n\n    /**\n     * Returns the list of vertices.\n     */\n    get vertices(): number[] {\n        return this.m_geometry.vertices;\n    }\n\n    /**\n     * Returns the list of vertex colors.\n     */\n    get vertexColors(): number[] {\n        return this.m_geometry.vertexColors;\n    }\n\n    /**\n     * Returns the list of indices.\n     */\n    get indices(): number[] {\n        return this.m_geometry.indices;\n    }\n\n    /**\n     * Returns the list of [[VertexAttributeDescriptor]]s.\n     */\n    get vertexAttributes(): VertexAttributeDescriptor[] {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).attributes;\n    }\n\n    /**\n     * Returns the vertex attribute stride.\n     */\n    get stride(): number {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).stride;\n    }\n\n    /**\n     * Creates a three.js geometry.\n     */\n    createGeometry(geometry?: THREE.BufferGeometry): THREE.BufferGeometry {\n        if (geometry === undefined) {\n            geometry = new THREE.BufferGeometry();\n        }\n        return LineGroup.createGeometry(\n            this.m_geometry.vertices,\n            this.m_geometry.vertexColors,\n            this.m_geometry.indices,\n            geometry,\n            this.hasNormalsAndUvs,\n            this.highPrecision\n        );\n    }\n}\n\nfunction computeBitangent(\n    n: THREE.Vector3,\n    t0: THREE.Vector3,\n    t1: THREE.Vector3,\n    bt: THREE.Vector3\n): number {\n    let angle = 0;\n    if (!t0.equals(t1)) {\n        angle = Math.acos(t0.dot(t1)) * Math.sign(n.dot(tmpV.copy(t0).cross(t1)));\n        if (Number.isNaN(angle)) {\n            angle = 0;\n        }\n    }\n    bt.copy(t0)\n        .add(t1)\n        .normalize()\n        .cross(n)\n        .normalize();\n    return angle;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { HighPrecisionPointMaterial } from \"@here/harp-materials\";\n\nimport { HighPrecisionObject } from \"./HighPrecisionLines\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Class used to render high-precision points.\n */\nexport class HighPrecisionPoints extends THREE.Points implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Number of dimensions this `HighPrecisionObject` is specified in (2D/3D).\n     */\n    dimensionality?: number;\n\n    /**\n     * Creates a `HighPrecisionPoints` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered point.\n     * @param opacity Opacity of the rendered point.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionPointMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        if (material === undefined) {\n            material = new HighPrecisionPointMaterial({\n                color: color ? color : HighPrecisionPointMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : 1\n            });\n        }\n\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    /**\n     * Clears the [[BufferGeometry]] used to render this point.\n     */\n    clearGeometry(): THREE.BufferGeometry {\n        return (this.geometry = new THREE.BufferGeometry());\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        if (\n            (this.material as any).isHighPrecisionPointsMaterial &&\n            this.dimensionality !== undefined\n        ) {\n            (this.material as any).setDimensionality(this.dimensionality);\n        }\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/OmvDataFilter\";\nexport * from \"./lib/OmvDataSource\";\nexport * from \"./lib/OmvDecoderDefs\";\nexport * from \"./lib/OmvTile\";\nexport * from \"./lib/OmvDebugLabelsTile\";\nexport * from \"./lib/OmvRestClient\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapEnv } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    OmvFeatureFilterDescription,\n    OmvFilterDescription,\n    OmvFilterFeatureAttribute,\n    OmvFilterString,\n    OmvGeometryType,\n    OmvLayerFilterDescription\n} from \"./OmvDecoderDefs\";\n\n/**\n * The `OmvFeatureFilter` is designed to work in an `OmvVisitor`/`visitOmv` combination (for\n * example, `OmvDecoder`). Returning `false` from any of the calls terminates processing of that\n * layer or feature.\n *\n * The `OmvFeatureFilter` is an \"early-opt-out\" filter, which cannot filter individual features,\n * because at that point the features are not really decoded. Use the [[OmvFeatureModifier]] to\n * filter for individual features.\n */\nexport interface OmvFeatureFilter {\n    /**\n     * Returns `true` if the filter contains rules for specific kinds.\n     */\n    hasKindFilter: boolean;\n\n    /**\n     * Return `false` if the layer should not be processed.\n     *\n     * @param layer Current layer.\n     * @param level Level of tile.\n     */\n    wantsLayer(layer: string, level: number): boolean;\n\n    /**\n     * Return `false` if the point feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the line feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the polygon feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if kind of object is not enabled and the geometry should not be created.\n     *\n     * @param {(string | string[])} kind Tag \"kind\" of the tag.\n     * @returns {boolean}\n     */\n    wantsKind(kind: string | string[]): boolean;\n}\n\n/**\n * The `OmvFeatureModifier` can be used to filter individual features. It gets passed in the [[Env]]\n * of the feature, which contains all the values that can be searched for in a style. If a filter\n * function returns false, the feature is ignored, and no geometry is being created.\n *\n * In addition to pure filtering, the `OmvFeatureModifier` can also modify the [[Env]] of the\n * feature, or even add new properties to the feature, for example, traffic states. The\n * `OmvFeatureModifier` is executed before the styles are selected, so the geometry is created with\n * the modified feature properties.\n */\nexport interface OmvFeatureModifier {\n    /**\n     * Check if the point feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of point feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPointFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the line feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of line feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessLineFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the polygon feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of polygon feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPolygonFeature(layer: string, env: MapEnv, level: number): boolean;\n}\n\n/**\n * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as well\n * as an [[OmvFeatureModifier]].\n *\n */\nexport class OmvFeatureFilterDescriptionBuilder {\n    private m_processLayersDefault: boolean = true;\n    private m_processPointsDefault: boolean = true;\n    private m_processLinesDefault: boolean = true;\n    private m_processPolygonsDefault: boolean = true;\n\n    private readonly m_layersToProcess = new Array<OmvLayerFilterDescription>();\n    private readonly m_layersToIgnore = new Array<OmvLayerFilterDescription>();\n    private readonly m_pointsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_ignoredPoints = new Array<OmvFilterDescription>();\n    private readonly m_linesToProcess = new Array<OmvFilterDescription>();\n    private readonly m_linesToIgnore = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToIgnore = new Array<OmvFilterDescription>();\n\n    private m_kindsToProcess: string[] = [];\n    private m_kindsToIgnore: string[] = [];\n\n    /**\n     * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as\n     * well as an [[OmvFeatureModifier]].\n     *\n     * @param processLayersDefault If `true`, all unspecified layers will be processed. If `false`,\n     * all unspecified layers will be ignored.\n     * @param processPointsDefault If `true`, all unspecified point features will be processed. If\n     * `false`, all unspecified point features will be ignored.\n     * @param processLinesDefault If `true`, all unspecified line features will be processed. If\n     * `false`, all unspecified line features will be ignored.\n     * @param processPolygonsDefault If `true`, all unspecified polygon features will be processed.\n     * If `false`, all unspecified polygon features will be ignored.\n     */\n    constructor(\n        options?: OmvFeatureFilterDescriptionBuilder.OmvFeatureFilterDescriptionBuilderOptions\n    ) {\n        if (options) {\n            this.m_processLayersDefault =\n                options.processLayersDefault !== undefined ? options.processLayersDefault : true;\n            this.m_processPointsDefault =\n                options.processPointsDefault !== undefined ? options.processPointsDefault : true;\n            this.m_processLinesDefault =\n                options.processLinesDefault !== undefined ? options.processLinesDefault : true;\n            this.m_processPolygonsDefault =\n                options.processPolygonsDefault !== undefined\n                    ? options.processPolygonsDefault\n                    : true;\n        }\n    }\n\n    /**\n     * Add a layer that should be processed.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    processLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToProcess.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a layer that should be ignored.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    ignoreLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToIgnore.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a valid point feature.\n     *\n     * @param options Feature options.\n     */\n    processPoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add valid point features.\n     *\n     * @param options Multi feature options.\n     */\n    processPoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add a point feature that should be ignored.\n     *\n     * @param options Feature options.\n     */\n    ignorePoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add point features that should be ignored.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add a valid line feature.\n     *\n     * @param options Feature options.\n     */\n    processLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Add valid line features.\n     *\n     * @param options Multi feature options.\n     */\n    processLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Ignore a line feature.\n     *\n     * @param options Feature options.\n     */\n    ignoreLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Ignore line features.\n     *\n     * @param options Multi feature options.\n     */\n    ignoreLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Add a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    processPolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Add valid polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    processPolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Ignore a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    ignorePolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Ignore polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Add all the specified strings as \"enabledKinds\".\n     *\n     * @param {string[]} enabledKinds List of kinds that should be generated.\n     */\n    processKinds(enabledKinds: string[]) {\n        this.m_kindsToProcess = this.m_kindsToProcess.concat(enabledKinds);\n    }\n\n    /**\n     * Add all the specified strings as \"disabledKinds\".\n     *\n     * @param {string[]} disabledKinds List of kinds that should _not_ be generated.\n     */\n    ignoreKinds(disabledKinds: string[]) {\n        this.m_kindsToIgnore = this.m_kindsToIgnore.concat(disabledKinds);\n    }\n\n    /**\n     * Create a filter description that can be passed as an option to the [[OmvDataSource]].\n     */\n    createDescription(): OmvFeatureFilterDescription {\n        return {\n            processLayersDefault: this.m_processLayersDefault,\n            processPointsDefault: this.m_processPointsDefault,\n            processLinesDefault: this.m_processLinesDefault,\n            processPolygonsDefault: this.m_processPolygonsDefault,\n\n            layersToProcess: this.m_layersToProcess,\n            layersToIgnore: this.m_layersToIgnore,\n            pointsToProcess: this.m_pointsToProcess,\n            pointsToIgnore: this.m_ignoredPoints,\n            linesToProcess: this.m_linesToProcess,\n            linesToIgnore: this.m_linesToIgnore,\n            polygonsToProcess: this.m_polygonsToProcess,\n            polygonsToIgnore: this.m_polygonsToIgnore,\n\n            kindsToProcess: this.m_kindsToProcess,\n            kindsToIgnore: this.m_kindsToIgnore\n        };\n    }\n\n    private addItem(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.FeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomType !== undefined\n                    ? Array.isArray(options.geomType)\n                        ? options.geomType\n                        : [options.geomType]\n                    : undefined,\n            classes: [\n                {\n                    value: options.featureClass,\n                    match:\n                        options.matchClass === undefined\n                            ? OmvFilterString.StringMatch.Match\n                            : options.matchClass\n                }\n            ],\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n\n    private addItems(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomTypes !== undefined\n                    ? Array.isArray(options.geomTypes)\n                        ? options.geomTypes\n                        : [options.geomTypes]\n                    : undefined,\n            classes: options.featureClasses,\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n}\n\nexport namespace OmvFeatureFilterDescriptionBuilder {\n    /**\n     * Options for `OmvFeatureFilterDescriptionBuilder`.\n     */\n    export interface OmvFeatureFilterDescriptionBuilderOptions {\n        /**\n         * If `true`, all unspecified layers will be processed. If `false`, all unspecified layers\n         * will be ignored.\n         */\n        processLayersDefault?: boolean;\n        /**\n         * If `true`, all unspecified point features will be processed. If `false`, all unspecified\n         * point features will be ignored.\n         */\n        processPointsDefault?: boolean;\n        /**\n         * If `true`, all unspecified line features will be processed. If `false`, all unspecified\n         * line\n         * features will be ignored.\n         */\n        processLinesDefault?: boolean;\n        /**\n         * If `true`, all unspecified polygon features will be processed. If `false`, all\n         * unspecified polygon features will be ignored.\n         */\n        processPolygonsDefault?: boolean;\n    }\n\n    /**\n     * Description of a single feature.\n     */\n    export interface FeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomType: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional class to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClass: string;\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Match condition for `featureClass`.\n         */\n        matchClass?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n\n    /**\n     * Description for multiple features.\n     */\n    export interface MultiFeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomTypes?: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional classes to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClasses?: OmvFilterString[];\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n}\n\n/**\n * `OmvFeatureFilter` implementation that uses a `OmvFeatureFilterDescription` to filter `TileData`\n * features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureFilter implements OmvFeatureFilter {\n    private static matchLayer(\n        layer: string,\n        layerItems: OmvLayerFilterDescription[],\n        level: number\n    ): boolean {\n        for (const layerItem of layerItems) {\n            if (level < layerItem.minLevel || level > layerItem.maxLevel) {\n                continue;\n            }\n\n            if (OmvFilterString.matchString(layer, layerItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private disabledKinds: GeometryKindSet | undefined;\n    private enabledKinds: GeometryKindSet | undefined;\n\n    constructor(private description: OmvFeatureFilterDescription) {\n        if (this.description.kindsToProcess.length > 0) {\n            this.enabledKinds = new GeometryKindSet(\n                this.description.kindsToProcess as GeometryKind[]\n            );\n        }\n        if (this.description.kindsToIgnore.length > 0) {\n            this.disabledKinds = new GeometryKindSet(\n                this.description.kindsToIgnore as GeometryKind[]\n            );\n        }\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToProcess, level)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToIgnore, level)) {\n            return false;\n        }\n\n        return this.description.processLayersDefault;\n    }\n\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPointsDefault\n        );\n    }\n\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processLinesDefault\n        );\n    }\n\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    wantsKind(kind: string | string[]): boolean {\n        // undefined -> no way to filter\n        if (kind === undefined) {\n            return true;\n        }\n\n        return (\n            !(\n                this.disabledKinds !== undefined &&\n                this.disabledKinds.hasOrIntersects(kind as GeometryKind)\n            ) ||\n            (this.enabledKinds !== undefined &&\n                this.enabledKinds.hasOrIntersects(kind as GeometryKind))\n        );\n    }\n\n    get hasKindFilter(): boolean {\n        return this.enabledKinds !== undefined || this.disabledKinds !== undefined;\n    }\n\n    private wantsFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        geometryType: OmvGeometryType,\n        level: number,\n        defaultResult: boolean\n    ): boolean {\n        for (const item of itemsToProcess) {\n            if (level < item.minLevel || level > item.maxLevel) {\n                continue;\n            }\n\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return true;\n            }\n        }\n\n        for (const item of itemsToIgnore) {\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return false;\n            }\n        }\n\n        return defaultResult;\n    }\n}\n\n/**\n * An [[OmvFeatureFilter]] implementation that delegates all filter decision\n * returning `true` for any predicate if all delegates return `true`.\n */\nexport class ComposedDataFilter implements OmvFeatureFilter {\n    constructor(readonly filters: OmvFeatureFilter[]) {}\n\n    get hasKindFilter() {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.hasKindFilter,\n            true\n        );\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLayer(layer, level),\n            true\n        );\n    }\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPointFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLineFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPolygonFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsKind(kind: string | string[]): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsKind(kind),\n            true\n        );\n    }\n}\n/**\n * `OmvFeatureModifier` implementation that uses a `OmvFeatureFilterDescription` to filter\n * `TileData` features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureModifier implements OmvFeatureModifier {\n    static matchItems(\n        layerName: string,\n        featureClass: string,\n        items: OmvFilterDescription[]\n    ): boolean {\n        for (const item of items) {\n            if (item.classes !== undefined) {\n                if (!OmvFilterString.matchString(layerName, item.layerName)) {\n                    continue;\n                }\n                for (const matchClass of item.classes) {\n                    if (OmvFilterString.matchString(featureClass, matchClass)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    static matchAttribute(layerName: string, env: MapEnv, items: OmvFilterDescription[]): boolean {\n        for (const item of items) {\n            if (item.featureAttribute !== undefined) {\n                if (\n                    OmvFilterString.matchString(layerName, item.layerName) &&\n                    env.lookup(item.featureAttribute.key) === item.featureAttribute.value\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    constructor(private description: OmvFeatureFilterDescription) {}\n\n    doProcessPointFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            env,\n            this.description.processPointsDefault\n        );\n    }\n\n    doProcessLineFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            env,\n            this.description.processLinesDefault\n        );\n    }\n\n    doProcessPolygonFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            env,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    protected doProcessFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        env: MapEnv,\n        defaultResult: boolean\n    ): boolean {\n        if (layer === undefined || (itemsToProcess.length === 0 && itemsToIgnore.length === 0)) {\n            return defaultResult;\n        }\n\n        let featureClass: string | undefined;\n        const featureClassThing = env.lookup(\"class\");\n\n        if (featureClassThing !== undefined && featureClassThing !== null) {\n            featureClass = featureClassThing.toString();\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToProcess)\n        ) {\n            return true;\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToIgnore)\n        ) {\n            return false;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToProcess)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToIgnore)) {\n            return false;\n        }\n\n        return defaultResult;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    Definitions,\n    GeometryType,\n    ITileDecoder,\n    OptionsMap,\n    StyleSet,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { EarthConstants, TileKey, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { LineGroup } from \"@here/harp-lines\";\nimport { CopyrightInfo, CopyrightProvider } from \"@here/harp-mapview\";\nimport { DataProvider, TileDataSource, TileFactory } from \"@here/harp-mapview-decoder\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport {\n    FeatureModifierId,\n    OMV_TILE_DECODER_SERVICE_TYPE,\n    OmvDecoderOptions,\n    OmvFeatureFilterDescription\n} from \"./OmvDecoderDefs\";\nimport { OmvRestClient, OmvRestClientParameters } from \"./OmvRestClient\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst logger = LoggerManager.instance.create(\"OmvDataSource\");\n\nexport interface LinesGeometry {\n    type: GeometryType;\n    lines: LineGroup;\n    renderOrderOffset?: number;\n    technique: number;\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n\n    /**\n     * Optional list of feature start indices. The indices point into the index attribute.\n     */\n    featureStarts?: number[];\n}\n\nexport interface OmvTileFactory {\n    /** Create an instance of [[OmvTile]] or a subclass. */\n    createTile(dataSource: OmvDataSource, tileKey: TileKey): OmvTile;\n}\n\nexport interface OmvDataSourceParameters {\n    /**\n     * The unique name of the [[OmvDataSource]].\n     */\n    name?: string;\n\n    /**\n     * The name of the [[StyleSet]] that this [[OmvDataSource]] should use for decoding.\n     *\n     *  @default \"omv\"\n     */\n    styleSetName?: string;\n\n    /**\n     * If set to `true`, features that have no technique in the theme will be printed to the console\n     * (can be excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * If set to `true`, an [[ExtendedTileInfo]] is created for every tile in addition to the\n     * [[DecodedTile]]. This is useful if the features should be passed on for processing without\n     * geometry being automatically created from them. One application is picking.\n     */\n    createTileInfo?: boolean;\n\n    /**\n     * Specify the decoder that should be used. If not supplied, the default will be used.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optionally specify the DataProvider that should be used.\n     */\n    dataProvider?: DataProvider;\n\n    /**\n     * Specify the URL to the decoder bundle. If not supplied, the default will be used.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Gather feature IDs from `OmvData`. Defaults to `false`.\n     * @deprecated, FeatureIds are always gathered, use [[gatherFeatureAttributes]] to gather\n     * all feature attributes.\n     */\n    gatherFeatureIds?: boolean;\n\n    /**\n     * Gather feature attributes from `OmvData`. Defaults to `false`.\n     */\n    gatherFeatureAttributes?: boolean;\n\n    /**\n     * Gather road segments data from [[OmvData]]. Defaults to `false`.\n     */\n    gatherRoadSegments?: boolean;\n\n    /**\n     * If not set to `false`, very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter that can be safely passed down to the web workers. It\n     * has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to guarantee\n     * correctness). This parameter gets applied to the decoder used in the [[OmvDataSource]]\n     * which might be shared between various [[OmvDataSource]]s.\n     */\n    filterDescr?: OmvFeatureFilterDescription;\n\n    /**\n     * Optional, custom factory for [[Tile]] instances created by this [[OmvDataSource]].\n     */\n    tileFactory?: TileFactory<OmvTile>;\n\n    /**\n     * Identifier used to choose OmvFeatureModifier, if undefined [[OmvGenericFeatureModifier]] is\n     * used. This parameter gets applied to the decoder used in the [[OmvDataSource]] which might\n     * be shared between various [[OmvDataSource]]s.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source.\n     */\n    copyrightProvider?: CopyrightProvider;\n\n    /**\n     * Optional minimum zoom level (storage level) for [[Tile]]s. Default is 1.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Optional maximum zoom level (storage level) for [[Tile]]s. Default is 14.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * Maximum geometry height above groud level this `OmvDataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default [[EarthConstants.MAX_BUILDING_HEIGHT]].\n     */\n    maxGeometryHeight?: number;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -1.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * Indicates whether overlay on elevation is enabled. Defaults to `false`.\n     */\n    enableElevationOverlay?: boolean;\n\n    /**\n     * Indicates whether to add a ground plane to cover the tile completely. This is necessary for\n     * the fallback logic, such that the parent fall back tiles don't overlap the children tiles.\n     * Default is true (i.e. if not defined it is taken to be true)\n     */\n    addGroundPlane?: boolean;\n}\n\n/**\n * A helper function to retrieve the [[DataProvider]] from the [[OmvDataSource]]s parameters.\n *\n * @param params The parameters passed into the OmvDataSource.\n */\nfunction getDataProvider(params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n    if ((params as OmvWithCustomDataProvider).dataProvider) {\n        return (params as OmvWithCustomDataProvider).dataProvider;\n    } else if (\n        (params as OmvWithRestClientParams).baseUrl ||\n        (params as OmvWithRestClientParams).url\n    ) {\n        return new OmvRestClient(params as OmvRestClientParameters);\n    } else {\n        throw new Error(\"OmvDataSource: missing url, baseUrl or dataProvider params\");\n    }\n}\n\nexport type OmvWithRestClientParams = OmvRestClientParameters & OmvDataSourceParameters;\nexport type OmvWithCustomDataProvider = OmvDataSourceParameters & { dataProvider: DataProvider };\n\nlet missingOmvDecoderServiceInfoEmitted: boolean = false;\n\nexport class OmvDataSource extends TileDataSource<OmvTile> {\n    private readonly m_decoderOptions: OmvDecoderOptions;\n\n    constructor(private m_params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n        super(m_params.tileFactory || new TileFactory(OmvTile), {\n            styleSetName: m_params.styleSetName || \"omv\",\n            name: m_params.name,\n            tilingScheme: webMercatorTilingScheme,\n            dataProvider: getDataProvider(m_params),\n            concurrentDecoderServiceName: OMV_TILE_DECODER_SERVICE_TYPE,\n            decoder: m_params.decoder,\n            concurrentDecoderScriptUrl: m_params.concurrentDecoderScriptUrl,\n            copyrightInfo: m_params.copyrightInfo,\n            copyrightProvider: m_params.copyrightProvider,\n            minZoomLevel: getOptionValue(m_params.minZoomLevel, 1),\n            maxZoomLevel: getOptionValue(m_params.maxZoomLevel, 14),\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1)\n        });\n\n        this.cacheable = true;\n        this.addGroundPlane =\n            m_params.addGroundPlane === undefined || m_params.addGroundPlane === true;\n\n        this.m_decoderOptions = {\n            showMissingTechniques: this.m_params.showMissingTechniques === true,\n            filterDescription: this.m_params.filterDescr,\n            gatherFeatureAttributes: this.m_params.gatherFeatureAttributes === true,\n            createTileInfo: this.m_params.createTileInfo === true,\n            gatherRoadSegments: this.m_params.gatherRoadSegments === true,\n            featureModifierId: this.m_params.featureModifierId,\n            skipShortLabels: this.m_params.skipShortLabels,\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1),\n            enableElevationOverlay: this.m_params.enableElevationOverlay === true\n        };\n\n        this.maxGeometryHeight = getOptionValue(\n            m_params.maxGeometryHeight,\n            EarthConstants.MAX_BUILDING_HEIGHT\n        );\n    }\n\n    /** @override */\n    async connect() {\n        try {\n            await super.connect();\n        } catch (error) {\n            if (\n                WorkerServiceProtocol.isUnknownServiceError(error) &&\n                !missingOmvDecoderServiceInfoEmitted\n            ) {\n                logger.info(\n                    \"Unable to create decoder service in worker. Use \" +\n                        \" 'OmvTileDecoderService.start();' in decoder script.\"\n                );\n                missingOmvDecoderServiceInfoEmitted = true;\n            }\n            throw error;\n        }\n        this.configureDecoder(undefined, undefined, undefined, this.m_decoderOptions);\n    }\n\n    /**\n     * Remove the current data filter.\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     */\n    removeDataFilter(): void {\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription: null\n        });\n    }\n\n    /**\n     * Set a new data filter. Can also be done during the creation of an [[OmvDataSource]].\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     *\n     * @param filterDescription Data filter description created with\n     * [[OmvFeatureFilterDescriptionBuilder]].\n     */\n    setDataFilter(filterDescription: OmvFeatureFilterDescription): void {\n        this.m_decoderOptions.filterDescription =\n            filterDescription !== null ? filterDescription : undefined;\n\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription\n        });\n    }\n\n    /** @override */\n    shouldPreloadTiles(): boolean {\n        return true;\n    }\n\n    /**\n     * Check if a data source should be rendered or not depending on the zoom level.\n     *\n     * @param zoomLevel Zoom level.\n     * @param tileKey Level of the tile.\n     * @returns `true` if the data source should be rendered.\n     * @override\n     */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        if (tileKey.level > this.maxZoomLevel) {\n            return false;\n        }\n        if (tileKey.level <= this.maxZoomLevel && zoomLevel >= this.maxZoomLevel) {\n            return true;\n        }\n        return super.canGetTile(zoomLevel, tileKey);\n    }\n\n    /** @override */\n    setLanguages(languages?: string[]): void {\n        if (languages !== undefined) {\n            this.configureDecoder(undefined, undefined, languages, undefined);\n        }\n    }\n\n    /** @override */\n    get storageLevelOffset() {\n        return super.storageLevelOffset;\n    }\n\n    /** @override */\n    set storageLevelOffset(levelOffset: number) {\n        super.storageLevelOffset = levelOffset;\n        this.m_decoderOptions.storageLevelOffset = this.storageLevelOffset;\n        this.configureDecoder(undefined, undefined, undefined, {\n            storageLevelOffset: this.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setEnableElevationOverlay(enable: boolean) {\n        if (this.m_decoderOptions.enableElevationOverlay !== enable) {\n            this.m_decoderOptions.enableElevationOverlay = enable;\n            this.configureDecoder(undefined, undefined, undefined, {\n                enableElevationOverlay: enable\n            });\n        }\n    }\n\n    private configureDecoder(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ) {\n        this.clearCache();\n        this.decoder.configure(styleSet, definitions, languages, options);\n        this.mapView.markTilesDirty(this);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/DataProvider\";\nexport * from \"./lib/TileDataSource\";\nexport * from \"./lib/TileLoader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    Definitions,\n    ITileDecoder,\n    StyleSet,\n    Theme,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport {\n    ConcurrentDecoderFacade,\n    CopyrightInfo,\n    CopyrightProvider,\n    DataSource,\n    Tile,\n    TileLoaderState\n} from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { DataProvider } from \"./DataProvider\";\nimport { TileInfoLoader, TileLoader } from \"./TileLoader\";\n\n/**\n * Set of common options for all [[TileDataSource]]s.\n */\nexport interface TileDataSourceOptions {\n    /**\n     * Name of [[TileDataSource]], must be unique.\n     */\n    name?: string;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    styleSetName: string;\n\n    /**\n     * The [[TilingScheme]] the data source is using.\n     */\n    tilingScheme: TilingScheme;\n\n    /**\n     * The [[DataProvider]] to use for downloading the actual data.\n     */\n    dataProvider: DataProvider;\n\n    /**\n     * Optional: Specify [[ITileDecoder]] instance.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optional name of decoder service class.\n     * @see [[ConcurrentDecoderFacade]]\n     * @see [[ConcurrentWorkerSet]]\n     */\n    concurrentDecoderServiceName?: string;\n\n    /**\n     * Optional URL for decoder bundle to be loaded into web worker.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Optional count of web workers to use with the decoder bundle.\n     */\n    concurrentDecoderWorkerCount?: number;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source. Copyrights from\n     * provider are concatenated with default ones from `copyrightInfo`.\n     */\n    copyrightProvider?: CopyrightProvider;\n\n    /**\n     * Optional minimum zoom level (storage level) for [[Tile]]s. Default is 1.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Optional maximum zoom level (storage level) for [[Tile]]s. Default is 20.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is 0.\n     */\n    storageLevelOffset?: number;\n}\n\n/**\n * Templated factory class to create instances of [[Tile]].\n */\nexport class TileFactory<TileType extends Tile> {\n    /**\n     * Initialize the factory using the constructor of the element to be called when a [[Tile]] is\n     * created.\n     *\n     * @param m_modelConstructor Constructor of (subclass of) [[Tile]].\n     */\n    constructor(\n        private m_modelConstructor: new (dataSource: DataSource, tileKey: TileKey) => TileType\n    ) {}\n\n    /**\n     * Create an instance of (subclass of) [[Tile]]. The required parameters are passed as arguments\n     * to the constructor of [[Tile]].\n     *\n     * @param dataSource [[Datasource]] this class belongs to.\n     * @param tileKey Quadtree address of the [[Tile]].\n     */\n    create(dataSource: DataSource, tileKey: TileKey): TileType {\n        return new this.m_modelConstructor(dataSource, tileKey);\n    }\n}\n\nconst maxLevelTileLoaderCache = 3;\n/**\n * Common base class for the typical [[DataSource]] which uses an [[ITileDecoder]] to decode the\n * tile content asynchronously. The decoder can be passed in as an option, or a default\n * asynchronous one is generated.\n */\nexport class TileDataSource<TileType extends Tile> extends DataSource {\n    protected readonly logger = LoggerManager.instance.create(\"TileDataSource\");\n    protected readonly m_decoder: ITileDecoder;\n    protected readonly m_tileLoaderCache: LRUCache<number, TileLoader>;\n    private m_isReady: boolean = false;\n\n    /**\n     * Set up the `TileDataSource`.\n     *\n     * @param m_tileFactory Factory to create the [[Tile]] instances.\n     * @param m_options Options specifying the parameters of the [[DataSource]].\n     */\n    constructor(\n        private readonly m_tileFactory: TileFactory<TileType>,\n        private readonly m_options: TileDataSourceOptions\n    ) {\n        super(\n            m_options.name,\n            m_options.styleSetName,\n            m_options.minZoomLevel,\n            m_options.maxZoomLevel,\n            m_options.storageLevelOffset\n        );\n        if (m_options.decoder) {\n            this.m_decoder = m_options.decoder;\n        } else if (m_options.concurrentDecoderServiceName) {\n            this.m_decoder = ConcurrentDecoderFacade.getTileDecoder(\n                m_options.concurrentDecoderServiceName,\n                m_options.concurrentDecoderScriptUrl,\n                m_options.concurrentDecoderWorkerCount\n            );\n        } else {\n            throw new Error(\n                `TileDataSource[${this.name}]: unable to create, missing decoder or ` +\n                    `concurrentDecoderServiceName`\n            );\n        }\n        this.useGeometryLoader = true;\n        this.cacheable = true;\n        this.m_tileLoaderCache = new LRUCache<number, TileLoader>(this.getCacheCount());\n        this.m_tileLoaderCache.evictionCallback = (_, tileLoader) => {\n            // Cancel any pending downloads as early as possible.\n            tileLoader.cancel();\n        };\n    }\n\n    /** @override */\n    dispose() {\n        this.decoder.dispose();\n    }\n\n    /** @override */\n    ready(): boolean {\n        return this.m_isReady && this.m_options.dataProvider.ready();\n    }\n\n    /**\n     * Get the [[ITileDecoder]] of this `ITileDataSource`, which has either been passed in with\n     * the options, or has been supplied by the [[ConcurrentDecoderFacade]].\n     */\n    get decoder(): ITileDecoder {\n        return this.m_decoder;\n    }\n\n    /** @override */\n    async connect() {\n        await Promise.all([this.m_options.dataProvider.connect(), this.m_decoder.connect()]);\n        this.m_isReady = true;\n\n        this.m_decoder.configure(undefined, undefined, undefined, {\n            storageLevelOffset: this.m_options.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.m_decoder.configure(styleSet, definitions, languages);\n        this.mapView.markTilesDirty(this);\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * Applies new [[StyleSet]] and definitions from theme only if matching styleset (see\n     * `styleSetName` property) is found in `theme`.\n     * @override\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            this.styleSetName !== undefined && theme.styles\n                ? theme.styles[this.styleSetName]\n                : undefined;\n\n        if (styleSet !== undefined) {\n            this.setStyleSet(styleSet, theme.definitions, languages);\n        }\n    }\n\n    /** @override */\n    clearCache() {\n        this.m_tileLoaderCache.evictAll();\n    }\n\n    /**\n     * Get the [[DataProvider]] that has been passed in with the options.\n     */\n    dataProvider(): DataProvider {\n        return this.m_options.dataProvider;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_options.tilingScheme;\n    }\n\n    /**\n     * Create a [[Tile]] and start the asynchronous download of the tile content. The [[Tile]] will\n     * be empty, but the download and decoding will be scheduled immediately. [[Tile]] instance is\n     * initialized with default copyrights, concatenated with copyrights from copyright provider of\n     * this data source.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @override\n     */\n    getTile(tileKey: TileKey): TileType | undefined {\n        const tile = this.m_tileFactory.create(this, tileKey);\n\n        const mortonCode = tileKey.mortonCode();\n        const tileLoader = this.m_tileLoaderCache.get(mortonCode);\n        if (tileLoader !== undefined) {\n            tile.tileLoader = tileLoader;\n        } else {\n            const newTileLoader = new TileLoader(\n                this,\n                tileKey,\n                this.m_options.dataProvider,\n                this.decoder,\n                0\n            );\n            tile.tileLoader = newTileLoader;\n            tile.copyrightInfo = this.m_options.copyrightInfo;\n            if (this.m_options.copyrightProvider !== undefined) {\n                this.m_options.copyrightProvider\n                    .getCopyrights(tile.geoBox, tileKey.level)\n                    .then(copyrightInfo => {\n                        tile.copyrightInfo =\n                            tile.copyrightInfo === undefined\n                                ? copyrightInfo\n                                : [...tile.copyrightInfo, ...copyrightInfo];\n                        this.requestUpdate();\n                    });\n            }\n\n            // We don't cache tiles with level 4 and above, at this level, there are 16 (2^4) tiles\n            // horizontally, given the assumption that the zoom level assumes the tile should be 256\n            // pixels wide (see function [[calculateZoomLevelFromDistance]]), and the current\n            // storage offset of -2 (which makes the tiles then 1024 pixels wide). this would mean a\n            // horizontal width of ~16k pixels for the entire earth, this would be quite a lot to\n            // pan, hence caching doesn't make sense above this point (as the chance that we need to\n            // share the TileLoader is small, and even if we did eventually see it, the original\n            // TileLoader would probably be evicted because it was removed by other more recent\n            // tiles).\n            if (tileKey.level <= maxLevelTileLoaderCache) {\n                this.m_tileLoaderCache.set(mortonCode, newTileLoader);\n            }\n        }\n\n        if (tile.tileLoader.decodedTile !== undefined) {\n            tile.decodedTile = tile.tileLoader.decodedTile;\n        } else {\n            tile.load();\n        }\n        return tile;\n    }\n\n    /**\n     * Get [[TileInfo]] of a tile.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @returns A promise which will contain the [[TileInfo]] when resolved.\n     */\n    getTileInfo(tileKey: TileKey): Promise<TileInfo | undefined> {\n        const promise = new Promise<TileInfo | undefined>((resolve, reject) => {\n            const tileLoader = new TileInfoLoader(\n                this,\n                tileKey,\n                this.m_options.dataProvider,\n                this.decoder,\n                0\n            );\n\n            tileLoader.loadAndDecode().then(loaderState => {\n                if (loaderState === TileLoaderState.Ready) {\n                    resolve(tileLoader.tileInfo);\n                } else {\n                    reject(\n                        new Error(`TileDataSource#getInfoTile wrong final state: ${loaderState}`)\n                    );\n                }\n            });\n        });\n\n        return promise;\n    }\n\n    private getCacheCount(): number {\n        // We support up to [[maxLevelTileLoaderCache]] levels, this equates to roughly\n        // 2^maxLevelTileLoaderCache^2 tiles in total (at level maxLevelTileLoaderCache), we don't\n        // generally see that many, so we add a factor of 2 to try to get the worst case.\n        return Math.pow(2, maxLevelTileLoaderCache) * 2;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { getPropertyValue, isTextTechnique } from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\nimport { DataSource, TextElement } from \"@here/harp-mapview\";\nimport { debugContext } from \"@here/harp-mapview/lib/DebugContext\";\nimport {\n    ContextualArabicConverter,\n    FontUnit,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport * as THREE from \"three\";\n\nimport { TileGeometryCreator } from \"@here/harp-mapview/lib/geometry/TileGeometryCreator\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst debugMaterial = new THREE.LineBasicMaterial({\n    color: 0x000000,\n    linewidth: 2,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterialWF = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterialWF.wireframe = true;\n\nconst debugCircleMaterial2WF = new THREE.MeshBasicMaterial({\n    color: 0x8080ff,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterial2WF.wireframe = true;\n\nconst debugBlackCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0x000000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst textRenderStyle = new TextRenderStyle();\nconst textLayoutStyle = new TextLayoutStyle();\n\ntextRenderStyle.fontSize = {\n    unit: FontUnit.Point,\n    size: 9,\n    backgroundSize: 0\n};\ntextRenderStyle.opacity = 0.75;\ntextRenderStyle.backgroundOpacity = 0.75;\n\nexport class OmvDebugLabelsTile extends OmvTile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n\n    /** @override */\n    loadingFinished() {\n        this.addLabelDebugInfo();\n    }\n\n    /**\n     * Create [[TextElement]] objects from the given decoded [[Tile]] and list of materials.\n     */\n    private addLabelDebugInfo() {\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_TEXT_PATHS\", true)\n        const debugTextPaths = debugContext.getValue(\"DEBUG_TEXT_PATHS\");\n        const debugTextPathsFull = debugContext.getValue(\"DEBUG_TEXT_PATHS_FULL\");\n\n        if (!(debugTextPaths || debugTextPathsFull) || this.decodedTile === undefined) {\n            return;\n        }\n\n        const tileGeometryCreator = TileGeometryCreator.instance;\n        const decodedTile = this.decodedTile!;\n\n        tileGeometryCreator.createTextElements(this, decodedTile);\n\n        const colorMap = new Map<number, THREE.Color>();\n\n        // allow limiting to specific names and/or index. There can be many paths with the same text\n        const textFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.TEXT\");\n        const indexFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.INDEX\");\n        const zoomLevel = this.mapView.zoomLevel;\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            this.preparedTextPaths = tileGeometryCreator.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile\n            );\n        }\n\n        if (this.preparedTextPaths !== undefined) {\n            const lineGeometry = new THREE.BufferGeometry();\n            const lineIndices = new Array<number>();\n            const linePositions = new Array<number>();\n\n            const redPointGeometry = new THREE.BufferGeometry();\n            const redPointIndices = new Array<number>();\n            const redPointPositions = new Array<number>();\n\n            const blackPointGeometry = new THREE.BufferGeometry();\n            const blackPointIndices = new Array<number>();\n            const blackPointPositions = new Array<number>();\n\n            let baseVertex = 0;\n            const pointScale = this.mapView.pixelToWorld;\n            const worldOffsetX = this.computeWorldOffsetX();\n\n            for (const textPath of this.preparedTextPaths) {\n                const technique = decodedTile.techniques[textPath.technique];\n                if (!isTextTechnique(technique)) {\n                    continue;\n                }\n                if (technique.color !== undefined) {\n                    colorMap.set(\n                        textPath.technique,\n                        new THREE.Color(getPropertyValue(technique.color, zoomLevel))\n                    );\n                }\n\n                baseVertex = linePositions.length / 3;\n\n                const text = textPath.text;\n\n                const elementIndex = this.preparedTextPaths.indexOf(textPath);\n\n                const createDebugInfo =\n                    (!textFilter || (text && text.indexOf(textFilter) >= 0)) &&\n                    (indexFilter === undefined || indexFilter === elementIndex);\n\n                if (createDebugInfo) {\n                    for (let i = 0; i < textPath.path.length; i += 3) {\n                        const pathIndex = i / 3;\n                        const x = textPath.path[i];\n                        const y = textPath.path[i + 1];\n                        // raise it a bit, so we get identify connectivity visually by tilting\n                        const z = textPath.path[i + 2] + i / 3;\n\n                        if (debugTextPaths) {\n                            linePositions.push(x, y, z);\n                        }\n\n                        const isRedPoint = i === 0;\n\n                        if (debugTextPathsFull || isRedPoint) {\n                            const pointSize = pointScale * (isRedPoint ? 6 : 4);\n\n                            const positions = isRedPoint ? redPointPositions : blackPointPositions;\n                            const indices = isRedPoint ? redPointIndices : blackPointIndices;\n\n                            positions.push(x, y - pointSize, z);\n                            positions.push(x + pointSize, y, z);\n                            positions.push(x, y + pointSize, z);\n                            positions.push(x - pointSize, y, z);\n\n                            const pointIndex = positions.length / 3;\n\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 3);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 1);\n\n                            if (debugTextPathsFull) {\n                                // give point index a label\n                                const label: string =\n                                    pathIndex % 5 === 0\n                                        ? text + \":\" + pathIndex\n                                        : Number(pathIndex).toString();\n                                const labelElement = new TextElement(\n                                    ContextualArabicConverter.instance.convert(label),\n                                    new THREE.Vector3(x + worldOffsetX, y, z),\n                                    textRenderStyle,\n                                    textLayoutStyle,\n                                    getPropertyValue(technique.priority || 0, zoomLevel),\n                                    technique.xOffset || 0.0,\n                                    technique.yOffset || 0.0\n                                );\n                                labelElement.minZoomLevel = technique.minZoomLevel;\n                                labelElement.mayOverlap = true;\n                                labelElement.reserveSpace = false;\n                                labelElement.alwaysOnTop = true;\n                                labelElement.ignoreDistance = true;\n                                this.addUserTextElement(labelElement);\n                            }\n                        }\n                    }\n\n                    // the lines of a path share a common geometry\n                    const N = textPath.path.length / 3;\n                    for (let i = 0; i < N; ++i) {\n                        if (i > 0) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                        if (i + 1 < N) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                    }\n                }\n            }\n\n            if (lineIndices.length > 0) {\n                lineGeometry.addGroup(0, lineIndices.length, 0);\n\n                lineGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(linePositions), 3)\n                );\n\n                lineGeometry.setIndex(new THREE.BufferAttribute(new Uint32Array(lineIndices), 1));\n                const lineMesh = new THREE.LineSegments(lineGeometry, debugMaterial);\n                lineMesh.renderOrder = 2000;\n                this.objects.push(lineMesh);\n            }\n\n            if (redPointIndices.length > 0) {\n                redPointGeometry.addGroup(0, redPointIndices.length, 0);\n\n                redPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(redPointPositions), 3)\n                );\n\n                redPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(redPointIndices), 1)\n                );\n                const redPointMesh = new THREE.Mesh(redPointGeometry, debugCircleMaterial);\n                redPointMesh.renderOrder = 3000;\n                this.objects.push(redPointMesh);\n            }\n\n            if (blackPointIndices.length > 0) {\n                blackPointGeometry.addGroup(0, blackPointIndices.length, 0);\n\n                blackPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(blackPointPositions), 3)\n                );\n\n                blackPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(blackPointIndices), 1)\n                );\n                const blackPointMesh = new THREE.Mesh(blackPointGeometry, debugBlackCircleMaterial);\n                blackPointMesh.renderOrder = 2500;\n                this.objects.push(blackPointMesh);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nexport const appId = \"devportal-demo-20180625\";\n\n/** @hidden */\nexport const appCode = \"9v2BkviRwi9Ot26kp2IysQ\";\n\n/** @hidden */\nexport const accessToken = \"AGln99HORnqL1kfIQtsQl70\";\n\n/** @hidden */\nexport const copyrightInfo = [\n    {\n        id: \"here.com\",\n        year: new Date().getFullYear(),\n        label: \"HERE\",\n        link: \"https://legal.here.com/terms\"\n    }\n];\n"],"sourceRoot":""}